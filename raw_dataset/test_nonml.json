{"snippet": "for e in d:\n    print(e)\n", "intent": "See? No exception!\nBut consider what happens when we iterate a dictionary:\n"}
{"snippet": "violin.plot()\nthinkplot.config(xlabel='Time (s)', ylim=[-1.05, 1.05])\n", "intent": "Here's a  comparison of the original and transformed recordings:\n"}
{"snippet": "df = pd.read_sql('SELECT dated FROM Visited;', conn)\ndf\n", "intent": "---\nWe now want to calculate ranges and averages for our data. We know how to select all of the dates from the Visited table:\n"}
{"snippet": "x = np.array([[1, 2, 3], [1, 3, 5]])\nprint (\"Values bigger than 2 =\", x[x>2])\nprint (\"Their indices are \", np.nonzero(x > 2))\n", "intent": "Q8. Get the values and indices of the elements that are bigger than 2 in x.\n"}
{"snippet": "release_year_dict['Graduation']='2007'\nrelease_year_dict\n", "intent": "We can add an entry:\n"}
{"snippet": "kurt = 1/n*np.sum(((D-mu)/np.sqrt(var))**4)\nkurt\n", "intent": "Kurtosis is the fourth **standardized** moment. \n$$\\gamma = \\operatorname{E}\\left[\\left(\\frac{X-\\mu}{\\sigma}\\right)^4 \\right]$$\nIn python:\n"}
{"snippet": "t = [cdf.PercentileRank(x) for x in cdf.Sample(1000)]\ncdf2 = thinkstats2.Cdf(t)\nthinkplot.Cdf(cdf2)\nthinkplot.Show(legend=False)\n", "intent": "Draw a random sample from <tt>cdf</tt>, then compute the percentile rank for each value, and plot the distribution of the percentile ranks.\n"}
{"snippet": "word = \"computer\"\nfor letter in word: \n    print (letter)\n", "intent": "We've mostly played it safe with list sequences.  Let's try looping through the letters in a word:\n```python\nword = \"computer\"\n```\nHow do we do this?\n"}
{"snippet": "gaussian = scipy.signal.gaussian(M=32, std=2)\ngaussian /= sum(gaussian)\nthinkplot.plot(gaussian)\nthinkplot.config(xlabel='Index')\n", "intent": "*Solution:* I'll start with a Gaussian similar to the example in the book.\n"}
{"snippet": "module_name.ClassName\n", "intent": "After this, classes are accessed using dot notation:\n"}
{"snippet": "from __future__ import division\nimport math\ntr  =  8/1;\nI1  =  3;\nV1  =  240;\nV2  =  V1/tr\nI2  =  I1*tr\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  secondary  voltage  is  \",round(V2,2),\"  V  and  secondary  current  is  \", round(I2,2),\"  A\"\n", "intent": "<h3>Example 3, page no. 317</h3>\n"}
{"snippet": "incr_2 = make_incrementor(2)\n", "intent": "We can use these anonymous functions as we are passing our functions about.\n"}
{"snippet": "results = 'HTHHTHHHTTHHHTH'\nfor data in results:\n    posterior.Update(data)\nthinkplot.Pdf(posterior)\n", "intent": "With additional data we can do a sequence of updates.  The result shows the cumulative effect of all updates.\n"}
{"snippet": "S = @(x,lambda)max(0, 1-lambda ./ max(1e-9,abs(x)) ) .* x;\n", "intent": "Define the soft thresholding operator.\n"}
{"snippet": "d = min(d,.4);\nW = rescale(-d,.8,1);\n", "intent": "Compute a decreasing function of the gradient to define $W$.\n"}
{"snippet": "imageplot(clamp(SoftThreshPsi(f0, .1)))\n", "intent": "This soft thresholding corresponds to a denoising operator.\n"}
{"snippet": "source(\"nt_solutions/inverse_2_deconvolution_variation/exo4.R\")\n", "intent": "Explore the different values of |lambda| to find the optimal solution.\nDisplay the SNR as a function of |lambda|.\n"}
{"snippet": "c = a.copy()\nc |= b\nc\nd = a.copy()\nd &= b\nd\n", "intent": "Set supports mathematical set operations. Set elements must be immutable.\n"}
{"snippet": "fft_gaussian = np.fft.fft(gaussian)\nthinkplot.plot(abs(fft_gaussian))\nthinkplot.config(xlabel='Frequency (Hz)', ylabel='Amplitude')\n", "intent": "Here's what the FFT looks like:\n"}
{"snippet": "from session3 import calculateWage\nprompt='Enter hours worked (or done): '\nuserInput=input(prompt)\nwhile userInput!='done':\n    hours=float(userInput)\n    print('Pay is',calculateWage(hours))\n    userInput=input(prompt)\n", "intent": "**(optional) Q2**: Rewrite the code in Q1 but do not use `break`.\n"}
{"snippet": "pairs =[\n    (\"B\",\"A\"),\n    (\"B\",\"C\"),\n    (\"C\",\"A\"),\n]\ntest_oracle(\"ABCDEF\", pairs, Oracle, verbose=True)\n", "intent": "- So we remove the condition about only having a single parent\n"}
{"snippet": "f(x) = (e^x - 1)/x\nplot(f, -pi/2, pi/2)\n", "intent": "<a id=\"lim-graph\"></a>\n"}
{"snippet": "import numpy as np\nimport rasterio as rio\nfrom bokeh.models import Range1d\nfrom bokeh.plotting import Figure\nfrom bokeh.io import output_notebook, show\nfrom bokeh.resources import INLINE\nfrom datashader.colors import Hot\nfrom bokeh.tile_providers import STAMEN_TONER\nfrom pyproj import transform, Proj\noutput_notebook()\n", "intent": "The following imports will be needed to complete the exercises or provide for an improved notebook display:\n"}
{"snippet": "joined = \nresult = joined.groupBy(weather[\"usaf\"], weather[\"wban\"]).agg(\n        min(when(joined.air_temperature_qual == lit(1), joined.air_temperature)).alias('min_temp'),\n        max(when(joined.air_temperature_qual == lit(1), joined.air_temperature)).alias('max_temp'),\n)\nresult.explain()\n", "intent": "Of course we can also use the pre-repartitioned weather DataFrame. This will work as expected, Spark does not add any additional shuffle operation.\n"}
{"snippet": "pylab.hist(data1,bins=numpy.arange(0,100,1))\npylab.show()\n", "intent": "Now we have some datasets we can make histograms.  If you just tell pylab to histogram the data, it make its best guess at how you want it to look:\n"}
{"snippet": "eq1 = Eq(0, extraPolate.rhs - extraPolate.lhs)\ndisplay(eq1)\n", "intent": "Which can be rewritten to\n"}
{"snippet": "print 'line 1\\nline 2'\n", "intent": "use \\n to do NEWLINES\n"}
{"snippet": "v4 = Vector2D{Float64}(3, 4)\ntypeof(v4)\n", "intent": "[4] What do you think `Vector2D{Float64}(3, 4)` should do? Does it work?\n"}
{"snippet": "N = len(gaussian)\nfft_rolled = np.roll(fft_gaussian, N//2)\nthinkplot.plot(abs(fft_rolled))\nthinkplot.config(xlabel='Frequency (Hz)', ylabel='Amplitude')\n", "intent": "If we roll the negative frequencies around to the left, we can see more clearly that it is Gaussian, at least approximately.\n"}
{"snippet": "first_array[1][4] = 5\nprint(first_array)\n", "intent": "Let's assign a single value in our array\n"}
{"snippet": "X = Binomial('X', 9, S(2)/3)\ndensity(X).dict\n", "intent": "If he plays nine times, his odds:\n"}
{"snippet": "houses = {\n        (45.51, -122.67, 15): 'Portland',\n        (38.89, -77.03, 21): 'The White House'\n        }\n", "intent": "You are alonly limited to the limits of each data type. Usually by mixing them you can achieve the desired effect that you're looking for. \n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\n", "intent": "Q3. Find the unique intersection of x and y.\n"}
{"snippet": "sum(np.random.choice(students,5))/5\n", "intent": "`2.` Use numpy's **random.choice** to simulate 5 draws from the `students` array.  What is proportion of your sample drink coffee?\n"}
{"snippet": "def bar(x):\n    return \"bar\" * x\n", "intent": "This notebook just defines `bar`\n"}
{"snippet": "x = np.arange(10)\nnp.save('temp.npy', x)\nimport os\nif os.path.exists('temp.npy'):\n    x2 = np.load('temp.npy')\n    print(np.array_equal(x, x2))\n", "intent": "Q1. Save x into `temp.npy` and load it.\n"}
{"snippet": "import cv2\nprint(\"Your OpenCV version: {}\".format(cv2.__version__))\n", "intent": "http://www.pyimagesearch.com/\n"}
{"snippet": "M = np.array([[1,2,3],[4,5,6]])\nprint(M)\n", "intent": "Create a 2-dimensional array (ie. a matrix) from a list of lists:\n"}
{"snippet": "from ipywidgets import interact, interactive, fixed\nimport ipywidgets as widgets\nslider = widgets.FloatSlider(min=0.1, max=10, value=2)\ninteract(plot_gaussian, std=slider);\n", "intent": "Now we can make an interaction that shows what happens as `std` varies.\n"}
{"snippet": "test_string = 'or is this precourse too difficult?'\n", "intent": "<span style=\"color:green\">Slice this string from index 5 to the end by every 4th element</span>\n"}
{"snippet": "table_title = ['word', 'word count', '\ntable_dict = [{'word':'the', 'count':10000, 'doc':827, 'avg':12.09789842},\n              {'word':'a', 'count':9876, 'doc':826, 'avg':11.95641646},\n              {'word':'glue', 'count':1234, 'doc':40, 'avg':30.85},\n              {'word':'Mississippi', 'count':1, 'doc':1, 'avg':1 }]\n", "intent": "9.6.2. Now use the ```{}``` method to format the list of dictionaries below!\n"}
{"snippet": "print('Ground state energy: {}'.format(result['energy']))\n", "intent": "The `run` method returns a result dictionary. Some notable fields include 'energy' which is the computed ground state energy.\n"}
{"snippet": "def create_circuit(qr, gamma, beta, p):\n    circuit_evolv = reduce(lambda x,y: x+y, [evolve(Hm, beta[i], qr) + evolve(Hc, gamma[i], qr)\n                                             for i in range(p)])\n    circuit = circuit_init + circuit_evolv\n    return circuit\n", "intent": "To create the circuit, we need to compose the different unitary matrice given by `evolve`.\n"}
{"snippet": "state_fidelity(basis_state('0110', 4), state)\n", "intent": "To check the fidelity of this state with the `basis_state` in Qiskit Terra you can use:\n"}
{"snippet": "def vocab_size(text):\n    size = 0\n    i = 0\n    while i<len(text):\n        size+=1\n        i+=1\n    return size\nvocab_size(text9)\n", "intent": "Define a function called vocab_size(text) that has a single parameter for the text, and which returns the vocabulary size of the text.\n"}
{"snippet": "for key in dictionary_ticket_1:\n    print(key)\n", "intent": "Despite not having a well-defined ordering of its elements, you can still loop through the **keys** of a dictionary...\n"}
{"snippet": "good_thing = 1+1\nbad_thing_1 = 'a' * 'b'\nbad_thing_2 = good_thing[2]\n", "intent": "You can comment or uncomment multiple lines of code at once by selecting them and then hitting `Control + /`. Try it below.\n"}
{"snippet": "A = fill(colors[1], 10, 10)\nn = size(A, 1)\n@manipulate for i in 1:n-2, j in 1:n-2\n    insert_block(A, i, j, colors[4])\nend\n", "intent": "What happens if we use colors instead?\n"}
{"snippet": "signal = thinkdsp.SquareSignal(freq=440)\nwave = signal.make_wave(duration=1.0, framerate=44100)\n", "intent": "*Solution:* Following the examples from the chapter, I'll create a 1-second wave sampled at 44.1 kHz.\n"}
{"snippet": "new_list = []\nnew_list\n", "intent": "This is an alternative way to construct a list. To construct an empty list if would suffice to call\n"}
{"snippet": "new = animals.append(s).head(15)\nnew\n", "intent": "Enables to create new objects from the concatenation of existing series.\n"}
{"snippet": "actual_items = [3, 7, 4, 2, 5]\nactual_items = [str(i) for i in actual_items]\nrecommended_items = [12, 7, 53, 90, 3, 23, 14, 37, 18, 67]\nrecommended_items = [str(i) for i in recommended_items]\napk(actual_items, recommended_items)\n", "intent": "Let's see if our example is alright\n"}
{"snippet": "alist = [1,2,3,4,5,6,7,8,9,10]\nmysum = 0.0 \nsize = len(alist)\ni = 0\nwhile i < size:\n    mysum = mysum + alist[i]\n    i = i + 1\navg = mysum / size\nprint(avg)\n", "intent": "Write a cell that calculates the average of a list of numbers.\n"}
{"snippet": "updateHoverInfo('y')\n", "intent": "This shows only the y-values:\n"}
{"snippet": "response_json = requests.get(url).json()\n", "intent": "Check out the documentation to see examples of how to filter your request\nhttps://github.com/r-spacex/SpaceX-API/wiki/Launchpad-Info\n"}
{"snippet": "tel = {'jack': 4098, 'sape': 4139}\nprint(tel)\ntel['guido'] = 4127\nprint(tel.keys())\nprint(tel.values())\n", "intent": "* Collection of Key - Value pairs\n* also known as associative array\n* unordered\n* keys unique in one dictionary\n* storing, extracting\n"}
{"snippet": "for k in a.keys():\n    print(k)\nfor k in a:\n    print(k)\n", "intent": "* iterate over all the keys using a for loop\n"}
{"snippet": "response = requests.get(\"http://www.epicurious.com/search/Tofu+Chili\")\n", "intent": "<h3>Step 2: Send an HTTP request, get the response, and save in a variable</h3>\n"}
{"snippet": "total = 0\nfor i in range(1, 11):\n    total += i\ntotal\n", "intent": "Another way to print something out is to have that thing be the last line in the cell. For example, we could rewrite our example above to be:\n"}
{"snippet": "y2 = array([f(xi) for xi in x2]) \n", "intent": "List comprehensions create lists, not arrays, but we can do:\n"}
{"snippet": "devices = ['Tablet', 'Laptop', 'Phone']\nprint('Before: ', devices)\ndevices.append('Headset')\nprint('After: ', devices)\n", "intent": "We have seen how to create a list. You can of course add more items to it later.\n"}
{"snippet": "a = np.arange(10)\na[5:] = 10\na\n", "intent": "You can also combine assignment and slicing:\n"}
{"snippet": "import random\nrandom_list = [random.random() for i in range(10000)]\n", "intent": "Let's start with a simple task: calculate the square root on 10,000 randomly generated values.\n"}
{"snippet": "clickstreamDF.printSchema()\n", "intent": "Let's take a look at the schema for the DataFrame\n"}
{"snippet": "def ran_check(num,low,high):\n    if num in range(low,high+1):\n        return 'low'\n    elif num in range(low,hig+1):\n        return 'high'\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "sentence = \"I am so excited for the Data Science Decal!!!!\"\n", "intent": "Iterate through the the following sentence and print out every characters \n"}
{"snippet": "gis = GIS(\"https://www.arcgis.com\", \"username\", \"password\")\n", "intent": "Log into ArcGIS Online by making a GIS connection using your developer account. Replace `username` and `password` with your own credentials.\n"}
{"snippet": "x = 0\nwhile x < 10:\n    print('x is currently: ',x)\n    x+=1\nelse:\n    print('All Done!')\n", "intent": "    while test:\n        code statements\n    else:\n        final code statements\n"}
{"snippet": "def plot_window_dfts(windows, names):\n    thinkplot.preplot(5)\n    for window, name in zip(windows, names):\n        padded = thinkdsp.zero_pad(window, len(wave))\n        dft_window = np.fft.rfft(padded)\n        thinkplot.plot(abs(dft_window), label=name)\n", "intent": "They are pretty similar.  Let's see what their DFTs look like:\n"}
{"snippet": "from math import sqrt\nout = map(sqrt, [1, 4, 9, 16, 25, 36, 49]) \nprint(type(out))\nprint(list(out)) \n", "intent": "* apply the same function to each element of a sequence\n* return the modified list\n"}
{"snippet": "for _ in range(10):\n    print(play_game(ttt, random_player, alphabeta_player))\n", "intent": "A `random_player` should never win against an `alphabeta_player`. Let's test that.\n"}
{"snippet": "lst = [1,2,3]\ntpl = (1,2,3)\nlst.append(4) \nprint(lst)\ntpl.append(4) \n", "intent": "** What is the main difference between a tuple and a list? **\n"}
{"snippet": "C = np.arange(6,0,-1).reshape(3,2)\nC\n", "intent": "The horizontal dimension of the first must equal the vertical dimension of the second:\n"}
{"snippet": "edit_list(economists, emphasize_word)\n", "intent": "The function does what is expected of it. \n"}
{"snippet": "@code_native another_calculation(2.0, 3.0, 4.0)\n", "intent": "And the machine code:\n"}
{"snippet": "soup.find_all('div', class_='toc')\n", "intent": "Find the DIV elements that have a CSS-classname of 'toc'.\nThere should only be one.\n"}
{"snippet": "nmk= resp.numkdhh.value_counts()\ntotal_resp = nmk.sum()\npmk = nmk /total_resp\nprint pmk\npmk.plot(kind='bar')\nnmk.values.tolist()\n", "intent": "Make a PMF of <tt>numkdhh</tt>, the number of children under 18 in the respondent's household.\n"}
{"snippet": "def my_func():\n    x = 10\n    print(\"Value inside function:\",x)\nx = 20\nmy_func()\nprint(\"Value outside function:\",x)\n", "intent": "Scope of a variable:\n"}
{"snippet": "plot_window_dfts(windows, names)\nthinkplot.config(xlabel='Frequency (Hz)', loc='upper right')\n", "intent": "Also pretty similar, but it looks like Hamming drops off the fastest, Blackman the slowest, and Hanning has the most visible sidelobes.\n"}
{"snippet": "i = 5\nwhile i < 5:\n    print(i)\n    i += 1\n", "intent": "Note that there is no guarantee that a **while** loop will execute at all, not even once, because the condition is tested **before** the loop runs.\n"}
{"snippet": "(True or True) and False\n", "intent": "This is not the same as:\n"}
{"snippet": "inspect.getsource(fact)\n", "intent": "We can get back the source code of our function using the **getsource()** method:\n"}
{"snippet": "@dec_factory()\ndef my_func(a, b):\n    print(a, b)\n", "intent": "So as you can see, calling `dec_generator()` will return that `dec` function which is our decorator:\n"}
{"snippet": "compare_timings(elapsed_fully_qualified, elapsed_direct_symbol)\n", "intent": "Let's see the relative and absolute time differences:\n"}
{"snippet": "l = 'python'\nl[0:6:2], l[0:6:3]\n", "intent": "Additionally, extended slicing allows specifying a step value:\n"}
{"snippet": "n = 10\niter_cycl = itertools.cycle('NSWE')\n[f'{i}{next(iter_cycl)}' for i in range(1, n+1)]\n", "intent": "and using itertools:\n"}
{"snippet": "l1 = (i**2 for i in range(4))\nl2 = (i**2 for i in range(4, 8))\nl3 = (i**2 for i in range(8, 12))\nlists = [l1, l2, l3]\nfor item in chain(*lists):\n    print(item)\n", "intent": "Instead, we could use unpacking:\n"}
{"snippet": "player = play_song()\n", "intent": "Here `play_song` is the delegator, and `song` is the subgenerator. We, the Jupyter notebook, are the caller.\n"}
{"snippet": "filtr = window.make_spectrum(full=True)\nprint(filtr.hs)\n", "intent": "For this moving average window, we can compute the transfer function:\n"}
{"snippet": "json.loads(j, \n           object_hook=obj_hook,\n           object_pairs_hook=obj_pairs_hook,\n           parse_float=float_handler,\n           parse_int=int_handler,\n           parse_constant=const_handler\n          )\n", "intent": "And if we specify both object hooks, then `object_hook` is basically ignored:\n"}
{"snippet": "count_eye_colors(persons, eye_colors)\n", "intent": "which we can then call like this:\n"}
{"snippet": "my_list.pop(7)\nprint(my_list)\n", "intent": "The `pop([index])` method is another way to remove an element from a list, but by index rather than by value.\n"}
{"snippet": "par(mfrow=c(3,2))\nhist(var.hat.w,main=paste(\"Distribution of var.hat.w: var w=\", sd.w^2))\nfor (i in 1:p){\n  hist(beta.hat[i,], main=paste(\"Distribution of beta.hat.\",i-1,\": beta\",i-1,\"=\", beta[i]))\n}\n", "intent": "* Plot the histograms for $\\hat{\\sigma}$ and for each $\\hat{\\beta}$\n"}
{"snippet": "a = 1\nb = 3.14\nc = 'hello'\nd = [a, b, c]\n", "intent": "Control Flow\n==========================\nWe previously saw how to set variables of various types, e.g.:\n"}
{"snippet": "s1 = '' \nprint \"Empty String Assignment - (s1='') => \", s1\nprint \"Lenght of an empty string (len(s1) =>\", len(s1)\n", "intent": "<h2>Common String Litterals and Operations</h2>\n"}
{"snippet": "x = symbols('x')\ny = Function('y')(x)\ny_ = Derivative(y, x)\nsol = dsolve(y_ - y**2, y)\nprint sol\n", "intent": "Equation 1.3: $\\frac{\\mathrm d y}{\\mathrm d t} = y^2$\n"}
{"snippet": "function fun_func(; a...)\n    a\nend\n", "intent": "Now for some real fun.  We can combine keywords and splats.  Have a look at this.\n"}
{"snippet": "function test3(A,B,C)\n    D = similar(A)\n    @inbounds for i in eachindex(A)\n        D[i] = A[i] + B[i] + C[i]\n    end\n    D\nend\n@benchmark test3(A,B,C)\n", "intent": "Puts the whole expression into a single function call, and thus only one array is required to store output. This is the same as writing the loop:\n"}
{"snippet": "product = impulse_spectrum * filtr\nprint(product.hs)\n", "intent": "If you multiply the transfer function by the spectrum of an impulse (which is all ones), the result is the filter:\n"}
{"snippet": "squares = list(map(lambda n: n**2, range(10)))\nsquares\n", "intent": "Now we use `map()` with a lambda function to do the same thing.\n"}
{"snippet": "updated_x <- vector_x\nupdated_x[updated_x > 100] <- updated_x[updated_x > 100] + 5\nupdated_x\n", "intent": "Create a variable named **updated_x** and add value of 5 to the elements which are > 100\n"}
{"snippet": "n_data <- as.numeric(readline(\"How many data points? \"))\nmydata <- c()\ni <- 1\nwhile (i<=n_data){\n    x <- as.numeric(readline(\"Enter a number: \"))\n    mydata <- c(mydata,x)\n    i <- i+1\n}\nmydata\n", "intent": "<h3>Example: Read numbers from keyboard, store in a vector</h3>\n"}
{"snippet": "worker_income[order(worker_age, decreasing = T)]\n", "intent": "Now do the sort in descending order of ages\n"}
{"snippet": "agg2 <- do.call(data.frame, unclass(agg1))\nagg2\n", "intent": "The aggregate output for each column is an embedded matrix.\nWe combine all of them into a single data frame as such:\n"}
{"snippet": "try:\n    age = int(input())\n    if age < 0:\n        raise Exception(\"Age cannot be negative\")\nexcept ValueError:\n    print(\"ValueError caught\")\n", "intent": "- the empty `except` must be the last except block since it blocks all others\n- `SyntaxError` otherwise\n"}
{"snippet": "def my_function(a,b,c):\n    print(a,b,c)\n", "intent": "These are positional arguments.\n"}
{"snippet": "x=123.23\ny=c_double()\np=POINTER(c_int)\np=pointer(c_int(int(x)))    \ny=p[0]\nprint y\n", "intent": "<h3>Example 6.2, Page Number: 109<h3>\n"}
{"snippet": "from __future__ import division\nR1 = 10; \nR2 = 5000; \nR3 = 0.1; \nG1 = 1/R1\nG2 = 1/R2\nG3 = 1/R3\nprint \"conductance(G1):\", G1,\"seimen(S)\"\nprint \"conductance(G2):\", G2,\"seimen(S)\"\nprint \"conductance(G3):\", G3,\"seimen(S)\"\n", "intent": "<h3>Example 6, page no. 7</h3>\n"}
{"snippet": "filtered = product.make_wave()\nfiltered.plot()\n", "intent": "Now if you transform back to the time domain, you have the impulse response, which looks a lot like the window:\n"}
{"snippet": "import math\nf=1;    \nV_p_in=5;  \nV_pout=V_p_in-0.7;   \nt_d=(math.asin(0.7/V_p_in))/(2*math.pi*f);\nprint \"half wave rectifier output = %.2f volts\" %V_pout;\n", "intent": "<h3>Example 2.2(a), Page Number: 46<h3>\n"}
{"snippet": "import math\np=120       \nSg=0.85     \nQ=1000      \nA=3.14      \nCd=(1/38.06)*(Q/A)*(math.sqrt(Sg/p))    \nprint('The discharge coefficient is = %.2f ' %Cd)\n", "intent": "<h3>Example 5.4, Page No 90  <h3>\n"}
{"snippet": "weight = 63\nprint \"weight is %d kg\" %( weight ) \nprint \"weight is %2d kg\"%( weight ) \nprint \"weight is %4d kg\" %( weight )\nprint \"weight is %6d kg\" %(weight ) \nprint \"weight is %-6d kg\" %( weight )\n", "intent": "<h3>Format Specifications, Page number: 399<h3>\n"}
{"snippet": "Vch=20.0                \ntime=4.0                \nslew=Vch/time           \nprint('\\nSlew Rate = %d V/us'%slew)\n", "intent": "<h3>Example No. 3.15, Page No: 135<h3>\n"}
{"snippet": "global m\nm = 10\nsys.stdout.write(\"\\nM = %d\"%(m))\n", "intent": "<h3>Example 11.6, Page number: 380<h3>\n"}
{"snippet": "a = 1\nsum1 = 0           \nwhile a <= 10:\n    sys.stdout.write(\"%3d\"%(a))\n    sum1 = sum1 + a\n    a += 1\nsys.stdout.write(\"\\nSum of 10 numbers : %d\"%(sum1))\n", "intent": "<h3>Example 6.54, Page number: 155<h3>\n"}
{"snippet": "adm=400;\ncmrr=50;\nvin1=50e-3;\nvin2=60e-3;\nvnoise=5e-3;\nv0=(vin2-vin1)*adm;\nacm=adm/316.22;\nv1=vnoise*acm\nprint'noise ',round(v1,7),'V'\n", "intent": "Example 6 Page No: 1.85\n"}
{"snippet": "def F2(a):\n    b= 0\n    for i in range(len(a[:,4])):\n        if a[i,4] < 5:\n            b= b + a[i,0]\n    return b\nprint('F2 returns', F2(hourly))\ncheck('Q2', F2, hourly, points=15)\n", "intent": "Write a function named `F2` that takes a single argument and returns the integer answer.\n"}
{"snippet": "def isPalindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == backward(s)\n", "intent": "We can fix the spaces thing with replace.\n"}
{"snippet": "response = thinkdsp.read_wave('180960__kleeb__gunshot.wav')\nstart = 0.12\nresponse = response.segment(start=start)\nresponse.shift(-start)\nresponse.normalize()\nresponse.plot()\nthinkplot.config(xlabel='Time (s)', ylim=[-1.05, 1.05])\n", "intent": "Acoustic impulse response\n--\nHere's a recording of a gunshot, which approximates the acoustic impulse response of the room:\n"}
{"snippet": "from surfer import Brain\nprint(__doc__)\nbrain = Brain(\"fsaverage\", \"both\", \"pial\", views=\"frontal\",\n              background=\"dimgray\")\nbrain.add_morphometry(\"curv\")\nbrain.add_morphometry(\"sulc\", hemi='lh', grayscale=True)\nbrain.add_morphometry(\"thickness\",\n                      colormap=\"PuBuGn\", min=1, max=4)\n", "intent": "Overlay Morphometry Data\n========================\nDisplay morphometry files generated during\nthe cortical reconstruction process.\n"}
{"snippet": "age = 18\ncan_drink_alcohol = False \nprint(f\"Age: {age}; can drink alcohol? {can_drink_alcohol}\")\n", "intent": "Now let's try to write the boolean expressions that will evaluate different conditions, given a set of other variables.\n"}
{"snippet": "arr = np.ones((4,4), dtype=int)\narr[2,-1] = 2\narr[-1,1] = 6\narr\n", "intent": "1) Create the following array:\n"}
{"snippet": "import os\nfrom time import sleep\nhomepath = os.path.dirname(os.getcwd())\noutput_path = homepath+'/out_data/'+'log.txt'\n", "intent": "Bugs: f = open(output_path, \"w\",2)  \n  f = open(output_path, \"a+\") will not flush the content to the file immediately  \n"}
{"snippet": "from some.deep.module.inside.a.module import a_nice_function, another_nice_function, \\\n    yet_another_nice_function\n", "intent": "Or a backslah, although this is not as recommended:\n"}
{"snippet": "elements = {\"hydrogen\": {\"number\": 1,\n                         \"weight\": 1.00794,\n                         \"symbol\": \"H\"},\n              \"helium\": {\"number\": 2,\n                         \"weight\": 4.002602,\n                         \"symbol\": \"He\"}}\nprint(elements)\n", "intent": "Add the element <code>Oxygen</code> to the elements dictionary below. Oxygen has a number of 8, weight of 15.999 and symbol of O.\n"}
{"snippet": "Select j.\"J\nFrom (Select spj.\"J\n      From SPJ spj\n      GROUP BY spj.\"P\n      ORDER BY spj.\"J\nWhere j.\"J\nGROUP BY j.\"J\n", "intent": "**14)** Get the project number for all projects that use the parts supplied by more \nthan one supplier.\n"}
{"snippet": "data = {'Name': ['John A', 'John B', 'Jane A', 'Jane B', 'Yaron A', 'Yaron B', 'Moran A', 'Moran B'],\n        'gender': ['M', 'M', 'F', 'F', 'M', 'M', 'F', 'F'],\n        'age': [3, 70, None, 50, 32, 37, 45, 38],\n        'Weight':[15, 75, 25, 100, 85, 80, 175, 65],\n        'Height': [90, 140, 110, 170, 180, 175, 190, 160],\n        'Superhero': ['No', 'Yes','No', 'Yes', 'No', 'Yes', 'No', 'Yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n", "intent": "(3) Run the following code to create the objects `data` and `labels`:\n"}
{"snippet": "a = np.array([True, False])\nb = np.array([1,2,3])\nb[a]\n", "intent": "Note they must have the same shape, so that the following does _not_ work:\n"}
{"snippet": "response.make_audio()\n", "intent": "Here's what it sounds like:\n"}
{"snippet": "for i, b in enumerate(beliefs):\n    print(b.Mean(), b.CredibleInterval(90))\n", "intent": "We can summarize `beliefs` by printing the posterior mean and credible interval:\n"}
{"snippet": "viewer.setStyle({'resn': 'HEM'},{'sphere': {'colorscheme': 'greenCarbon'}})\nviewer.show()\n", "intent": "Show heme as spheres.\n"}
{"snippet": "with open('../data/gapminder.csv') as f:\n    for line in f:\n        data = line.strip().split(',')\n        print(data)\n", "intent": "- Read data from the file `data/gapminder.csv`.\n- Find which European countries have the largest population in 1952 and 2007.\n"}
{"snippet": "a=np.array([1,2,3,4,5])\na**3\n", "intent": "<b>3. ** operator</b>\nIt is the exponentiation operator for numpy arrays\n"}
{"snippet": "print(\"These people are awesome: {0}, {1}, {2}\".format(awesome_people[0], awesome_people[1], awesome_people[2]))\n", "intent": "There is that 0 indexing again. The first element of the list is given index value 0.\n"}
{"snippet": "def avg(x1, x2, x3, x4):\n    return (x1+x2+x3+x4)//4\n", "intent": "**Try this now**: write a function that takes four parameters and returns their average. Try the test cases below to see if your function is working.\n"}
{"snippet": "4 * (6+5), 4*6+5 , 4+6*5 \n", "intent": "- 4 * (6+5) = 44\n- 4*6+5 = 29\n- 4+6*5 = 34\n"}
{"snippet": "def confirm_ending(a_string, last_char):\n    return a_string[-1] == last_char\n", "intent": "More simple slice comparisons.\n"}
{"snippet": "seli = (i-1)*w+1:i*w;\nselj = (j-1)*w+1:j*w;\nP = f(seli,selj);\n", "intent": "For a given path index |(i,j)|, we extract an |(w,w)| patch.\n"}
{"snippet": "transfer = response.make_spectrum()\ntransfer.plot()\nthinkplot.config(xlabel='Frequency (Hz)', ylabel='Amplitude')\n", "intent": "The DFT of the impulse response is the transfer function:\n"}
{"snippet": "[dX,dY,X,Y] = ndgrid(0:w-1,0:w-1,1:w:n-w+1,1:w:n-w+1);\nI = X+dX + (Y+dY-1)*n;\n", "intent": "Compute indexing of the blocks.\n"}
{"snippet": "[D,Z,Q] = perform_fast_marching(1./W, vertex);\n", "intent": "Compute the geodesic distance.\n"}
{"snippet": "normalize = @(V)V ./ repmat( max(1e-9,sqrt(sum3(V.^2, 3))) , [1 1 2]);\n", "intent": "We can renormalize the flow, which enhance the singularities. It defines\n$\\tilde V$ as $\\tilde V_i = V_i/\\norm{V_i}$.\n"}
{"snippet": "clf;\nimageplot(f0, 'Image f0', 1,2,1);\nimageplot(y0, 'Observation without noise', 1,2,2);\n", "intent": "Display the filtered observation.\n"}
{"snippet": "vertexF = U(:,1:2)' .* repmat(sqrt(S(1:2)), [1 n]);\n", "intent": "Isomap embedding is defined from the two largest eigenvalues.\n"}
{"snippet": "vertex1 = pvertexQ*U';\n", "intent": "Reconstruct the mesh from the de-compressed coefficients.\n"}
{"snippet": "s = 30;\nclf;\nimageplot( M(:,:,s), 'Original', 1,2,1 );\nimageplot( clamp(M1(:,:,s)), 'Approximation', 1,2,2 );\n", "intent": "Display the approximation as slices.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('solutions/optim_3_cgs')\n", "intent": "This tour explores the use of the conjugate gradient method for the\nsolution of large scale symmetric linear systems.\n"}
{"snippet": "sigmafi = [];\nsigmafi(sigmaf) = 1:n^2;\n", "intent": "Compute the inverse permutation $\\sigma_f^{-1}$.\n"}
{"snippet": "transfer.plot()\nthinkplot.config(xlabel='Frequency (Hz)', ylabel='Amplitude',\n                 xscale='log', yscale='log')\n", "intent": "Here's the transfer function on a log-log scale:\n"}
{"snippet": "I = randperm(n*n); I = I(1:P); I = I(:);\n", "intent": "We use here a set of random sampling locations.\n"}
{"snippet": "J = find(a>1e-3);\nt = (0:N-1)'/N;\ns = (0:P-1)'/P;\nclf; hold on;\nplot(s, y, 'LineWidth', 2);\nmystem(x0(I), a0(I), 'k'); % initial spikes \nmystem(t(J) + delta(J), a(J), 'r');  % recovered spikes\naxis([0 1 0 1]);\nbox on;\n", "intent": "Display recovered measures.\n"}
{"snippet": "xf = fft2(M);\nMwien = real( ifft2(xf.*Hf) );\nHwien = real( fftshift( ifft2(Hf) ) );\n", "intent": "compute convolution\n"}
{"snippet": "G = grad(W);\nG = G[:,:,0] + 1j*G[:,:,1];\n", "intent": "Pre-compute the gradient $\\nabla W(x)$ of the metric.\n"}
{"snippet": "imageplot(clamp(fM))\n", "intent": "Display the approximation.\n"}
{"snippet": "energy = lambda H: mean(mean(abs(H).^2, 1), 2)\nenergy = lambda H: repmat(max3(energy(H), 1e-15), [q q])\n", "intent": "Compute the average energy of each block, and duplicate.\n"}
{"snippet": "block = lambda x: reshape(x(I(: )), size(I))\niblock = lambda H: assign(zeros(size(fw)), I, H)\n", "intent": "Forward and backward extraction operators.\n"}
{"snippet": "[D, Z, Q] = perform_fast_marching(1./ W, vertex)\n", "intent": "Compute Voronoi partition.\n"}
{"snippet": "myinterp = lambda P1, f1, Pi: interp2(P1(: , : , 2), P1(: , : , 1), f1, Pi(: , : , 2), Pi(: , : , 1))\n", "intent": "Helper function: bilinear interpolation on a grid.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Unpack tuples using list comprehensions\n"}
{"snippet": "c = D(: , : , i); c(S = =1) = 0\nnl = 15\nt = linspace(0, 1, n)\nB = display_shape_function(c')\nclf; hold on\nimagesc(t, t, B); axis('image'); axis('off')\ncontour(t, t, c', nl, 'k')\ncolormap jet(256)\nh = plot(V(1, [1: end 1]), V(2, [1: end 1]), 'r.-')\nset(h, 'LineWidth', lw); set(h, 'MarkerSize', ms)\n", "intent": "Display the edge function.\n"}
{"snippet": "A = sparse([edge(1, : ); edge(2, : )], [edge(2, : ); edge(1, : )], [n + (1: ne); n + (1: ne)], n, n)\nv12 = full(A(face(1, : ) + (face(2, : )-1)*n))\nv23 = full(A(face(2, : ) + (face(3, : )-1)*n))\nv31 = full(A(face(3, : ) + (face(1, : )-1)*n))\n", "intent": "Compute the number of the three edges associated to each face.\n"}
{"snippet": "t = linspace(-.7, .7, 101)\n[u, v] = meshgrid(t, t)\nF = (u.^2 + eta*v.^2)/ 2\n", "intent": "Background image of the function.\n"}
{"snippet": "bound = 'per'\nbound = 'neum'\n", "intent": "Boundary conditions, either periodic or Neumann.\n"}
{"snippet": "a = h(: , : , 1: 2).*repmat(g(: , : , 1), [1 1 2]) + ...\n    h(: , : , 2: 3).*repmat(g(: , : , 2), [1 1 2])\n", "intent": "Compute $ a_\\si(x) = h_\\si(x) \\times g_\\si (x) $\n(this is a matrix times vector operation).\n"}
{"snippet": "[A, tmp] = meshgrid(randperm(size(I, 2)) , ones(w*w, 1))\nx = zeros(N, 1); x(I) = A\nZ = zeros(n, n); Z(I0) = x\nimageplot(Z)\ncolormap jet(256)\n", "intent": "Just for check : display in coefficient space the block structure.\n"}
{"snippet": "E = lambda u: F(u) + lambda*norm(u(: , 1), 1)\n", "intent": "Energy without the constraint $ E(u) = F(u) + \\la \\norm{u}_1 $.\n"}
{"snippet": "fM <- Re( (fft(c, inverse=TRUE)/length(c))*n )\n", "intent": "Inverse the Fourier transform.\n"}
{"snippet": "imageplot(clamp(fBlock), paste(\"SNR =\", round(snr(f0, fBlock),1), \"dB\"))\n", "intent": "Display the result.\n"}
{"snippet": "spectrum = violin.make_spectrum()\n", "intent": "Now we compute the DFT of the violin recording.\n"}
{"snippet": "fs = 10\nXm = function(X){as.matrix(X - rep(colMeans(X), rep.int(nrow(X), ncol(X))))}\nCov = function(X){data.matrix(1. / (n - 1) * t(Xm(X)) %*% Xm(X))}\n", "intent": "Define a few helper functions:\n"}
{"snippet": "plotp <- function(x, col){ points(x[1,],x[2,], pch=21, cex=2, col=\"black\", bg=col, lwd=2) }\n", "intent": "Shortcut for displaying point clouds.\n"}
{"snippet": "ev <- eigen( (Xstrain %*% t(Xstrain))/n )\nL <- ev$values ; U <- ev$vectors\nXstrain1 <- -t(U) %*% Xstrain\n", "intent": "Redess the points using the two leading eigenvectors of the covariance matrix (PCA correction).\n"}
{"snippet": "sample_list1 = ['Bach', 'Beethoven', 'Mozart']\nprint sample_list1\n", "intent": "You can also define lists using other variables.  When doing this, it's as if you took whatever was stored in the variable and typed it in instead.\n"}
{"snippet": "\"\".join(unique_letters)\n", "intent": "This will be easier to read if we turn the set of letters back into a string, with `join`:\n"}
{"snippet": "x = 1\nfor y in x:\n    print(y)\n", "intent": "So we can see that a zero division error is a particular kind of Arithmetic Error.\n"}
{"snippet": "questionsDF[questionsDF.view_count > 5]\n", "intent": "You can also select a subset of the data using criteria. For example, we can select all rows that have a `view_count` greater than 5.\n"}
{"snippet": "def power_of_2(power):\n    return 2 ** power\n", "intent": "Hint: Powers of 2 are 1, 2, 4, 8, 16, 32 and so on for 2 to the power of 0, 1, 2, 3, 4, 5.\n"}
{"snippet": "def cumulativeSum(number):\n    mylist = [0]\n    for i in range(1,number):\n        mylist += [mylist[-1]+i]\n    return mylist\n", "intent": "Write a program that makes a list of cumulative sum of all numbers till given number.   \nExample : \nif number = 4 is given, it will return, \n[0,1,3]\n"}
{"snippet": "len(spectrum.hs), len(transfer.hs)\n", "intent": "I trimmed the violin recording to the same length as the impulse response:\n"}
{"snippet": "DROP TABLE IF EXISTS courses;\nCREATE TABLE courses (course TEXT, staff TEXT, students int, hours int);\nINSERT INTO courses VALUES ('CS103','Keith', 320, 4);\nINSERT INTO courses VALUES ('CS145','Chris', 200, 3);\nINSERT INTO courses VALUES ('CS245','Chris', 100, 4);\nINSERT INTO courses VALUES ('CS161','Virginia', 400, 3);\nINSERT INTO courses VALUES ('CS267','Virginia', 50, 4);\nINSERT INTO courses VALUES ('CS224N','Chris', 250, 4);\nINSERT INTO courses VALUES ('CS276','Chris', 300, 3);\n", "intent": "Equivalence Activity\n------------\nFirst load the following tables:\n"}
{"snippet": "def yfunc(t, v0):\n    g = 9.81\n    y = v0*t - 0.5*g*t**2\n    dydt = v0 - g*t\n    return y, dydt\nposition, velocity = yfunc(0.6, 3)\nprint position, velocity\n", "intent": "Functions can also return multiple values. Let's recycle another of our previous examples - compute $y(t)$ and $y'(t)=v_0-gt$:\n"}
{"snippet": "l = [1,2,2,33,4,4,11,22,3,3,2]\nl=set(l)\nl\n", "intent": "Use a set to find the unique values of the list below:\n"}
{"snippet": "plot(t[N0:], cumsum(T[N0:])/arange(1,steps-N0+1), \"x-\")\naxvline(t[100])\n", "intent": "Temperature cumulative average:\n"}
{"snippet": "def transpose_dict(obj):\n    return { value:key for key,value in obj.items() }\n", "intent": "<div style=\"background: \n<p>**Exercise 2.11:**  Write a function to transpose a dictionary (swap keys and values).\n</div>\n"}
{"snippet": "sym.series(sym.cos(x), x)\n", "intent": "SymPy also knows how to compute the Taylor series of an expression at a point. Use `series(expr, var)`, like so:\n"}
{"snippet": "x = np.arange(0,10)\nnp.random.shuffle(x)\nprint x\n", "intent": "Q6. Shuffle numbers between 0 and 9 (inclusive).\n"}
{"snippet": "def add_10(number):\n    try:\n        number = float(number)\n        return number+10\n    except:\n        return \"You didn't enter a number!\"\n", "intent": "---\nThe basic layout of a function is as follows:\n```\ndef function_name(arguments):\n    do_something_to_arguments\n    return something\n```\n"}
{"snippet": "[0,1,2] == range(3)\n", "intent": "The == operator checks, element by element, that two containers have the same data. \nThe `is` operator checks that they are actually the same object.\n"}
{"snippet": "output = (spectrum * transfer).make_wave()\noutput.normalize()\n", "intent": "We we can multiply in the frequency domain and the transform back to the time domain.\n"}
{"snippet": "newcode = arrangeCode(code, datatxt)\nprint('rearrange code:', ''.join(map(str,code)), '->', ''.join(map(str,newcode)))\ntestPassed, fail = testCode(newcode, datatxt)\nif testPassed:\n    print('shortest code is', ''.join(map(str,newcode)))\nelse:\n    print('code:', ''.join(map(str,code)), 'failed for test', datatxt[fail], 'at index', fail)\n", "intent": "reorder numbers to match each test triple in order, if this fails we must have some repeats\n"}
{"snippet": "first1 = moabevents.first()\nfirst1\n", "intent": "We realize that the RDD is composed of each line of input text files, but that is not possible to access to individual column. **Why?**\n"}
{"snippet": "P=matrix([[9,3,1],[1,-1,1],[4,2,1]])\n", "intent": "The following points lie on a parabola $y=ax^{2}+bx+c$: $P=(3,28),Q=(-1,12),R=(2,15)$. Determine the coefficients of the parabola.\n"}
{"snippet": "import ipywidgets\nfrom IPython.display import display\nw1 = ipywidgets.IntSlider(border_radius=2, font_size=12, width=650,\n                          border_color='blue', slider_color='red', description='Slider Widget:',\n                          min=50, max=450, value=200)\ndisplay(w1)\n", "intent": "You can explicitly display widgets using `display()`:\n"}
{"snippet": "letters = ['a','b','c','d']\nnumbers = [1,2,3,4]\n", "intent": "As implied, these are simply loops within loops. First, let's make two lists that we want to work with.\n"}
{"snippet": "import sys\nsys.float_info\n", "intent": "Module `sys` has some built-in information about the (64-bit) floating point type on your system.\n"}
{"snippet": "a = \"15.07\"\nb = \"18.07\"\nprint(a + b)\nprint(float(a) + float(b))\n", "intent": "and in the other direction:\n"}
{"snippet": "message = 'The IPython notebook is great!'\n", "intent": "Any command line program can be run using `!` with string interpolation from Python variables:\n"}
{"snippet": "vega_1 = np.zeros_like(a_1)\nvega_2 = np.zeros_like(a_1)\n", "intent": "And finally for the **vega surfaces**.\n"}
{"snippet": "output.make_audio()\n", "intent": "And here's what it sounds like:\n"}
{"snippet": "for i in range(10):\n    print i\n", "intent": "For Loops\n---\nFor loops execute the code for a certain number of times. It will also keep track of the iteration number we are on.\n"}
{"snippet": "import numpy as np\nA = np.asarray([1.5, 3.6, 5.3, 2.5, 4.3, 2.4, 2.7, 5.5, 3.2]).reshape(3,3)\nb = np.asarray([25.07, 22.36, 28.14]).reshape(3,1)\nvolumes = np.linalg.solve(A,b)\nprint(\"The volumes required are: \" + str(volumes[0]) + \" of X | \" + str(volumes[1]) + \" of Y | \" + str(volumes[2]) + \" of Z.\")\n", "intent": "We can solve above using numpy:\n"}
{"snippet": "def digits_to_num(digits):\n    return reduce(lambda x,y: x*10 + y, digits)\n    pass\n", "intent": "Use reduce to take a list of digits and return the number that they\ncorrespond to. *Do not convert the integers to strings!* \n"}
{"snippet": "SELECT DISTINCT s.sid\nFROM Suppliers s\nWHERE NOT EXISTS (\n    SELECT p.pid\n    FROM Parts p \n    EXCEPT \n    SELECT c.pid\n    FROM Catalog c\n    WHERE c.sid = s.sid\n)\n", "intent": "** 5) Find the sids of suppliers who supply every part. **\n"}
{"snippet": "class RoundRobin(Policy):\n    def __init__(self, num_actions):\n        Policy.__init__(self, num_actions)\n        self.name = \"Round Robin\"\n        self.total_rewards = np.zeros(num_actions, dtype = np.longdouble)\n        self.total_counts = np.zeros(num_actions, dtype = np.longdouble)\n        self.previous_action = None \n    def act(self):\n", "intent": "We have given you some boiler plate code, you only need to modify the part as indicated.\n"}
{"snippet": "Z = np.random.random((10, 10))\nZmax, Zmin = Z.max(), Z.min()\n", "intent": "13\\. Create a 10x10 array `Z` with random values and find the minimum and maximum values and store them in `Zmin` and `Zmax`.\n"}
{"snippet": "x = sc.parallelize([1,2,3], 2)\ndef f(iterator): yield sum(iterator); yield 42\ny = x.mapPartitions(f)\nprint(x.glom().collect())\nprint(y.glom().collect())\n", "intent": "Transformation / Narrow: Return a new RDD by applying a function to each partition of this RDD\n"}
{"snippet": "np.random.seed(3)\nx = np.random.randint(0, 20, 15) \nprint(x)\n", "intent": "Two other common ways to index a Numpy array are to use a boolean mask or to use a set of integer indices.\n"}
{"snippet": "student_names = ['Yue','Abby','George','Gordon','Thomas','aaa','bbb','ccc','ddd','eee','fff','ggg','hhh']\n", "intent": "<img src=\"http://imgur.com/1ZcRyrc.png\" style=\"float: left; margin: 20px; height: 55px\">\n_Author: Kiefer Katovich (SF)_\n---\n"}
{"snippet": "dt = 1\nfactor = 0.5\nresponse2 = response + shifted_scaled(response, dt, factor)\nresponse2.plot()\nthinkplot.config(xlabel='time (s)', ylabel='amplitude', ylim=[-1.05, 1.05])\n", "intent": "Here's what it would sound like if we fired a big gun followed by a small gun:\n"}
{"snippet": "csv_file = './LA_Hub_datasets/Trailheads.csv'\ncsv_item = gis.content.add({}, csv_file)\n", "intent": "> Put your code here\n"}
{"snippet": "proc sql;\n   update bdSQL.prov_alar_sinis2\n      set coutTot=coutTot*1.02\n         where presence_alarme=0;\n   title \"Selectively Updated presence_alarme Values\";\n   select *\n      from bdSQL.prov_alar_sinis2;\nquit;\n", "intent": "Appliquons maintenant l'augmentation de 2%\n"}
{"snippet": "filename = 'my_file.txt' \nthe_file = open(filename, 'w') \nwhile work_to_do:\n    the_file.write(str_v) \n    the_file.write(str(int_v)) \n    the_file.write('%7.3f' % float_v) \n    the_file.write('\\n') \nthe_file.close() \n", "intent": "Suppose you have a filename in a variable `filename` and you want to write data to that file.  \nThen the general steps needed are as follows:\n"}
{"snippet": "transition = {(0, 0): {'Right': (0, 1), 'Down': (1, 0)},\n            (0, 1): {'Left': (1, 0), 'Down': (1, 1)},\n            (1, 0): {'Right': (1, 0), 'Up': (1, 0), 'Left': (1, 0), 'Down': (1, 0)},\n            (1, 1): {'Left': (1, 0), 'Up': (0, 1)}}\nprint(SAT_plan((0, 0), transition, (1, 1), 4))\n", "intent": "Let us do the same for another transition.\n"}
{"snippet": "i = 1\nif i == 1 or i == 2:\n    print(\"i is 1 or 2\")\nelif i > 3 and i < 5:\n    print(\"i is 4\")\n", "intent": "If you need to fulfil more than one condition, then one can just concatenate several\nconditions using ``and`` or ``or``:\n"}
{"snippet": "myRatedMovieIds = set([x[1] for x in myRatings])\ncandidates = sc.parallelize(...)\npredictions = ...\nrecommendations = ...\nprint \"Movies recommended for you:\"\nfor i in xrange(len(recommendations)):\n    print (\"%2d: %s\" % (i + 1, movies[recommendations[i][1]])).encode('ascii', 'ignore')\n", "intent": "Complete in the fellowing line istructions to suggest 50 film based on personal rating and the best learned model.\n"}
{"snippet": "def get_json_response(city, state):\n    url = ('https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in'\n               '%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22{}%2C%20{}%22)&format=json&env=store'\n               '%3A%2F%2Fdatatables.org%2Falltableswithkeys').format(city,state)\n    response = requests.get(url)\n    json_response = response.json()\n    return json_response\n", "intent": "Now we want a function that builds a URL, calls yahoo weather's API with that URL, and returns to us the JSON data of the response. \n"}
{"snippet": "l = [1,2,[3,4,'hello']]\nl[-1][-1] = 'goodbye'\nl\n", "intent": "Reassign 'hello' in this nested list to say 'goodbye' item in this list:\n"}
{"snippet": "class fibonacci_iter:\n", "intent": "It can also be implemented as an iterator.\n"}
{"snippet": "signal = thinkdsp.SawtoothSignal(freq=441)\nwave = signal.make_wave(duration=0.2, framerate=response.framerate)\nwave.plot()\nthinkplot.config(xlabel='Time (s)', ylim=[-1.05, 1.05])\n", "intent": "We can do the same thing with an arbitrary input signal.\n"}
{"snippet": "date = \"12-25-1975\"\ndash_index = date.find(\"-\")\ndash_index_2 = date.find(\"-\", dash_index+1)\nmonth = date[:dash_index]\nday = date[dash_index + 1:dash_index_2]\nyear = date[dash_index_2 + 1:]\nprint(\"Month: \", month)\nprint(\"Day: \", day)\nprint(\"Year: \", year)\n", "intent": "Slicing also works on strings!\n"}
{"snippet": "sushi_tuple = tuple(my_order)\nprint(sushi_tuple)\nmaguro = tuple('maguro')\nprint(maguro)\n", "intent": "You can create a tuple from any sequence using the `tuple` function\n"}
{"snippet": "log.removeHandler(handler)\n", "intent": "Here the output is emitted twice because we now have two handlers on the logger. We can remove the custom handler like this:\n"}
{"snippet": "numbers = [1,2,3,4,5,6,7,8,9,10]\nnumbers = [i for i in numbers if i%2 == 0]\nnumbers\n", "intent": "[Hint: the modulo operator **%** can be used to calculate the remainder, e.g. 5 % 2 == 1]\n"}
{"snippet": "results[\"Fred\"] = 5.\n", "intent": "To create a new entry into the dictionary, we can simply use the new key as an index into the dictionary and assign it a value.\n"}
{"snippet": "bins = np.arange(135, 210, 5)\nprint(bins)\nindices = np.digitize(cleaned.htm3, bins)\nprint(indices)\ngroups = cleaned.groupby(indices)\nprint(groups)\n", "intent": "Then I'll divide the dataset into groups by height.\n"}
{"snippet": "wordCountsCollected = (wordsRDD\n                       .map(lambda word: (word,1)).reduceByKey(lambda x,y: x+y)\n                       .collect())\nprint wordCountsCollected\n", "intent": "The expert version of the code performs the `map()` to pair RDD, `reduceByKey()` transformation, and `collect` in one statement.\n"}
{"snippet": "params.rHeston <- list(H=0.05,nu=0.15,rho=-.64,eta=0.15)\nxiCurve <- function(t){0.025+0*t}\n", "intent": "And assume the following rough Heston parameters.\n"}
{"snippet": "vsf7 <- varSwapCurve(\"2010-05-07\",bigT=2.5,nSteps=100,nu=nu,h=h,tscale=252,onFactor=2.52)\nvsf10p <- varSwapCurve.p(\"2010-05-10\",bigT=2.5,nSteps=100,nu=nu,h=h,tscale=252,onFactor=2.52)\n", "intent": "Finally, we compare our new forecast curves with the actuals.\n"}
{"snippet": "total = 0\nfor t, y in zip(wave.ts, wave.ys):\n    total += shifted_scaled(response, t, y)\ntotal.normalize()\n", "intent": "And here's what we get if we use the wave to generate shifted, scaled versions of the impulse response:\n"}
{"snippet": "A = np.array([[2,1],[3,2]])\nprint(A)\n", "intent": "linalg submodule of Numpy provides functionalities needed for computing matrix determinant and inverse\n"}
{"snippet": "def round_solution(solution, graph):\n", "intent": "Implement this rounding procedure.\n"}
{"snippet": "def main(filename):\n    counts = count_atoms(filename)\n    for atom in counts:\n        print atom, counts[atom]\n", "intent": "We're now ready to count atoms. The main body of our program looks like\nthis:\n"}
{"snippet": "peers = dict((i, set(sum(units[i], []))-set([i])) for i in boxes)\n", "intent": "A dict where each key is a box and value is a list of all rows, cols, nd 3x3 square that interest that box without containing that box.\n"}
{"snippet": "a = np.array([[2,2,3], [3,1,4],[4,3,0]])\nb = np.array([5,7,10])\nx = np.linalg.solve(a, b)\nx\n", "intent": "> 2x + 2y+3z = 5 <br>\n> 3x + y +4z = 7 <br>\n> 4x + 3y =10\n"}
{"snippet": "rosservice call /spawn \"x: 10.0\ny: 10.0\ntheta: 0.0\nname: 'puppy'\"\n", "intent": "Do you remember our arguments of **/spawn** service when we call it?\n"}
{"snippet": "alt.Chart(cars).mark_bar().encode(\n    x=alt.X('Miles_per_Gallon', bin=alt.Bin(maxbins=30)),\n    y='count()',\n    color='Origin',\n    column='Origin'\n)\n", "intent": "If you prefer a separate plot for each category, the ``column`` encoding can help:\n"}
{"snippet": "numbers=list(range(0,25,3))\n", "intent": "Both methods are useful in  different circumstances, depending on if you know the  list element you want to delete, or if you  know its index\n"}
{"snippet": "statement_1 = 10 > 2\nstatement_2 = 4 <= 6\nprint(\"Statement 1 truth value: {0}\".format(statement_1))\nprint(\"Statement 2 truth value: {0}\".format(statement_2))\nprint(\"Statement 1 and Statement 2: {0}\".format(statement_1 and statement_2))\n", "intent": "We can string these comparators together to make more complex logical statements using the logical operators `or`, `and`, and `not`. \n"}
{"snippet": "total.plot()\nthinkplot.config(xlabel='Time (s)', ylabel='Amplitude', ylim=[-1.05, 1.05])\n", "intent": "The result is a simulation of what the wave would sound like if it was recorded in the room where the gunshot was recorded:\n"}
{"snippet": "idx_rev_vowel = [[i,j] for i, j in zip(idx, reversed_vowels)]\nprint(idx_rev_vowel)\n", "intent": "We can now zip up the idx and reversed_vowels lists as one list\n"}
{"snippet": "width = 5\nheight = 11\narea = width*height\nprint area\n", "intent": "__3)__ Define two integer variables `width` and `height`, then use them to compute and print the area.\n"}
{"snippet": "arr1 = np.array(L, dtype='float32')\n", "intent": "* For explicitly set the data type of the resulting array, we can use the dtype keyword.<br>\n"}
{"snippet": "k = 3 \nCa = Ca0 * (1 - X)\nra = -k * Ca**2\nV2 = Fa0 * X / -ra\nprint('The CSTR volume is {:1.2f} L'.format(V2))\n", "intent": "Assume that  $-r_A = k C_A^2$ with  $k=3$ L/mol/hr.\n"}
{"snippet": "WIDTH_FLOC_OBST = SPACING_FLOC_BAFFLE*(1-RATIO_VC_BAFFLE)\n", "intent": "$$W_{FlocObst}=S_{FlocBaffle}\\,\\left(1-\\Pi_{VCBaffle}\\right)$$\n"}
{"snippet": "response2 = nyc.query_to_pandas_safe(query2, max_gb_scanned=10)\nresponse2.head(15)\n", "intent": "What are the top five reasons why New Yorkers call 311 over the past 4 years?\n"}
{"snippet": "s ='hello'\ns[-1]\ns[:][-1]\n", "intent": "Given the string hello, give two methods of producing the letter 'o' using indexing.\n"}
{"snippet": "'/'.join([month, day, year])\n", "intent": "`str.join()` takes us in the other direction, sewing a list of strings up into one long string, using the string it was called on as a separator.\n"}
{"snippet": "from IPython.display import Javascript\nostVis.opensignalsStyle([item for sublist in list_figures_1 for item in sublist])\nJavascript(\"Jupyter.notebook.execute_cells([18])\")\n", "intent": "<span class=\"color6\">**Auxiliary Code Segment (should not be replicated by the user)**</span>\n"}
{"snippet": "high = 5000\nwave.make_spectrum().plot(high=high, color='0.7')\nsegment = total.segment(duration=0.2)\nsegment.make_spectrum().plot(high=high)\nthinkplot.config(xlabel='Frequency (Hz)', ylabel='Amplitude')\n", "intent": "Here's a comparison of the spectrum before and after convolution:\n"}
{"snippet": "def genquadrate(N):\n    for i in range(N):\n        yield i ** 2\n", "intent": "Erstelle einen Generator, der die Quadratzahlen von Zahlen bis zu einer Zahl N erstellt.\n"}
{"snippet": "def old_macdonald(name):\n    return name[:3].capitalize()+name[3:].capitalize()\n", "intent": "    old_macdonald('macdonald') --> MacDonald\nNote: `'macdonald'.capitalize()` returns `'Macdonald'`\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Implement power basis formula:\n$$\nB_{k,n}(t) = \\sum_{i=k}^n(-1)^{i-k}\\binom{n}{i}\\binom{i}{k}t^i\n$$\n"}
{"snippet": "unsorted = groupedWords.reduceByKey(lambda a, b: a + b)\nprint(unsorted)\nprint(unsorted.take(3))\n", "intent": "Now, sum the counts (reduce)\n"}
{"snippet": "l = range(-5,5)\nprint l\nl.sort(reverse=True)\nprint l\n", "intent": "Notice this is modifying the list.\n"}
{"snippet": "gross_earnings = [361681, 740741, 396105,  284600, 249154]\ngross_earnings[1] = gross_earnings[1] * 1.05\nprint(gross_earnings[1])\n", "intent": "Lists are *mutable*, so we can change a list, such as by adding, removing, or modifying an item:\n"}
{"snippet": "x = 5\ny = 0\ntry:\n    z = x/y\nexcept ZeroDivisionError:\n    print \"Dividing by zero.\"\nfinally:\n    print \"Always print this line.\"\n", "intent": "Handle the exception thrown by the code below by using **try** and **except** blocks. Then use a **finally** block to print 'All Done.'\n"}
{"snippet": "isplit_knl = knl\nisplit_knl = lp.split_iname(isplit_knl, \"i\", 4)\nevt, (mat,) = isplit_knl(queue, a=a, b=b)\n", "intent": "----\nNext: transform kernel. Example: Split a loop into fixed-length \"chunks\".\n"}
{"snippet": "list(patt.finditer(\"!Hello World, hello people!\"))\n", "intent": "The __finditer__ function will return an iterator over MatchObjects:\n"}
{"snippet": "raise NotImplementedError()\ndf.head(10)\n", "intent": "Load the results into a Pandas DataFrame\n"}
{"snippet": "opt = minimize(H_sec_gen,[1.6875])\nopt\n", "intent": "This will take some time because we have build a matrix, each matrix element is created via a 3D integration and then we have solve the eigenvalues!\n"}
{"snippet": "b[0] = 9\nprint(c)\nprint(id(b) == id(c))\n", "intent": "When the list that the name **\"b\"** refers to is mutated, calling **\"c\"** reflects this change, since it refers to the exact same object: \n"}
{"snippet": "simulation.reporters = []\nsimulation.reporters.append(PDBReporter('TetraAspDimer_noIons_MDafterHeat.pdb', 100))\nsimulation.reporters.append(StateDataReporter(stdout, 500, step=True, potentialEnergy=True, temperature=True))\nintegrator.setTemperature(target_temperature)\nprint ('Running production MD simulation ', target_temperature, 'K.')\nsimulation.step(10000)\ndel simulation\n", "intent": "<h2>Production MD</h2>\n"}
{"snippet": "def char_check_vowel(char):\n    char1 = char.lower()\n    if char1 in ['a','e','i','o','u']:\n        return True\n    else:\n        return False\nch = input(\"Enter the character:\")\nchar_check_vowel(ch)\n", "intent": "4. Write a python function which takes a character (i.e string of length 1)and returns true if it is a vowel, false otherwise.\n"}
{"snippet": "length(ages) \ntable(cut(ages, boundaries))/43 \n", "intent": "**RELATIVE FREQUENCY TABLES** \n"}
{"snippet": "student_names = [Brian, Nick, Manuel, Keaton, Gene, Ying]\n", "intent": "<img src=\"http://imgur.com/1ZcRyrc.png\" style=\"float: left; margin: 20px; height: 55px\">\n_Author: Kiefer Katovich (SF)_\n---\n"}
{"snippet": "items = []\ninput_file = open('ProductPurchaseData.txt',\"r+\")\nfor row in input_file:\n    line = row.split()\n    for item in line:\n        if item in items:\n            continue\n        else:\n            items.append(item)\nprint('Number of unique items', len(items))\n", "intent": "Do some exploratory data analysis of this dataset guided by the following questions:\nHow many unique items are available from this supplier?\n"}
{"snippet": "bank_stocks['BAC'].loc['2015-01-01':'2016-01-01'].iplot(kind='candle')\n", "intent": "** Use .iplot(kind='candle) to create a candle plot of Bank of America's stock from Jan 1st 2015 to Jan 1st 2016.**\n"}
{"snippet": "robot.move(-75,-80,1)\nrobot.move(0,0)\n", "intent": "You can change the speed of each wheel between -100 and 100 for moving the robot forward, backward, or turning.\n"}
{"snippet": "convolved2 = violin.convolve(response)\nconvolved2.normalize()\nconvolved2.make_audio()\n", "intent": "And we can do the same thing with the violin recording:\n"}
{"snippet": "import math\ndef vol(rad):\n    return (4/3 * math.pi) * rad**3   \nvol(3)\n", "intent": "Complete the following questions:\n____\n**Write a function that computes the volume of a sphere given its radius.**\n"}
{"snippet": "@manipulate for n in 3:10, i in 1:9\n   A = fill(0, n, n)\n   A[1:3, 1:3] .= i    \nA\nend\n", "intent": "We use a double `for` loop to get a double slider!\n"}
{"snippet": "def print_hello_world():\n", "intent": "Documentation is mainly used on classes and functions. Today will look at how to document functions.\n"}
{"snippet": "print('Hello)\nprint(3+2)\n", "intent": "Here, we will learn about Errors and Exception Handling in Python. You might have faced errors by this point in the course. For example:\n"}
{"snippet": "s1 = \"John\"\ns2 = \"Doe\"\ns12 = s1 + s2\nprint s12\nprint s1 + \" \" + s2\n", "intent": "__Basic string operations__\n"}
{"snippet": "star_name = star_string[:18]\nstar_name = star_name.strip()\nspectral_class = star_string[18:28].strip()\napparent_magnitude = float(star_string[29:34])\nabsolute_magnitude = float(star_string[35:40])\nparallax = float(star_string[41:46])\n", "intent": "<div class=\"btn-group\"><button class=\"btn\" onclick=\"IPython.canopy_exercise.toggle_solution('2')\">Solution</button></div>\n"}
{"snippet": "mylist = [(x,y,x*y) for x in range(100,1000) for y in range(100,1000) if str(x*y) == str(x*y)[::-1]]\nprint max(mylist, key = lambda x: x[2])\n", "intent": "To get the two 3 digit numbers is a little trickier.\n"}
{"snippet": "my_int = raw_input(\"Enter an integer:\")  \nprint(type(my_int))                       \nprint(\"You entered \" , my_int)            \nmy_int = int(my_int)                     \nprint(type(my_int))                       \nprint(\"You entered \" , my_int)            \n", "intent": "Lets try and get a number from the user now.\n"}
{"snippet": "from habanero import cn\nform1a = cn.content_negotiation(ids = '10.1038/nature05615')\nform1b = cn.content_negotiation(ids = '10.1038/nature05615', format = \"citeproc-json\")\nform1c = cn.content_negotiation(ids = \"10.1038/nature05615\", format = \"rdf-xml\")\nform1d = cn.content_negotiation(ids = \"10.1038/nature05615\", format = \"crossref-xml\")\nform1e = cn.content_negotiation(ids = \"10.1038/nature05615\", format = \"text\")\nform1f = cn.content_negotiation(ids = \"10.1038/nature05615\", format = \"bibentry\")\n", "intent": "The `cn` (content negotiation) module will format the search into bibliography formats ... including text for printing. \n"}
{"snippet": "output = (spectrum * transfer).make_wave()\noutput.normalize()\n", "intent": "Now we can multiply the DFT of the signal by the transfer function, and convert back to a wave:\n"}
{"snippet": "toModify = list(set(base1)) + list(set(base2))\ntoModify.remove('wtf')\ntoModify.append(3)\ntoModify.sort()\ntoModify.reverse()\nprint toModify\n", "intent": "Write your code in the cell below.  Feel free to add additional cells if it helps you.\n"}
{"snippet": "def aptan(el,a,b):\n    apt=a*np.tan(np.deg2rad(el)) +b\n    return apt\n", "intent": "we can also fit secant values with tan approximation\n"}
{"snippet": "count = 0\nfor f in files:\n    with open(f, 'rb') as fo:\n        reader = fastavro.reader(fo)\n        candidate = next(reader, None)\n        result = my_filter(candidate)\n        if result:\n            count += 1\nprint(\"%s candidates passed the filter\" %count)\n", "intent": "Let's try out the filter, and count how many survive out of the original 835.\n"}
{"snippet": "for key in e:\n    print key, e[key]\n", "intent": "But you can easily get the value with:\n"}
{"snippet": "import yaml\nfrom bokeh.layouts import column\nfrom bokeh.models import ColumnDataSource, Slider\nfrom bokeh.plotting import figure\nfrom bokeh.themes import Theme\nfrom bokeh.io import show, output_notebook\nfrom bokeh.sampledata.sea_surface_temperature import sea_surface_temperature\noutput_notebook()\n", "intent": "This notebook shows how a Bokeh server application can be embedded inside a Jupyter notebook. \n"}
{"snippet": "SELECT PNAME, PRICE, MANUFACTURER\nFROM PRODUCT\nWHERE PNAME LIKE \"%Gizmo%\"\n", "intent": "Write your query here:\n"}
{"snippet": "print('We prefer indices that start at 1, not at 0...')\nfor index, typ in enumerate(data_types):\n    print(\"the {}. data type is {}\".format(index + 1, typ))\n", "intent": "Of course we can modify the values ```enumerate()``` returns before we display them:\n"}
{"snippet": "def my_second_func():\n    a = 10\n    print('I see \"a\" = ', a, 'from \"my_second_func\"')\n", "intent": "Variables defined inside a function or class, are not global.  Only the function or class can see the variable:\n"}
{"snippet": "print(\"{:e} + {:f} = {:d}\".format(1, 2, 3))\n", "intent": "We can instruct formatting like this: `:e` is scientific notation, `:f` for floats and `:d` for integer numbers:\n"}
{"snippet": "output.make_audio()\n", "intent": "And we don't hear the extra note at the beginning:\n"}
{"snippet": "datetime.now().weekday()\n", "intent": "Exercise 2: How do I get an object with the current time?\n"}
{"snippet": "sns.distplot(estimates)\n", "intent": "Note: The normal method only works if $\\hat{T}$ is normally distributed. We can check:\n"}
{"snippet": "nij = [98,  \n       1,   \n       0,   \n       1]   \n@printf \"r^2 = %5.3f \\n\" RSqr(nij)\n", "intent": "Here is another example, where one of the ancestral haplotypes has a\nvery low frequency:\n"}
{"snippet": "def filter_words(word_list, letter):\n    return list(filter(lambda word: word[0]==letter, word_list))\n", "intent": "Use filter to return the words from a list of words which start with a target letter.\n"}
{"snippet": "for saved in me.saved():\n    if isinstance(saved, praw.models.Submission):\n        print('TITLE:', saved.title)\n    else:\n        print('BODY:', saved.body)\n", "intent": "What articles have I saved?\n"}
{"snippet": "caesar_encipher('This is a test message.', 4)\n", "intent": "Now let's see if it works:\n"}
{"snippet": "x = 5\ny = 0\ntry:\n    z = x/y\nexcept ZeroDivisionError:\n    print (\"Can't divide by Zero!\")\nfinally:\n    print ('All Done!')\n", "intent": "Handle the exception thrown by the code below by using **try** and **except** blocks. Then use a **finally** block to print 'All Done.'\n"}
{"snippet": "len(sorted_favorite_numbers)\n", "intent": "We can also get the length of a list (the number of boxcars in the train) using the `len` function:\n"}
{"snippet": "x_sparse = None\ny_sparse = None\n", "intent": "Your first task is to identify an appropriate sparse domain for the signals.\n<br>\n<font color='red'>EXERCISE CELL</font> \n"}
{"snippet": "response.truncate(2**16)\nresponse.plot()\n", "intent": "We should get the same results from np.convolve and scipy.signal.fftconvolve.\nFirst I'll get rid of the zero padding:\n"}
{"snippet": "var('Lamb', latex_name='\\Lambda')\n", "intent": "The cosmological constant:\n"}
{"snippet": "gt.display(XNC.frame(), XNC)\n", "intent": "Hence the final form of the conformal metric in terms of the compactified null coordinates:\n"}
{"snippet": "percentage = obtained_marks * 100 / 500\n", "intent": "<h3>4 : Calculate percentage and assign the value in variable name percentage</h3>\n"}
{"snippet": "def __cmp__(self, other):\n        if self.hour > other.hour: return 1\n        if self.hour < other.hour: return -1\n        if self.minute > other.minute: return 1\n        if self.minute < other.minute: return -1\n        if self.second > other.second: return 1\n        if self.second < other.second: return -1\n        return 0\n", "intent": "Write a `__cmp__` method for `Time` objects. \n"}
{"snippet": "dic = {}\nn=1\nwhile n<=26:\n    dic[chr(97-1+n)] = inverse(chr(97-1+n))\n    n=n+1\nprint dic\n", "intent": "Please create the inverse mapping dictionary: `dic`.\n"}
{"snippet": "div_by3 = [num for num in range(1,51) if num % 3 == 0]\ndiv_by3\n", "intent": "___\n**Use a List Comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "def uplimit(N,ntrials=30,nsamples=1000):\n    out= []\n    for ii in range(ntrials):\n        data= numpy.random.normal(size=N)\n        samples= bovy_mcmc.slice(numpy.array([1.]),1./N**0.25,loglike,(data,),\n                            isDomainFinite=[True,True],domain=[0.,2.],\n                            nsamples=nsamples)\n        out.append(sorted(samples)[int(numpy.floor(0.95*nsamples))])\n    return numpy.median(out)\n", "intent": "We write a function that returns the 95% upper limit as a function of sample size $N$\n"}
{"snippet": "df2 <- read.csv(\"data/urea.csv\", header=FALSE, col.names=c(\"urea\"))\n", "intent": "**Exercise**. Read in the `urea.csv` data file into a data frame `df2` and name the column `urea`.\n"}
{"snippet": "p = linspace(0.01, 0.99, 99)\nplot(p, binom.pmf(8, 10, p));\n", "intent": "Overall, we can plot a graph showing how likely our observation of $X = 8$ is under each different value of $p$.\n"}
{"snippet": "output2 = violin.convolve(response)\n", "intent": "Now we can compare to `np.convolve`:\n"}
{"snippet": "list=[num for num in range(1,51) if num%3==0]\nlist\n", "intent": "___\n**Use a List Comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "def space_check(board, position):\n    if board[position]=='O' or board[position]=='X':\n        return False\n    return True\n    pass\n", "intent": "**Step 6: Write a function that returns a boolean indicating whether a space on the board is freely available.**\n"}
{"snippet": "sales_data2['volume_sold'][0:10]\n", "intent": "**3.A** Print out the first 10 items of the 'volume_sold' column.\n"}
{"snippet": "chuckle = u.def_unit('chuckle')\n", "intent": "You can also define custom units for something that isn't built-in to astropy.\n"}
{"snippet": "def countDog(s): return s.lower().split().count('dog')\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "class DiscreteRV(object):\n    def __init__(self, probs):\n        self.probs = probs\n    def draw(self, size=1):\n        cumprob = np.cumsum(np.cumsum(self.probs))\n        return cumprob.searchsorted(np.random.uniform(0, 1, size=size)) \nrv = DiscreteRV(probs)\nout = rv.draw(10)\nprint(out)\n", "intent": "Vectorize this code with the help of ``np.searchsorted`` and ``np.cumsum``.\n"}
{"snippet": "print(anna.name, anna.age, anna.major, sep=', ')\n", "intent": "Next we can check all the attributes of this particular student.\n"}
{"snippet": "groceries = ['bread','apples','milk','bananas','cheese']\n", "intent": "So how do we change our list?\nAll built in methods found here: https://docs.python.org/3/tutorial/datastructures.html\n"}
{"snippet": "new_number = my_dict['key1'] * 2\nnew_number\n", "intent": "We can also call the values for other uses.\n"}
{"snippet": "output2.make_audio()\n", "intent": "And sound the same:\n"}
{"snippet": "st = 'Print every word in this sentence that has an even number of letters'\n", "intent": "Go through the string below and if the length of a word is even print \"even!\"\n"}
{"snippet": "x = np.arange(4, dtype=np.int64)\nnp.ones_like(x)\n", "intent": "Let x = np.arange(4, dtype=np.int64). Create an array of ones with the same shape and type as X.\n"}
{"snippet": "x = np.array([1, 2, 3])\nnp.copy(x)\n", "intent": "Let x = np.array([1, 2, 3]). Create a array copy of x, which has a different id from x.\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\ncentered = np.char.center(x, 20, \"_\")\nleft = np.char.ljust(x, 20, \"_\")\nright = np.char.rjust(x, 20, \"_\")\nprint(\"centered =\", centered)\nprint(\"left =\", left)\nprint(\"right =\", right)\n", "intent": "Q4. Make the length of each element 20 and the string centered / left-justified / right-justified with paddings of `_`.\n"}
{"snippet": "x = np.array(['he', 'his', 'him', 'his'], dtype=np.str)\n", "intent": "Q17. Check if each element of x starts with \"hi\".\n"}
{"snippet": "??np.binary_repr(12)\n", "intent": "Q9. Convert 12 into a binary number in string format.\n"}
{"snippet": "x = np.array([-1., 0, 1.])\n", "intent": "Q2. Calculate inverse sine, inverse cosine, and inverse tangent of x, element-wise.\n"}
{"snippet": "x = np.array([1., 2., 3.], np.float32)\n", "intent": "Q14. Calculate $2^p$ for all p in x.\n"}
{"snippet": "x = np.array([1., 2., .2])\n", "intent": "Q24. Compute the reciprocal of x, element-wise.\n"}
{"snippet": "len(output), len(output2)\n", "intent": "But the results are not exactly the same length:\n"}
{"snippet": "x = np.array([[1, 2, 3], [1, 3, 5]])\n", "intent": "Q8. Get the values and indices of the elements that are bigger than 2 in x.\n"}
{"snippet": "np.random.choice(10, 3, replace=False)\n", "intent": "Q5. Extract 3 different integers from 0 to 9 randomly with the same probabilities.\n"}
{"snippet": "x = np.array([[1,4],[3,1]])\nout = np.argsort(x, axis=1)\nprint out\n", "intent": "Q3. Get the indices that would sort x along the second axis.\n"}
{"snippet": "st=['P','y','t','h','o','n'] \nw=''.join(st)\nprint w\n", "intent": "  st=['P','y','t','h','o','n']\n  w=''.join(st)\n  print w\n"}
{"snippet": "x = [1, 'a', 2, 'b']\ntype(x)\n", "intent": "<br>\nLists are a mutable data structure.\n"}
{"snippet": "x = ('Christopher', 'Brooks', 'brooksch@umich.edu')\nfname, lname, email = x\n", "intent": "<br>\nYou can unpack a sequence into different variables:\n"}
{"snippet": "today = dt.date.today()\n", "intent": "<br>\n`date.today` returns the current local date.\n"}
{"snippet": "n = np.arange(0, 30, 2) \nn\n", "intent": "<br>\n`arange` returns evenly spaced values within a given interval.\n"}
{"snippet": "a = np.array([-4, -2, 1, 3, 5])\n", "intent": "Numpy has many built in math functions that can be performed on arrays.\n"}
{"snippet": "import scipy.signal\nys = scipy.signal.fftconvolve(violin.ys, response.ys)\noutput3 = thinkdsp.Wave(ys, framerate=violin.framerate)\n", "intent": "`scipy.signal.fftconvolve` does the same thing, but as the name suggests, it uses the FFT, so it is substantially faster:\n"}
{"snippet": "d['c'] = 40\nprint(d['c'])\n", "intent": "How do you change the 30 to a 40 in the d object?\n"}
{"snippet": "with open(fname, 'w') as f:\n    f.write('hello')\n", "intent": "The following code does the exact same thing.\n"}
{"snippet": "a = [1,2,3]\na_copy = a[:]\na_copy[1] = 10\nprint a, a_copy\nprint id(a), id(a_copy)\n", "intent": "One of the correct ways to copy a list is through sliceing with `:`\n"}
{"snippet": "def putting_all_together(a,b,*args, **kwargs):\n    print 'first parameter:', a\n    print 'second parameter:', b\n    print 'parameters packed as a tuple:', args\n    print 'parameters packed as a dictionary:', kwargs\n", "intent": "You can also mix the different approaches:\n"}
{"snippet": "filter(lambda x: x>0, [-1,90, 2 -3, 9])\n", "intent": "you can filter element in a list with **filter**:\n"}
{"snippet": "a, b = [1,2,3]\nprint 'a = ', a\n", "intent": "The number of elements in the list and variables has to be the same. Error otherwise:\n"}
{"snippet": "this_is_a_variable = 2+3\n", "intent": "Variables\nVariable Assignment\n"}
{"snippet": "import string\nmessage = \"uSiNg aPPrOpRiAtE cApiTaLISAtiOn iS iMpOrTaNt fOr yOuR rEaDerS' SANity\"\nlowercased =  \"\" \nsentencecased = \"\" \n", "intent": ">**(a)** Find the functions to transform the following string into: lowercase, uppercase, sentence- case (first letter of first word is capitalized).\n"}
{"snippet": "diejob1 = jobs.new(diefunc, 1)\ndiejob2 = jobs.new(diefunc, 2)\n", "intent": "The jobs manager tries to help you with debugging:\n"}
{"snippet": "output3.make_audio()\n", "intent": "And sound the same:\n"}
{"snippet": "container = widgets.Box()\ncontainer.border_color = 'red'\ncontainer.border_style = 'dotted'\ncontainer.border_width = 3\ndisplay(container)\nint_range = widgets.IntSlider()\ncontainer.children=[int_range]\n", "intent": "Children **can be added to parents** after the parent has been displayed.  The **parent is responsible for rendering its children**.\n"}
{"snippet": "view = rc.load_balanced_view()\nlist(view.map(mul, range(1,20), range(2,21)))\n", "intent": "So how do we do this in parallel?\n"}
{"snippet": "results = c.execute(\"select * from EmployeeBase\")\nresults.fetchall()\n", "intent": "Query the `sqlite_master` table to retrieve the schema of the `EmployeeBase` table.\n1. What fields are there?\n1. What's the type of each of them?\n"}
{"snippet": "collection.find().count()\n", "intent": "Find all the restuarants in the database\n"}
{"snippet": "class Plus(Layer):\n    def forward(self, a, b):\n        c = a + b\n        return c\n    def backward(self, dc):\n        da, db = 1*dc, 1*dc\n        return da, db\n", "intent": "Let's start off simple with a Plus layer.\n<img src=\"images/Plus.svg\" alt=\"Plus Layer\" style=\"width: 400px;\"/>\n"}
{"snippet": "def xor(c1 , c2):\n    return c1 != c2\n", "intent": "or simpler as below without constrained to use *and*, *or*, *not\n"}
{"snippet": "oneSorted1 = oneRDD.takeOrdered(oneRDD.count(),key=sortFunction)\ntwoSorted1 = twoRDD.takeOrdered(twoRDD.count(),key=sortFunction)\nprint 'one es %s' % oneSorted1\nprint 'two es %s' % twoSorted1\nassert oneSorted1 == twoSorted1\n", "intent": "[takeordered]: https://spark.apache.org/docs/latest/api/python/pyspark.html\n"}
{"snippet": "x = [1,2]\nnp.array(x)\n", "intent": "Let x = [1, 2]. Convert it into an array.\n"}
{"snippet": "x = np.random.rand(3, 4)\nx.T.shape\n", "intent": "Q5. Let x be an arbitrary 2-D array of shape (3, 4). Permute the dimensions of x such that the new shape will be (4,3).\n"}
{"snippet": "print(sum_of_squares(10))\n", "intent": "The sum of squares from 1 to 10 should be 385. Verify that this is the answer you get:\n"}
{"snippet": "x = np.arange(10)\ny = np.arange(11, 21)\nz = np.arange(22, 32)\nnp.savetxt('temp.txt', (x, y, z), fmt='%d')\nnp.loadtxt('temp.txt')\n", "intent": "Q4. Save `x`, `y`, and `z` to 'temp.txt' in string format line by line, then load it.\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\nencoded = ...\ndecoded = ...\nprint(\"encoded =\", encoded)\nprint(\"decoded =\", decoded)\n", "intent": "Q5. Encode x in cp500 and decode it again.\n"}
{"snippet": "x1 = np.array(['Hello', 'Say'], dtype=np.str)\nx2 = np.array([' world', ' something'], dtype=np.str)\nout = np.char.add(x1, x2)\nprint(out)\n", "intent": "Q1. Concatenate x1 and x2.\n"}
{"snippet": "x1 = np.array(['Hello', 'my', 'name', 'is', 'John'], dtype=np.str)\nx2 = np.array(['Hello', 'my', 'name', 'is', 'Jim'], dtype=np.str)\nout = np.char.not_equal(x1, x2)\nprint(out)\n", "intent": "Q13. Return x1 != x2, element-wise.\n"}
{"snippet": "def uni_char(s):\n    char = set()\n    for v in s:\n        if v in char:\n            return False\n        else:\n            char.add(v)\n    return True\n", "intent": "def uni_char(s):\n    return len(set(s)) == len(s)\n"}
{"snippet": "get_mean_r(taxa, r_values, target_taxon = 'Fish')\n", "intent": "Test the function using `Fish` as target taxon:\n"}
{"snippet": "re.findall(my_reg,au)\n", "intent": "Test the expression\n"}
{"snippet": "Lil_artists = Lil_data['artists']['items']\nList_of_Followers = []\nfor artist in Lil_artists:\n    List_of_Followers.append(artist['followers']['total'])\nprint(List_of_Followers)\n", "intent": "Creating a list of the popularity values, so we can sort them and say which one is the highest)\n"}
{"snippet": "n_successes = 1\nn_failures = 1\nphi = 0.6\n", "intent": "Then we will collect samples, and after each sample update our belief about $p$.\n"}
{"snippet": "spectrum = wave.make_spectrum()\n", "intent": "Now we compute the DFT of the violin recording.\n"}
{"snippet": "inp = [\n'7',\n'1234',\n'91011',\n'99100',\n'101103',\n'010203',\n'13',\n'1',]\n", "intent": "2 Separate the Numbers\nhttps://www.hackerrank.com/contests/university-codesprint-2/challenges/separate-the-numbers/problem\n"}
{"snippet": "def nth_to_last_node(n, head):\n    copy=head\n    m=1\n    while head.nextnode:\n        m+=1\n        head = head.nextnode\n    print 'm: ',m\n    for i in range(m-n):\n        copy = copy.nextnode\n    return copy\n", "intent": "Fill out your solution below:\n"}
{"snippet": "str = \"Hello my name i Ankit\"\n", "intent": "<h1>Few BuiltIN Methods obj. press Tab to see</h1>\n"}
{"snippet": "shakeWordsRDD = shakespeareWordsRDD.filter(lambda x: x != '')\nshakeWordsRDD = shakespeareWordsRDD.filter(lambda(s): len(s) > 0)\nshakeWordCount = shakeWordsRDD.count()\nprint shakeWordCount\n", "intent": "** (4e) Remove empty elements **\nThe next step is to filter out the empty elements.  Remove all entries where the word is `''`.\n"}
{"snippet": "tombola.inspeciona()\n", "intent": "Verificaremos seus itens:\n"}
{"snippet": "l = [1,2,2,33,4,4,11,22,3,3,2]\nl = set(l)\nl\n", "intent": "Utilisez un set pour trouver les valeurs distinctes de cette liste :\n"}
{"snippet": "print(squares[1:4])\nprint(squares[0:6:2])\nprint(squares[:2])\nprint(squares[2:])\n", "intent": "We can access a sublist by slicing (see the [section](https://docs.python.org/3/tutorial/introduction.html\n"}
{"snippet": "print(squared(2))\nprint(squared(13))\nprint(squared(245))\n", "intent": "And now let's call our function `squared`:\n"}
{"snippet": "sum([1,2,3,4,5,6,7,8,9,10])\n", "intent": "The `sum` function returns the sum of a list of numbers:\n"}
{"snippet": "convolved2 = wave.convolve(response)\nconvolved2.normalize()\nconvolved2.make_audio()\n", "intent": "Now that we recognize this operation as convolution, we can compute it using the convolve method:\n"}
{"snippet": "X[0,:] = V[0,:]\nX[1,:] = V[1,:] - proj(V[1,:],X[0,:])\nprint(X)\n", "intent": "The first two steps of the Gram-Schmidt process are:\n"}
{"snippet": "dta.query(\"(risk == 'Risk 1 (High)') | (risk == 'Risk 1 (Medium)')\").head()\n", "intent": "Instead, by using query we could write the following, which is slightly easier.\n"}
{"snippet": "[[number for number in numbers[3*i:3*i+3]]\n    for i in range(3)]\n", "intent": "Write a nested list comprehension to create the matrix\n    [[1,2,3],\n     [4,5,6],\n     [7,8,9]]\nusing nested lists.\n"}
{"snippet": "year = '1984'\nprint(year[:3])\nprint(year[:3]+'0s')\nde\n", "intent": "We first need to transform year to decade, e.g., 1984 -> 1980s.\n"}
{"snippet": "from collections import Counter\ncounter = Counter(filtered_words)\n", "intent": "The `collection` package of the standard library contains a `Counter` class that is handy for counting frequencies of words in our list:\n"}
{"snippet": "Twitter=pickle.load(open('../../../secret_twitter_credentials.pkl','rb'))\n", "intent": "Make sure to select the relative path to the `secret_twitter_credentials.pkl` file:\n"}
{"snippet": "L3 = [True, \"2\", 3.0, 4]\n[type(item) for item in L3]\n", "intent": "Because of Python's dynamic typing, we can even create heterogeneous lists:\n"}
{"snippet": "x = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])\nprint (np.isreal(x))\n", "intent": "Q7. Predict the result of the following code.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nprint (np.intersect1d(x, y))\n", "intent": "Q3. Find the unique intersection of x and y.\n"}
{"snippet": "wave = thinkdsp.read_wave('253887__themusicalnomad__positive-beeps.wav')\nwave.normalize()\nwave.plot()\n", "intent": "To demonstrate the effect of convolution with impulses, I'll load a short beep sound.\n"}
{"snippet": "lst = []\nlst = [x for x in range(1,50) if x%3==0 ]\nlst\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisble by 3.**\n"}
{"snippet": "import sympy\nfrom sympy import oo\nsympy.init_printing()\nx= sympy.symbols('x')\nmu= sympy.symbols('mu', real=True)\nsigma = sympy.symbols('sigma', real=True, positive=True)\nsympy.integrate(sympy.exp(-(x-mu)**2 /(2*sigma**2)), (x,-oo, oo))\n", "intent": "I can confirm this using `sympy` to evaluate the integral\n"}
{"snippet": "import numpy as np\nr = np.random.rand(2,3)\nr_num = np.arange(5)\nr_num = (r*10).astype('int64')\nprint(\"random matrix : \\n{}\".format(r_num))\nprint(\"min : {}\".format(r_num.min()))\nprint(\"max : {}\".format(r_num.max()))\nprint(\"argmin : {}\".format(r_num.argmin())) \nprint(\"argmax : {}\".format(r_num.argmax())) \nprint(\"mean : {}\".format(r_num.mean()))\n", "intent": "- min, max, argmin, argmax\n- sum, mean, median, std, var\n- all, any\n- quartile\n- exp, log\n"}
{"snippet": "help(test_string.endswith)\n", "intent": "Use the help function to see the documentation. Lets find out what the `endswith` method does.\n"}
{"snippet": "my_list = list(range(20))\nmy_list\n", "intent": "It's possible to reassign multiple elements of a list with a single element.\n"}
{"snippet": "int_list = [234,5425,7,12346,1324,43251238,77904]\nsorted(int_list, key = lambda last_digit: last_digit%10)\n", "intent": "<span style=\"color:green\">Create a list of integers and sort them by their last digit. Use an anonymous function passed to the key argument.</span>\n"}
{"snippet": "students = {'Sally': [87, 76, 65], 'Jane' : [45, 98, 77], 'Adeline' : [65, 22, 10]}\nstudents\n", "intent": "Dictionaries are key:value pairs where the key is a hashable object. The value can be any Python object including lists or even other dictionaries.\n"}
{"snippet": "test_string = 'asdfjhweroiuk' \nif test_string.count('a') > 4:\n    print(\"There are more than 4 a's in your string\")\nelif test_string.find('k') > 10:\n    print(\"The first k occurs after the 11th element\")\nelse:\n    print(\"My super intelligent responses did not find any info on your string. Please change it\")\n", "intent": "<span style=\"color:green\">Create a different string that will trigger the second print statement from above. </span> \n"}
{"snippet": "area_circle = lambda radius: 3.14 * radius ** 2\narea_circle(5)\n", "intent": "<span style=\"color:green\">Create an anonymous function that calculates the area of a circle. Store it to a variable and check that it works.</span>\n"}
{"snippet": "imp_sig = thinkdsp.Impulses([0.005, 0.3, 0.6, 0.9], amps=[1, 0.5, 0.25, 0.1])\nimpulses = imp_sig.make_wave(start=0, duration=1.0, framerate=wave.framerate)\nimpulses.plot()\n", "intent": "And here's a sequence of 4 impulses with diminishing amplitudes:\n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener todos los registros con year=2000 y value>1728\n"}
{"snippet": "from itertools import combinations_with_replacement\nfrom itertools import combinations\nword, n = input().split()\nls = list(combinations_with_replacement(sorted(word), int(n)))\nls = [\"\".join(i) for i in ls]\nls.sort()\nfor i in ls :\n    print(i)\n", "intent": "AA  \nAC  \nAH  \nAK  \nCC  \nCH  \nCK  \nHH  \nHK  \nKK  \n"}
{"snippet": "for num in range(11):\n    if num % 2 == 0:\n        print(num)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "def ran_bool(num,low,high):\n    return low<num and num<high\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "arr_2d = np.array([[5,10,15],[20,25,30],[35,40,45]])\n", "intent": "Indexing 2d array or matrix\n"}
{"snippet": "x=int(input(\"please enter an integer \"))\nwhile x >-1:\n    print (x, \"\")\n    x=x-1\n", "intent": "- The program prompts \"enter a number\" \n- I type 5\n> 5\n> 4\n> 3\n> 2\n> 1\n> 0\n"}
{"snippet": "small_list = ['The', 'number', 1, 'of', True, 'guesses', 'is', 10.0]\n", "intent": "4.3.4 Code a $for$ loop that loops through the following list (named small_list) and only prints out the numbers.\n"}
{"snippet": "length = 4\nwidth = 5\nfor w in range(1, width+1):\n    for l in range(1, length+1):\n        print('\n    print('')\n", "intent": "4.3.7 Code two $for$ loops that makes a rectangle of '\n```\nlength = 3\nwidth = 2\nAnswer:\n```\n"}
{"snippet": "my_list = [1, 2, 3, 4, \"apple\", ['sub','list'], {'dictionary':'too', 'why':'whynot?'}, 3, 4]\nfor item in my_list:\n    try:\n        item = item * 2\n        print(item)\n    except Exception as e:\n        print(\"Error occured.  Description: {}\".format(str(e)))\n", "intent": "5.15.2 Update your solution to add a message to tell the user what kind of error happened.  Use the \"except Exception as e:\" framework.\n"}
{"snippet": "convolved = wave.convolve(impulses)\nconvolved.plot()\n", "intent": "If we convolve the wave with the impulses, we get 4 shifted, scaled copies of the original sound.\n"}
{"snippet": "ar3 = np.dstack((ar1, ar1))\nar3\n", "intent": "Let&rsquo;s <font color='red'>split</font>!  It undoes what we do with the dstack (or reduce the dimension)... for example by 1.\n"}
{"snippet": "time = ...\nestimated_distance_m = ...\n", "intent": "**Question 3.3.1.** Complete the code in the next cell to fill in the *data* from the experiment.\n"}
{"snippet": "print(nums)                  \ntype(nums)                  \n", "intent": "Lists can be printed, just like the other objects we've looked at:\n"}
{"snippet": "my_string = \"Hello my name is Sergey!\"\nmy_string.split(\" \") \n", "intent": "But, strings can also be `split`:\n"}
{"snippet": "nums = range(1,11)\nfor num in nums:\n    num7=num+7\n    print(num7)\n", "intent": "* write a for loop that adds 7 to each of the numbers 1-10 inclusive and prints the result to the screen\n"}
{"snippet": "p = lambda p0, p1, n0, n1: (p0 * n0 + p1 * n1) / (n0 + n1)\nse = lambda p, n0, n1: np.sqrt(p * (1 - p) * (1.0 / n0 + 1.0 / n1)) \n", "intent": "Note that in the online version of Statistics in a Nutshell, $\\bar{x}$  should be  $\\hat{p}$!!\n"}
{"snippet": "row_sum = z.sum(axis=0)\nprint(row_sum)\ncol_sum = z.sum(axis=1)\nprint(col_sum)\n", "intent": "- Desired output:\n> `[65 70 75]\n[12 21 36 57 84]`\n"}
{"snippet": "s = 'Global Variable'\ndef func():\n    print(locals())\n", "intent": "Remember from the nested statements lecture that Python uses Scope to know what a label is referring to. For example:\n"}
{"snippet": "n = 2  \nsample_Total, training_input, test_input, class_labels = Wine(training_size=40,\n                                                              test_size=10, n=n, PLOT_DATA=True)\ntemp = [test_input[k] for k in test_input]\ntotal_array = np.concatenate(temp)\n", "intent": "Here we choose the `Wine` dataset which has 3 classes.\n"}
{"snippet": "convolved.make_audio()\n", "intent": "And here's what it sounds like.\n"}
{"snippet": "n = 16  \nqr = QuantumRegister(n, name='qr')\ncr = ClassicalRegister(n, name='cr')\n", "intent": "Next we do some preliminary settings to better manipulate quantum circuits and we set the number of available (qu)bits to 16\n"}
{"snippet": "backend=Aer.get_backend('qasm_simulator')\nresult = execute(circuits, backend=backend, shots=1).result()\nprint(result)\n", "intent": "Now we execute all the prepared circuits on the simulator.\n"}
{"snippet": "IBMQ.save_account(\"MY_TOKEN\")\n", "intent": "After generating your API token, call:\n"}
{"snippet": "print(\"Hello From Quantum World :-)\")\n", "intent": "<h3> Python Test </h3>\n"}
{"snippet": "result = job.result()\ncounts = result.get_counts()\nprint(counts)\n", "intent": "<h4> Check the result </h4>\n"}
{"snippet": "i = 10\nwhile i>0: \n    print(i)\n    i = i - 1   \n", "intent": "<h4> While-loop </h4>\n"}
{"snippet": "A =[\n    [1,2,3],\n    [-2,-4,-6],\n    [3,6,9]\n]\nprint(A)\nprint()\nfor list in A:\n    print(list)\n", "intent": "<a id=\"Double_list\"></a>\n<h3> Double list </h3>\n"}
{"snippet": "M = [\n    [-2,3,0,4],\n    [-1,1,5,9]      \n]\nN =[\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n]\n", "intent": "<h3> Task 2 </h3>\nCalculate $ M^T $ and $ N^T $ in python.\nPrint all matrices and verify the correctness of your outcome.\n"}
{"snippet": "circuit.h(q[0])\njob = execute(circuit, backend)\nstate = job.result().get_statevector(circuit)\nprint(\"After a Hadamard gate\")\nplot_bloch_multivector(state)\n", "intent": "After the Hadamard gate:\n"}
{"snippet": "wave = thinkdsp.read_wave('105977__wcfl10__favorite-station.wav')\nwave.unbias()\nwave.normalize()\nwave.make_audio()\n", "intent": "The previous example gives some insight into how AM works.\nFirst I'll load a recording that sounds like AM radio.\n"}
{"snippet": "initialize = [['x', '1']]\nsuccess_condition = {'ZI': 0.0, 'IZ': 0.0}\nallowed_gates = {'0': {'x': 0, 'z': 0, 'h': 0}, '1': {'x': 0, 'z': 0, 'h': 0}, 'both': {}}\nvi = [[], True, False]\nqubit_names = {'0':'qubit 0', '1':'qubit 1'}\npuzzle = hello_quantum.run_game(initialize, success_condition, allowed_gates, vi, qubit_names)\n", "intent": "* Now you know the basic tools, you can tackle both qubits at once.\n*  Make both bottom outputs random.\n"}
{"snippet": "grid.plot(probs=probs)\n", "intent": "Now we can display these probabilities on our image of the device.\n"}
{"snippet": "IBMQ.load_accounts()\n", "intent": "We are almost set to run the program on a real quantum computer.\n"}
{"snippet": "import numpy as np\nfrom qiskit import IBMQ, QuantumCircuit, ClassicalRegister, QuantumRegister, execute\nfrom qiskit.tools.visualization import plot_histogram, plot_state_city\nn=3\n", "intent": "We then need to decide the number of qubits $n$ to represent the walker's state (the whole circuit requires $n+1$ qubits).\n"}
{"snippet": "job = execute(circuits, backend=backend, shots=shots)\nresults = job.result()\nprint(\"Experimental Result of Encode010DecodeFirst\")\nplot_histogram(results.get_counts(circuits[circuitNames.index(\"Encode010DecodeFirst\")]))\nprint(\"Experimental Result of Encode010DecodeSecond\")\nplot_histogram(results.get_counts(circuits[circuitNames.index(\"Encode010DecodeSecond\")]))\nprint(\"Experimental Result of Encode010DecodeThird\")\nplot_histogram(results.get_counts(circuits[circuitNames.index(\"Encode010DecodeThird\")]))\n", "intent": "Now, we can perform various experiments of $(3,1)$-QRAC. Below, we execute all circuits of QRACs and plot some experimental results. \n"}
{"snippet": "counts_exp = result_exp.get_counts(qc)\nplot_histogram([counts_exp,counts])\n", "intent": "Like before, the counts from the execution can be obtained using ```get_counts(qc)``` \n"}
{"snippet": "IBMQ.load_accounts()\n", "intent": "now load up every account stored to disk\n"}
{"snippet": "job = backend.retrieve_job(ran_job.job_id())\n", "intent": "Then the job can be retreived using `retrieve_job(job_id())` method\n"}
{"snippet": "num_jobs = 5\nmy_jobs = []\nfor j in range(num_jobs):\n    my_jobs.append(execute(qc, backend))\n    job_monitor(my_jobs[j], monitor_async=True)\n", "intent": "Here we will monitor many jobs sent the the device.  It is best if the jobs are stored in a list to make retrevial easier.\n"}
{"snippet": "spectrum = wave.make_spectrum()\nspectrum.plot()\n", "intent": "Here's what the spectrum looks like:\n"}
{"snippet": "my_style = {'compress': True}\ndrawer(circuit, style=my_style)\n", "intent": "You can reduce redundant gaps between gates by `compress` key.\n"}
{"snippet": "def input_state(circ, q, n):\n    for j in range(n):\n        for k in range(j):\n            circ.cu1(math.pi/float(2**(j-k)), q[j], q[k])\n        circ.h(q[j])\n", "intent": "Here we provide another example, which is the Quantum Fourier transform. These can be loaded directly by using \n```import qiskit.tools.qi as qi```\n"}
{"snippet": "def check_power_of_2(numb):\n", "intent": " If I pass in a value of 1, 2, 4, 8, 16 ... it should return True.  Otherwise, it should return False.\n"}
{"snippet": "a = ('Michael Keaton', 'Batman', 1989, 7.6)\nactor, movie, year, rating = a\nprint(actor)\nprint(movie)\nprint(year)\nprint(rating)\n", "intent": "<b>Tuple packing and unpacking</b>\n"}
{"snippet": "letters = list('abcdefgh')\nfor i, letter in enumerate(letters):\n    print(\"index = \", i, \"value = \", letter)\n", "intent": "<b>`enumerate`</b> is really useful in flow control if one wants a built in index.\n"}
{"snippet": "people = ['Joshua Richardson', 'Wei Ling', 'Sarah McKearny', 'Matthias Strauch']\n", "intent": "**Adding a *function* to the sorting process**\nYou can\n* sort by built-in functions\n* sort by custom functions\n"}
{"snippet": "a2d = np.array([range(5), range(5, 10), range(10, 15)])\na2d = np.arange(15).reshape(3, 5)\na2d\n", "intent": "<b>Using `reshape()`</b>\n* Will conform a 1D array to an ND array\n"}
{"snippet": "token_type_ratio = len(text6)/len(set(text6))\nprint(\"Token to Type Ratio is\",token_type_ratio)\n", "intent": "* Let us try to compute the measure of lexical richness aka the token to type ratio\n"}
{"snippet": "fdist_text6 = FreqDist([len(word) for word in text6])\nprint(fdist_text6)\nprint('-----')\nprint(fdist_text6.keys())\n", "intent": "* We can count the number of characters in each word of the text using list comprehensions.\n"}
{"snippet": "carrier_sig = thinkdsp.CosSignal(freq=10000)\ncarrier_wave = carrier_sig.make_wave(duration=wave.duration, framerate=wave.framerate)\n", "intent": "Amplitude modulation works my multiplying the input signal by a \"carrier wave\", which is a cosine, 10 kHz in this example.\n"}
{"snippet": "datetime.strptime('20170829', '%Y%m%d')\n", "intent": "Convert a string into a datetime object:\n"}
{"snippet": "res_sa.mc.state_values = 0:100\nnyrs = 15\nspath_sa = simulate(res_sa.mc,nyrs+1,init = sbar + 1)\n", "intent": "Simulate the controlled markov chain:\n"}
{"snippet": "v_init = [0, 0]  \nres = ddp.solve(method='policy_iteration', v_init=v_init)\n", "intent": "We solve the model first by policy iteration,\nwhich gives the exact solution:\n"}
{"snippet": "is_nash(g_MP, ([0.5, 0.5], [0.5, 0.5]))\n", "intent": "For this game, we know that `([0.5, 0.5], [0.5, 0.5])` is a (unique) Nash equilibrium.\n"}
{"snippet": "mc1 = MarkovChain(P)\n", "intent": "Create a MarkovChain instance:\n"}
{"snippet": "simulate(mc1, 50, init=2)'\n", "intent": "Start with state `2`:\n"}
{"snippet": "inits = [4, 5, 6]\nt = 10\nps = []\nfor init in inits\n    p = draw_histogram(cross_sectional_dist(mc1, t, init=init),\n                   title=\"Initial state = $init\",\n                   xlabel=\"States\")\n    push!(ps, p)\nend\nplot(ps..., layout=(1, length(inits)))\n", "intent": "For initial states `4`, `5`, and `6`:\n"}
{"snippet": "for i in 1:d\n    println(\"psi^$i P_$i =\")\n    println(psi_s[i]' * P_blocks[i])\nend\n", "intent": "Verify that $\\psi^{i+1} = \\psi^i P_i$:\n"}
{"snippet": "contours_df = DataManager.load_annotation_v4(stack='MD585', by_human=True, \ntimestamp='latest', suffix='contours', annotation_rootdir=ANNOTATION_THALAMUS_ROOTDIR)\n", "intent": "Check contour files\n"}
{"snippet": "def remove_users(words):\n    words = [re.sub('@.*', '', word) for word in words]\n    return [word for word in words if word is not '']\n", "intent": "Similary, remove all words that indicate users (begins with the @ character).\n"}
{"snippet": "import numpy as np\nA = np.asarray([[1,2],\n                [4,5],\n               [3,5]])\nB = np.asarray([[3,4,6],\n                [4,5,7],\n                ])\n", "intent": "1. 7.1 1-15 (odd)\n2. 7.2 1-22 (odd)\n"}
{"snippet": "import numpy as np\na12 = np.array([[-2,-4,7],[1,2,16]])\nb12 = np.array([[-6],[3]])\na14 = np.array([[5,-10],[3,1],[-1,6]])\nb14 = np.array([[2],[13],[6]])\na16 = np.array([[0,2,1],[2,3,-1],[5,-4,3]])\nb16 = np.array([[-1],[-12],[32]])\na18 = np.array([[-1,4,-2],[3,4,6],[1,-2,2]])\nb18 = np.array([[1],[1],[-0.5]])\n", "intent": "`1.` Create matrices representing the linear systems\n"}
{"snippet": "s_e = std_nike / sqrt(100)\n", "intent": "Ho = average drive = average nike\nHa average drive != average nike (two sided)\n"}
{"snippet": "import os\nimport random\nuser = os.environ['USER']\nbucket_name = user + str(int(random.random()*1000))\nbucket_name = bucket_name.lower()\nprint bucket_name\nbucket = conn.create_bucket(bucket_name)\nprint bucket\n", "intent": "- Create new bucket.\n"}
{"snippet": "from IPython.display import YouTubeVideo\nYouTubeVideo('bcjSe0xCHbE')\n", "intent": "---\nMapReduce Example\n---\n"}
{"snippet": "f = bucket.get_key('file.txt')\nprint (f.get_contents_as_string())\n", "intent": "Q: How can I get a file from a bucket?\n- Get file.\n"}
{"snippet": "def rev_recrusion(string):\n    return string[-1] + rev_recrusion(string[:-1]) if string else \"\"\n", "intent": "What about using recursion?\n"}
{"snippet": "YouTubeVideo(\"ggDQXlinbME\")\n", "intent": "Monty Hall Problem\n-----\n"}
{"snippet": "st = [\"hi\", \"there\", \"sam!\"]\n", "intent": "** Split this string:**\n    s = \"Hi there Sam!\"\n**into a list. **\n"}
{"snippet": "modulated.make_audio()\n", "intent": "The result sounds pretty horrible.\n"}
{"snippet": "len(set(poem.lower().replace(\",\",\"\").split()))\n", "intent": "Remove commas and check the number of unique words again. Why is it different?\n"}
{"snippet": "print(\"original list was:\", country_list)\ndel country_list[3]\nprint(\"the list is now:\", country_list)\n", "intent": "* `del list_name[index]` removes an item from a list and shortens the list.\n* Not a function or a method, but a statement in the language.\n"}
{"snippet": "total = 0\nfor word in [\"red\", \"green\", \"blue\"]:\n    ____ = ____ + len(word)\nprint(total)\n", "intent": "Fill in the blanks in each of the programs below\nto produce the indicated result.\n"}
{"snippet": "def pressure(value):\n    print('pressure is', str(value))\nprint(pressure, 22.5)\n", "intent": "What does the following program print? Why?\n"}
{"snippet": "letters = ['s', 'p', 'a', 'm']\n", "intent": "Read the help file for the `join` method. \nUsing the join method, concatenate all the values in this list into one string:\n"}
{"snippet": "new_poets_dict = poets_dict\npoets_dict[\"language\"] = \"Persian\"\nprint(\"new dict: \", new_poets_dict[\"language\"])\nnew_poets_dict[\"language\"] = \"Farsi\"\nprint(\"first dict: \", poets_dict[\"language\"])\n", "intent": "Remember, this means that if you assign this dictionary to a new variable, a change to either variable will change the dictionary.\n"}
{"snippet": "from some.deep.module.inside.a.module import a_nice_function, another_nice_function, \\\n    yet_another_nice_function\n", "intent": "Or a backslash, although this is not as recommended:\n"}
{"snippet": "examine_dictionaries = []\nfor _____ in examine:\nreject_dictionaries = []\nfor _____ in reject:\n", "intent": "Now write a program that does the same for the `examine` and `rejected` lists:\n"}
{"snippet": "[i for i in (1:7).^2]\n", "intent": "**Explore**: What does the following do? \n"}
{"snippet": "demodulated = modulated * carrier_wave\n", "intent": "To recover the signal, we modulate it again.\n"}
{"snippet": "pop!(myphonebook, \"Kramer\")\n", "intent": "We can delete Kramer from our contact list - and simultaneously grab his number - by using `pop!`\n"}
{"snippet": "palette = distinguishable_colors(100)\n", "intent": "Let's create a palette of 100 different colors\n"}
{"snippet": "println(\"Is Asym symmetric? \", issymmetric(Asym))\nprintln(\"Is Asym_noisy symmetric? \", issymmetric(Asym_noisy))\n", "intent": "Can Julia determine that both `Asym` and `Asym_noisy` are symmetric matrices?\n"}
{"snippet": "testLabels = readtable(\"$(path)/testLabels.csv\")\ntestLabels = testLabels[1:1000,:]\n", "intent": "Let's read the test labels now. \n"}
{"snippet": "v1 = [5,6,2,4,3,3,4,16]\nv1.sort()  \nprint v1\nv1.sort(reverse=True) \nprint v1\nl = [\"this\",\"is\",\"a\",\"list\"]\nl.reverse() \nprint l\n", "intent": "Lists can be sorted:\n"}
{"snippet": "a = [[1,2,3,4,5] for _ in range(4)]\npprint(a)\na[0][0] = 9\npprint(a)\n", "intent": "Solution without using np : less intuitive : the loop generate different objects taking same array as value\n"}
{"snippet": "print(\" Michael Jackson \\t is the best\" )\n", "intent": "Similarly, back slash  \"t\" represents a tab: \n"}
{"snippet": "Ratings  =(0,9,6,5,10,8,9,6,2)\n", "intent": " Consider the following tuple:\n"}
{"snippet": "A=[\"disco\",10,1.2]\nprint('Before change:', A)\nA[0]='hard rock'\nprint('After change:', A)\n", "intent": "As lists are mutable, we can change them. For example, we can change the first element as follows:\n"}
{"snippet": "demodulated_spectrum = demodulated.make_spectrum(full=True)\ndemodulated_spectrum.plot()\n", "intent": "Each half of the spectrum gets split and shifted again.  Two of the quarters get shifted to 0 and added up.  The other two are at $\\pm$20Khz\n"}
{"snippet": "album_set2.difference(album_set1)  \n", "intent": "The difference between **album_set2** and **album_set1** is given by:\n"}
{"snippet": "dates = [1982,1980,1973]\nN=len(dates)\nfor i in range(N):\n    print(dates[i])     \n", "intent": "This can be done as follows:\n"}
{"snippet": "from plot_utils import plot_blackjack_values\nV_glie = dict((k,np.max(v)) for k, v in Q_glie.items())\nplot_blackjack_values(V_glie)\n", "intent": "Next, we plot the corresponding state-value function.\n"}
{"snippet": "x = -15\nif not x:\n    print(x, \"is zero\")\nelif x > 0:\n    print(x, \"is positive\")\nelif x < 0:\n    print(x, \"is negative\")\nelse:\n    print(x, \"is unlike anything I've ever seen...\")\n", "intent": "To execute certain pieces of code depending on some Boolean condition:\n"}
{"snippet": "L = [1, 2, 3]\nL[1000]\n", "intent": "Or maybe you're trying to access a sequence element that doesn't exist:\n"}
{"snippet": "L = [2, 4, 6, 8, 10]\nR = [3, 6, 9, 12, 15]\nfor lval, rval in zip(L, R):\n    print(lval, rval)\n", "intent": "Other times, you may have multiple lists that you want to iterate over simultaneously.\n"}
{"snippet": "{a % 3 for a in range(1000)}\n", "intent": "The set comprehension eliminates any duplicate entries:\n"}
{"snippet": "num = \"000000000000435\"\nnum.strip('05')\n", "intent": "To remove characters other than spaces, you can pass the desired character to the ``strip()`` method:\n"}
{"snippet": "email = re.compile(r'\\w+@\\w+\\.[a-z]{3}')\n", "intent": "With these basics in mind, let's return to our email address matcher:\n"}
{"snippet": "demodulated.make_audio()\n", "intent": "If you listen to it now, it sounds pretty good.  You probably can't hear the extra components at high frequencies.\n"}
{"snippet": "astronauts = [\"Yuri Gagarin\", \"John Glenn\", \"Neil Armstrong\"]\n", "intent": "Suppose we have a list of astronauts.\n"}
{"snippet": "a = \"This\"\na = a + \" is a string\"\nprint(a)\n", "intent": "The \"+\" operator and \"\\*\" operator are overloaded for strings.\n"}
{"snippet": "s1 = \"Hello\"\ns2 = \"Hi\"\n", "intent": "Write a code fragment that given two strings prints true if the length of each string is greater than 3.\n"}
{"snippet": "latLong[[\"Havanna\",\"New York\"]] = (23.7, -52.4)\n", "intent": "Keys must also be immutable, for example ints, strings or tuples would make accpetable keys, but lists would not.\n"}
{"snippet": "b[0][0] = 8\nprint(b)\n", "intent": "Note that arrays are mutable. For example we can modify an element of `b`.\n"}
{"snippet": "c = a.tolist()\ntype(c)\n", "intent": "It's possible to convert from a list to an array or vice versa. NumPy arrays provide the method `tolist()` which converts an array to a list.\n"}
{"snippet": "class Board:\n    def __init__(self):\n        self._board = np.array([[\"-\",\"-\",\"-\"],[\"-\",\"-\",\"-\"],[\"-\",\"-\",\"-\"]])\n    def __str__(self):\n        b_string = str(self._board)\n        b_string = b_string.replace(\"[\",\"\")\n        b_string = b_string.replace(\"]\",\"\")\n        b_string = b_string.replace(\"\\'\",\"\")\n        b_string = b_string.replace(\"\\n \",\"\\n\")\n        return b_string\n", "intent": "This is close to what we want, but we will have to clean it up a bit.\n"}
{"snippet": "  SELECT name, gpa\n    FROM Students\n   WHERE gpa > (SELECT avg(gpa) from Students)    -- avg(gpa)\nORDER BY name;    \n", "intent": "We can combine query-1 and query-2 into a single query as\n"}
{"snippet": "mydic2 = {'Amos':4, 'Paul':5, 'Carlos':6}\nmydic.update(mydic2)\nprint mydic\n", "intent": "Note: the update function takes the dictionary you want to merge in as a variable.\n"}
{"snippet": "wave.plot()\ndemodulated.plot()\n", "intent": "If we compare the input and output signals, they are pretty close.\n"}
{"snippet": "print('Floating point nunber:', \"%8.2f\"% (13.145)) \n", "intent": "Python 3 formatting examples: http://www.python-course.eu/python3_formatted_output.php\n"}
{"snippet": "live_next = np.nonzero( (ywy==2) + (ywy==3) + (dw3==3) )\n", "intent": "Rules 1 and 2 give us the surviving cells\n"}
{"snippet": "reg4 = pysal.spreg.OLS_Regimes(y,x,regimes,w=w,spat_diag=True,moran=True,\nconstant_regi='one',regime_err_sep=False,name_y=y_name,name_x=x_names,\nname_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "with regime_err_sep=False, i.e. homoskedasticity\n"}
{"snippet": "reg5 = pysal.spreg.GM_Lag_Regimes(y,x,regimes,w=w,spat_diag=True,\nconstant_regi='one',cores=False,name_y=y_name,\nname_x=x_names,name_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "**constant_regi='one'**\n"}
{"snippet": "ols6 = pysal.spreg.OLS(y,x,robust='hac',gwk=kw,\n                       name_y=y_name,name_x=x_names,\n                       name_gwk='baltim_tri_k12',name_ds='baltim.shp')\n", "intent": "set **robust = 'hac'**, specify the kernel weights **gwk = kw** and give a name for the weights in **name_gwk**\n"}
{"snippet": "w = pysal.queen_from_shapefile('data/natregimes.shp',idVariable=\"FIPSNO\")\n", "intent": "**Creating the model weights, queen contiguity for natregimes.shp**, using FIPSNO as the ID variable\n"}
{"snippet": "reg1a = pysal.spreg.GM_Lag(y,x,w=w,robust='hac',gwk=kw,spat_diag=True,\n                          name_y=y_name,name_x=x_names,\n                          name_w='south_k6',name_gwk=\"south_quad_12\",name_ds='south')\n", "intent": "spatial two stage least squares using k=6 nearest neighbors, with HAC standard errors\n"}
{"snippet": "btot = b / (1.0 - rho)\n", "intent": "total effect using the multiplier\n"}
{"snippet": "def get_mean_r(names, values, target_taxon = 'Fish'):\n    n = len(names)\n    mean_r = 0.0\n    sample_size = 0\n    for i in range(n):\n        if names[i] == target_taxon:\n            mean_r = mean_r + values[i]\n            sample_size = sample_size + 1\n    return mean_r / sample_size\n", "intent": "Now we write a function that, given a list of taxa names and corresponding `r` values, calculates the mean `r` for a given category of taxa:\n"}
{"snippet": "filtered = demodulated_spectrum.make_wave()\nfiltered.make_audio()\n", "intent": "Here's what it sounds like after filtering.\n"}
{"snippet": "if a < 5:\n    a = a + 1\n", "intent": "it is more common to write:\n"}
{"snippet": "birthday_lists = {'Carlos': [\"trains\", \"planes\", \"automobiles\"], 'Samantha': [\"mountain bike\", \"suit case\", \"plane ticket to Utah\"], 'Bryan': [\"Working response code\", \"new laptop\"]}\n", "intent": "The values stored in the dictionary can be of almost any type, including lists. For example:\n"}
{"snippet": "def multiples(a,b):\n    c = a    \n    while c < b:   \n        print(c)    \n        c = c + a    \n", "intent": "Write a function that takes two numbers a and b, and prints all multiples of a that are less than b.\n"}
{"snippet": "help(bryansLibrary)\n", "intent": "Yay, it worked. Just for fun, lets see what help() returns for our library.\n"}
{"snippet": "scores = [89,77,100,95,88]\nscores.remove(89)\nprint(scores)\n", "intent": "II. If you know only the value of the element you want to remove, you can use the remove() method\n"}
{"snippet": "my_sum=0\na = 1                       \nwhile a**2 < 1000:          \n    my_sum = my_sum + a**2  \n    a = a + 1               \nprint(my_sum)                  \n", "intent": "Write a loop to sum all perfect squares less than 1000.\n"}
{"snippet": "ned.home()\nned.clear()\nned.dot(50,(1,0,1))\nned.penup()\nned.forward(50)\n", "intent": "This will draw a regular shape using built in commands.\n"}
{"snippet": "atom_radius = 50\natom_color = \"red\"\natom.shape('circle')\natom.shapesize(atom_radius/10.0)\natom.color(atom_color)\natom.penup()\n", "intent": "Now lets draw our atom as a sphere with a fixed radius and color.\n"}
{"snippet": "print velocity_list[0][0]\n", "intent": "Now how would we access the x_velocity component here? We'd use another set of square brackets!\n"}
{"snippet": "convolved = spectrum.convolve(carrier_spectrum)\nconvolved.plot()\n", "intent": "As we saw in the beep example, convolution with impulses makes shifted, scaled copies.\n"}
{"snippet": "df.filter('age >= 25').show()\n", "intent": "`.filter()` takes in either (i) a `Column` of `types.BooleanType` or (ii) a string of SQL expression.\n"}
{"snippet": "'This doesn't work'\n", "intent": "Strings which contain a single quotation mark must be enclosed by double quotation marks:\n"}
{"snippet": "print(True or False)\n", "intent": "<code>or</code> returns <code>True</code> if at least one expression evalutes to <code>True</code>:\n"}
{"snippet": "print(allData[0][1])\n", "intent": "We can then access the items inside the list at index 0 in allData by adding another square bracket:\n"}
{"snippet": "var3 = testScores1.values()\nvar3[0]\n", "intent": "Once again, we can't index or slice this object without turning it into a list:\n"}
{"snippet": "for k, v in data.items():\n    print(k, v)\n", "intent": "We can loop through them both together:\n"}
{"snippet": "trace1 = {'type' : 'scatter',\n        'x' : [0,1,2,3,4,5,6,7,8,9],\n        'y' : [0,1,2,3,4,5,6,7,8,9],\n        'name' : 'trace1',\n        'mode' : 'lines'}\n", "intent": "Finally, we'll tell Plotly to only display the lines on the chart - we don't want it to show any scatter points.\n"}
{"snippet": "fig = Figure(data = data, layout = layout)\npyo.iplot(fig)\n", "intent": "Now, let's refresh the chart again by recreating the Figure object and plotting it:\n"}
{"snippet": "stocks = py.get_figure(\"https://plot.ly/~rmuir/162/stock-closing-prices-for-apple-in-2012/\")\n", "intent": "We'll get the same chart as in the last lesson; there's still a few tweaks that we need to make to it before it's ready to be published:\n"}
{"snippet": "reconvolved = convolved.convolve(carrier_spectrum)\nreconvolved.plot()\n", "intent": "After one convolution, we have two peaks.  After two convolutions, we have four.\n"}
{"snippet": "stocks['layout'].update({'yaxis' : {'range' : [0, maximum], 'title' : 'Closing Price', 'tickformat' : \"$.0\"}})\npyo.iplot(stocks)\n", "intent": "Let's change the tickformat to something sensible and update the y-axis title then update our chart.\n"}
{"snippet": "py.plot(gapMinder, filename=\"Life expectancy and GPD per capita\", fileopt=\"overwrite\")\npy.plot(lifeExp, filename=\"Life expectancy against cost of cigarettes (Male & Female regressions)\", fileopt=\"overwrite\")\n", "intent": "Great, these two plots are looking much better. Let's send them to the PLotly cloud:\n"}
{"snippet": "stacked['layout']['legend'].update({'x' : -2})\npyo.iplot(stacked)\n", "intent": "By setting the x-value to the minimum (-2), the same happens, but the legend moves to the left instead.\n"}
{"snippet": "py.plot(ethPie, filename=\"Ethnicity of UK students (styled)\", fileopt = \"overwrite\")\n", "intent": "Changing these parameters is a very easy way of making some big changes to the presentation of the chart. Let's send this to the Plotly cloud:\n"}
{"snippet": "eth = py.get_figure(\"rmuir\", 267)\npyo.iplot(eth)\n", "intent": "Let's try this out. I'm going to load a pie chart that we've created in this section and append the trace to the data object in the figure:\n"}
{"snippet": "data = afx_2017_dict['dataset']['data']\nopening = []\nfor i in data:\n    if i[1] != None:\n        opening.append(i[1])\nmax_open = max(opening)\nmin_open = min(opening)\nprint('Max opening price in 2017: ', max_open)\nprint('Min opening price in 2017: ', min_open)\n", "intent": "Task 3) Calculate what the highest and lowest opening prices were for the stock in this period.\n"}
{"snippet": "def some_function(a):\n    return a*5, a*2\nx, y = some_function(5)\nprint(x)\n", "intent": "To return multiple values, use commas:\n"}
{"snippet": "def merge_sort( myList ):\n    n = len(myList) \n    if n is 1:\n        return myList\n    first = myList[:n//2]\n    second = myList[n//2:]\n    first = merge_sort( first )\n    second = merge_sort( second )\n    return merge(first, second)\n", "intent": "Now comes the main Merge Sort function\n"}
{"snippet": "from IPython.display import IFrame\nIFrame('http://pythontutor.com/iframe-embed.html\n", "intent": "Visualize the step-by-step working of code [here](https://goo.gl/D9GGUd).\n"}
{"snippet": "wave.make_spectrum(full=True).plot()\n", "intent": "And here's the spectrum:\n"}
{"snippet": "query_url = f\"{url}appid={api_key}&q={city}&units={units}\"\nweather_response = requests.get(query_url)\nweather_json = weather_response.json()\n", "intent": "try to refactor this to use params\n"}
{"snippet": "session.query(Dow.date).\\\n    filter(Dow.date > '2011-03-01').\\\n    order_by(Dow.date).all()\n", "intent": "Find all of the dates great than `2011-03-01`\n"}
{"snippet": "def f(x):\n    result = x ** 2 + 3\n        return result\n", "intent": "Equally, we can't intend by too much:\n"}
{"snippet": "beatles[1] = \"JohnYoko\"\nbeatles\n", "intent": "Lists (in contrast to strings) are mutable. \nThat means **we can change the elements that are contained in a list**: \n"}
{"snippet": "for i in range (0, -20, -3):\n    print(i)\n", "intent": "The range function also takes other parameters, specifically a \"start\", \"stop\" and a \"step-size\" parameter.\n"}
{"snippet": "re.search(r\"^\", \"datascience^2\").group()\n", "intent": "Special characters do not match themselves because they are part of the language. These are `. ^ $ * + ? { [ ] \\ | ( )`.\n"}
{"snippet": "re.search(r'\\d\\s*\\d\\s*\\d', 'xx1 2   3xx').group()\n", "intent": "`*` matches 0 or more occurrences of the pattern on its left\n"}
{"snippet": "re.search(r\"[2-9]+\", \"0123405\").group()\n", "intent": "You can also define custom character sets by specifying a range with a dash: \n"}
{"snippet": "x, y = 50, 25\nsmall = x if x < y else y\nsmall\n", "intent": "[on_true] if [expression] else [on_false]\n"}
{"snippet": "def remove_links(words):\n    words = [re.sub('http.*', '', word) for word in words]\n    return [word for word in words if word is not '']\n", "intent": "We also want to remove all hyperlinks.\n"}
{"snippet": "l = [1,2,3,4]\nl[::-1]\n", "intent": "**Problem 8: Reverse the list below:**\n"}
{"snippet": "def full_board_check(board):\n    for i in range(1,10):\n        if space_check(board,i):\n            return False\n    return True\n", "intent": "**Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.**\n"}
{"snippet": "C2 = sp.symbols('C2', positive=True)\nbeltramiODE = sp.Eq(Lsoapfilm - y(x).diff(x)*Lsoapfilm.diff(y(x).diff(x)),C2)\nbeltramiODE.simplify()\n", "intent": "We can therefore write:\n"}
{"snippet": "from pandas.io import sql\ndf=pd.read_sql(\"SELECT * FROM fields1\",con=connection)\n", "intent": "Import each of the 3 tables to a Pandas Dataframes\n"}
{"snippet": "shakeWordsRDD = shakespeareWordsRDD.filter(lambda x:x!='')\nshakeWordCount = shakeWordsRDD.count()\nprint shakeWordCount\n", "intent": "** (4e) Remove empty elements **\nThe next step is to filter out the empty elements.  Remove all entries where the word is `''`.\n"}
{"snippet": "fieldnames(typeof(a))\n", "intent": "However, it is not an `Array`. In fact, it's just two numbers. We can see this by looking at its fields:\n"}
{"snippet": "a = Vector{Union{Float64,Int}}(undef,3)\na[1] = 1.0\na[2] = 3\na[3] = 1/4\na\n", "intent": "A less extreme form of an abstract type is a Union type, which is just what it sounds like. For example:\n"}
{"snippet": "total = 0\nfor i in range(101):\n    total = total + i ** 2\ntotal\n", "intent": "<span style=\"color:green\">Calculate the total of the squared value of each of the first 100 positive integers.</span>\n"}
{"snippet": "a = [1, 2, 3]\nL = [4, 5, 6]\na[len(a):]\n", "intent": "* Add elements from a list L to the end of another list at least three different ways.\n"}
{"snippet": "sampled.make_spectrum(full=True).plot()\n", "intent": "If we look at the spectrum, we can see the extra components.\n"}
{"snippet": "random.random() \nfor num in range(10):\n    print(random.random())\n", "intent": "* random.Random() returns a uniform distribution.\n* There are other distributions as well.\n"}
{"snippet": "from functools import reduce\ndef digits_to_num(digits):\n    return reduce(lambda x, y: x * 10 + y, digits)\n", "intent": "Use reduce to take a list of digits and return the number that they\ncorrespond to. *Do not convert the integers to strings!* \n"}
{"snippet": "l = [3,4,2,5,1]\nl.sort()\nprint(l)\n", "intent": "**Problem 9: Sort the list below**\n"}
{"snippet": "def ran_bool(num,low,high):\n    return low < num < high\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "x = np.arange(-10, 10, .001)\na = np.array([x*x*x, x*x*x])\nu = np.array([-2., 2.])\ne = np.array([0.0, 0.1])\nq = stats.norm.pdf(x, loc=0, scale=1)\ndual = me.MaxEntDual(q, a, u, e)\nres = minimize(dual.dual, np.zeros(len(u)), jac=dual.grad, method=\"BFGS\")\nprint res\npdf = dual.dist(res.x)\nprint \"\\n\\n Skewness E[x^3] = \", sum(x*x*x*pdf)\n", "intent": "We can introduce the error bound to meet either constraint.\nFor example, if we choose the first one:\n"}
{"snippet": "l1 = [0, 0, 0]\nl2 = [0] * 3\nprint 'the lists: {}, {}'.format(l1, l2)\n", "intent": "Build this list [0,0,0] two separate ways.\n"}
{"snippet": "for item in x:\n    print(cube(item))\n", "intent": "For example you may want to cube every item\n"}
{"snippet": "def new_func(numb):\n    if numb < 10:\n        return numb**3\n    else:\n        return numb**2\n", "intent": "Define a function named new_func that cubes the value if it is less than 5 and squares it if it is greater or equal to 5.\n"}
{"snippet": "q10_df = pd.read_sql(q10_qry, conn)\nq10_df\n", "intent": "Produce a count of the number of facilities that have a cost to guests of 10 or more.\n"}
{"snippet": "sampled = wave * impulses\nsampled.make_audio()\n", "intent": "Multiplying by `impulses` has the same effect as `sample`.\n"}
{"snippet": "root.find('Book[@Weight=\"1.5\"]/Authors/Author/First_Name').text\n", "intent": "<h4>Using values of attributes as filters</h4>\n<li>Example: Find the first name of the author of a book that weighs 1.5 oz\n"}
{"snippet": "time_now=datetime.datetime.now().time() \nprint(time_now)\nthirty_seconds=datetime.timedelta(seconds=30)\ntime_later=time_now+thirty_seconds\n", "intent": "<li>But you can't use timedelta on time objects. If you do, you'll get a TypeError exception\n"}
{"snippet": "model = lme(Accuracy.50~Frontal_Sup_L+Frontal_Sup_R+Frontal_Sup_Orb_L+Frontal_Sup_Orb_R\n             +Frontal_Mid_L+Frontal_Mid_R+Frontal_Mid_Orb_L+Frontal_Mid_Orb_R+Frontal_Inf_Oper_L+Frontal_Inf_Oper_R+Frontal_Inf_Tri_L+Frontal_Inf_Tri_R\n             +Frontal_Inf_Orb_L+Frontal_Inf_Orb_R+Supp_Motor_Area_L+Supp_Motor_Area_R+Frontal_Sup_Medial_L+Frontal_Sup_Medial_R\n             +Insula_L+Insula_R+Cingulum_Ant_L+Cingulum_Ant_R+Cingulum_Mid_L+Cingulum_Mid_R+Precentral_L+Precentral_R,random=~1|PID,data=data_50,method='ML',weights = varIdent(form = ~1 | PID))\n", "intent": "not exactly sure how to do this.. \n"}
{"snippet": "model = lm(Accuracy.50.mean~Info.type+Region,data=data_50_mean)\nsummary(model)\nanova(model)\n", "intent": "using a fixed effects model, the conclusions are similar though orbitofronal has a stronger effect. \n"}
{"snippet": "mtpl = [(1,2),(2,)]\n", "intent": "mtpl = [(1,2),(2,)]\n"}
{"snippet": "fields = c.execute(\"SELECT sql from sqlite_master WHERE type='table' and name='EmployeeBase';\").fetchall()\nprint ''.join(fields[0])\nfields = c.execute(\"SELECT sql from sqlite_master WHERE type='table' and name='MessageBase';\").fetchall()\nprint ''.join(fields[0])\nfields = c.execute(\"SELECT sql from sqlite_master WHERE type='table' and name='RecipientBase';\").fetchall()\nprint ''.join(fields[0])\n", "intent": "Query the `sqlite_master` table to retrieve the schema of the `EmployeeBase` table.\n1. What fields are there?\n1. What's the type of each of them?\n"}
{"snippet": "l_one = [1,2,[3,4]]\nl_two = [1,2,{'k1':4}]\nl_one[2][0] >= l_two[2]['k1']  \n", "intent": "Final Question: What is the boolean output of the cell block below?\n"}
{"snippet": "s = 'hello'\ns_iter=iter(s)\n", "intent": "Use the iter() function to convert the string below \n"}
{"snippet": "c(1,2,4) + c(5,0,-1)\n", "intent": "Furthermore, vector additions are applied element-wise in all cases\n"}
{"snippet": "impulses.make_spectrum(full=True).plot()\n", "intent": "Now if we look at the spectrum of `impulses`, we can see what's going on in the frequency domain.\n"}
{"snippet": "multiplot(hist_with_kde_numerical_by_category(SalePrice,MoSold),\n          hist_with_kde_numerical_by_category(SalePrice,ExterQual), \n          cols = 2)\n", "intent": "One-way ANOVA handles a special case of this problem, testing for equal group means. \n"}
{"snippet": "def do_something():\n    a = 1\nprint(a)\n", "intent": "In the following example, the variables defined in the function are not available outside the function:\n"}
{"snippet": "'x=' + str(43.2) + ', y=' + str(1./3.)\n", "intent": "We have talked about strings before, and you know that it is possible to construct strings containing values, e.g.\n"}
{"snippet": "a = [2, 3, 4]\nb = a\na.append(5)\nprint(a, b)\n", "intent": "Now consider the following example:   \n"}
{"snippet": "import numpy as np\nx = np.array([0., 1., 3., 4.])\ny = np.array([0., 4., 3., 2.])\n", "intent": "If we create a fake dataset:\n"}
{"snippet": "try:\n    s[1] = 'a'\nexcept ValueError:    \n    print(\"Can't set s[1]\")\n", "intent": "If you catch other errors, TypeError will pass\n"}
{"snippet": "counter = 0\nwhile counter <= 10:\ncounter = counter + 1\nprint(counter)\n", "intent": "Let's take a look at what happens when we forget to indent correctly:\n"}
{"snippet": "Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\nFdegrees = []            \nfor C in Cdegrees:\n    F = (9.0/5)*C + 32\n    Fdegrees.append(F)   \nprint(Fdegrees)\n", "intent": "Rather than just printing out the Fahrenheit values, let's also store these computed values in a list of their own:\n"}
{"snippet": "t = t + (-1.0, -2.0)\nprint(t)\n", "intent": "However, we can use the tuple to compose a new tuple:\n"}
{"snippet": "def plot_segments(original, filtered):\n    start = 1\n    duration = 0.01\n    original.segment(start=start, duration=duration).plot(color='gray')\n    filtered.segment(start=start, duration=duration).plot()\n", "intent": "We can see that the original and the sampled/filtered signal are not the same:\n"}
{"snippet": "t = linspace(1, 30, 30).reshape(5, 6)\nprint(t)\n", "intent": "Play with this more complicated example:\n"}
{"snippet": "for key in sorted(temps):\n    value = temps[key]\n    print(key, value)\n", "intent": "Note that the sequence of keys is **arbitrary**! Never rely on it, if you need a specific order of the keys then you should explicitly sort:\n"}
{"snippet": "strings = [\"Newton\", \"Secant\", \"Bisection\"]\nprint(\", \".join(strings))\n", "intent": "We can join a list of substrings to form a new string. Similarly to *split()* we put strings together with a delimiter inbetween:\n"}
{"snippet": "line = \"2015-12-14T06:29:15.740Z,19.4333324,-155.2906647,1.66,2.14,ml,17,248,0.0123,0.36,hv,hv61126056,2015-12-14T06:34:58.500Z,5km W of Volcano, Hawaii,earthquake\"\nlatitude = line.split(',')[1]\nlongitude = line.split(',')[2]\nprint(\"longitude, latitude = (%g, %g)\"%(longitude, latitude))\n", "intent": "There is first a bracket problem when doing the print:\n"}
{"snippet": "ratings_rdd = ratingsCsvRDD.map(rec_tup)\nratings_rdd.take(5)\n", "intent": "**NOTE**: has to be a 2-tuple in order to use group-by\n"}
{"snippet": "sum_func2 = lambda x, y : x + y      \nsum_func2(5,6)\n", "intent": "- anonymous function\n"}
{"snippet": "grad_vec([x*y*z, x*y*z, x*y*z])\n", "intent": "Let's see a simple example.\n"}
{"snippet": "print('Technique 1:')\nprint('1) Dictionary:', ...)\nprint('2) Dictionary:', ...)\n", "intent": "There are 2 techniques for removing a key and its value.\n"}
{"snippet": "versions = [\"Kodiak\",\"Cheetah\",\"Puma\",\"Jaguar\",\"Panther\",\"Tiger\",\"Leopard\",\"Snow Leopard\",\"Lion\",\"Mountain Lion\",\"Mavericks\",\"Yosemite\",\"El Capitan\",\"Sierra\"]\n...\n", "intent": "You can **loop over a list**. You will get the first, then the second and so forth...\n"}
{"snippet": "wave.make_spectrum(full=True).plot()\n", "intent": "Here's the spectrum.  Not a lot of high frequency components!\n"}
{"snippet": "for x in range(20): \n    result = x % 2\n    print('%d %% 2 = %d' % (x, result))\n", "intent": "Let's make a small loop to see the behavior of the modulus operator\n"}
{"snippet": "if is_ring_destroyed:\n    print('The Ring has been destroyed!')\nelse:\n    print('The journey continues...')\nprint('...')\n", "intent": "**If** a condition is True **then** execute the block code, **otherwise/else** execute the other code block.\n"}
{"snippet": "def increment(x, inc):\n    x += inc\n    return x \na = 0\nprint('1) a =', a) \na = increment(a, 10) \nprint('2) a =', a) \n", "intent": "Okay, if we would like the function to increment x for example, you would need to require the code so that the function returns the new value!\n"}
{"snippet": "get_suggestions(\"there\")\n", "intent": "<div class=\"alert alert-success\">\n  <strong>Enter word to correct below.</strong>\n</div>\n"}
{"snippet": "import random\nrands = [random.random() for _ in range(10)]\n", "intent": "We can, for example use functions in place of a variable. Here we initialize an array of random numbers in the unit interval:\n"}
{"snippet": "piecewise_fold(-laplace(Vh)/(4*pi))\n", "intent": "Charge density is then:\n"}
{"snippet": "@test\ndef matrix3():\n    return diag(ones(2, 3), 1)\n", "intent": "$$\\left[\\begin{array}{}1 & 1 & 1 & 0\\\\\\\\1 & 1 & 1 & 0\\\\\\\\0 & 0 & 0 & 1\\end{array}\\right]$$\n"}
{"snippet": "phi = refine(phi, Q.positive(alpha))\nphi\n", "intent": "Tell SymPy that $\\alpha$ is positive:\n"}
{"snippet": "import sys\nimport os\nsys.path.insert(1, os.path.join(os.path.pardir, \"ipython_doctester\"))\nfrom sympy import *\nfrom ipython_doctester import test\ndef notransform(line): return line\nfrom IPython.core import inputsplitter\ninputsplitter.transform_classic_prompt = notransform\ninit_printing()\n", "intent": "Boilerplate to make the doctester work. \n"}
{"snippet": "sampled = sample(wave, 4)\nsampled.make_spectrum(full=True).plot()\n", "intent": "Here's the spectrum after sampling:\n"}
{"snippet": "for number in range(11):\n    if number % 2 == 0:\n        print (number)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "def count_match_index(L):\n    n = 0\n    for i, item in enumerate (L):\n        if i == item:\n            n += 1\n    return n\n", "intent": "Use enumerate and other skills from above to return the count of the number of items in the list whose value equals its index.\n"}
{"snippet": "for x in range(20):\n        if (x%2 is 0)\n            print(x)\n", "intent": "Write some code that creates a list of integers, loops through each element of the list, and only prints out even numbers!\n"}
{"snippet": "def method1(x):\n    res = []\n    for word in x:\n        length = 0\n        for char in word:\n            length += 1\n        res.append(length)\n    return res\nmethod1(['list', 'of', 'words'])\n", "intent": "1) using a for loop\n"}
{"snippet": "datafile = os.path.join(DATADIR,DATAFILE)  \nprint(datafile)\n", "intent": "__ os.path.join()__ to combine the required path with the filename\n"}
{"snippet": "a = [1,2,3,4,5] \nprint(\"List a : \",a)\n", "intent": "Slicing operation in a numpy array is different from that in a python list.\n"}
{"snippet": "a = np.arange(10,90,5)\na\n", "intent": "Arithmetic operators on arrays apply elementwise. A new array is created and filled with the result.\n"}
{"snippet": "def first_and_last(sequence):\n", "intent": "A common use for tuples is to return multiple values from a function:\n"}
{"snippet": "class Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.next_node = None\n        self.prev_node = None\n", "intent": "For this interview problem, implement a node class and show how it can be used to create a doubly linked list.\n"}
{"snippet": "sampled.make_audio()\n", "intent": "And here's what it sounds like:\n"}
{"snippet": "plate_scale = [(u.arcsec, u.km, lambda x: scale.value * x, lambda x:  x / scale.value)]\n", "intent": "[Define your own equivalency](http://astropy.readthedocs.io/en/stable/units/equivalencies.html\n(from_unit, to_unit, forward, backward)\n"}
{"snippet": "L = [1, 2, 3]\nL.append(100)\nprint(L)\n", "intent": "For example, before we saw that lists have an ``append`` method, which adds an item to the list, and is accessed via the dot (\"``.``\") syntax:\n"}
{"snippet": "for N in [2, 3, 5, 7]: \n    print(N) \n", "intent": "So, for example, if we'd like to print each of the items in a list, we can use a ``for`` loop:\n"}
{"snippet": "def my_pet(your_favourite_animal):\n    print(your_favourite_animal + \" is the best!\")\n    print(\"Congratulations, you have used your first ever python function!\")\n", "intent": "We are going to start with a simple function that just prints out a message.\n"}
{"snippet": "d = {'M':1000, 'D':500, 'C':100, 'L':50, 'X':10, 'V':5, 'I':1}\nclass Solution:\n    def romanToInt(self, s):\n        res,p = 0,'I'\n        for i in s[::-1]:\n            res,p = res-d[i] if d[i]<d[p] else res+d[i],i\n        return res\n", "intent": "Given a roman numeral, convert it to an integer.\nInput is guaranteed to be within the range from 1 to 3999.\n"}
{"snippet": "def makes_twenty(n1,n2):\n    return n1 + n2 == 20 or n1 == 20 or n2 == 20\n", "intent": "    makes_twenty(20,10) --> True\n    makes_twenty(12,8) --> True\n    makes_twenty(2,3) --> False\n"}
{"snippet": "def paper_doll(text):\n    result = []\n    for char in text:\n        result.append(char*3)\n    return ''.join(result)\n", "intent": "    paper_doll('Hello') --> 'HHHeeellllllooo'\n    paper_doll('Mississippi') --> 'MMMiiissssssiiippppppiii'\n"}
{"snippet": "tracks.map(x =>(x.domain, x.total)).take(5).foreach(println)\n", "intent": "map the cassandra table to 2-tuples \n"}
{"snippet": "tracks.map(x =>(x.album_title, x.track_title)).\n   take(5).foreach(println)\n", "intent": "map the cassandra table to 2-tuples \n"}
{"snippet": "spectrum = sampled.make_spectrum(full=True)\nboxcar = make_boxcar(spectrum, 4)\nboxcar.plot()\n", "intent": "Here's what it looks like:\n"}
{"snippet": "movies.select(explode(movies.genres).alias(\"food\"), movies.name).show()\n", "intent": "For queries like the above, it's useful to use our alias command:\n"}
{"snippet": "x = np.arange(10)\nprint z\nprint z.shape\ny = x[ x > 5 ]\ny += 10\nprint y\nprint x\n", "intent": "* masking makes a copy\n"}
{"snippet": "events = Events ('onia2MuMuPAT_MC.root')\n", "intent": "$B_s\\rightarrow\\mu^+\\mu^-$ MC sample\n"}
{"snippet": "vis.data['table'] = mydata\n", "intent": "Assignments by name are also possible.\n"}
{"snippet": "def draw_text(text):\n    xlabel = TText()\n    xlabel.SetNDC()\n    xlabel.SetTextFont(1)\n    xlabel.SetTextColor(1)\n    xlabel.SetTextSize(0.03)\n    xlabel.SetTextAlign(22)\n    xlabel.SetTextAngle(0)\n    xlabel.DrawText(0.5, 1., text)\n    return xlabel\n", "intent": "We look at the value of the minimum \n"}
{"snippet": "x = zeros(20)\nx[:5] = 10\nx[5:15] = arange(12,31,2)\nx[15:] = 30\nplot(x)\nplot([4,4],[8,32],'k--')\nplot([14,14],[8,32],'k--')\nylim(8,32)\n", "intent": "<a name=\"ex1answer\">Answer to Exercise 1</a>\n"}
{"snippet": "temperature = loadtxt('holland_temperature.dat')\nfor i in range(len(temperature)):\n    if temperature[i] < 10:\n        print 'average monthly temperature in month ',i+1,' is less than 10 degrees'\n    else:\n        print 'average monthly temperature in month ',i+1,' is more than 10 degrees'\n", "intent": "<a href=\"\n<a name=\"ex3answer\">Answer to Exercise 3</a>\n"}
{"snippet": "def f(x):\n    return 0.5 - exp(-x)\nx = linspace(0,4,100)\ny = f(x)\nplot(x,y)\naxhline(0,color='r',ls='--')\n", "intent": "<a name=\"ex1answer\">Answers to Exercise 1</a>\n"}
{"snippet": "random.seed(50)\nr = random.random_sample(1000)\nvotes_for_A = sum(r < 0.49)\nprint votes_for_A\n", "intent": "<a href=\"\n<a name=\"ex6answer\">Answers to Exercise 6</a>\n"}
{"snippet": "filtered = (spectrum * boxcar).make_wave()\nfiltered.scale(4)\nfiltered.make_spectrum(full=True).plot()\n", "intent": "Now we can apply the filter by multiplying in the frequency domain.\n"}
{"snippet": "my_lst = [1.2, 3.4, 5.1, 2.1]\n", "intent": "Variables can store any type of data we want. Let's try an example with a list:\n"}
{"snippet": "net = network.Network([784, 100, 10])\nnet.SGD(training_data, 10, 10, 3.0, test_data=test_data)\n", "intent": "Rerun the above experiment, changing the number of hidden neurons to 100\n"}
{"snippet": "last = exam_lines[-1]\n", "intent": "Grab the last line of the text file and save it to a variable called last.\n"}
{"snippet": "squares = [x**2 for x in range(0,11)]\n", "intent": "Let's go through some more complex examples\n"}
{"snippet": "def code_maker(mystring):\n    output = list(mystring)\n    for i,letter in enumerate(mystring):\n        for vowel in ['a','e','i','o','u']:\n            if letter.lower() == vowel:\n                output[i] = 'x'\n    output = ''.join(output)     \n    return output\n", "intent": "** Create a code maker function. This function will take in a string name and replace any vowels with the letter x.**\n"}
{"snippet": "x = 'global outside'\ndef myfunc(x):\n    print('X is {}'.format(x))\n    x = 'redefined inside myfunc()'\n    print('X is {}'.format(x))\n", "intent": "Now that we've seen the levels, let's make sure we understand with another example:\n"}
{"snippet": "def hello():\n    return 'Hi Jose!'\ndef other(func):\n    print('Other code would go here')\n    print(func())\n", "intent": "Now lets see how we can pass functions as arguments into other functions:\n"}
{"snippet": "typ ,data = M.search(None,'SUBJECT \"this is a test email for python\"')\n", "intent": "Let's now search and confirm if it is there:\n"}
{"snippet": "np.arange(0.0, 100.0, 10.0)\n", "intent": "We can also customize these list with a third paramter that specifices step size\n"}
{"snippet": "def to_lower(words):\n    return [word.lower() for word in words]\n", "intent": "Convert all strings to lowercase.\n"}
{"snippet": "map = gis.map(mode=\"3D\")\nmap\n", "intent": "You can also programatically specify the `title` (text displayed on the tab) and `tab_mode` in each method call:\n"}
{"snippet": "ports_csv_item.protect(enable = True)\n", "intent": "You can protect items from getting deleted inadvertently. Use the `protect()` of the `Item` object for this. \n"}
{"snippet": "map1 = gis.map(\"Tamil Nadu\", zoomlevel=7)\nmap1\n", "intent": "Draw the rainfall stations on a map rendered by rainfall quantity\n"}
{"snippet": "update_result = ports_flayer.edit_features(updates=[sfo_edit])\nupdate_result\n", "intent": "Now let us send this feature object to the `edit_features()` method and edit the original feature layer\n"}
{"snippet": "map1 = gis.map(\"USA\")\nmap1\n", "intent": "Lets draw the layers on a map and observe how they are distributed\n"}
{"snippet": "sp_ref = camp_pendleton_s_geodefn['spatialReference']\nsp_ref\n", "intent": "Let's use the feature we drew earlier to define a spatial reference variable for use throughout the rest of this guide.\n"}
{"snippet": "sdf2 = left.spatial.join(right)\nsdf2\n", "intent": "Perform the spatial join:\n"}
{"snippet": "pincode['attributes']\n", "intent": "The matched address contains several attributes, that provide values for the various output fields supported by the geocoder.\n"}
{"snippet": "from arcgis.gis import GIS\nfrom arcgis.apps import workforce\ngis = GIS('https://arcgis.com', 'arcgis_python')\n", "intent": "A user must be authenticated with a GIS in order to fetch a Project. The workforce functionality is available in `arcgis.apps.workforce` module.\n"}
{"snippet": "plot_segments(wave, filtered)\n", "intent": "And if we compare it to the original, it is almost identical.\n"}
{"snippet": "mh370items = gis.content.search(\"MH370\", \"feature service\", max_items=6)\nfor item in mh370items:\n    display(item)\n", "intent": "We can search ArcGIS Online for content related to the missing airliner, and bring in layers that we want to use for our analysis and visualization:\n"}
{"snippet": "source_target_itemId_map = {}\nfor key in source_items_by_id.keys():\n    source_item = source_items_by_id[key]\n    print(\"Copying {} \\tfor\\t {}\".format(source_item.title, source_item.owner))\n    target_item = copy_item(target, source_item)\n    if target_item:\n        source_target_itemId_map[key] = target_item.itemid\n    else:\n        source_target_itemId_map[key] = None\n", "intent": "Copy over each item. While doing so, construct a dictionary mapping of source item's ID with target item's ID\n"}
{"snippet": "map2= my_gis.map(\"Los Angeles, CA\")\nmap2\n", "intent": "Draw and animate the results on a map\n"}
{"snippet": "incident_coords = '-43.281206,-22.865676'\nreverse_geocode = geocoding.reverse_geocode({\"x\": incident_coords.split(',')[0], \n                                              \"y\": incident_coords.split(',')[1]})\nincident_feature = Feature(geometry=reverse_geocode['location'], \n                           attributes=reverse_geocode['address'])\n", "intent": "Similarly, let us create the incient layer\n"}
{"snippet": "cities_mil_fset = cities_million_pop.query()\ntype(cities_mil_fset)\n", "intent": "Let us write an empty query so we can get all the features\n"}
{"snippet": "SD_fset_list=[]\nfor result in sa_results:\n    poly_feat_list = []\n    for polygon_dict in result['saPolygons']['features']:\n        f1 = Feature(polygon_dict['geometry'], polygon_dict['attributes'])\n        poly_feat_list.append(f1)\n    service_area_fset = FeatureSet(poly_feat_list, \n                         geometry_type=result['saPolygons']['geometryType'],\n                         spatial_reference= result['saPolygons']['spatialReference'])\n    SD_fset_list.append(service_area_fset)\n", "intent": "The service area has been computed, we process it to generate a list of `FeatureSet` objects to animate on the map\n"}
{"snippet": "my_map.add_layer(hiking_trails_lyr)\n", "intent": "Now we can add that layer to our map.\n"}
{"snippet": "gis_username = \"anieto\"\n", "intent": "The API allows you to safely pass your authentication details\n"}
{"snippet": "binom.pmf(x, n, 0.2).sum()\n", "intent": "What is the sum of all these probabilities?\n"}
{"snippet": "diff = wave.ys - filtered.ys\nthinkplot.plot(diff)\nnp.mean(abs(diff))\n", "intent": "It's not completely identical because the original signal had some tiny components above the Nyquist frequency.  But the differences are small.\n"}
{"snippet": "import numpy as np \na = np.array([-1.7, 1.5, -0.2, 0.6, 10]) \nprint ('The given array:') \nprint (a) \nprint ('\\n')  \nprint ('The modified array:') \nprint (np.ceil(a))\n", "intent": "numpy.ceil()\nThe ceil() function returns the ceiling of an input value, i.e. the ceil of the scalar x is the smallest integer i, such that i >= x\n"}
{"snippet": "mktcaps = {'AAPL':538.7,'GOOG':68.7,'IONS':4.6}\n", "intent": "<h1>Dictionaries</h1>\n"}
{"snippet": "beta_vec = np.linspace(0.997, 0.9999, G)\npsi_vec = np.linspace(1.25, 3.5, G)\n", "intent": "Now let's look at a different set of parameters:\n"}
{"snippet": "df.totalwgt_lb.mean()\n", "intent": "Compute the mean birthweight.\n"}
{"snippet": "len(live[(live.birthwgt_lb > 8) & (live.birthwgt_lb < 96)])\n", "intent": "Count the number of live births with <tt>birthwgt_lb</tt> between 9 and 95 pounds (including both).  The result should be 798 \n"}
{"snippet": "frst_prg = firsts.prglngth.mean()\nothr_prg = others.prglngth.mean()\ndiff = (frst_prg - othr_prg)*(24*7)\ndiff\n", "intent": "Compute the mean <tt>prglngth</tt> for first babies and others.  Compute the difference in means, expressed in hours.\n"}
{"snippet": "firstlenmean = firsts.prglngth.mean()\notherlenmean = others.prglngth.mean()\ndiffweeks = firstlenmean - otherlenmean\ndiffhrs = diffweeks * 7 *24\ndiffhrs\n", "intent": "Compute the mean <tt>prglngth</tt> for first babies and others.  Compute the difference in means, expressed in hours.\n"}
{"snippet": "import chap01soln\nresp = chap01soln.ReadFemResp()\nresp.columns\n", "intent": "Exercise from Think Stats, 2nd Edition (thinkstats2.com)<br>\nAllen Downey\nRead the female respondent file and display the variables names.\n"}
{"snippet": "live = preg[preg.outcome == 1]\nall_pairwise_diffs = []\nfor index, pregnancies in live.groupby('caseid'):\n    pairwise_diffs = pregnancies.iloc[0].prglngth - pregnancies.iloc[1:].prglngth\n    all_pairwise_diffs.extend(list(pairwise_diffs))\npairwise_pmf = thinkstats2.Pmf(all_pairwise_diffs)\nprint 'Mean difference between pairs', pairwise_pmf.Mean()\nthinkplot.Hist(pairwise_pmf, align='center')\nthinkplot.Show(xlabel='Difference in weeks', ylabel='PMF')\n", "intent": "A correct solution that uses `groupby`.\n"}
{"snippet": "sampled = sample(short, factor)\nsampled.plot_vlines(color='gray')\n", "intent": "Now I'll sample the signal and show the samples using vertical lines:\n"}
{"snippet": "1 - std_res / std_ys\n", "intent": "How much does height information reduce RMSE?  About 15%.\n"}
{"snippet": "import plotly\nfrom plotly.graph_objs import Scatter, Layout\nplotly.offline.init_notebook_mode(connected=True)\nplotly.offline.iplot({\n    \"data\": [Scatter(x=[1, 2, 3, 4], y=[4, 3, 2, 1])],\n    \"layout\": Layout(title=\"hello world\")\n})\n", "intent": "You need to set initialization code, similar to matplotlib\n"}
{"snippet": "d4 = {k:v for k,v in d3.items() if type(v) not in [list, dict]}\nd4\n", "intent": "reverse keys and values? - works only when values are immutable types. hence filter them out\n"}
{"snippet": "sns.countplot(x='sex', data=tips)\n", "intent": "If you want a regular bar chart that shows the count of data, then do a `countplot`\n"}
{"snippet": "w = list(map(lambda x,y : x + y,v,v))\n", "intent": "We can also use the `lambda` function to create an anonymous function that can be passed directly to the `map` function.\n"}
{"snippet": "def move_down_river(river_list):\n    n = len(river_list)\n    result = river_list[:n-1]\n    result.insert(0,0)\n    return result\n", "intent": "Write the function *move_down_river* in the cell immediately below.\n"}
{"snippet": "for count in range(11):\n    if count != 0 and count % 2 == 0:\n        print count\nprint \"Goodbye!\"\n", "intent": "Convert the following code into code that uses a for loop:\nprint 2\nprint 4\nprint 6\nprint 8\nprint 10\nprint \"Goodbye!\"\n"}
{"snippet": "print(a_string)\na_string[0] = 't'   \n", "intent": "<font color='red'>Exercise</font>: What is the output of \n```cython\na_string[25:30]\n```\n"}
{"snippet": "fruits = ['banana', 'apple', 'orange', 'mango', 'pear', 'grape']\nfor f in fruits:\n    if f == 'carrot':\n        print ('A carrot is not a fruit!')\n        break\n    print (f)\nelse:\n    print ('A fine selection of fruits!')\n", "intent": "Similar to while-else:\n"}
{"snippet": "wave = thinkdsp.read_wave('263868__kevcio__amen-break-a-160-bpm.wav')\nwave.normalize()\nwave.plot()\n", "intent": "*Solution:*  I'll load the drum solo again.\n"}
{"snippet": "if 5 > 2:\n    print('This if statement is True.')\n", "intent": "---\n```python\nif conditional:\n```\n"}
{"snippet": "ev = 'Python Training at NASA LRCC starting at 8:30 am. See you at the SSAI Conference Room. What?'\n", "intent": "Consider the string:\n"}
{"snippet": "print 'Earliest  :', datetime.date.min\nprint 'Latest    :', datetime.date.max\nprint 'Resolution:', datetime.date.resolution\n", "intent": "We can also determine the range of date values:\n"}
{"snippet": "circum_def[25:30]\ncircum_def[1:20:2]\ncircum_def[-7:-1]\n", "intent": "Given a string (or sequence) s, s[start:end:step] is a substring that starts at index 'start' and ends at index 'end-1'\n"}
{"snippet": "words = 'The quick brown fox jumps over the lazy dog'.split()\nprint words\nA = []\nfor w in words:\n    A.append([w.upper(), w.lower(), len(w)])\nfor i in A:\n    print i\n", "intent": "Exercise:\nRewrite the segment of code below using \n    1) list comprehensions \n    2) lambda/map functions \nto generate the list A.\n"}
{"snippet": "def add_to_dict(args={'a': 1, 'b': 2}):\n    for i in args.keys():\n        args[i] += 1\n    print(args)\n", "intent": "Using an mutable type in a keyword argument (and modifying it inside the function body)\n"}
{"snippet": "    def on_book_id(self, inst=None, value=None):\n        image_pattern = os.path.join(self.library_directory, self.book_id, '*.jpg')\n        self.page_selector.values = [os.path.basename(s)[:-4] for s in glob.glob(image_pattern)]\n        self.page_selector.text = self.page_selector.values[0] if self.page_selector.values else 'No Images'\n        self.word_list.clear_widgets()\n        with open(os.path.join(self.library_directory, self.book_id, 'word_list.txt')) as fp:\n            for word in sorted(fp.readlines()):\n                self.word_list.add_widget(Label(text=word.strip()))\n", "intent": "We also need to load the word list when we change books.\n"}
{"snippet": "say_hello(\"Bee\", last_name=\"Eight\")\n", "intent": "and we can also give one or both optional arguments (and the optional arguments can be given in any order):\n"}
{"snippet": "predictions = predict_output(test_feature_matrix, weights1e4_normalized)\nresiduals = test_output - predictions\nRSS = sum(residuals*residuals)\nprint RSS\n", "intent": "Compute the RSS of each of the three normalized weights on the (unnormalized) `test_feature_matrix`:\n"}
{"snippet": "spectrum = wave.make_spectrum(full=True)\nspectrum.plot()\n", "intent": "And here's the spectrum:\n"}
{"snippet": "john_node = BayesNode('JohnCalls', ['Alarm'], {True: 0.90, False: 0.05})\nmary_node = BayesNode('MaryCalls', 'Alarm', {(True, ): 0.70, (False, ): 0.01}) \n", "intent": "It is possible to avoid using a tuple when there is only a single parent. So an alternative format for the **cpt** is\n"}
{"snippet": "poly.gcd((1.,1.,2.,3.,1.), (0.,1.,1.))\n", "intent": "* **b.** Implement a recursive function `gcd(p,q)` to return the monic greatest common divisor of `p,q`. Here is an example,\n"}
{"snippet": "print(repr(a))\nb = a[::2,::3]\nb[:] = -75\nprint(repr(a))\n", "intent": "You can use a view to assign a bunch of values at once :\n"}
{"snippet": "path_of_copy = shutil.copy('json_data.json', 'new_data.json')\nprint(path_of_copy)\n", "intent": "The `shutil` and `os` modules contains all the useful tools for these operations. Here are some examples\n"}
{"snippet": "print(A[:,-1].sum())\n", "intent": "Sum of the last column\n"}
{"snippet": "name = \"John\"\nname in [\"John\", \"Rick\"]\n", "intent": "The \"in\" operator could be used to check if a specified object exists within an iterable object container, such as a list:\n"}
{"snippet": "Z = np.array([ 0.55295659,  0.24760051,  0.21054281])\nZ.max()\n", "intent": "Expect output:\n```python\nZ = np.array([ 0.55295659,  0.24760051,  0.21054281])\n```\n"}
{"snippet": "A = np.array([1,2,3])\nA+A\n", "intent": "Ok, a bit ugly, but it works.\nWhat about adding a vector to itself in NumPy, then? Let's try using the \"+\" sign as we wanted to do before with lists.\n"}
{"snippet": "Z = np.zeros((10,2))\nZ\n", "intent": "Create a matrix of all zeros (flating point here): easy, just indicate the dimensions.\n"}
{"snippet": "factor = 3\nframerate = wave.framerate / factor\ncutoff = framerate / 2 - 1\n", "intent": "I'll reduce the sampling rate by a factor of 3 (but you can change this to try other values):\n"}
{"snippet": "print(mydict[\"first\"])\n", "intent": "You can print specific values from the dictionary by using the notation `name[key]`.\n"}
{"snippet": "def times(x, y):\n    return x * y\n", "intent": "if test:\n    def func(): \n        ...\nelse:\n    def func(): \n        ...\n        ...\nfunc() \nothername = func \nothername() \n"}
{"snippet": "def countDog(text):\n    text = text.upper();\n    return text.count('DOG');\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "threshold = 10\nx = 1 if threshold< 30 else 2\nprint 'x=', x\n", "intent": "- You can assign one value to a variable if the condition is True and another if it is False \n"}
{"snippet": "x = np.array([1,2,0,0,4,0])  \n", "intent": "Find indices of non zero elements from [1,2,0,0,4,0]\n"}
{"snippet": "import os\n_ = [tests.grade(q[:-3]) for q in os.listdir(\"tests\") if q.startswith('q')]\n", "intent": "*Write your answer here, replacing this text.*\n"}
{"snippet": "animals = ['duck', 'rat', 'boar', 'slug', 'mammoth', 'gazelle']\n", "intent": "Hint: use `.capitalize()`\n"}
{"snippet": "print(len(s))\nprint(s.replace(\"world\", \"test\"))\n", "intent": "You can create a string using either single or double quotes. Neither one is generally preferred.\n"}
{"snippet": "point2 = 10, 20\npoint2, type(point2)\n", "intent": "The normal way to create a tuple is with parentheses.\n"}
{"snippet": "spectrum.low_pass(cutoff)\nspectrum.plot()\n", "intent": "Before sampling we apply an anti-aliasing filter to remove frequencies above the new folding frequency, which is `framerate/2`:\n"}
{"snippet": "for cube in cubes:\n    print(cube.standard_name)\n", "intent": "2\\. Loop through each of the cubes (e.g. for cube in cubes) and print the standard name of each.\n"}
{"snippet": "from astropy.io import fits\nfrom astropy.wcs import WCS\nheader = fits.getheader('data/ROSAT.fits')\nw = WCS(header)\n", "intent": "or by passing a Header object:\n"}
{"snippet": "\"Keynes said: \"In the long run we are all dead\"\"\n", "intent": "The main purpose of being able to choose between single or double quotes is to faciliate entering strings with quotes in them. \n"}
{"snippet": "economist = 'Finkelstein'\nlen(economist)\n", "intent": "The length of a string can be found out with the `len` function. \n"}
{"snippet": "my_list = ['a', 'b', 'c', 'd', 'e', 'f']\n", "intent": "Indexing and slicing works similar to indexing and slicing for strings which we have encountered before. \n"}
{"snippet": "my_economists = ['Robinson', 'Johnson', 'Acemoglu']\nprint(my_economists)\n", "intent": "Finally, the _sort_ method can be used to sort a list in place. \n"}
{"snippet": "my_philosophers['Marx'] = 'Carlos'\nmy_philosophers\n", "intent": "In the same way, we can also change the value for an existing key. \n"}
{"snippet": "for index, value in enumerate(economists):\n    print(index, '=>', value)\n", "intent": "The `enumerate` function allows you to iterate over both the elements of a collection *and* their indices at the same time.\n"}
{"snippet": "for row, col in cells:\n    print(row, col)\n", "intent": "If we want to have exactly the same result, we have to unpack the tuples again. \n"}
{"snippet": "filtered = spectrum.make_wave()\nfiltered.make_audio()\n", "intent": "Here's what it sounds like after filtering (still pretty good).\n"}
{"snippet": "np.random.normal(0, 1, (3, 3))\n", "intent": "If we want to draw numbers from a std normal distribution:\n"}
{"snippet": "np.concatenate([x1,x1], axis = 1)\n", "intent": "By default, concatenate appends row-wise but if we want column-wise concatenation we can simply set `axis=1`:\n"}
{"snippet": "y = np.loadtxt(\"test2.txt\", delimiter=\",\")\nprint(y)\n", "intent": "It has similar functionality, where we can specify the characters used to delimit the individual elements:\n"}
{"snippet": "np.sum(x < 6, axis=1)\n", "intent": "The benefit of sum() and other NumPy aggregation functions, is that summation can be done along rows or columns:\n"}
{"snippet": "rand = np.random.RandomState(42)\nX = rand.randint(0, 10, (5, 5))\nprint(X)\n", "intent": "Sorting extends to multidimensional arrays:\n"}
{"snippet": "if __name__ == \"__main__\":\n    start = random_string()\n    evolve(start)\n", "intent": "Let's take a random starting sequence and see whether we can get a weasel before the end of all time:\n"}
{"snippet": "class Line:\n    def __init__(self,coor1,coor2):\n        self.coordinate1 = coordinate1\n        self.coordinate2 = coordinate2\n    def distance(self):\n        return ((coordinate2[0]-coordinate1[0])**2 + (coordinate2[1]-coordinate1[1])**2)**0.5\n    def slope(self):\n        return (coordinate2[1]-coordinate1[1]) / (coordinate2[0]-coordinate1[0])\n", "intent": "Fill in the Line class methods to accept coordinates as a pair of tuples and return the slope and distance of the line.\n"}
{"snippet": "list4 = [5,3,4,6,1]\nsorted(list4)\nlist4.sort()\nlist4\n", "intent": "Sort the list below:\n"}
{"snippet": "A = np.array([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 2]\n    ])\nb = np.array([1, 0, 1])\n", "intent": "Solve the coupled system of linear equations of the general form\n$$\n\\mathsf{A} \\mathbf{x} = \\mathbf{b}.\n$$\n"}
{"snippet": "def sample(wave, factor):\n    ys = np.zeros(len(wave))\n    ys[::factor] = wave.ys[::factor]\n    return thinkdsp.Wave(ys, framerate=wave.framerate) \n", "intent": "Here's the function that simulates the sampling process:\n"}
{"snippet": "def read_file(file_path, delimiter='\\t'):\n    with open(file_path, 'r', encoding='utf-8') as csvfile:\n        reader = csv.reader(csvfile, delimiter=delimiter, quotechar='|', quoting=csv.QUOTE_MINIMAL)\n        return [(doc_id, rel, content.replace('\\n', ' ')) for doc_id, rel, content in reader]\ndoc_list = read_file('collection.tsv')\nprint('read {} docs'.format(len(doc_list)))\n", "intent": "Read the TSV file, removing newlines:\n"}
{"snippet": "sample_matrix_by_col\n", "intent": "It's also easy to extract several rows or columns at once. \n"}
{"snippet": "run_analysis <- function(data) {\n    fit <- t.test(data$group1, data$group2)\n    return(fit$p.value)\n}\n", "intent": "Now we can write a function to perform the t-test for the two groups. \n"}
{"snippet": "SELECT column_name, data_type, character_maximum_length, is_nullable\nFROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = 'rides';\n", "intent": "By the way, you can extract a schema from a pgsql instance with the following query, which uses the INFORMATION_SCHEMA metadata database.\n"}
{"snippet": "def fib(n):\n    print('fib', n)\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)\nassert fib(10) == 55\n", "intent": "Instrumented so that you can see calls to `fib`:\n"}
{"snippet": "def jumble_love(lst):\n    return answer\n", "intent": "Pass a string of characters from a jumble to find real words from words.txt\n"}
{"snippet": "for x, y, z in zip(x_coords, y_coords, z_coords):\n    print((x, y, z))\n", "intent": "The most common use case for `zip()` is illustrated below.\n"}
{"snippet": "g = a.bar\nprint(g)\nprint(\"g's associated function is:\", g.__func__)\nprint(\"g's bound 'self' arg is:\", g.__self__)\nprint(\"g's method name is:\", g.__name__)\n", "intent": "Bound methods are objects, and, as such, have some attributes, for example:\n"}
{"snippet": "git config --global user.email\"<email>\"\n", "intent": "1: To set your github email address at the global-- level, what command would you type? (use < email > to replace your actual email)\n"}
{"snippet": "def count_code_cells(filename, cell_type):\n    count = 0\n    with open(filename, 'r') as file:\n        data = json.load(file)\n    cells = data['cells']\n    for cell in cells:\n        if cell['cell_type'] == cell_type:\n            count += 1\n    return count\n", "intent": "- Write a function named count_code_cells() that takes a filename (str) and a cell type (str), and returns the number count of that cell type (int).\n"}
{"snippet": "l = [0,0,0]\nprint (l)\nl = [0]*3\nprint(l)\nl1 = list()\nl1.append(0)\nl1.append(0)\nl1.append(0)\nprint(l1)\n", "intent": "Build this list [0,0,0] two separate ways.\n"}
{"snippet": "s = \"Hello\"\nprint(s[0])\nprint(s[2:4])\nprint(s[-3:])\n", "intent": "As mentioned above, strings are basically lists of characters, which you can access via indexing or slicing:\n"}
{"snippet": "print(len(t))\nprint(t[0])\nprint(t[:2])\nprint(sum(t))\n", "intent": "Most operations that work with lists also work with tuples:\n"}
{"snippet": "d = {'GOOG': 45.32, 'APPL': 67.89, 'MSFT': 0.43}\ntype(d)\n", "intent": "The final core Python data type we'll talk about are **dictionaries**.  These allow you to _associate_ keys to values.  Here's an example:\n"}
{"snippet": "def add_nums(a, b):\n    return a + b\n", "intent": "There are only a few more things to learn about functions.  First, functions can take more than one parameter:\n"}
{"snippet": "a = 6\nif (a % 2) == 1:\n    description = \"odd\"\nelif (a % 4) == 0:\n    description = \"even and a multiple of 4\"\nelse:\n    description = \"even but not a multiple of 4\"\n\"a is \" + description\n", "intent": "**Ex 0.7.2. Rewrite your solution to Ex 0.7.1 more concisely using `elif`**\n"}
{"snippet": "filename = \"myfile.csv\"\nif filename[-4:] == \".jpg\":\n    filetype = \"JPEG\"\nelif filename[-4:] == \".txt\":\n    filetype = \"text file\"\nelif filename[-4:] == \".csv\":\n    filetype = \"CSV file\"\nelse:\n    filetype = \"something else\"\nprint(filename + \": \" + filetype)\n", "intent": "**Ex 0.9.1.  How would you classify a filename based on its extension as either a JPEG, a text file, a CSV, or something else?**\n"}
{"snippet": "sentencesRDD = sc.parallelize(['Hello world', 'My name is Patrick'])\nwordsRDD = sentencesRDD.flatMap(lambda sentence: sentence.split(\" \"))\nprint(wordsRDD.collect())\nprint(wordsRDD.count())\n", "intent": "Here's an example where `flatMap()` is useful:\n"}
{"snippet": "aRDD = sc.parallelize([1,2,3])\nbRDD = sc.parallelize([2,3,4])\naRDD.union(bRDD).collect()   \n", "intent": "Some transformations produce one RDD from two or more input RDDs:\n"}
{"snippet": "sampled_spectrum = sampled.make_spectrum(full=True)\nsampled_spectrum.plot()\n", "intent": "But they show up when we plot the spectrum:\n"}
{"snippet": "prs = [cdf.PercentileRank(x) for x in cdf.Sample(1000)]\npr_cdf = thinkstats2.Cdf(prs)\nthinkplot.Cdf(pr_cdf)\n", "intent": "Draw a random sample from <tt>cdf</tt>, then compute the percentile rank for each value, and plot the distribution of the percentile ranks.\n"}
{"snippet": "stderr = thinkstats2.Std(slopes)\nstderr\n", "intent": "Compute the standard deviation of the sampling distribution, which is the standard error.\n"}
{"snippet": "def my_sum(lst):\n    s = 0\n    for value in lst:\n        s += value\n    return s\n", "intent": "Notice that the `for` loop knows when to stop, so I can't mix up the final index of the list.\nI can rewrite my function as well.\n"}
{"snippet": "c = connection.cursor()\n", "intent": "Now that we have a connection to the local database, let'we will need a \"cursor\" through which we can interact with the database.\n"}
{"snippet": "arr1 = np.arange(0,10).reshape(2,5)\n", "intent": "Let's stop here for now and move on to DataFrames, which will expand on the concept of Series!\n"}
{"snippet": "tfinal = 0.5\nnsteps = 24\ndt = float(tfinal)/nsteps\nudtdx = u*dt/dx\ncfl = abs(udtdx)\nprint(\"dx = %6.4f, dt = %6.4f, Courant number is cfl = %5.2f\" % (dx,dt,cfl))\n", "intent": "If the Courant number `cfl` is bigger than 1, you can expect instability!\n"}
{"snippet": "j = argsort(s)  \nprint(j)\n", "intent": "Note that the eigenvalues are not necessarily in increasing order, so let's sort them:\n"}
{"snippet": "h4 = 0.02 \nX4,Y4 = integrate(f,x,y,xStop,h4)\n", "intent": "Here we solve the same system using the forward Runge-Kutta\nmethod of 4th order method:\n"}
{"snippet": "Employee1['Emp_Name'] = \"Sam\"\nEmployee2['Emp_Name'] = \"Bob\"\nprint(Employee1)\nprint(Employee2)\n", "intent": "The item i.e., key-value pair can be updated. Updating means new item can be added. The values can be modified.\n"}
{"snippet": "sampled_spectrum.low_pass(cutoff)\nsampled_spectrum.plot()\n", "intent": "We can get rid of the spectral copies by applying the anti-aliasing filter again:\n"}
{"snippet": "print(\"this works\")  \n", "intent": "You can also place comments after some code, in which case the code executes. Here, let me show you:\n"}
{"snippet": "def add(a, b):\n    return a + b\nrun_doctests()\n", "intent": "By default if all your tests pass nothing will be printed, but should a doctest fail Python will give you all the juicy detail. Lets try it now:\n"}
{"snippet": "s1 = 'He\\'s a lumberjack, and he\\'s okay.\\nHe sleeps all night and he works all day.'\nprint(s1)\nprint\nprint(s2)\n", "intent": "* double quote (`\"`) and single quotes (`'`) are synonymous.\n"}
{"snippet": "d = dict([(1,\"one\"), (2,\"two\"), (3,\"three\"), (4,\"four\")])\nfor k, v in d.iteritems():\n    print(\"Key: {}, Value: {}\".format(k, v))\na, b, c, d = (1,2,3,4)\nprint(a,b,c,d)\n", "intent": "** Reminder: Use list-comprehension if possible!**\n"}
{"snippet": "def lesser_of_two_evens(a,b):\n    if (a % 2 == 0) and (b % 2 == 0):\n        return min(a,b)\n    else:\n        return max(a,b)\n", "intent": "    lesser_of_two_evens(2,4) --> 2\n    lesser_of_two_evens(2,5) --> 5\n"}
{"snippet": "users = [\n    {'name': 'John', 'age': 17},\n    {'name': 'Sally', 'age': 21},\n    {'name': 'Bill', 'age': 10},\n    {'name': 'Moe', 'age': 77},\n    {'name': 'Jane', 'age': 18},\n    {'name': 'Leslie', 'age': 19}\n]\n", "intent": "---\nFilter through the array of users, returning only those who are older than 18\n"}
{"snippet": "[user for user in users if user['role']=='Teacher']\n", "intent": "Do the same thing above, only this time return all the teachers.\n"}
{"snippet": "ace_hands = comb(4,2)\nhands = comb(52,2)\nprint ace_hands / hands\n", "intent": "**Q: What is the probability that you are dealt two cards that are both  aces from a 52-card deck?**\n"}
{"snippet": "haew_prop = maps.datamodel['emline_gew_ha']\nhaew_prop\n", "intent": "Each **Property** contains a name, a channel, the unit of the property, and a description\n"}
{"snippet": "sampled_spectrum.scale(factor)\nspectrum.plot()\nsampled_spectrum.plot()\n", "intent": "We just lost half the energy in the spectrum, but we can scale the result to get it back:\n"}
{"snippet": "'Hello {}, how are you?' .format(my_name)\n", "intent": "Interpolation is when you inject one or more strings into another (think mad libs).\n"}
{"snippet": "mylist = [1,3,5,6,7,2,7,8,6,6,4]\nnew_list = list(filter(lambda x : (x%2==0),mylist))\nnew_list\n", "intent": "Higher order function in lambda\n1. filter()\n2. map()\n"}
{"snippet": "list_1=[1,2,3,4,5]\ntup_1=(6,7,8,9,'10')\nnp_la=np.array(list_1)\nprint(\"Type: {} value: {}\".format(type(np_la),np_la))\nnp_ta=np.array(tup_1)\nprint(\"Type: {} value: {}\".format(type(np_ta),np_ta))\n", "intent": "    * Direct initialization using np.array()\n    * Converting list to an array np.array(list[])\n    * Converting tuple to an array np.array(tuple())\n"}
{"snippet": "def makes_twenty(n1,n2):\n    if n1==20 or n2==20 or n1+n2==20:\n        return True\n    else:\n        return False\n", "intent": "    makes_twenty(20,10) --> True\n    makes_twenty(12,8) --> True\n    makes_twenty(2,3) --> False\n"}
{"snippet": "print 'percent of error = %5.1f'%(10./150*100)\n", "intent": "(b) At 25 kpc, the rotation velocity is about 150 km/s, and the error is about 10 km/s.    The percentage of the error is:\n"}
{"snippet": "cam.load_template(filename=filename[:-4])\n", "intent": "- **trouble with whitespace?**\n- **.xml should be omitted** - implicit .xml not documented\n"}
{"snippet": "cam.load_template(r'{ScanningTemplate}whole2')\n", "intent": "- does not update\n- scans the same positions\n"}
{"snippet": "def fibonacci_procedural(n):\n    first=1\n    second=1\n    for _ in range(n):\n        print(first,end=\" \")\n        first, second = second, first + second \n", "intent": "Python is a pragmatic mix of procedural / OO / functional styles\n"}
{"snippet": "a = 15\nif a < 5:\n    print('a < 5')\nelif a < 10:\n    print('5 <= a < 10')\nelse:\n    print('a >= 10')\n", "intent": "But the **elif** statement provides far better readability:\n"}
{"snippet": "spectrum.max_diff(sampled_spectrum)\n", "intent": "Now the difference between the spectrum before and after sampling should be small.\n"}
{"snippet": "s = 'hello'\nfor c in s:\n    print(c)\n", "intent": "There are a number of standard techniques to iterate over iterables:\n"}
{"snippet": "import sys\nsys.getrefcount(my_var)\n", "intent": "There is another built-in function we can use to obtain the reference count:\n"}
{"snippet": "a = [1, 2]\nb = [3, 4]\nt = (a, b)\n", "intent": "But, consider the following tuple:\n"}
{"snippet": "a = 10\nb = 10\nprint(hex(id(a)))\nprint(hex(id(b)))\n", "intent": "From the previous lecture we know that **a** and **b** will have a **shared** reference:\n"}
{"snippet": "def exec_function(fn, n):\n    return fn(n)\n", "intent": "A Function can be passed as an argument to another function\n(This example is pretty useless, but it illustrates the point effectively)\n"}
{"snippet": "def compare_using_equals(n):\n    a = 'a long string that is not interned' * 200\n    b = 'a long string that is not interned' * 200\n    for i in range(n):\n        if a == b:\n            pass\n", "intent": "Let's run some quick and dirty benchmarks:\n"}
{"snippet": "x = Fraction(22, 7)\nprint(x.numerator)\nprint(x.denominator)\n", "intent": "We can recover the numerator and denominator (integers):\n"}
{"snippet": "x = 0.0000001\ny = 0.0000002\nisclose(x, y, rel_tol=0.01)\n", "intent": "On the other hand, we have to be careful with relative tolerances when working with values that are close to zero:\n"}
{"snippet": "a = Decimal('0.12345')\nb = Decimal('0.12345')\n", "intent": "Now we can create decimal numbers of higher precision than that:\n"}
{"snippet": "interpolated = sampled_spectrum.make_wave()\ninterpolated.make_audio()\n", "intent": "After filtering and scaling, we can convert back to a wave:\n"}
{"snippet": "l = [1, 2, 3, 4, 5, 6]\n", "intent": "Let's see how we might split a list into it's first element, and \"everything else\" using slicing:\n"}
{"snippet": "{*s1, *s2, *s3, *s4}\n", "intent": "Or we could use unpacking in this way:\n"}
{"snippet": "l = [1, 2, 3, 'python']\nl[0], l[1:-1], l[-1][0], l[-1][1], list(l[-1][2:])\n", "intent": "If we wanted to do the same thing using slicing:\n"}
{"snippet": "def func1(*args, d):\n    print(args)\n    print(d)\n", "intent": "We can even define a function that has only optional positional arguments and mandatory keyword arguments:\n"}
{"snippet": "def func(a, b, *args):\n    print(a, b, args)\n", "intent": "Positionals Only: extra positionals, no defaults (all positionals required)\n"}
{"snippet": "def func(*args, **kwargs):\n    print(args, kwargs)\n", "intent": "Keywords and Positionals: only extra positionals and extra keywords\n"}
{"snippet": "def my_func(a, b):\n    'Returns the product of a and b'\n    return a*b\n", "intent": "Pretty bare! So let's add some additional help:\n"}
{"snippet": "def multiply(x, y):\n    return x * y\n", "intent": "Of course, we don't have to use lambdas when calling **apply_func**, we can also pass in a function defined using a **def** statement:\n"}
{"snippet": "fact.short_description = \"factorial function\"\n", "intent": "Since functions are objects, we can add attributes to a function:\n"}
{"snippet": "filtered.plot()\ninterpolated.plot()\n", "intent": "And the difference between the interpolated wave and the filtered wave should be small.\n"}
{"snippet": "l = [5, 8, 6, 10, 9]\n", "intent": "Suppose we want to find the maximum value in a list:\n"}
{"snippet": "def fact(n):\n    if n <= 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result *= i\n        return result\n", "intent": "We can easily write this using a simple for loop:\n"}
{"snippet": "def my_func(a, b, c):\n    print(a, b, c)\n", "intent": "We can certainly use variables instead of literals when creating partials, but we have to be careful.\n"}
{"snippet": "my_list = [1, 2, 3, 4]\nmy_list[1] = 100\ndel my_list[3]\nprint(my_list)\n", "intent": "If the sequence is mutable, we can also set or remove items:\n"}
{"snippet": "def my_func(n):\n    c = n ** 2\n    return c\n", "intent": "In this case, **a** is defined inside the main module, so it is a global variable.\n"}
{"snippet": "def pow(n):\n    def inner(x):\n        return x ** n\n    return inner\n", "intent": "The same thing happens with closures, they have their own extended scope every time the closure is created:\n"}
{"snippet": "def timer():\n    start = perf_counter()\n    def elapsed():\n        return perf_counter() - start\n    return elapsed\n", "intent": "Now let's rewrite this using a closure instead:\n"}
{"snippet": "@timed\ndef fib_recursed_2(n):\n    if n <=2:\n        return 1\n    else:\n        return fib_recursed_2(n-1) + fib_recursed_2(n-2)\n", "intent": "There's a reason we did not decorate our recursive function directly!\n"}
{"snippet": "def fib():\n    cache = {1: 1, 2: 2}\n    def calc_fib(n):\n        if n not in cache:\n            print('Calculating fib({0})'.format(n))\n            cache[n] = calc_fib(n-1) + calc_fib(n-2)\n        return cache[n]\n    return calc_fib\n", "intent": "Let's see how we could rewrite this using a closure:\n"}
{"snippet": "def plot_angle(spectrum, thresh=1):\n    angles = spectrum.angles\n    angles[spectrum.amps < thresh] = np.nan\n    thinkplot.plot(spectrum.fs, angles, style='x')\n    thinkplot.config(xlim=[0, spectrum.max_freq],\n                     ylim =[-np.pi, np.pi])\n", "intent": "The following function plots the angle part of the spectrum.\n"}
{"snippet": "@dec_speak\nclass Parrot:\n    def __init__(self):\n        self.state = 'late'\n", "intent": "We can use that function to decorate our custom classes too, using the short **@** syntax too.\n"}
{"snippet": "a = 1, 2, 3, 4, 5\na[2:4]\n", "intent": "Or we can even slice them:\n"}
{"snippet": "symbol, year, month, day, open_, high, low, close = record\n", "intent": "We could then unpack the record using straight unpacking:\n"}
{"snippet": "isinstance(pt1, tuple)\n", "intent": "However, `Point2D` is a subclass of `tuple`, while `Point3D` is not:\n"}
{"snippet": "Stock = namedtuple('Stock', 'symbol, year, month, day, open, high, low, close')\n", "intent": "This would work equally well:\n"}
{"snippet": "' '.join(Stock._fields) + ' previous_close'\n", "intent": "If you did not want to use tuple concatenation for some reason, you could also do it using strings:\n"}
{"snippet": "data_dict_2 = dict(key1=100, key3=300, key2=200)\n", "intent": "This looks like it worked. \nBut consider this second dictionary, where we do not create the keys in the same order:\n"}
{"snippet": "Struct = namedtuple('Struct', keys)\n", "intent": "Now we can go ahead and create a named tuple with all those keys as fields:\n"}
{"snippet": "f = fractions.Fraction(2, 3)\n", "intent": "And now we have a symbol for the `fractions` object.\n"}
{"snippet": "plot_angle(spectrum, thresh=0)\nthinkplot.config(xlim=[0, spectrum.max_freq], ylim = [-np.pi, np.pi])\n", "intent": "At most frequencies, the amplitude is small and the angle is pretty much a random number.  So if we plot all of the angles, it's a bit of a mess.\n"}
{"snippet": "d = {'a':1, 'b':2, 'c':3, 'x':100, 'y':200}\nprint('start:', d)\nd.popitem()\nprint('pop last item:', d)\n", "intent": "That one's trivial - just use `popitem`:\n"}
{"snippet": "random.seed(0)\nfor i in range(10):\n    print(random.randint(10, 20), random.random())\n", "intent": "We can set the **seed** as follows:\n"}
{"snippet": "l = random.choices(range(101), k=50)\nprint(l)\n", "intent": "But we could just use the `choices` method instead with a range(101):\n"}
{"snippet": "def pick_random(lst):\n    return random.choice(lst)\n", "intent": "One more thing to point out is that functions defined at the module level are actually in our global namespace as well:\n"}
{"snippet": "[1, 2, 3] + [4, 5, 6]\n", "intent": "We can **concatenate** sequences using the `+` operator:\n"}
{"snippet": "x = [ [0, 0] ]\nl = x + x\n", "intent": "This is not a big deal if the objects being concatenated are immutable. But if they are mutable:\n"}
{"snippet": "l = [1, 2, 3]\nl.extend(('a', 'b', 'c'))\nprint(l)\n", "intent": "If we extend with another sequence, then positional ordering is retained:\n"}
{"snippet": "timeit(\"([1, 2], 10, 20)\", number=1_000_000)\n", "intent": "And of course this is reflected in the timings too:\n"}
{"snippet": "s1 = 'python'\ns2 = str(s1)\nprint(s2)\nprint(s1 is s2)\n", "intent": "Same deal with strings:\n"}
{"snippet": "def plot_three(spectrum, thresh=1):\n    thinkplot.preplot(cols=3)\n    spectrum.plot()\n    thinkplot.subplot(2)\n    plot_angle(spectrum, thresh=thresh)\n    thinkplot.subplot(3)\n    wave = spectrum.make_wave()\n    wave.segment(duration=0.01).plot()\n    wave.apodize()\n    display(wave.make_audio())\n", "intent": "The following function plots the amplitudes, angles, and waveform for a given spectrum. \n"}
{"snippet": "index = 0\nwhile True:\n    try:\n        item = my_list.__getitem__(index)\n    except IndexError:\n        break\n    print(item ** 2)\n    index += 1\n", "intent": "Now let's do the same thing ourselves without a for loop:\n"}
{"snippet": "l = [1, 2, 3, 4, 5]\n", "intent": "In fact, since strings are iterables, this would work too:\n"}
{"snippet": "isinstance(1+1j, numbers.Real)\n", "intent": "We will want our points to be real numbers only, so we can do it this way:\n"}
{"snippet": "p[0] = Point(100, 100)\n", "intent": "So this seems to work fine. But this won't yet:\n"}
{"snippet": "d = {3: 100, 2: 200, 1: 10}\nsorted(d)\n", "intent": "We actually are iterating the keys.\nSame thing happens with sorting - we'll end up just sorting the keys:\n"}
{"snippet": "random.seed(0)\nn = 10_000_000\nl = [random.randint(0, 100) for n in range(n)]\ntimeit(stmt='l.sort()', globals=globals(), number=1)\n", "intent": "I also just want to point out that sorting a list that is already sorted results in much better performance!\n"}
{"snippet": "sq = Squares(5)\nwhile True:\n    try:\n        print(sq.next_())\n    except StopIteration:\n        break       \n", "intent": "So now, we can essentially loop over the collection in a very similar way to how we did it with sequences and the `__getitem__` method:\n"}
{"snippet": "sq = Squares(5)\nlist(enumerate(sq))\n", "intent": "we get an empty list - instead we have to create a new iterator first:\n"}
{"snippet": "'__iter__' in dir(l)\n", "intent": "Since the list `l` is an iterable it also implements the `__iter__` method:\n"}
{"snippet": "def get_lyric_urls():\n    index = requests.get(\"http://www.lyricsfreak.com/e/erasure/\")\n    soup = BeautifulSoup(index.text, 'html.parser')\n    lyric_paths = [link.get('href') for link in soup.find_all('table')[1].find_all('a')]\n    lyric_urls = ['http://www.lyricsfreak.com'+path for path in lyric_paths]\n    return lyric_urls\n", "intent": "First get the page that has an index of all the lyrics and create a list of the URLs of those pages:\n"}
{"snippet": "e = enumerate('Python rocks!')\n", "intent": "The `enumerate` function is another lazy iterator:\n"}
{"snippet": "class CounterIterator:\n    def __init__(self, counter_callable):\n        self.counter_callable = counter_callable\n    def __iter__(self):\n        return self\n    def __next__(self):\n        return self.counter_callable()\n", "intent": "Technically we can make an iterator to iterate over this counter:\n"}
{"snippet": "class PolygonsIterator:\n    def __init__(self, m, R):\n        if m < 3:\n            raise ValueError('m must be greater than 3')\n        self._m = m\n        self._R = R\n    def __iter__(self):\n        return self\n    def __next__(self):\n        pass\n", "intent": "We now need to implement the iterable protocol - which means we'll need to implement an iterator first.\n"}
{"snippet": "def fib(n):\n    fib_0 = 1\n    fib_1 = 1\n    for i in range(n-1):\n        fib_0, fib_1 = fib_1, fib_0 + fib_1\n    return fib_1\n", "intent": "So we can use a non-recursive approach to calculate the `n-th` Fibonacci number:\n"}
{"snippet": "def squares_gen(n):\n    for i in range(n):\n        yield i ** 2\n", "intent": "Let's write a simple generator that generates the squares of integers:\n"}
{"snippet": "raw_data = read_data()\nfor _ in range(5):\n    print(next(raw_data))\n", "intent": "We can test it out easily:\n"}
{"snippet": "d = defaultdict(int)\n", "intent": "As you can see it returned an empty string.\nIn our case, we want to use it to count, so we can make our default be integers:\n"}
{"snippet": "list(islice(factorials(), 5))\n", "intent": "Or we could use `islice` as follows:\n"}
{"snippet": "g = cycle(('red', 'green', 'blue'))\n", "intent": "`cycle` is used to repeatedly loop over an iterable:\n"}
{"snippet": "def zero_angle(spectrum):\n    res = spectrum.copy()\n    res.hs = res.amps\n    return res\n", "intent": "Now let's see what happens if we set all the angles to zero.\n"}
{"snippet": "def running_reduce(fn, iterable, start=None):\n    it = iter(iterable)\n    if start is None:\n        accumulator = next(it)\n    else:\n        accumulator = start\n    yield accumulator\n    for item in it:\n        accumulator = fn(accumulator, item)\n        yield accumulator\n", "intent": "We could try doing it ourselves as follows:\n"}
{"snippet": "from itertools import tee\ndef matrix(n):\n    return ((i, j, i*j) \n            for i, j in itertools.product(*itertools.tee(range(1, n+1), 2)))\n", "intent": "You'll notice how we repeated the `range(1, n+1)` twice?\nThis is a great example of where `tee` can be useful:\n"}
{"snippet": "from collections import namedtuple\nCard = namedtuple('Card', 'rank suit')\n", "intent": "I would much prefer having a named tuple for the deck, so let's do that as well:\n"}
{"snippet": "lambda x: isinstance(x, Number)\n", "intent": "or, simply a lambda:\n"}
{"snippet": "with open('cars_2014.csv') as f:\n    next(f)  \n    make_groups = itertools.groupby(f, key=lambda x: x.split(',')[0])\n    make_counts = ((key, sum(1 for model in models)) \n                    for key, models in make_groups)\n    print(list(make_counts))\n", "intent": "Well, if we think about this, we could simply \"replace\" each element in \nthe models, with a `1`, and sum that up...\n"}
{"snippet": "with File('test.txt', 'r') as file_ctx:\n    print(next(file_ctx.file))\n    print(file_ctx.name)\n    print(file_ctx.mode)\n", "intent": "Of course, now we would have to use the context manager object's `file` property to get a handle to the file:\n"}
{"snippet": "file_gen = open_file('test.txt')\nwith GenContextManager(file_gen) as f:\n    print(f.readlines())\n", "intent": "And we can read back from the file too:\n"}
{"snippet": "dq = deque([1, 2, 3, 4], maxlen=5)\n", "intent": "We can create a capped queue:\n"}
{"snippet": "getgeneratorstate(g)\n", "intent": "And the generator is now in a suspended state, waiting for our next call:\n"}
{"snippet": "def rotate_angle(spectrum, offset):\n    res = spectrum.copy()\n    res.hs *= np.exp(1j * offset)\n    return res\n", "intent": "If we multiply the complex components by $\\exp(i\\phi)$, it has the effect of adding $\\phi$ to the angles:\n"}
{"snippet": "print_data = handle_data()\ngen = power_up(2, print_data)\nfor i in range(1, 6):\n    gen.send(i)\n", "intent": "We are going to generate some data, send it to `power_up`, and specify the next stage as being `handle_data`:\n"}
{"snippet": "def fn_add(a, b):\n    return a + b\ndef fn_inv(a):\n    return 1/a\ndef fn_mult(a, b):\n    return a * b\n", "intent": "A simple application of this might be to store the argument values we want to use to call the function at a later time:\n"}
{"snippet": "d = {}  \nfor k, v in zip(keys, values):\n    d[k] = v\n", "intent": "We can then easily create a dictionary this way - the non-Pythonic way!\n"}
{"snippet": "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'c': 30, 'd': 4, 'e': 5}\n", "intent": "Now let's look at these views:\n"}
{"snippet": "d3.values() | d4.values()\n", "intent": "Can we perform some set operations on the values?\n"}
{"snippet": "d1 = {'a': 1, 'b': 2}\n", "intent": "Note how the key order is maintained and based on the order in which the dictionaries were create/updated.\n"}
{"snippet": "p1 = Person('John', 78)\np2 = Person('Eric', 75)\npersons = {p1: 'John object', p2: 'Eric object'}\n", "intent": "Because of this default hash calculation, we can actually use custom objects as keys in dictionaries:\n"}
{"snippet": "class Test:\n    def __hash__(self):\n        return 'a string'\n", "intent": "The `__hash__` method must return an integer - Python will complain otherwise:\n"}
{"snippet": "d = {'python': 16,\n     'javascript': 15,\n     'java': 13,\n     'c\n     'c++': 10, \n     'go': 9}\n", "intent": "If only servers 1 and 2 return data (so d1 and d2), your results would look like:\n"}
{"snippet": "spectrum3 = rotate_angle(spectrum, 1)\nplot_three(spectrum3)\n", "intent": "We can see the effect in the figure below.  Again, the wave form is different, but it sounds pretty much the same.\n"}
{"snippet": "s = set()\nd = dict()\nl = list()\n", "intent": "Even for empty objects:\n"}
{"snippet": "s1 = {1, 2, 3, 4, 5}\ns2 = {4, 5, 6, 7, 8}\n", "intent": "We can calculate the symmetirc difference of two sets also in two ways:\n"}
{"snippet": "data = gen_read_data()\n", "intent": "And we can use this generator this way:\n"}
{"snippet": "d[frozenset({'John', 78})]\n", "intent": "And we can easily lookup using those keys now:\n"}
{"snippet": "d = {k: randint(0, 100) for k in range(10_000)}\nitems = d.items()\ndef iterate_view(view):\n    for k, v in view:\n        pass\ndef iterate_clunky(d):\n    for k in d:\n        d[k]\nprint(timeit('iterate_view(items)', globals=globals(), number=5_000))\nprint(timeit('iterate_clunky(d)', globals=globals(), number=5_000))\n", "intent": "But this is quite inefficient!\nLet's try some timings.\n"}
{"snippet": "d1 = {\"a\": 100, \"b\": 200}\n", "intent": "Let's see a quick example first:\n"}
{"snippet": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def __repr__(self):\n        return f'Person(name={self.name}, age={self.age})'\n", "intent": "How about our own objects? As long as they have a string representation we should be fine, or will we?\n"}
{"snippet": "log_record = dict(time=datetime.utcnow(),\n                  message='Created new person record',\n                  person=p)\n", "intent": "We can now serialize a more complex object:\n"}
{"snippet": "json.dumps(dict(name='test', time=datetime.utcnow()), cls=CustomJSONEncoder)\n", "intent": "And we can now use this custom encoder by specifying it when we use `dump`/`dumps`:\n"}
{"snippet": "def random_angle(spectrum):\n    res = spectrum.copy()\n    angles = np.random.uniform(0, PI2, len(spectrum))\n    res.hs *= np.exp(1j * angles)\n    return res\n", "intent": "So let's see what happens if we set the angles to random values.\n"}
{"snippet": "p4 = Person(100, None, 200)\n", "intent": "What happens if we have the wrong data type for those fields?\n"}
{"snippet": "dumps(activity, cls=CustomEncoder)\n", "intent": "This will not work quite yet - we are not handling decimal, date and datetime serialization:\n"}
{"snippet": "result = ActivitySchema().dumps(activity, indent=2).data\n", "intent": "And we can now serialize and deserialize:\n"}
{"snippet": "persons = {\n    'john': defaultdict(lambda: 'unknown', \n                        age=20, eye_color='blue'),\n    'jack': defaultdict(lambda: 'unknown',\n                        age=20, eye_color='brown'),\n    'jill': defaultdict(lambda: 'unknown',\n                        age=22, eye_color='blue'),\n    'eric': defaultdict(lambda: 'unknown', age=35),\n    'michael': defaultdict(lambda: 'unknown', age=27)\n}\n", "intent": "So, using this, if we had used a `defaultdict` for the Person values, we could simplify our previous example a bit more:\n"}
{"snippet": "first_key = next(iter(d2.keys()))\nprint(d2)\nprint(first_key)\n", "intent": "Getting the first key is not difficult - we simply retrieve the first key from the keys() view for example:\n"}
{"snippet": "sentence = 'the quick brown fox jumps over the lazy dog'\n", "intent": "Let's say we want to count the frequency of each character in a string:\n"}
{"snippet": "import random\nrandom.seed(0)\nwidgets = ['battery', 'charger', 'cable', 'case', 'keyboard', 'mouse']\norders = [(random.choice(widgets), random.randint(1, 5)) for _ in range(100)]\nrefunds = [(random.choice(widgets), random.randint(1, 3)) for _ in range(20)]\n", "intent": "Let's simulate both of these lists:\n"}
{"snippet": "d3 = {'e': 5, 'f': 6}\nd.maps.append(d3)\n", "intent": "As you can see this is a list, and so we can actually manipulate it as we would any list:\n"}
{"snippet": "from collections import defaultdict\ndef merge(*dicts):\n    unsorted = defaultdict(int)\n    for d in dicts:\n        for k, v in d.items():\n            unsorted[k] += v\n    return dict(sorted(unsorted.items(), key=lambda e: e[1], reverse=True))\n", "intent": "Using `defaultdict` objects does not greatly simplify the problem, but at least we can get rid of the `get` logic:\n"}
{"snippet": "spectrum4 = random_angle(spectrum)\nplot_three(spectrum4)\n", "intent": "The effect on the waveform is profound, but the perceived sound is the same.\n"}
{"snippet": "days_adjust = np.array([1.5, 3.7])\nadjusted = daily_records - days_adjust\n", "intent": "Now suppose you want to apply a correction for each day.\nFor example, you might try :\n"}
{"snippet": "plotMAP(variance,scale=\"Annual Cycle\")\n", "intent": "One can also check which areas have the strongest variance in the seasonal cycle\n"}
{"snippet": "d = getCubeData(c, variable = \"gross_primary_productivity\", region = \"AMZ\")\n", "intent": "Or for SREX regions:\n"}
{"snippet": "tair=getCubeData(c,variable=\"air_temperature_2m\",region=\"Europe\")\nmtair=mapCube(timeMean,tair);\n", "intent": "In the first experiment we assume that the model parameter **Topt** equals the mean temperature of each grid cell.\n"}
{"snippet": "A=231\nif A<30:\n    print 'A is smaller than 30'\nelse:\n    print 'A is equal to or larger than 30'\n", "intent": "A conditional statement can take any of the following forms.\n"}
{"snippet": "url=\"http://espn.go.com/mlb/stats/team/_/stat/batting/year/2015\"\n", "intent": "We will first scrape the page corresponding to the 2015 season \n"}
{"snippet": "if 5 < 4:\n    print('Yep, right!')\n    print('hello')\nprint('Still, right!')\n", "intent": "**OBS!** Remember intendation to match your intents.\n"}
{"snippet": "my_favs_doubled = []\nfor number in my_favorite_numbers:\n    doubled = 2 * number\n    my_favs_doubled.append(doubled)\nmy_favs_doubled\n", "intent": "Write a `for`-loop to create a list called `my_favs_doubled` that doubles each number in `my_favorite_numbers`.\n"}
{"snippet": "my_string.replace(\"Neurocoders\", \"Neuroscientists\")\nid(my_string)\n", "intent": "Here are a few useful built-in methods for strings:\n"}
{"snippet": "wave = thinkdsp.read_wave('120994__thirsk__120-oboe.wav')\nwave.make_audio()\n", "intent": "With more natural sounds, the results are somewhat different.  Here's recording of an oboe.\n"}
{"snippet": "lab_inventory['gauze (box)'] += 10\nprint(lab_inventory)\n", "intent": "If there is a new delivery of 10 more boxes of gauze, here is how you add it:\n"}
{"snippet": "mRNA_sequence = coding_sequence.replace(\"T\", \"U\")\nprint(mRNA_sequence)\n", "intent": "Hint: See if there is a string method that lets you *replace* substrings.\n"}
{"snippet": "station_graph = GraphFrame(station_vertices, trip_edges)\n", "intent": "In the next cell, you will create a GraphFrame passing in a vertex list and an edge list. Which is which from your original datasets?\n"}
{"snippet": "input_value = input('Enter a positive integer:')\nn = int(input_value)\nresult = 1\nwhile n > 1:\n    result = result * n\n    print(result)\n    n = n - 1\nprint(\"The factorial of \" + input_value + \" is: \", result)\n", "intent": "Consider the following example that uses iteration to derive a factorial\n"}
{"snippet": "startState = [4, 7, 2, 1, 6, 5, 0, 3, 8]\npath = iterativeDeepeningSearch(startState, goalState, actionsF_8p, takeActionF_8p, 3)\npath\n", "intent": "Also notice that the successor states are lists, not tuples.  This is okay, because the search functions for this assignment do not\n"}
{"snippet": "update_display('z', display_id='here')\n", "intent": "And just like `display`, there is now `update_display`,\nwhich is what `DisplayHandle.update` calls:\n"}
{"snippet": "height[height>1.70]\n", "intent": "*  Conditional selection\n"}
{"snippet": "x <- 0:50\nplot(x, dbinom(x, size=50, prob=.33), type=\"h\",ylab=\" \")\n", "intent": "* Plot the density for a binomial random variable $B(50, 0.33)$ (use the parameter `type=\"h\"` for the plot function to generate a pin diagram)\n"}
{"snippet": "tanner.sex/sum(tanner.sex)\n", "intent": "*  Compute the proportions with respect to the global total of the table:\n"}
{"snippet": "segment = wave.segment(start=0.05, duration=0.6)\n", "intent": "I'll select a segment where the pitch is constant.\n"}
{"snippet": "wp.wv.save_word2vec_format('wp.bin')\n", "intent": "Let us save this so that we can continue\n"}
{"snippet": "width='4'\nlength='5'\nprint('Area =',width*length)\n", "intent": "__4)__ Re-define the variable `width` as a string, now repeat the area calculation. What happens? Why?\n"}
{"snippet": "a = np.arange(10)\na[(a > 1) & (a < 5)]\n", "intent": "One common use case is to select all values from an array in some range or greater than some number:\n"}
{"snippet": "import glob\nglob.glob(\"/Users/adrian/Downloads/a*\")\n", "intent": "__5)__ Redo 2) and 3) using the `glob` module. \n"}
{"snippet": "primes = np.ones(1000, dtype=bool)\n", "intent": "__9.1)__ Create a length 1000 array of `True` values called `primes`\n"}
{"snippet": "num_females = 0\nfor gender in gen:\n    if gender == 'female':\n        num_females += 1\nprint 'There were ' + str(num_females) + ' female passengers onboard.'\n", "intent": "**4) How many female passengers were onboard?**\n"}
{"snippet": "x = np.arange(10.4)\nprint(x)\n", "intent": "https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.arange.html\n"}
{"snippet": "print(2**2**2**2**2)\n", "intent": "Well, we just print the really big number:\n"}
{"snippet": "\"hello,\" + \" \" + \"world!\"\n", "intent": "You can use the ``+`` operator to combine strings:\n"}
{"snippet": "spectrum = segment.make_spectrum()\nplot_three(spectrum, thresh=50)\n", "intent": "Here's what the original looks like.\n"}
{"snippet": "x = np.array([1,2,3,4,5])\nx > 2\n", "intent": "We can also use logical operators, e.g.\n"}
{"snippet": "def double_and_halve(value):\n    return value * 2., value / 2.\n", "intent": "... and can also return multiple values by using commas to separate them:\n"}
{"snippet": "from util import *\nis_even(4)\n", "intent": "There is even a variant to import all names that a module defines:\n"}
{"snippet": "class Person(object):\n    def __init__(self, name):\n        self.name = name\n    def say_hello(self):\n        print \"Hello, my name is \" + self.name\n", "intent": "A **class** is used to define an **object** using the following syntax:\n"}
{"snippet": "class ChargedParticle(Particle):\n    def __init__(self, mass, x, y, z, vx, vy, vz, charge):\n        self.charge = charge\n        Particle.__init__(self, mass, x, y, z, vx, vy, vz)  \n", "intent": "Exercise 5\n-----------\n"}
{"snippet": "some_date_and_time = dt.datetime(year=2005, month=1, day=1, hour=12, minute=17, second=2)\nprint some_date_and_time\n", "intent": "We can create a datetime object by specifying the exact date and time we want it to represent, like this:\n"}
{"snippet": "year = year + 1900\ntest_date = dt.datetime(year, month, day)\nprint test_date.year\nif test_date.year > 1990:\n    print \"Date in the near past\"\nelse:\n    print \"Date in the far past\"\n", "intent": "The solution is to manually add the century to the date:\n"}
{"snippet": "some_numbers = [1, 2, 10, 99, 37, 45, 62, 78, 19]\naccumulator = 0\nfor x in some_numbers:\n    accumulator += x\nprint \"mean = \", float (accumulator)/len(some_numbers)\n", "intent": "<h3> Looping over a list </h3>\n"}
{"snippet": "a = pandas.Series([1, 2, 3])\nb = pandas.Series([2, 4, 8])\n", "intent": "<p> We can also perform arithmetic between series; the results will again be another series: </p>\n"}
{"snippet": "spectrum2 = zero_angle(spectrum)\nplot_three(spectrum2, thresh=50)\n", "intent": "Here it is with all angles set to zero.\n"}
{"snippet": " some_numbers = [1, 5, 4, 3, 0] \n", "intent": "<h2> Lists </h2>\nLists simply store a set of values in order, like this:\n"}
{"snippet": "for x in phone_book: \n    print (type(x))\n    print (x)\nfor x in phone_book.keys(): \n    print (type(x))\n    print (x)\n", "intent": "<h2>Iterating over a Dictionary</h2>\n"}
{"snippet": "def convert_to_int(text):\n    try:\n        return int(text)\n    except:\n        return None\n", "intent": "Load the MovieData.csv dataset as described in this week's lesson, and use it to find the following values:\n"}
{"snippet": "data_dict = {\"experiment\": \"current vs. voltage\",\n        \"run\": 47,\n        \"temperature\": 372.756, \n        \"currents\": [-1.0, -0.5, 0.0, 0.5, 1.0], \n        \"voltages\": [-2.0, -1.0, 0.0, 1.0, 2.0],\n        }\n", "intent": "A Python dictionary is an unordered collection of key-value pairs.\n"}
{"snippet": "first_10_word_probabilities_per_candidate_H = {k: word_probabilities_per_candidate[\"hillary\"][k] for k in word_probabilities_per_candidate[\"hillary\"].keys()[:10]}\nfirst_10_word_probabilities_per_candidate_H\n", "intent": "Now let's take a look at some of our calculated word probabilities for each candidate.\n"}
{"snippet": "document_tree = ET.parse( 'mondial_database_less.xml' )\n", "intent": "+ for details about tree traversal and iterators, see https://docs.python.org/2.7/library/xml.etree.elementtree.html\n"}
{"snippet": "def countDog(my_input):\n    return my_input.lower().count('dog')\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "from sympy import *\nfrom sympy.abc import *\ninit_printing()\n", "intent": "Joseph C. Slater, Oct. 2018\n"}
{"snippet": "step1 = EC.subs(F_AB, solve(EB,F_AB)[0])\nstep1\n", "intent": "I'm going to do substitutions in stages, eliminating one variable at a time for clarity.\n"}
{"snippet": "def get_lyric(url):\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, 'html.parser')\n    return str(soup.find_all(id=\"content_h\")[0])\n", "intent": "Here is a function that takes the URL of a single lyric page and scrapes the actual lyric as text:\n"}
{"snippet": "def paper_doll(text):\n    result = ''\n    for letter in text:\n        result = result + letter * 3\n    return result\n", "intent": "    paper_doll('Hello') --> 'HHHeeellllllooo'\n    paper_doll('Mississippi') --> 'MMMiiissssssiiippppppiii'\n"}
{"snippet": "for my_sum(i=0):\n    while True:\n        yield n\n        n += 1\n", "intent": "Keep adding the next integer: 0 + 1 + 2 + 3 + 4 + 5....\nThe resulting sequence is 0, 1, 3, 6, 10, 15....\n"}
{"snippet": "try:\n    a = np.ones((11, 13, 17, 23, 29, 37, 47))\nexcept MemoryError:\n    print('this would have been a memory error')\n", "intent": "NumPy can only work with the system memory.  If too large an array is realised, a memory error will result.\n"}
{"snippet": "dog_string = 'This dog runs faster than the other dog'\nstring_list = list(dog_string.split())\ncount = 0\nfor word in string_list:\n    if word == 'dog':\n        count += 1\n    else:\n        count += 0\nprint(count)\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "def makes10(a, b):\n    return a==10 or b==10 or a+b==10\nmakes10(9,9)\n", "intent": "5) Warm up 1:\nGiven 2 ints, a and b, return True if one if them is 10 or if their sum is 10.\n"}
{"snippet": "reuslt = colors.upper()\nprint(result)\n", "intent": "Write a list comprehension called `COLORS` that converts the list `colors` to uppercase strings.\n"}
{"snippet": "cursor = db.restaurants.find({'name': 'Panchito\\'S'})\nfor documents in cursor:\n    print(documents)\nresult = db.restaurants.update_one({'name': 'Panchito\\'S'}, {'$set': {'cuisine': 'Spanish'}})\nprint('after the update')\ncursor = db.restaurants.find({'name': 'Panchito\\'S'})\nfor documents in cursor:\n    print(documents)\n", "intent": "Update a document, here: change Panchito's meal style from Mexican to Spanish\n"}
{"snippet": "path,filename = os.path.split('/home/septimo/.pycharm/hello.c')\n", "intent": "the os.path.split() function will build a tuple(path, filename) from the filesystem's path:\n"}
{"snippet": "using Distributions\n", "intent": "Set up the environment (possibly install packages)\n"}
{"snippet": "spectrum4 = random_angle(spectrum)\nplot_three(spectrum4, thresh=50)\n", "intent": "And here it is with randomized angles.\n"}
{"snippet": "*(\"I love \", \"Nutella\")\n", "intent": "The following won't work, because there is no method for it:\n```\n+(\"I love \", \"Nutalla!\")\n```\n"}
{"snippet": "foo(\"hello\", \"hi!\")\n", "intent": "Now `foo` works on integers! But look, `foo` also still works when `x` and `y` are strings!\n"}
{"snippet": "days = 365\nconvert(Float64, days)\n", "intent": "Assign `365` to a variable named `days`. Convert `days` to a float.\n"}
{"snippet": "p1 = plot(x, x)\np2 = plot(x, x.^2)\np3 = plot(x, x.^3)\np4 = plot(x, x.^4)\nplot(p1,p2,p3,p4,layout=(2,2),legend=false)\n", "intent": "Execute the following code\n"}
{"snippet": "caesar(-4, \"lipps\")\n", "intent": "If you think you have this working, try out\n```julia\ncaesar(-4, \"lipps\")\n```\n"}
{"snippet": "sparse(reshape(z, 2, 2))\n", "intent": "- Compare the following two data structures:\n"}
{"snippet": "using JuliaDB\nIndexedTables.set_show_compact!(false)\nt = load(\"stocks.jdb\")\n", "intent": "- Let's load the data we saved in the previous notebook:\n"}
{"snippet": "dt = loadtable(\"stocksample\", filenamecol = :Ticker, indexcols = [:Ticker, :Date])\n", "intent": "- Note the line above the column names printed below:\n`Distributed Table with 56023 rows in 2 chunks`\n"}
{"snippet": "sol = solve(prob,dense=false)\n", "intent": "If we need to reduce the amount of saving, we can also turn off the continuous output directly via `dense=false`:\n"}
{"snippet": "wave = thinkdsp.read_wave('100475__iluppai__saxophone-weep.wav')\nwave.make_audio()\nsegment = wave.segment(start=1.9, duration=0.6)\n", "intent": "Let's try the same thing with a segment from a recording of a saxophone.\n"}
{"snippet": "u0 = [1.,0.]\nharmonic! = @ode_def HarmonicOscillator begin\n   dv = -x\n   dx = v\nend\ntspan = (0.0,10.0)\nprob = ODEProblem(harmonic!,u0,tspan)\nsol = solve(prob)\nplot(sol)\n", "intent": "Let's look at another model now -- the model of the [Harmonic Oscillator](https://en.wikipedia.org/wiki/Harmonic_oscillator). We can write this as:\n"}
{"snippet": "plot(sol,vars=(1,2,3),denseplot=false)\n", "intent": "This shows that the recipe is using the interpolation to smooth the plot. It becomes abundantly clear when we turn it off using `denseplot=false`:\n"}
{"snippet": "print 'Big', 'Houses'\n", "intent": "Include a trailing comma in your line of code to produce *Big Houses*.\n"}
{"snippet": "max(25, 65, 890, 15)\n", "intent": "Obtain the maximum number among the values 25, 65, 890, and 15.\n"}
{"snippet": "Cars = \"BMW\", \"Dodge\", \"Ford\"\nCars\n", "intent": "Create a tuple, called \"Cars\", with elements \"BMW\", \"Dodge\", and \"Ford\". \n"}
{"snippet": "import numpy as np\nfrom pandas_datareader import data as wb\nMSFT = wb.DataReader('MSFT', data_source='google', start='2002-1-1')\nMSFT['simple_return'] = (MSFT['Close'] / MSFT['Close'].shift(1)) - 1\nprint MSFT['simple_return']\n", "intent": "$$\n\\frac{P_1 - P_0}{P_0} = \\frac{P_1}{P_0} - 1\n$$\n"}
{"snippet": "print(first_name)\nprint(first_name_titled)\n", "intent": "**Note**: Please notice that the original strings remain **always** unchanged\n"}
{"snippet": "usernames = ['bernice', 'cody', 'aaron']\nuser_count = len(usernames)\nprint(user_count)\n", "intent": "<a name='length'></a>Finding the length of a list\n---\nYou can find the length of a list using the *len()* function.\n"}
{"snippet": "def thank_you(name):\n    print(\"\\nYou are doing good work, %s!\" % name)\n    print(\"Thank you very much for your efforts on this project.\")\nthank_you('Billy')\nthank_you('Caroline')\nthank_you()\n", "intent": "This function works fine, but it fails if you don't pass in a value:\n"}
{"snippet": "spectrum3 = rotate_angle(spectrum, 1)\nplot_three(spectrum3, thresh=50)\n", "intent": "Rotate angles by 1 radian.\n"}
{"snippet": "c = np.array([1, 2, 3], dtype=float)\nc.dtype\n", "intent": "You can explicitly specify which data-type you want:\n"}
{"snippet": "'Hello world menggunakan single quote'\n", "intent": "Membuat string di python dapat dilakukan dengan menggunakan karakter \"single quote('')\" atau menggunakan 'double quote (\"\")'.\n"}
{"snippet": "def chessCstyle(H,W):\n   f = np.empty((H,W),'uint8')\n   for row in range(H):\n     for col in range(W):\n       f[row,col] = (row+col)%2\n   return f\nprint(\"C Style:\\n\", chessCstyle(4,8))\n", "intent": "This is the traditional way that a C programmer would solve the problem - scan\nevery pixel and apply the equation.\n"}
{"snippet": "def lesser_of_two_evens(a,b):\n    if a % 2 == 0 and b % 2 == 0:\n        return min(a,b)\n    else:\n        return max(a,b)\n", "intent": "    lesser_of_two_evens(2,4) --> 2\n    lesser_of_two_evens(2,5) --> 5\n"}
{"snippet": "pd.read_sql(\".schema EmployeeBase\", con=conn)\n", "intent": "Import each of the 3 tables to a Pandas Dataframes\n"}
{"snippet": "for r in range(0,11,2):\n    print(r)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "groceries = ['apple', 'orange', 'lemon', 'banana', 'cauliflower', 'carrot', 'potato']\ndef reverse(old_list):\n    if len(old_list) > 0:\n        last = old_list[-1]\n        init = old_list[:-1]\n        return [last] + reverse(init)\n    return []\nreverse(groceries)\n", "intent": "Now, instead of using a while loop, we could have a function call itself until we have run through all the items:\n"}
{"snippet": "var(\"r theta phi t w1 w2\")\n", "intent": "Define some variables, radial, polar, azimuthal, time, and two frequencies:\n"}
{"snippet": "def is_perfect_square(n):\n    return n**.5 == int(n**.5)\nperfect_squares = list(filter(is_perfect_square, range(100)))\nperfect_squares\n", "intent": "Before we use that lambda function, let's see how `filter()` works with a named function.\n"}
{"snippet": "spectrum4 = random_angle(spectrum)\nplot_three(spectrum4, thresh=50)\n", "intent": "Randomize the angles.\n"}
{"snippet": "class WeightedDie():\n    def __init__(self, weights):\n        self._weights = weights\n    def roll(self):\n        r = MyRandom()\n        return r.weighted_choice(self._weights)\n", "intent": "Create a new WeightedDie class using the MyRandom class.\n"}
{"snippet": "results = zip([1,2,3],[4,5,6])\nprint(results)\n", "intent": "The `zip()` function returns a special iterator object.\n"}
{"snippet": "import Base.+ \n+(x::AbstractString, y::AbstractString) = x * \" \" * y\n", "intent": "But we can easily extend `+` to support a concatenation for strings, if we want:\n"}
{"snippet": "team = [\"Peter\", \"Susan\", \"Adam\", \"David\", \"Richard\", \"John\"]\nteam.sort()\nprint(team[2])\nprint(team[-1])\nteam.reverse()\nprint(team[0])\n", "intent": "Indexation is 0-based. You can use negative index values, too.\nThis applies to list and tuples, too.\n"}
{"snippet": "men = [\"John\", \"Paul\", \"George\"]\nwomen = [\"Susan\", \"Melissa\", \"Meghan\"]\nfor m in men:\n    for w in women:\n        print(w + \" and \" + m)\n", "intent": "For loops can be nested.\n"}
{"snippet": "x = random.uniform(0, 1)\nprint(x)\ny = random.randint(1, 100)\nprint(y)\n", "intent": "After this, functions of this module are accessible by typing first the module's name (here `random`), then a dot and the name of the function.\n"}
{"snippet": "def print_country_info(d_info):\n    print(\"The capital of {} is {}\".format(d_info[\"country\"], d_info[\"capital\"]))\n", "intent": "Let's try to write a function that takes a dict of data and prints a message based on it.\n"}
{"snippet": "students <- c(\"Jason\", \"Lydia\", \"Scott\", \"Stiles\")\nstudents\nstudents \n", "intent": "Let's initialize vector for the students of Beacon Hills High School:\n`Jason, Lydia, Scott and Stiles`\nand print the vector.\n"}
{"snippet": "samp_1\nsort(samp_1)\nsort(samp_1, decreasing = T)\n", "intent": "**EXERCISE 5:**\nSort samp_1 in ascending and descending orders\n"}
{"snippet": "spectrum.high_pass(600)\nspectrum.plot(high=4000)\n", "intent": "Let's run these steps one more time after filtering out the fundamental.\n"}
{"snippet": "account_balance <- 1000\ninterest_rate <- 0.10\naccount_balance\n", "intent": "Given the variables\n    account_balance <- 1000\n    interest_rate <- 0.10\nfind the value of the `account_balance` after 5 update periods.\n"}
{"snippet": "concat_factors <- function(f1, f2, ordered=TRUE) {\n    stopifnot( identical(levels(f1), levels(f2)) ) \n    return( factor(levels(f1)[ c(f1,f2) ], levels=levels(f1), ordered=ordered) )\n}\n", "intent": "If we happen to use this task frequently, we can write a function for it:\n"}
{"snippet": "hwdata <- read.table(\"mydata5.txt\", header=TRUE)\nhwdata\n", "intent": "The function `read.table()` recognizes the single- or double quotes by default.\n"}
{"snippet": "women <- heights_weights_gender$Gender == \"Female\"\nwomen_heights <- heights_weights_gender[[\"Height\"]][women]\nwomen_weights <- heights_weights_gender[[\"Weight\"]][women]\n", "intent": "Do the same for women:\n"}
{"snippet": "help(EuStockMarkets)\n", "intent": "Let's use the built-in EuStockMarkets data set to illustrate line plots.\n"}
{"snippet": "heights <- c(1.70, 1.75, 1.62)\nheights\n", "intent": "We can assign names to the elements of a vector that already exists.\n"}
{"snippet": "plot(x,y1, ylim=c(-1.1, 1.1), type=\"l\", col=\"red\")\npoints(x,y2, type=\"l\", col=\"blue\")\ntitle(\"Two functions\")\n", "intent": "The y-axis limits are set according to the first plot, so the second plot appears cropped. Let's set the limits manually.\n"}
{"snippet": "square <- function(x) {\n    return(x^2)\n}\n", "intent": "Let us define a function that returns the square of a given number.\n"}
{"snippet": "x <- c(2,3,4)\ny <- c(6,1,4)\nx >= y\n", "intent": "When used with vectors, these operations are applied elementwise, and a Boolean vector is returned.\n"}
{"snippet": "gram = wave.make_spectrogram(seg_length=1024)\ngram.plot(high=3000)\nthinkplot.config(xlabel='Time (s)', ylabel='Frequency (Hz)')\n", "intent": "The spectrogram shows the harmonic structure over time.\n"}
{"snippet": "matrix( 1:6, nrow=2 )\n", "intent": "If we specify only `nrow` or only `ncol`, and the unspecified one will be determined using the length of the vector.\n"}
{"snippet": "m <- matrix( 1:9, nrow=3 )\nm\n", "intent": "Assign new values to submatrices\n==\nA matrix can be changed in-place by selecting a submatrix using index notation, and assigning a new matrix to it.\n"}
{"snippet": "c( list(\"abc\", 32, T), list(5.1))\n", "intent": "Concatenating lists\n----\n"}
{"snippet": "word <- \"my\"\nif (is.null(wordcounts[[word]])){\n    wordcounts[[word]] <- 1\n} else {\n    wordcounts[[word]] <- wordcounts[[word]] + 1\n}\n", "intent": "So, beginning with the first word, we add it to our list:\n"}
{"snippet": "people[c(\"Can\",\"Hande\"),]\n", "intent": "We can also select using a vector of row names.\n"}
{"snippet": "exam <- data.frame(\n    student = c(\"Can\",\"Cem\",\"Hande\",\"Lale\",\"Ziya\"),\n    stringsAsFactors = F\n)\nexam\n", "intent": "We initialize a separate data frame with the student information:\n"}
{"snippet": "worker_age <- c(Emre = 25,\n                Can = 52,\n                Ceren = 33)\n", "intent": "Create the same vector, putting each value in a separate line\nGet the values and class\n"}
{"snippet": "worker_age[\"Can\", \"Ceren\"]\n", "intent": "Now get the ages by using Can's and Ceren's names, w/o combining them with c\n"}
{"snippet": "worker_income_3 <- worker_income_3[-2]\n", "intent": "Now repeat the same asignment and check the vector\n"}
{"snippet": "start = 2.0\nduration = 0.5\nsegment = wave.segment(start=start, duration=duration)\nsegment.make_audio()\n", "intent": "To see the harmonics more clearly, I'll take a segment near the 2 second mark and compute its spectrum.\n"}
{"snippet": "seq10cp <- cumprod(seq10)\nseq10cp\n", "intent": "Or cumulative product of all terms from the first to the nth term:\n"}
{"snippet": "plot(series_1, series_3, pch=5, col=\"blue\", xlab=\"x observations\", ylab=\"y observations\")\ntitle(\"Weight vs. height\")\n", "intent": "We may change the labs, the plot title, color of markers and type of markers:\n"}
{"snippet": "square_decrement_multi(5, 4)\n", "intent": "Call it with 5 for x and 4 for decr\n"}
{"snippet": "square_decrement_more <- function(x = 1, decr)\n{\n    interim <- x^2 + 2*x + 1\n    decremented <- interim - decr\n    root_1 <- sqrt(decremented)\n    root_2 <- -root_1\n    roots <- c(root_1, root_2)\n    roots <- roots + 10\n    return(c(\"I did more after return, added 10 to roots now roots are:\", roots))\n}\n", "intent": "To work it as expected, we should delete or comment out (so it doesn't execute anymore) the first return statement:\n"}
{"snippet": "vec_1 <- sample(seq(-10,10), 10)\nfor_1 <- function(vecc = vec_1)\n{\n    for (i in vecc)\n    {\n        print(i)\n    }\n}\n", "intent": "Let's put this code inside a function to step into using debug()\n"}
{"snippet": "names(mat_1) <- letters[seq_along(mat_1)]\nmat_1\n", "intent": "Or we can still define names as we did with the vector:\n"}
{"snippet": "apply(mat_r, 2, min)\n", "intent": "Let's get the col minimums:\n"}
{"snippet": "barplot(sort(frequencies, decreasing = T))\n", "intent": "Let's get the barplot sorted by frequencies:\n"}
{"snippet": "iris_avs <- merge(iris, averages, by.x = \"Species\", by.y = \"Group.1\")\niris_avs\n", "intent": "Now let's merge the average values back into the original iris df\n"}
{"snippet": "spectrum.peaks()[:10]\n", "intent": "The peaks in the spectrum are at 1392, 928, and 464 Hz.\n"}
{"snippet": "let_sub <- sample(letters, 5)\nlet_sub\nclass(let_sub)\n", "intent": "First get a subset of the letters\n"}
{"snippet": "let_sam_fact_3b <- let_sam_fact_3\nlet_sam_fact_3b[length(let_sam_fact_3b) + 1] <- levels1[1]\nlet_sam_fact_3b\nclass(let_sam_fact_3b)\n", "intent": "New let's append some value which is not a level, such as the first one we excluded\n"}
{"snippet": "set.seed(1)\nvec1 <- sample(c(\"low\", \"medium\", \"high\"), 10, replace = T)\nvec1\n", "intent": "Let's convert a character vector to factor\n"}
{"snippet": "palette(c(\"green\", \"red\", \"blue\"))\n", "intent": "Create scatterplots of selected variables:\n"}
{"snippet": "def product(x, y):\n    return x * y\nassert(call_func(3, 4, product) == 12)\nassert(call_func(\"foo\", \"bar\") == \"foobar\")\n", "intent": "This is very similar to the previous function but the third parameter is a function instead of a string.\n"}
{"snippet": "re.search(\"a*bc\", \"aaabc\")\n", "intent": "`*` matches zero or more times in a greedy manner (match as many as possible):\n"}
{"snippet": "re.search(\"[0-9\\-]+\", \"1-2\")\n", "intent": "`-` needs to be escaped if we want to include it in the character range:\n"}
{"snippet": "l = [1, 0, -2, 3, -1, -5, 0]\nsignum_l = [int(n / abs(n)) if n != 0 else 0 for n in l]\nsignum_l\n", "intent": "- since this expression implements a filtering mechanism, there is no `else` clause\n- an if-else clause can be used as the first expression though:\n"}
{"snippet": "gen = hungarian_vowels()\nwhile True:\n    try:\n        print(\"The next element is {}\".format(next(gen)))\n    except StopIteration:\n        print(\"No more elements left :(\")\n        break\n", "intent": "The `next` function returns the next element of the generator.\nA `StopIteration` is raised when no more elements are left:\n"}
{"snippet": "thinkdsp.TriangleSignal(freq=464).make_wave(duration=0.5).make_audio()\n", "intent": "The pitch we perceive is the fundamental, at 464 Hz, even though it is not the dominant frequency.\nFor comparison, here's a triangle wave at 464 Hz.\n"}
{"snippet": "def add_noise(func):\n    def wrapped_with_noise():\n        print(\"Calling function {}\".format(func.__name__))\n        func()\n        print(\"{} finished.\".format(func.__name__))\n    return wrapped_with_noise\n", "intent": "- let's create a function that takes a function return an almost identical function\n- the returned function adds some logging\n"}
{"snippet": "shopping_list = [\"apple\", \"plum\", \"pear\"]\nshopping_list = [\"apple\"]\nprint(\"The shopping list is:\\n{0}\".format(\n    \"\\n\".join(\n        \"item {0}: {1}\".format(i+1, item)\n        for i, item in enumerate(shopping_list)\n    )\n))\n", "intent": "~~~\nThe shopping list is:\nitem 1: apple\nitem 2: plum\nitem 3: pear\n~~~\n"}
{"snippet": "assert(levenshtein(\"abc\", \"ab\") == 1)\nassert(levenshtein(\"abc\", \"abc\") == 0)\nassert(levenshtein(\"abc\", \"ab c\") == 1)\nassert(levenshtein(\"\", \"abc\") == 3)\n", "intent": "Write a function that returns the Levenshtein distance of two strings.\nhttps://en.wikipedia.org/wiki/Levenshtein_distance\n"}
{"snippet": "A = np.array([[1, 2], [3, 4], [5, 6]])\nA[0], A[1]\n", "intent": "Arrays are zero-indexed.\n"}
{"snippet": "A[0, :].shape, A[:, 0].shape\n", "intent": "These are 1D vectors, neither $1\\times n$ nor $n\\times1$ matrices!\n"}
{"snippet": "A = np.arange(6).reshape(2, -1)\nB = np.arange(8).reshape(2, -1)\n", "intent": "Concatenating on the first and second dimension of 2D arrays is a very common operation, there are shorthands:\n"}
{"snippet": "np.arange(5).reshape(-1, 1) + np.zeros((5, 5))\n", "intent": "We can explicitly reshape it:\n"}
{"snippet": "vocabulary = {w:i for i, w in enumerate(set(x.split()))}\nprint(vocabulary)\nprint(\"------------------\")\nprint(words)\nprint([vocabulary[w] for w in words])\n", "intent": "To the computer, words are just abstract labels. Usually we put the words into a vocabulary and assign an integer ID to all of them.\n"}
{"snippet": "peaksWS=Load(\"peaks_qLab.nxs\")\n", "intent": "**Peaks workspaces / Table Workspaces**\n"}
{"snippet": "with open('all_erasure_lyrics.txt', 'w') as f:\n    for l in clean:\n        e = l.getText()\n        f.write(e)\n        f.write('\\n')\n", "intent": "Now save all the lyrics to a text file:\n"}
{"snippet": "matrix50.T.tolist()\n", "intent": "Transposing is when a matrix is flipped along it's top-left to bottom-right diagonal. We use `T` on a numpy array to accomplish this task.\n"}
{"snippet": "class c1:\n    def __init__(self):\n        self.__i=None   \n    def get_i(self):    \n        return self.__i\n    def put_i(self,j):\n        self.__i=j\ns=c1()\ns.put_i(10)\nprint s.get_i()\n", "intent": "<h3>Example 11.8, Page Number: 261<h3>\n"}
{"snippet": "def myabs(val):\n    if  val<0:\n        return -val\n    else:\n        return val\nprint myabs(-10)\nprint myabs(-10.0)\nprint myabs(-10L)\nprint myabs(-10.0)\n", "intent": "<h3>Example 16.6, Page Number: 383<h3>\n"}
{"snippet": "gallons=10.20     \nliters=None\nliters=gallons*3.7854  \nprint \"Liters: \",liters\n", "intent": "<h3>Example 2.4, Page Number: 20<h3>\n"}
{"snippet": "from sys import stdout\nstdout.write(\"Enter a number:\")\nval= 10.00\nstdout.write(\"\\nThis is your number: \")\nstdout.write(str(val))\n", "intent": "<h3>Example 20.5, Page Number:479<h3>\n"}
{"snippet": "def MIN(a,b):\n    if a<b:\n        return a\n    else:\n        return b\nx=10\ny=20\nprint \"The minimum is\",MIN(x,y)\n", "intent": "<h3>Example 22.1, Page Number: 550<h3>\n"}
{"snippet": "for letter in xrange(ord('Z'),ord('A')-1,-1):\n    print chr(letter),\n", "intent": "<h3>Example 3.4, Page Number: 41<h3>\n"}
{"snippet": "ch = 32\nfor ch in range(128):\n    print chr(ch)\n", "intent": "<h3>Example 4.11, Page Number: 71<h3>\n"}
{"snippet": "s=str\nstr = s   \nprint str\n", "intent": "<h3>Example 5.6, Page Number: 89<h3>\n"}
{"snippet": "corrs = autocorr(segment)\nthinkplot.plot(corrs[:200])\nthinkplot.config(xlabel='Lag', ylabel='Correlation', ylim=[-1.05, 1.05])\n", "intent": "And here's what the result:\n"}
{"snippet": "from ctypes import *\nx=c_int(10)          \np=pointer(x)         \nq=pointer(p)         \nprint q[0][0]        \n", "intent": "<h3>Example 6.12, Page Number: 123<h3>\n"}
{"snippet": "import sys\ndef main():\n    if len(sys.argv)!=2:\n        print \"You forgot to type your name.\"                                            \n        return\n    print \"Hello \",sys.argv[1]\nmain()\n", "intent": "<h3>Example 7.13, Page Number: 142<h3>\n"}
{"snippet": "def f(i):\n    i=10\n    return i      \nval=1\nprint \"Old value for val: \",val\nval=f(val)                      \nprint \"New value for val: \",val\n", "intent": "<h3>Example 8.3, Page Number: 161<h3>\n"}
{"snippet": "ch='j'                  \nwhile True:\n    c=chr(ord(ch)&223)  \n    print c\n    if c=='Q':\n        break \n    else:\n        ch = chr(ord(ch)+1)  \n", "intent": "<h3>Example 9.7, Page Number: 198<h3>\n"}
{"snippet": "s = \"hello\"  \nprint s\nprint len(s)\n", "intent": "<h3>Example 10.1 page no :105\n"}
{"snippet": "def check(answer):\n    assert answer ==42\n", "intent": "<h3>EXAMPLE 11.1 page no : 130\n"}
{"snippet": "class DangerousString:\n    def __init__(self,cp):\n        pass\n    def char(self):\n        pass\nhello = \"Hello World!\";\nprint hello \nprint \"%s\"%hello\n", "intent": "<h3>EXAMPLE 13.2 page no : 160\n"}
{"snippet": "result = 1234 * 567\nprint result\n", "intent": "<h3>example 15.5 page no : 174\n"}
{"snippet": "class DangerousString:\n    def __init__(self,cp):\n        pass\n    def char(self):\n        pass\n", "intent": "<h3>EXAMPLE 15.20 page no : 187\n"}
{"snippet": "find_frequency(corrs, 80, 100)\n", "intent": "The highest peak is at a lag 95, which corresponds to frequency 464 Hz.\n"}
{"snippet": "from __future__ import division\nP = 100; \nV = 250; \nI = P/V\nR = V/I\nprint \"Current(I):\", I,\"Ampere(A)\"\nprint \"Resistance(R):\", R,\"Ohms\"\n", "intent": "<h3>Example 8, page no. 16</h3>\n"}
{"snippet": "from __future__ import division\nR = 20; \nI = 10; \nt = 6; \np = 7; \nP = I*I*R\nE = P*t/1000 \nC = E*p\nprint \"Power(P):\", P,\"Watt(W)\"\nprint \"Cost per week:\", C,\"Paise(p)\"\n", "intent": "<h3>Example 18, page no. 19</h3>\n"}
{"snippet": "from __future__ import division\nR0 = 1000; \nT0 = 0; \nT1 = 80; \na0 = -0.0005; \nR80 = R0*(1 + (a0*T1))\nprint \"resistance\", R80,\"Ohm\"\n", "intent": "<h3>Example 10, page no. 27</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nRt  =  150;\nn  =  3;\nR  =  Rt*3\nprint  \"\\n\\nResult\\n\\n\"\nprint  \"\\n  Resistance  \",R,\"  Ohms\\n\"\n", "intent": "<h3>Example 14, page no. 52</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nW  =  1.2;\nQ  =  10E-3;\nV  =  2*W/Q\nC  =  Q/V\nprint  \"\\n\\nResult\\n\\n\"\nprint  \"\\n  (a)P.d  \",V,\"  V\\n\"\nprint  \"\\n  (b)Capacitance  \",round((C/1E-6),2),\"  uF\\n\"\n", "intent": "<h3>Example 17, page no. 68</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nI  =  4;\nN  =  800;\nPhi  =  0.005;\nL  =  N*Phi/I\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  Inductance  L  =  \",L,\"  H\\n\"\n", "intent": "<h3>Example 11, page no. 107</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nE1  =  1.0186;\nl1  =  0.400;\nl2  =  0.650;\nE2  =  (l2/l1)*E1\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  the  e.m.f.  of  a  dry  cell  =  \",round(E2,2),\"  Volts\\n\"\n", "intent": "<h3>Example 18, page no. 130</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nI1max  =  20;\nI2max  =  10;\nphi2  =  1*math.pi/3;\nphidiff  =  math.pi  -  phi2\nIrmax  =  (I1max**2  +  I2max**2  -  2*I1max*I2max*math.cos(phidiff))**0.5\nphi  =  math.asin(I2max*math.sin(phidiff)/Irmax)\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  IR  =  \",  round(Irmax,2),\"sin(wt  +  \",round(phi,2),\")  V\\n\"\n", "intent": "<h3>Example 15, page no. 206</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nVi2  =  2.45;\nVi1  =  2.35;\nA0  =  120;\nVo  =  A0*(Vi2  -  Vi1)\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  the  output  voltage  is  \",round(Vo,2),\"  V\"\n", "intent": "<h3>Example 1, page no. 279</h3>\n"}
{"snippet": "segment2 = spectrum2.make_wave()\nsegment2.make_audio()\n", "intent": "And here's what it sounds like.\n"}
{"snippet": "from __future__ import division\nimport math\nZ  =  1200;\np  =  4;\nc  =  2;\nPhi  =  30E-3;\nn  =  500/60;\nE  =  2*p*Phi*n*Z/c\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  Generated  e.m.f.  is  \",round(E,2),\"  V  \"\n", "intent": "<h3>Example 4, page no. 355</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nT  =  15;\nn  =  1200/60;\neff  =  0.8;\nV  =  200;\nI = T*2*math.pi*n/(V*eff)\nprint \"\\n\\n Result \\n\\n\"\nprint \"\\n current supplied, I is \",round(I,2),\"A\"\n", "intent": "<h3>Example 26, page no. 375</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nimport cmath\nRL  =  5;\nL  =  0.002;\nC  =  25e-6;\nRc  =  3;\nfr  =  (1/(2*math.pi*((L*C)**0.5)))*((RL**2  -  (L/C))/(Rc**2  -  (L/C)))**0.5\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  resonant  frequency,  fr  is  \",round(fr,2),\"  Hz\"\n", "intent": "<h3>Example 4, page no. 525</h3>\n"}
{"snippet": "from __future__ import division\nimport math\ne0  =  8.85E-12;  \ner  =  2.3;\nA  =  0.02;\nC  =  400E-12;\nV  =  100;\nW  =  ((C*V)**2)/(2*e0*er*A**2)\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  energy  stored  per  unit  volume  of  dielectric  is  \",round(W,2),\"  J/m3\"\n", "intent": "<h3>Example 15, page no. 740</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nimport cmath\nLa  =  250E-3;\nLb  =  400E-3;\nM  =  80E-3;\nk  =  M/(La*Lb)**0.5\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  coupling  coefficient,  is  \",round(k,3)\n", "intent": "<h3>Example 3, page no. 844</h3>\n"}
{"snippet": "import math\nC_gd=3.0*10**-12;    \nA_v=6.5;             \nR_d=1.0*10**3;       \nC_out_Miller=C_gd*(A_v+1)/A_v;\nf_c=1/(2*math.pi*R_d*C_out_Miller);\nprint('critical frequency of the output circuit = %d Hz'%f_c)\n", "intent": "<h3>Example 10.14, Page Number: 336<h3>\n"}
{"snippet": "import math\nA_ol=100000.0;    \nA_cm=0.2;    \nCMRR=A_ol/A_cm;\nCMRR_dB=20*math.log10(CMRR);\nprint('CMRR = %d'%CMRR)\nprint('CMRR in decibels = %f'%CMRR_dB)\n", "intent": "<h3>Example 12.1, Page Number: 392<h3>\n"}
{"snippet": "R_f1=22.0*10**3;\nR_i1=2.2*10**3;\nR_f2=47.0*10**3;\nR_i2=10.0*10**3;\nA_v1=(R_f1/R_i1)+1;    \nA_v2=(R_f2/R_i2)+1;    \nA_v=A_v1*A_v2;\nprint('total voltage gain of the isolation amplifier = %.1f'%A_v)\n", "intent": "<h3>Example 14.3, Page Number: 462<h3>\n"}
{"snippet": "R1=2.2*10**3;\nR2=4.7*10**3;\nC_ext=0.022*10**-6;\nf_r=1.44/((R1+2*R2)*C_ext);\nprint('frequency of the 555 timer in hertz = %f'%f_r)\nduty_cycle=((R1+R2)/(R1+2*R2))*100;\nprint('duty cycle in percentage = %f'%duty_cycle)\n", "intent": "<h3>Example 16.6, Page Number: 542<h3>\n"}
{"snippet": "corrs = autocorr(segment2)\nthinkplot.plot(corrs[:200])\nthinkplot.config(xlabel='Lag', ylabel='Correlation', ylim=[-1.05, 1.05])\n", "intent": "To understand why we hear a frequency that's not in the signal, it helps to look at the autocorrelation function (ACF).\n"}
{"snippet": "P_D_max=400*10**-3;    \ndf=3.2*10**-3          \ndel_T=(90-50);         \nP_D_deru=P_D_max-df*del_T;  \nP_D_der=P_D_deru*1000;\nprint \"maximum power dissipated at 90 degree celsius = %d mW\" %P_D_der\n", "intent": "<h3>Example 3.4, Page Number:90<h3>\n"}
{"snippet": "R_C=10.0**3;    \nR_L=5.0*10**3;  \nr_e=6.58;       \nR_c=(R_C*R_L)/(R_C+R_L);  \nA_v=R_c/r_e;              \nprint \"ac collector resistor = %.2f ohms\" %R_c\nprint \"gain with load = %.2f\" %A_v\n", "intent": "<h3>Example 6.6, Page Number: 182<h3>\n"}
{"snippet": "I_DSS=12*10**-3;    \nV_DD=18;            \nR_D=620;            \nI_D=I_DSS;          \nV_DS=V_DD-I_D*R_D;  \nprint \"Drain to sorce voltage = %.2f volt\" %V_DS\n", "intent": "<h3>Example 7.15, Page Number: 237<h3>\n"}
{"snippet": "V_CC=20.0;  \nR_L=16.0;   \nV_out_peak=V_CC/2;\nI_out_peak=V_out_peak/R_L;\nprint \"ideal maximum output peak voltage = %.2f volts\" %V_out_peak\nprint \"ideal maximum current = %.2f amperes\" %I_out_peak\n", "intent": "<h3>Example 9.4, Page Number: 288<h3>\n"}
{"snippet": "import scipy\ne=(10**-9)/(36*scipy.pi)     \ner=2                         \nps=2                         \nDn=ps                        \nEn=Dn*10**-9/(e*er)          \nprint 'E at point A= 0'\nprint 'D at point A= 0'\nprint 'E at point B=',round(En,2),'V/m along positive y direction'\nprint 'D at point B=',Dn,'nC/m^2 along positive y direction'\n", "intent": "<h3>Example 5.10, Page number: 190<h3>\n"}
{"snippet": "import math\nP=1500.0            \nd=12.0              \nV=50.0              \nF=P*(math.pi*d**2/4)\nS=V*231.0*4.0/(math.pi*d**2)\nprint('Weight = %.3f lbf ' %F)\nprint('\\n Stroke length = %.3f in ' %S)\n", "intent": "<h3> Example 12.3 Page No 296  <h3> \n"}
{"snippet": "import math\nP1=2000.0           \nT=80.0              \nT1=250.0            \nP2=(P1+14.7)*(460.0+T1)/(T+460.0)\nP3=P2-14.7\nprint(' Guage pressure = %.3f psi ' %P3)\n", "intent": "<h3> Example 15.3 Page No 406   <h3>\n"}
{"snippet": "F1=100.0        \nF2=2000.0       \nL2=12            \nL11=L2*(F2/F1)\nF1=444.8        \nF2=8896.0       \nL2=0.3048       \nL12=L2*(F2/F1)\nprint('The pump piston have to travel = %.2f in' %L11)\nprint('The pump piston have to travel = %.2f m' %L12)\n", "intent": "<h3>Example 2.2, Page No 24 <h3>\n"}
{"snippet": "p=13790000      \nSg=0.83         \nh=(p*1.02)/(Sg*10000)\nprint('Head in ft = %.2f m' %h)\n", "intent": "<h3>Example 3.3, Page No 45 <h3>\n"}
{"snippet": "find_frequency(corrs, 80, 100)\n", "intent": "The third peak, which corresponds to 464 Hz, is still the highest:\n"}
{"snippet": "import math\nQ=25.0                  \nA=0.533                 \nnu=Q*19.25/(A*60.0)     \nnucylinder =Q*19.25/12.56   \nprint('\\n Fluid velocity = %.3f ft/sec' %nu)\nprint('\\n Cylinder velocity = %.3f ft/min' %nucylinder )\n", "intent": "<h3>Example 8.2 Page No 173  <h3>\n"}
{"snippet": "ref_jun=100.0                \nmV_100=0.645                 \nmV_1000=9.585                \nmV_1200=11.947               \nop1=mV_1000-mV_100\nop2=mV_1200-mV_100\nprint('Millivolt to be fed checking 1000 C = %.3f mV'%op1)\nprint('\\nMillivolt to be fed checking 1200 C = %.3f mV'%op2)\n", "intent": "<h3>Example 1.6, Page Number: 54<h3>\n"}
{"snippet": "m1=20                       \na=5                         \nF=m1*a\nprint('F = %d Newtons'%F)\n", "intent": "<h3>Example 3.1, Page Number: 163<h3>\n"}
{"snippet": "c0=25.0                        \nx0=0.5                         \nx1=0.05                        \nc1=c0*x0/(x0-x1)\nc2=c0*x0/(x0+x1)\nprint('C1=%.2f pF\\nC2=%.2f pF'%(c1,c2))\n", "intent": "<h3>Example 4.6, Page Number: 211<h3>\n"}
{"snippet": "import math\ndens=1026.0                  \np=25.0*10**3                 \nV=math.sqrt(2*p/dens)\nprint('V=%.2f m/sec =%.3f km/hr'%(V,V*18/5))\n", "intent": "<h3>Example 5.11, Page Number: 314<h3>\n"}
{"snippet": "rho=1000.0           \nh=10.0               \nP=rho*h\nprint('P = %d kg/m^2 = %d kg/cm^2 '%(P,P/10000))\n", "intent": "<h3>Example 6.7, Page Number: 374<h3>\n"}
{"snippet": "i1=250.0                  \ni2=350.0                  \nm=(i2-i1)*100/i1\nprint('%% increase in moisture content = %d%%'%m)\n", "intent": "<h3>Example 7.11, Page Number: 442<h3>\n"}
{"snippet": "from __future__ import division\nimport math\nQcdot = 8000 \nTc = -5 \nTh = 22 \nWdotcycle = 3200 \nbeta = Qcdot/Wdotcycle\nbetamax = (Tc+273)/(Th-Tc)\nprint  \"coefficient of performance of the refrigerator is\", beta\nprint  \"coefficient of performance of a reversible refrigeration cycle\", round(betamax,1)\n", "intent": "<h2>Example 6.02, page: 134</h2>\n"}
{"snippet": "num = 11\nprint  \"Now I am letting you on a secret...\"  \nprint \"You have just entered the number\", num \n", "intent": "<h3>Just for fun, Page number: 22<h3>\n"}
{"snippet": "find_frequency(corrs, 20, 50)\n", "intent": "But there are two other peaks corresponding to 1297 Hz and 722 Hz.  \n"}
{"snippet": "a=6.35\nprint \"Value of a on typecasting = %d\" %(int(a))\nprint \"Value of a = %f\"%(a)\n", "intent": "<h3>Type Casting , Page number: 514<h3>\n"}
{"snippet": "print \"Enter a number less than 10: \"\nnum = 8\nprint num\nif num <= 10:\n    print(\"What an obedient servant you are !\") \n", "intent": "<h3>If Demo , Page number: 52<h3>\n"}
{"snippet": "for r in range(1,4): \n    for c in range(1,3): \n        s = r + c \n        print \"r = %d c = %d sum = %d\" % (r, c, s) \n", "intent": "<h3>Nested For Loops , Page number: 114<h3>\n"}
{"snippet": "ch = 'a'\nif ch == 'a' or ch == 'A' : \n    print \"a as in ashar\"\nelif ch == 'b'or ch == 'B': \n    print \"b as in brain\"\nelif ch == 'c'or ch == 'C': \n    print \"c as in cookie\"\nelse: \n        print (\"wish you knew what are alphabets\")\n", "intent": "<h3>The Tips and Traps c), Page number: 141<h3>\n"}
{"snippet": "def gospel(): \n    print \"Viruses are electronic bandits...\" \n    print \"who eat nuggets of information...\" \n    print \"and chunks of bytes...\" \n    print \"when you least expect...\" \ngospel() \n", "intent": "<h3>Void Function , Page number: 177<h3>\n"}
{"snippet": "i = 1 \ndef b2 (i):\n    print i \ndef b3 (i):\n    print i \ndef b1 (i):\n    print  i \n    b2(i)\n    b3(i)\nb1(i)\n", "intent": "<h3>Scope and Life of Automatic Variable, Page number: 225<h3>\n"}
{"snippet": "def display(n):\n     print n \nmarks = [ 55, 65, 75, 56, 78, 78, 90 ] \nfor i in range(0,7):\n    display(marks[i]) \n", "intent": "<h3>Call By Reference , Page number: 278<h3>\n"}
{"snippet": "s = [ [ 1234, 56 ], [ 1212, 33 ], [ 1434, 80 ], [ 1312, 78 ] ]\nfor i in range(0,4):\n    for j in range(0,2):\n        print  s[i][j] \n", "intent": "<h3>Accessing 2-D Array Elements, Page number: 295<h3>\n"}
{"snippet": "Vp=15.0                           \nVm=-15.0                          \nR5=40.0*10**3                     \nVbe11=0.7                         \nVbe12=Vbe11                       \nIref= (Vp-Vbe12-Vbe11-Vm)/R5      \nIref=Iref*10**3                   \nprint(\"Iref= %.3f mA\"%Iref)\n", "intent": "<h3>Example No. 3.1, Page No: 107<h3>\n"}
{"snippet": "spectrum4 = segment.make_spectrum()\nspectrum4.high_pass(600)\nspectrum4.low_pass(1200)\nspectrum4.plot(high=3000)\nthinkplot.config(xlabel='Frequency (Hz)', ylabel='Amplitude')\n", "intent": "If we get rid of the high harmonics, the effect goes away.  Here's a spectrum with harmonics above 1200 Hz removed.\n"}
{"snippet": "Vcc=15.0                \nRe2=1000.0              \nVc1=5.0                 \nVe2=5.0                 \nI=(Vcc-Ve2)/Re2         \nI=I*1000.0              \nprint('Current= %d mA'%I)\n", "intent": "<h3>Example No.4.4, Page NO: 187<h3>\n"}
{"snippet": "import math\nR=20000.0                          \nRr=2700.0                          \nC=0.01*10**-6                      \nfr=0.1125*(math.sqrt(1+R/Rr))/(R*C)   \nB=0.1591/(R*C)                        \nprint('Resonant frequency= %.1f Hz'%fr)\nprint('\\nBandwidth= %.1f Hz'%B)\n", "intent": "<h3>Example No: 6.12, Page No: 288<h3>\n"}
{"snippet": "R2=10000.0                \nVo=12.0                   \nVref=7.15                 \nR1=(Vo/Vref)*R2 - R2      \nR1a=R1/1000.0             \nprint('\\nR1= %.2f kohm'%R1a)\n", "intent": "<h3>Example No. 8.7, Page No: 378<h3>\n"}
{"snippet": "x=[10,11,12,13,14,15,16,17,18,19]\nfor i in range(0,10):\n    print \"i=%d   x[i]=%d   *(x+1)=%d\" %(i,x[i],x[i]),\n    print \"   &x[i]=\",id(x[i]),\n    print \"   x+i=\",id(x[i])\n", "intent": "<h3>Example 11.12, Page number: 11.15<h3>\n"}
{"snippet": "sum=10+20\nprint sum\n", "intent": "<h3>Example 2.5, Page number: 2.5<h3>\n"}
{"snippet": "i=12345\nx=345.678\nprint \"%3d %5d %8d\\n\\n\" %(i,i,i)\nprint \"%3g %10g %13g\" %(x,x,x)\nprint \"%3g %13g %16g\" %(x,x,x)\n", "intent": "<h3>Example 4.21, Page number: 4.17<h3>\n"}
{"snippet": "import math\np,r,n=10000,10,3\ni=r/100.0\nf=p*math.pow(1+i,n)\nprint \"The final value (F) is: %.2f\" %f\n", "intent": "<h3>Example 5.2, Page number: 5.4<h3>\n"}
{"snippet": "numbers=[[1.5,2.5,6.2,3.0],[4,-2,7],[5.4,8.0,2.2,1.7,-3.9]]\nloopcount=3\nloop=0\nwhile loop<loopcount:\n    Sum=0\n    for x in numbers[loop]:\n        print 'x = ',x\n        Sum+=x\n    print 'The average is ',Sum/len(numbers[loop])\n    loop+=1\n", "intent": "<h3>Example 6.18, Page number: 6.19<h3>\n"}
{"snippet": "def reverse(text,n):\n    if n<0:\n        return\n    else:\n        print text[n],\n        reverse(text,n-1)\ntext='Now is the time for all good men to come to tje aid of their country!'\nn=len(text)\nreverse(text,n-1)\n", "intent": "<h3>Example 7.15, Page number: 7.26<h3>\n"}
{"snippet": "segment4 = spectrum4.make_wave()\nsegment4.make_audio()\n", "intent": "Now the perceived pitch is 928 Hz.\n"}
{"snippet": "import sys\ndef display():\n    sys.stdout.write(\"\\nFunction Called\")\ndisplay()\n", "intent": "<h3>Example 12.9, Page number: 391<h3>\n"}
{"snippet": "import sys\nimport datetime\nsys.stdout.write(\"%s\"%(datetime.datetime.now()))\n", "intent": "<h3>Example 13.30, Page number: 440<h3>\n"}
{"snippet": "x = 10\ny = 20\ny += 1\nz = x * y\na = x * y\nprint z,\"  \",a\n", "intent": "<h3>Example 3.5, Page number: 25<h3>\n"}
{"snippet": "x = raw_input(\"Enter number : \")\nx = int(x)\nz = 1 if (x != 100) else 0\nprint \"Z : \",z\n", "intent": "<h3>Example 3.16, Page number: 33<h3>\n"}
{"snippet": "p = 3\nprint 'Ten raised to %lf is %lf\\n' %(p,pow(10,p))\n", "intent": "<h3>Example 4.5, Page number: 50<h3>\n"}
{"snippet": "import sys\nch = raw_input(\"Enter Text Here : \")\nsys.stdout.write(\"The Entered Text : \")\nfor c in ch:\n    sys.stdout.write(c)\n", "intent": "<h3>Example 4.15, Page number: 56<h3>\n"}
{"snippet": "s = raw_input(\"Enter a Number : \")\ns = int(s)\nd = s % 10;\nif d==5 :\n    s = s/10\n    s += 1\n    print \"\\nSquare = %d%d\"%(s*(s-1),d*d)\nelse:\n    print \"\\nInvalid Number\"\n", "intent": "<h3>Example 5.7, Page number: 69<h3>\n"}
{"snippet": "import sys\ni = 0\nsys.stdout.write(\"Numbers in Ascending Order : \")\nfor i in range(1,10+1):\n    sys.stdout.write(\"%3d\"%(i))\nsys.stdout.write(\"\\nNumbers in Descending Order : \")\nfor i in range(10,0,-1):\n    sys.stdout.write(\"%3d\"%(i))\n", "intent": "<h3>Example 6.6, Page number: 110<h3>\n"}
{"snippet": "import sys\nnumber = int(raw_input(\"Enter Number : \"))\npower = int(raw_input(\"Enter Power : \"))\nans = 1\nfor i in range(1,power+1):\n    ans *= number\nsys.stdout.write(\"The Power of %d raised to %d is %ld\"%(number,power,ans))\n", "intent": "<h3>Example 6.25, Page number: 124<h3>\n"}
{"snippet": "corrs = autocorr(segment4)\nthinkplot.plot(corrs[:200])\nthinkplot.config(xlabel='Lag', ylabel='Correlation', ylim=[-1.05, 1.05])\n", "intent": "And if we look at the autocorrelation function, we find the highest peak at lag=47, which corresponds to 938 Hz.\n"}
{"snippet": "import sys\nx = 2\nn = int(raw_input(\"Enter The number for testing (prime or not) : \"))\nwhile x < n:\n    if n % x == 0:\n        sys.stdout.write(\"\\nThe number %d is not prime.\"%(n))\n        exit(0)\n    x += 1\nsys.stdout.write(\"\\nThe number %d is prime\"%(n))\n", "intent": "<h3>Example 6.75, Page number: 173<h3>\n"}
{"snippet": "import sys\ncity = ['N','A','N','D','E','D']\npin = [4,3,1,6,0,3]\nfor i in city:\n    sys.stdout.write(\"%c\"%(i))\nsys.stdout.write(\" - \")\nfor i in pin:\n    sys.stdout.write(\"%d\"%(i))\n", "intent": "<h3>Example 7.11, Page number: 195<h3>\n"}
{"snippet": "import sys\nin1 = raw_input(\"Enter Integers : \")\nsys.stdout.write(\"Value of int x : %s\"%(in1))\n", "intent": "<h3>Example 7.41, Page number: 228<h3>\n"}
{"snippet": "import sys\nori = raw_input(\"Enter Your Name : \")\ndup = ori                  \nsys.stdout.write(\"Original String : %s\"%(ori))\nsys.stdout.write(\"\\nDuplicate String : %s\"%(dup))\n", "intent": "<h3>Example 8.13, Page number: 247<h3>\n"}
{"snippet": "import sys\nline1 = raw_input(\"Enter Text :\")\nline2 = raw_input(\"Enter Character to find from the text : \")\nfor i in range(0,len(line1)):\n    sys.stdout.write(\"%c  %d\\n\"%(line1[i],id(line1[i])))\nchp = line1.count(line2)\nif chp:\n    sys.stdout.write(\"\\nAddress of first %s returned by strchr() is %d\"%(line2,id(line1[chp])))\nelse:\n    sys.stdout.write(\"'%s' String is not present in Given String \"%(line2))\n", "intent": "<h3>Example 8.24, Page number: 257<h3>\n"}
{"snippet": "import sys\ni = 0\ncount = 0\ntext = raw_input(\"Type Text Below.\")\nfind = raw_input(\"Type a character to count : \")\nwhile i < len(text):             \n    if text[i] == find:\n        count += 1\n    i += 1\nsys.stdout.write(\"\\nCharacter (%s) found in Given String = %d Times.\"%(find,count))\n", "intent": "<h3>Example 8.35, Page number: 266<h3>\n"}
{"snippet": "import sys\na = int(raw_input(\"Enter Two Numbers : \"))\nb = int(raw_input(\"Enter Two Numbers : \"))\nap = a\nbp = b\nc = a + b\nd = ap + bp\nsys.stdout.write(\"\\nSum of A & B Using Variable : %d\"%(c))\nsys.stdout.write(\"\\nSum of A & B Using Pointer : %d\"%(d))\n", "intent": "<h3>Example 9.8, Page number: 287<h3>\n"}
{"snippet": "import sys\nso = [10,20,30,40,50]\nds = [0 for i in range(0,5)]\nfor i in range(0,5):\n    ds[i] = so[i]\nsys.stdout.write(\"Original Array      Duplicated Array\")\nfor i in range(0,5):\n    sys.stdout.write(\"\\n\\t%d\\t\\t%d\"%(so[i],ds[i]))\n", "intent": "<h3>Example 9.21, Page number: 299<h3>\n"}
{"snippet": "import sys\nsrc = raw_input(\"Enter a Source String : \")\ndest = raw_input(\"Enter a Destination String :\")\nsys.stdout.write(\"\\n\\nDestination before memcpy : %s\\n\"%(dest))\ndest = src[:len(src)] + dest[len(src):]\nsys.stdout.write(\"Destination after memcpy : %s\\n\"%(dest))\n", "intent": "<h3>Example 9.36, Page number: 312<h3>\n"}
{"snippet": "A = np.ones((4, 4))\nA\n", "intent": "We can create matrices in the same way as we create vectors. For example, the following code creates a $4\\times 4$ matrix $\\mathbf{A}$ of all 1's:\n"}
{"snippet": "pos_integer = []\nfor i in range(1,1000): \n    if i**2<40:\n        pos_integer.append(i)\nprint \"The required numbers are %d,%d,%d,%d,%d,%d\"%(pos_integer[0],pos_integer[1],pos_integer[2],pos_integer[3],pos_integer[4],pos_integer[5])\nprint \"So, the given set in the roster form is {%d,%d,%d,%d,%d,%d}\"%(pos_integer[0],pos_integer[1],pos_integer[2],pos_integer[3],pos_integer[4],pos_integer[5])\n", "intent": "Example 2, Page 03:\n---------------------\n"}
{"snippet": "for number in range(0, 100):\n    if number % 3 != 0:\n        print(number)\n    if number % 3 == 0:\n            print(\"Buzz\")\n", "intent": "For example, the numbers 8-15 look like: ... 8 Buzz 9 Fizz 11 Buzz 13 14 BuzzFizz ...\n"}
{"snippet": "print(capitals.values())\nprint(type(capitals.values()))\n", "intent": "**values( )** function returns a list with all the assigned values in the dictionary./\n"}
{"snippet": "c.switchXY = True\nc.reverseX = True\ncg.plot(c)\n", "intent": "You can switch and reverse axes\n"}
{"snippet": "def cycle_check(node):\n    marker1 = node\n    marker2 = node\n    while marker2 != None and marker2.nextnode != None:\n        marker1 = marker1.nextnode\n        marker2 = marker2.nextnode.nextnode\n        if marker1 == marker2:\n            return True\n    return False\n", "intent": "Fill out your solution:\n"}
{"snippet": "for animal in observations:\n    if observations[animal] > 50:\n        observations[animal] = True\n    else:\n        observations[animal] = False\nprint(observations)\n", "intent": "We can even change values while looping:\n"}
{"snippet": "uniqueWords = (wordsRDD\n               .map(lambda x: (x, 1))\n               .reduceByKey(lambda value0, value1: 1)\n               .map(lambda (key, value): value)\n               .reduce(lambda value0, value1: (value0 + value1)))\nprint uniqueWords\n", "intent": "Calculate the number of unique words in `wordsRDD`.  You can use other RDDs that you have already created to make this easier.\n"}
{"snippet": "Word = 'Noise' \nA9 = 0\nprint('Longest run of quiet hours =', A9)\ncheck('A9', A9, points=12)\n", "intent": "What is the length the longest run of hours with no requests having the string 'Noise' anywhere in the complaint?\n"}
{"snippet": "even_total = np.sum(rain[0::2]) \nprint('even_total =', even_total)\ncheck('Q8. Total on even days', even_total, points=15)\n", "intent": "Think of the rows as numbered by their row index starting at 0 (which is even).\n"}
{"snippet": "segment.make_audio()\n", "intent": "The original segment:\n"}
{"snippet": "boyweight = weight[isagirl != 1]\n", "intent": "I can get the weights of the boys by choosing the items that are not girls. The **!=** operator means **not equal**.\n"}
{"snippet": "A = np.array([[14, 3, 19],\n              [19, 5, 13],\n              [13, 2, 15]])\nprint(A)\n", "intent": "Let's create a little array.\n"}
{"snippet": "t = np.arange(0, max_t, 0.01)\nt = np.reshape(t, (-1,1)) \n", "intent": "Now copying and pasting from above but replacing the 15 seconds with max_t we get a better graph.\n"}
{"snippet": "def show(im):\n    pylab.imshow(im, cmap=pylab.gray(), interpolation='none')\n", "intent": "This is a little helper to display an image. \n"}
{"snippet": "im4[:, :-1] = im3[:, 1:]\nshow(im4)\n", "intent": "Now let's copy part of the first image into the second. This is scroll left.\n"}
{"snippet": "fp = open('sometext.txt', 'r')\n", "intent": "We can open the file with the open function. The object we get back is a file, I'll call it fp.\n"}
{"snippet": "def myprod(A):\n    result = 1\n    for value in A:\n        result = result * value\n    return result\nmyprod([1,2,3])\n", "intent": "Then I had you write a product function. You had to change 2 things.\n"}
{"snippet": "def mybothsum2(a):\n    presult = 0\n    nresult = 0\n    for i in range(len(a)):\n        if a[i] > 0:\n            presult = presult + a[i]\n        else:\n            nresult = nresult + a[i]\n            return presult, nresult\nmybothsum2(L)\n", "intent": "Yet another wrong place for the return. \n"}
{"snippet": "def CountInt3(A):\n    N = np.max(A) + 1\n    time = np.zeros(N)\n    for i in range(N):\n        time[i] = np.count_nonzero(A == i)\n    return time\nCountInt3(np.array([3, 2, 4, 5, 2]))    \n", "intent": "We can easily make it work for any range of inputs rather than just 0 through 5.\n"}
{"snippet": "segment2.make_audio()\n", "intent": "After removing the fundamental:\n"}
{"snippet": "np.argmax(hourly[:,0])\n", "intent": "What was the index of that maximum?\n"}
{"snippet": "D = {} \nD2 = { \"hello\": \"world\" }\nprint(len(D), len(D2))\n", "intent": "Today we will talk about dictionaries and sets. Two more basic Python types. \nDictionaries are a little like Lists but with more flexible keys.\n"}
{"snippet": "print('F3 returns', F3(prcp))\ncheck('Q3', F3, prcp, points=10)\n", "intent": "Write a function F3 that returns total precipitation for each station given the `prcp` array.\n"}
{"snippet": "def build_squares(size):\n    squares = []\n    for i in range(size):\n        a= i**2\n        squares.append(a)\n    return squares\ncheck(6, build_squares(20))\n", "intent": "i.e. build a list with size=*N*, such that the value at index **i** is **i**<sup>2</sup>\n"}
{"snippet": "identification='7113432298  John'\n", "intent": "2) Here we have a 10-digit PID number, followed by 2 spaces, and then a name. \n"}
{"snippet": "len(babies)\nbabies.shape\n", "intent": "Hint: Try using the **len** function. \n"}
{"snippet": "image = np.zeros((8,8),dtype=bool)\nshow(image)\n", "intent": "Here we create an 2-D array that has all zeros.\n"}
{"snippet": "def subtract_7(data):\n    subtracted = []\n    return subtracted\ncheck(2, subtract_7(test_data))\n", "intent": "Starting with the first number (i.e. data[0])\n"}
{"snippet": "total = 0\nfor i in range(len(items)):\n    thing = items[i].lower()\n    if thing != 'tarantulas':\n        if thing != 'peanuts':\n", "intent": "*(who put the tarantulas on the list anway?)*\n"}
{"snippet": "segment4.make_audio()\n", "intent": "After removing the harmonics above the dominant frequency, too.\n"}
{"snippet": "for c in enumerate(colors):\n    print \"Hey, I love the color\", c\n", "intent": "for ELEMENT in CONTAINER:\n    do stuff\n    * colon\n    * indentation\n"}
{"snippet": "for number in range(0,10):\n    print(\"{0} squared is {1}\".format(number, number*number))\n", "intent": "And then we can use that with a loop to print a list of squares.\n"}
{"snippet": "pluralRDD = wordsRDD.map(lambda x: makePlural(x))\nprint pluralRDD.collect()\n", "intent": "Now pass each item in the base RDD into a [map()](http://spark.apache.org/docs/latest/api/python/pyspark.html\n"}
{"snippet": "phi = atan2(dy, dx)\nphi\n", "intent": "The arcs are determined by a combination of the angle that the straight segment is at and the $\\alpha$ and $\\beta$ parameters. Because angles are \n"}
{"snippet": "import operator\nmeetings.sort(key=operator.itemgetter(3))\nprint \"Meeting          \\t\\tRoom No.\\tDay\\tTime\\tOrganizer\"\nprint \"-\"*81 \nfor meeting in meetings:\n    talk_name = meeting[0]\n    talk_name += \" \"*(32 - len(meeting[0]))\n    organizer = organizers[meeting[0]]\n    organizer += \" \"*(10 - len(organizer))\n    print talk_name + str(meeting[1]) + \"\\t\" + str(meeting[2]) + \"\\t\" + str(meeting[3]) + \"\\t\" + organizer \n", "intent": "We can use the operator.itemgetter() function as the key in sort and sort by the time (4th) element.\n"}
{"snippet": "'on {0}, I feel {1}'.format(\"saturday\",\"groovy\")\n", "intent": "the (new) preferred way\nis `string.format(value0,value1,....)`\n"}
{"snippet": "x = eval('5') ; print x\nx = eval('abs(%d)' % -100) ; print x\n", "intent": "`eval` evaluates strings as Python expressions \n"}
{"snippet": "x = 1\ny = 0\nwhile True:\n    print \"yo\" if x > 0 else \"dude\"\n    x *= -1\n    y += 1\n    if y > 100:\n        break\n", "intent": "a small program... Do Control-C to stop (in Python/IPython) or \"Kernel->Interrupt\" in IPython notebook\n"}
{"snippet": "print \"Flight    \\tDestination\\t\\tGate\\tTime\"\nprint \"-\"*53\nfor flight in time_ordered_flights:\n    dest = airports[flight[2]]\n    dest += \" \"*(20 - len(dest))\n    print flight[0] + \" \" + str(flight[1]) + \"\\t\" + dest + \"\\t\" + str(flight[3]) + \"\\t\" + str(flight[4])  \n", "intent": "The printing procedure is the same as before.\n"}
{"snippet": "thinkdsp.SinSignal(freq=928).make_wave(duration=0.5).make_audio()\n", "intent": "And a pure sinusoid:\n"}
{"snippet": "import practice as p\nreload(p)\n", "intent": "dont for get to reload: using reload in ipython will allow you to re-compile changes made in a .py file\n"}
{"snippet": "print data_dict[\"currents\"][4]\n", "intent": "Now print the last element of the list keyed on \"currents\".\n"}
{"snippet": "print data_dict[\"currents\"][len(data_dict[\"currents\"])-1]\n", "intent": "Now print the last element of the list keyed on \"currents\".\n"}
{"snippet": "climates = []\nwith open('ClimateData-Part1.csv', 'r') as csvfile:\n    climates = list(csv.reader(csvfile, delimiter=','))\n    climates.pop(0) \nfires = []\nwith open('FireData-Part1.csv', 'r') as csvfile:\n    fires = list(csv.reader(csvfile, delimiter=','))\n    fires.pop(0) \n", "intent": "First, we need to read `ClimateData-Part1.csv` and `FireData-Part1.csv` into raw data, namely, `fires` and `climate`:\n"}
{"snippet": "print(paste(\"X has NAs in total: \",sum(is.na(data$X))))\nprint(paste(\"Y has NAs in total: \",sum(is.na(data$Y))))\n", "intent": "Double check whether any `NA` still exist:\n"}
{"snippet": "plot(cars,\n     main = \"Speed vs. Stopping Distance for Cars\",\n     xlab = \"Speed (MPH)\",\n     ylab = \"Stopping Distance (feet)\")\nlin_fit <- lm(cars$dist ~ cars$speed)\nabline(lin_fit, col = \"red\", lwd = 2) \n", "intent": "Now, we add a regression line to see their linear relationship. We will cover regression later.\n"}
{"snippet": "dc2 = DrawControl(polygon={'shapeOptions': {'color': '\n                  circle={'shapeOptions': {'color': '\nm2.add_control(dc2)\n", "intent": "Now let's add a `DrawControl` to this second map. For fun we will disable lines and enable circles as well and change the style a bit.\n"}
{"snippet": "str1 = \"hello\"\nstr2 = \"world\"\nmessage = str1 + \" \" + str2 + \"!\" \nprint(message)\n", "intent": "The `+` operator concatenates two strings:\n"}
{"snippet": "perc_keita = round(perc_keita,2)\nprint(\"Keita appears\", keita, \"times:\", perc_keita, \"%\")\n", "intent": "**Answer:** <span style=\"color:white\">\nperc_keita = 100 * keita / (keita + ozil + grosso + ronaldo)\nprint(perc_keita)\n"}
{"snippet": "using QuantEcon\ninclude(\"arellano_vfi.jl\")\nusing Gadfly, Compose, ColorTypes, DataFrames\n", "intent": "Solutions for http://quant-econ.net/jl/arellano.html\n"}
{"snippet": "my_set = {1, 2, 3, 4}\n", "intent": "For sets, we can only check if an item appears within the set or not. We achieve this using the `in` operator:\n"}
{"snippet": "phones = {\n    \"Panos\": {\"Work\":\"212-998-0803\", \"Cell\": \"917-888-4455\"},\n    \"Maria\": {\"Work\":\"656-233-5555\"},\n    \"John\": {\"Cell\":\"693-232-5776\"},\n    \"Jake\": {\"Home\":\"415-794-3423\"}\n}\n", "intent": "Similarly, when we have a dictionary that contains dictionaries:\n"}
{"snippet": "activities = ['running', 'jumping', 'shouting', 'dancing', 'singing', 'eating', 'reading']\n", "intent": "Consider the following list of activities.\n"}
{"snippet": "def square(num):\n    squared = num*num\n    return squared\n", "intent": "Example of computing a math function\n"}
{"snippet": "colors = ['red', 'yellow', 'green', 'blue', 'indigo', 'violet', 'chartreuse', 'magenta', 'gold']\ns = ''\n", "intent": "**Answer:** <span style=\"color:white\">\nwhile x<1000:\n    x = x**2\n    print(x)\n"}
{"snippet": "speech = '2009-Obama.txt'\ninaugural.sents(speech)\n", "intent": "If we want to see the words and/or sentences of these speeches we use the following commands:\n"}
{"snippet": "lm(RFFT ~ Age, data=prevend.samp)\n", "intent": "The `R` function `lm()` calculates a least squares line from data.\n"}
{"snippet": "pnorm(1.410) - pnorm(0.385)\npnorm(240, 185, 39) - pnorm(200, 185, 39)\n", "intent": "b) Standardize 200 mg/dl to a normal score:\n$$z=\\dfrac{200 -185}{39}= 0.385$$\n"}
{"snippet": "pt(t, df = n - 1, lower.tail = FALSE)\nt.test(nhanes.samp.adult$BMI, mu = 21.7, alternative = \"greater\")\n", "intent": "d)  The $p$-value is extremely small; $P(T \\geq 11.383) = 1.01 \\times 10^{-21}$.\n"}
{"snippet": "plot(x=repeat(ae.Bgrid, outer=[2]), \n     y=vec(ae.vf[:, [iy_low, iy_high]]),\n     color=repeat([:Low, :High], inner=[length(ae.Bgrid)]),\n     Guide.title(\"Value functions\"),\n     Guide.xlabel(\"B\"), Guide.ylabel(\"V(y,B)\"),\n     Guide.colorkey(\"y\"), Geom.line)\n", "intent": "Draw a plot of the value functions\n"}
{"snippet": "eg1 = FirstClass('one',1)\neg2 = FirstClass('two',2)\n", "intent": "Now that we have defined a function and added the \\_\\_init\\_\\_ method. We can create a instance of FirstClass which now accepts two arguments. \n"}
{"snippet": "def problem1_2(x,y):\n    pass \n", "intent": "Problem 1_2:\nWrite a function problem1_2(x,y) that prints the sum and product of the\nnumbers x and y on separate lines, the sum printing first.\n"}
{"snippet": "class Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.nextnode = None\n", "intent": "For this interview problem, create a node class and show how it can be used to create a Singly Linked List\n"}
{"snippet": "bad_string = 'Sarah's code'\nprint(bad_string)\n", "intent": "**Exercise.** Fix this code:\n"}
{"snippet": "test = 1 < 0 \nprint(test) \nprint(type(test)) \n", "intent": "Basic idea, make a comparison and the result is a `true` or `false` value. We call these bools...\n"}
{"snippet": "from xlrd import open_workbook\nurl = p.abspath('filtered-crime-stats.xlsx')\nbook = open_workbook(url)\nsheet = book.sheet_by_index(0)\nsheet.row_values(0)\n", "intent": "Here, we read an xlsx file\n"}
{"snippet": "<style>\ndiv.probs table {\n    float:left;\n    margin-left: 1em;\n    margin-top: 1em;\n}\ndiv.probs br.clear {\n    clear:both;\n}\n</style>\n", "intent": "Express the joint distribution of this network using the chain rule.\nP(W,R,T,S,B,C) = ...\n*your answer goes here*\n"}
{"snippet": "regression_regularization_coeff()\n", "intent": "- Let's look at how the coefficients change after we add regularization\n"}
{"snippet": "rhom = 3300.\nrhos = 2500.\nratio = 1. - rhos/rhom\nprint ratio\n", "intent": "<div class=\"alert alert-block alert-info\">\n**What is the sea-level change relative to the sediment thickness?**</div>\n"}
{"snippet": "using QuantEcon\nusing Plots\n", "intent": "First some basic imports:\n"}
{"snippet": "img = suppressWarnings(readImage(\"F:/Box Sync/Research/Polarimetry/Jupyter Analysis/Reg Mask Output/Composites/WP9_composite_RegularStepAffineReg.tif\"))\npol = imageData(img)[,,2]\nmmp = imageData(img)[,,3]\n", "intent": "The registered image is saved as a dual-channel tif.\n"}
{"snippet": "g=9.81 \nh=float(input(\"Enter height of tower in meters: \"))\nt=round(sqrt(2*h/g),2) \nprint(\"The time to fall \",h,\" meters is \",t,\" seconds.\")\n", "intent": "Use $t=\\sqrt{\\frac{2h}{g}}$\n"}
{"snippet": "def f(x,t,*karg):\n    if len(karg)!=0:\n        b=karg[0]\n    else:\n        b=0\n    return(b*x**2-9.8)\n", "intent": "the function rk4v2 below allows one to send arguments along to f. This is useful, if you want to iterate through particular constants. \n"}
{"snippet": "solve(G[0,1].subs([[f1,20.],[f2,-5],[d,10],[do,25]]),di)\n", "intent": "It's obvious that $d_i=-15$cm, but I'll show you how to use the `solve` command to find a solution to an equation $f(x)=0$.\n"}
{"snippet": "country_list.extend([\"Vietnam\",\"South Africa\"])\n", "intent": "You can see how that approach might be tedious in certain cases. If you want to concatenate a list onto the end of another one, use extend.\n"}
{"snippet": "def simple_function(x):\n    print x + 1\n", "intent": "Functions involve two steps: **defining** the function, and **calling** the function.\nDefine functions using the `def` keyword.\n"}
{"snippet": "def dumbfun(x):\n    return x\n    print 'This will never print :('\n", "intent": "But notice that in one case we see `Out[\nAlso - there's a difference in control flow.\n"}
{"snippet": "values = [10, 20, 30, 40, 50]\nfor x in range(len(values)):\n    values[x] = values[x] + 5\n", "intent": "or even alter a list in place:\n"}
{"snippet": "nums1 = [5, 1, 3, 10]\nnums2 = []\nfor i in range(len(nums1)):\n    if nums1[i] > 4:\n        nums2.append(nums1[i] * 2)\nprint nums2\n", "intent": "What if we also have some conditional logic?\n"}
{"snippet": "using QuantEcon\nddp = DiscreteDP(R, Q, beta, s_indices, a_indices);\n", "intent": "We're now in a position to create an instance of `DiscreteDP` corresponding to the growth model.\n"}
{"snippet": "for i in students:\n    for key in i.keys():\n        i[key] = i[key].lower()\n", "intent": "Turn everything in that list of dictionaries into lowercase.\n"}
{"snippet": "rows = soup.select('tr tr tr')\nprint rows[2].prettify()\n", "intent": "But remember, `find_all` gets all the elements with the `tr` tag. We can use smart CSS selectors to get only the rows we want.\n"}
{"snippet": "rfunc =  Constant(1.0, terminals=terminals)\nrvec = np.array([rfunc(s) for s in states])\nphi = Wrap(Unary2Int(num_states), terminals=terminals)\nfull_df = report(pmat, rvec, s0, phi, gmfunc, lmfunc, ifunc)\ndf = full_df[[\"weights\", \"MSE\"]]\ndisplay(full_df)\n", "intent": "* r(s) = 1 for s non-terminal\n* x(s) = s+1 for s non-terminal\n"}
{"snippet": "def print_eq(sym, expr):\n    return Eq(sympify(sym), expr)\n", "intent": "This is how you define a function in Python. Note that indentation of 4 spaces matters! We will use this function to print equations.\n"}
{"snippet": "ll = np.linspace(0,20,20)\nidx = np.where(ll > 10)\nprint('Indexes: ', idx)\nprint('Selection: ', ll[idx])\n", "intent": "If you come from IDL, you probably LOVE the \"where\" function. A similar function exists in Numpy:\n"}
{"snippet": "phaseplot(-3..3, -3..3, z -> gamma(z))\n", "intent": "Here's the Gamma function. Are they poles or zeros at 0, -1, -2, ...?\n"}
{"snippet": "phaseplot(-4..4, -4..4, z -> sqrt(z-1)sqrt(z+1))\n", "intent": "The following example $\\sqrt{z-1} \\sqrt{z+1}$ is analytic in ${\\mathbb C}\\backslash [-1,1]$ and will be returned to:\n"}
{"snippet": "f = z -> (sqrt(z-1)*sqrt(z+1))^3\nphaseplot(-2..2, -2..2, f)\nplot!(Circle(1.1); color=:black, label=\"contour\", linewidth=1.5, arrow=true)\n", "intent": "_Example_ This works for functions not analytic:\n$$\n    \\oint_{\\gamma_1} (\\sqrt{z-1}\\sqrt{z+1})^3 dz \n    $$\n"}
{"snippet": "phaseplot(-4..4, -4..4, z-> (z^2 - z + 2) / (z^4 + 10z^2 +9))\n", "intent": "Again, decays like $O(z^{-2})$ in upper half plane so we can use residue calculus. This integrand has poles at $z = \\I$ and $z = 3 \\I$:\n"}
{"snippet": "results = solve(ddp, PFI);\n", "intent": "Let's try solving via policy function iteration.\n"}
{"snippet": "class Dog(): \n    species = 'canine'\n    def __init__(self,breed,name):\n        self.breed = breed \n        self.name = name \n    def bark(self,number):\n        print(\"Woof! My name is {} and the number is {}\".format(self.name,number))\n", "intent": "Methods can take in outside arguments \n"}
{"snippet": "class Animal(): \n    def __init__(self,name): \n        self.name = name \n    def speak(self): \n        raise NotImplemetedError(\"Subclass must implement this abstract method\")\n", "intent": "Abstract class never expects to be instantiated: serves as a base class  \n"}
{"snippet": "x = 50\ndef func(x):\n    print(f'X is {x}')\n", "intent": "hello() will look for name within hello() first, then within greet(), then globally if it does not find it \n"}
{"snippet": "def myfunc(*args):\n    return sum(args) *0.05\n", "intent": "a and b are positional arguments (assignment depends on position of variable in definition)\n"}
{"snippet": "def old_macdonald(name):\n    name_capital = name[0].upper() + name[1:3] + name[3].upper() + name[4:]\n    return name_capital\n", "intent": "    old_macdonald('macdonald') --> MacDonald\nNote: `'macdonald'.capitalize()` returns `'Macdonald'`\n"}
{"snippet": "def full_board_check(board):\n    if ' ' in board:\n        return False\n    else: \n        return True \n", "intent": "**Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.**\n"}
{"snippet": "path = breadth_first(grid, start, goal)\nprint(path)\n", "intent": "Run `breadth_first()` and reference the grid to see if the path makes sense.\n"}
{"snippet": "select name, employee_count\nfrom department;\n", "intent": "Now when we view the employee table, we see that the employee count has been updated by the trigger.\n"}
{"snippet": "SELECT DISTINCT S1.A, S1.B, S1.C\nFROM S as S1, S as S2\nWHERE (S1.A=S2.A and (S1.B<>S2.B or S1.C<>S2.C)) \n    or (S1.B=S2.B and ( S1.A<>S2.A or S1.C<>S2.C))\n", "intent": "**_[5 points]_**\n$\\{A\\}$ and $\\{B\\}$ are each **keys** for a relation $S(A,B,C)$.\n"}
{"snippet": "np.dot(C, np.eye(4))\n", "intent": "Remember that taking the dot product of any matrix with the identity will produce that matrix again:\n"}
{"snippet": "delete from ClassGrade;\ninsert into ClassGrade values(1,1,2);\ninsert into ClassGrade values(2,2,4);\ninsert into ClassGrade values(1,2,1);\ninsert into ClassGrade values(2,1,1);\nselect * from ClassGrade;\n", "intent": "We can now test the triggers.  \n"}
{"snippet": "Lda = gensim.models.ldamodel.LdaModel\nldamodel = Lda(doc_term_matrix, num_topics=3, id2word = dictionary, passes=50)\n", "intent": "Using the document-term matrix, we will build a lda model. \n"}
{"snippet": "def blackjack(a,b,c):\n    if (a+b+c)<=21:\n        return a+b+c\n    if (a+b+c>21 and (a==11 or b==11 or c==11)):\n        if a+b+c-10 > 21:\n            return 'BUST'\n        return a+b+c-10\n    return 'BUST'\n", "intent": "    blackjack(5,6,7) --> 18\n    blackjack(9,9,9) --> 'BUST'\n    blackjack(9,9,11) --> 19\n"}
{"snippet": "os.system(\"head -4 muscle-patato_pep.stk\")\n", "intent": "> Converted 1 alignments\n"}
{"snippet": "def math9(mat):\n  return None\n", "intent": "[[ 0  1  4  9]\n [ 0  5 12 21]\n [ 0  9 20 33]\n [ 0 13 28 45]]\n"}
{"snippet": "e = np.zeros([3,2], float)\n", "intent": "Create a new array of 3*2 float numbers, filled with zeros.\n"}
{"snippet": "model = ALS.trainImplicit(training, rank=10, iterations=10, lambda_=0.01, alpha=0.01)\n", "intent": "Next we will train a model using ALS but for *implicit feedback*.\n"}
{"snippet": "a = np.arange(12).reshape(4,3)\nprint(a)\n", "intent": "They can have one index per axis. These indices are given in a tuple separated by commas:\n"}
{"snippet": "plot(grid, [v v_star(grid)], ylim=(-40, -32), lw=2, label=[\"discrete\" \"continuous\"])\n", "intent": "Let's plot the value functions.\n"}
{"snippet": "{a % 3 for a in range(1000)}\n", "intent": "Recall that a ``set`` is a collection that contains no duplicates.\nThe set comprehension respects this rule, and eliminates any duplicate entries:\n"}
{"snippet": "nums_plus_one = map(lambda x: x+1, numbers)\n", "intent": "We could also use python's \"map\" with a lambda function. Map iterates over each element of a list and applies a function to it\n"}
{"snippet": "'{:b} thing'.format(255)\n", "intent": "Create a variable called `horse` and put a string in it.\n"}
{"snippet": "rows = int(input(\"Input the row number: \"))\nfor i in range(rows):\n    stars = '*'*(i+1)\n    spaces = ' '*(rows - i)\n    print(spaces + stars)\n", "intent": "Modify the above code and Output the following pattern:\n~~~\n        *\n       **\n      ***\n     ****\n    *****\n   ******\n  *******\n ********\n~~~\n"}
{"snippet": "from jyquickhelper import add_notebook_menu\nadd_notebook_menu()\n", "intent": "Wen.Gong@Oracle.com - IT Consultant\n* taught python at Chapel Hill Chinese School (2012.9 - 2014.6)\n    * web2py\n    * pyGame\n"}
{"snippet": "x = 1\ny = 22\nz = 333\nc7 = (x < y)\nc8 = (y < z)\nc9 = c7 and c8\nc10 = c7 or c8\nc11 = not c7\nprint(c7, c8, c9, c10, c11)\n", "intent": "<img src=../images/boolean-algebra.jpg width=70%/>\n"}
{"snippet": "import boto3\ndynamodb = boto3.resource('dynamodb')\n", "intent": "table=Movies and load sample data in JSON format.\n"}
{"snippet": "pluralLambdaRDD = wordsRDD.map(lambda  x : x + 's')\nprint pluralLambdaRDD.collect()\n", "intent": "Let's create the same RDD using a `lambda` function.\n"}
{"snippet": "import sys, math,platform\nplatform.architecture()\n", "intent": "__4)__ Are you on a 32-bit or 64-bit computer? Use `sys` and `math` to figure that out!\n"}
{"snippet": "plot(grid, [c c_star(grid)], lw=2, label=[\"discrete\" \"continuous\"])\n", "intent": "Now let's look at the discrete and exact policy functions for consumption.\n"}
{"snippet": "x = 5\ny = 0\ntry:\n    z = x/y\nexcept ZeroDivisionError:\n    print(\"There was a Zero Division error\")\nexcept:\n    print(\"there was an error\")\nfinally:\n    print(\"All Done\")\n", "intent": "Handle the exception thrown by the code below by using **try** and **except** blocks. Then use a **finally** block to print 'All Done.'\n"}
{"snippet": "X_grid = np.array([np.ravel(xv), np.ravel(yv)])\nprint X_grid\nprint 'X_grid.shape', X_grid.shape\n", "intent": "Using np.meshgrid with np.ravel to create a grid\n"}
{"snippet": "pmf = Pmf()\npmf['Bowl 1'] = 0.5\npmf['Bowl 2'] = 0.5\npmf.Print()\n", "intent": "Here's a Pmf that represents the prior distribution.\n"}
{"snippet": "suite = M_and_M('AB')\nsuite.Update(('bag1', 'yellow'))\nsuite.Update(('bag2', 'green'))\nsuite.Print()\n", "intent": "And here's an update:\n"}
{"snippet": "class Train2(Train):\n    def __init__(self, hypos, alpha=1.0):\n        Pmf.__init__(self)\n        for hypo in hypos:\n            self[hypo] = hypo**(-alpha)\n        self.Normalize()\n", "intent": "Now let's try it with a power law prior.\n"}
{"snippet": "def UniformPrior(label='uniform'):\n", "intent": "Let's see how that looks with different priors.\nHere's a function that makes a uniform prior:\n"}
{"snippet": "def Probability(o):\n    return o / (o+1)\n", "intent": "And this function converts from odds to probabilities.\n"}
{"snippet": "diff = goal_dist1 - goal_dist2\np_win = diff.ProbGreater(0)\np_loss = diff.ProbLess(0)\np_tie = diff.Prob(0)\nprint('Prob win, loss, tie:', p_win, p_loss, p_tie)\n", "intent": "Now we can compute the probability that the Bruins win, lose, or tie in regulation time.\n"}
{"snippet": "pmf = Beta(1, 1).MakePmf()\nblaster = AlienBlaster(pmf)\nblaster.Update(2)\nthinkplot.Pdf(blaster)\n", "intent": "If we start with a uniform prior, we can see what the likelihood function looks like:\n"}
{"snippet": "maximum(abs(v - v_star(grid)))\n", "intent": "These functions are again close, although some difference is visible and becomes more obvious as you zoom.  Here are some statistics:\n"}
{"snippet": "sides = [4, 6, 8, 12]\nhypo = []\nfor die1 in sides:\n    for die2 in sides:\n        if die2 > die1:\n            hypo.append((die1, die2))\nhypo\n", "intent": "**Solution**\nI'll start by making a list of possible pairs of dice.\n"}
{"snippet": "win = germany_pred > argentina_pred\nlose = germany_pred < argentina_pred\ntie = 1 - (win + lose)\nprint('posterior prob Germany wins rematch', win)\nprint('posterior prob Argentina wins rematch', lose)\nprint('posterior prob tie', tie)\n", "intent": "Using the predictive distributions, we can compute probabilities for the outcomes of a rematch.\n"}
{"snippet": "lam = soccer.Mean()\nrem_time = 90 - 23\nlt = lam * rem_time / 90\npred = MakePoissonPmf(lt, 10)\nthinkplot.Hist(pred)\nthinkplot.decorate(title='Distribution of goals, known lambda',\n                   xlabel='Goals scored', \n                   ylabel='PMF')\n", "intent": "If we assume that `lam` is the mean of the posterior, we can generate a predictive distribution for the number of goals in the remainder of the game.\n"}
{"snippet": "from thinkbayes2 import MakeBinomialPmf\ndef MakeBinomialMix(pmf, label=''):\n    mix = Pmf(label=label)\n    for x, prob in pmf.Items():\n        binom = MakeBinomialPmf(n=25, p=x)\n        for k, p in binom.Items():\n            mix[k] += prob * p\n    return mix\n", "intent": "Alternatively, we can make a mixture that represents the distribution of `k`, taking into account our uncertainty about `x`:\n"}
{"snippet": "pmf = Pmf(ks)\nthinkplot.Hist(pmf)\nthinkplot.decorate(xlabel='Number of hits',\n                   ylabel='PMF')\nlen(ks), np.mean(ks)\n", "intent": "Here's what the distribution looks like.\n"}
{"snippet": "def sample_likelihood(dirichlet, data, iters=1000):\n    data = zero_pad(data, dirichlet.n)\n    m = np.sum(data)\n    likes = [multinomial(m, dirichlet.random()).pmf(data) \n             for i in range(iters)]\n    return np.mean(likes)\n", "intent": "Let's pull all that together.  Here's a function that estimates the total probability of the data by sampling from the dirichlet distribution:\n"}
{"snippet": "pmf_sim = Pmf()\nfor n, k in roll_until(1000000):\n    if k == 13:\n        pmf_sim[n] += 1\n", "intent": "Now I'll the simulation many times and, every time the token is observed on space 13, record the number of rolls it took to get there.\n"}
{"snippet": "class Tank(Suite):\n    def Likelihood(self, data, hypo):\n        if data > hypo:\n            return 0\n        else:\n            return 1 / hypo\n", "intent": "The German tank problem\n---\nThe German tank problem is actually identical to the dice problem.\n"}
{"snippet": "bandit = Bandit(range(101))\nfor outcome in 'WLLLLLLLLL':\n    bandit.Update(outcome)\nthinkplot.Pdf(bandit)\nthinkplot.Config(xlabel='x', ylabel='Probability', legend=False)\n", "intent": "Starting over, here's what it looks like after 1 win and 9 losses.\n"}
{"snippet": "maximum(abs(v - v_star(grid))[2:end])\n", "intent": "This is a big error, but most of the error occurs at the lowest gridpoint.  Otherwise the fit is reasonable:\n"}
{"snippet": "def animal_crackers(text):\n    animal_crackers=text.split()\n    first_letter=text[0][0]\n    first_letter2=text[1][0]\n    if first_letter == first_letter2:\n        print('True')\n    else:\n        print('False')\n", "intent": "    animal_crackers('Levelheaded Llama') --> True\n    animal_crackers('Crazy Kangaroo') --> False\n"}
{"snippet": "email_addresses['Patrick Chao'] = 'prc@berkeley.edu'\n", "intent": "You can add new entries to your **dictionary** in the following way:\n"}
{"snippet": "uniqueWords = len(wordsRDD\n               .map(lambda x: (x,1))\n               .reduceByKey(lambda a, b: a + b)\n               .collect()\n               )\nprint uniqueWords\nsorted(sc.parallelize([1, 1, 2, 3]).distinct().collect())\n", "intent": "Calculate the number of unique words in `wordsRDD`.  You can use other RDDs that you have already created to make this easier.\n"}
{"snippet": "from collections import Counter\ndef KNN(X_train, y_train, X_test,k=1):\n    result = []\n    for test in X_test:\n        s = sorted([(distance(test,p),i) for i,p in enumerate(X_train)])[:k]\n        c = Counter([y_train[i] for _,i in s]).most_common()\n        result.append(c[0][0])\n    return result\n", "intent": "**Expand to KNN. Just a matter of getting closest N elements and choosing the most common class from that.**\n"}
{"snippet": "n = 10\ncache = [None] * (n + 1)\ndef fib_dyn(n):\n    if n == 0 or n == 1:\n        return n\n    if cache[n] != None:\n        return cache[n]\n    cache[n] = fib_dyn(n-1) + fib_dyn(n-2)\n    return cache[n]\n", "intent": "Implement the function using dynamic programming by using a cache to store results (memoization).\n"}
{"snippet": "try:\n    for i in ['a','b','c']:\n          print i**2\nexcept:\n        print\"Error\"\nfinally:\n        print \"exiting loop\"\n", "intent": "Handle the exception thrown by the code below by using try and except blocks.\n"}
{"snippet": "[x for x in range(1,51)if x%3==0]\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisble by 3.**\n"}
{"snippet": "A = []\nfor i in B:\n    i_squared = i**2\n    A.append(i_squared)\nprint(A)\n", "intent": "Lists can be used to iterate over its elements -  this created a *finite* loop, called the `for` loop. \nExample - try the following code:\n"}
{"snippet": "scenario_file = {\"verkehrsplan\": StringIO(json.dumps(scenario_content))}\nupload_response = requests.post(SCENARIO_UPLOAD_ENDPOINT, files=scenario_file, auth=AUTH)\nprint(f\"upload finished with status {upload_response}\")\n", "intent": "We can now upload the solution to the service\n"}
{"snippet": "maximum(abs(c - c_star(grid)))\n", "intent": "The policy function fit is good:\n"}
{"snippet": "viewer.addLabel('Nelfinavir', {'fontColor':'black', 'backgroundColor':'lightgray'}, {'resn':'1UN'})\n", "intent": "Render the ligand `1UN` as stick, display the bond orders, and add the label 'Nelfinavir'.\n"}
{"snippet": "quaternary = mmtfReader.download_reduced_mmtf_files([\"4HHB\"], sc)\n", "intent": "In this example we download the hemoglobin structure 4HHB, consisting of two alpha subunits and two beta subunits.\n"}
{"snippet": "positions = positions.withColumn(\"structureChainId\", concat_ws(\".\", positions.structureId,positions.chainId))\n", "intent": "See documentation for [concat_ws](http://spark.apache.org/docs/2.1.0/api/python/pyspark.sql.html\n"}
{"snippet": "employees.describe()\n", "intent": "Use the 3 dataframes to answer the following questions:\nHow many employees are there in the company? 156\n"}
{"snippet": "def get_reverse_complement(dna):\n    complement = ''\n    for nucleotide in dna:\n        complement += get_complement(nucleotide)\n    return complement[::-1]\ndoctest.run_docstring_examples(get_reverse_complement, globals())\n", "intent": "We could also turn this around: find the nucleotide complements *first*, and then reverse *that*:\n"}
{"snippet": "words = [\"fabulous\", \"flying\", \"phoenix\"]\nletter_count = 0\nfor w in words: \n    letter_count = letter_count + len(w)\nprint(\"these words total\", letter_count, \"letters\")\n", "intent": "Now let's switch to our final implementation of the letter counter, that used `range`:\n"}
{"snippet": "square = lambda num: num**2*989\n", "intent": "Note how we get a function back. We can assign this function to a label:\n"}
{"snippet": "sp_stdev = lambda p, n: np.sqrt( p * ( 1 - p ) / n[0] +  p * ( 1 - p ) / n[1]  )\nsp_stdev_2y = sp_stdev(( Nt0 + Nt1) / (n0 + n1), [n0, n1])\nprint (sp)\nprint (sp_stdev_2y)\n", "intent": "The sample proportion standard deviation\n"}
{"snippet": "def square_num(num):\n    return num**2\nsquare_num(10)\n", "intent": "3.Write a function that returns the square of a number\n"}
{"snippet": "using QuantEcon\nusing PlotlyJS\ninclude(\"ifp.jl\")\n", "intent": "Solutions for http://quant-econ.net/jl/ifp.html\n"}
{"snippet": "import math\ndef distance(p1, p2):\n    return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\ndef perimeter(polygon):\n    perimeter = 0\n    points = polygon + [polygon[0]]\n    for i in range(len(polygon)):\n        perimeter += distance(points[i], points[i+1])\n    return perimeter\n", "intent": "1. objects are things that have both data and behavior.\n2. Use inheritance and composition for reducing code duplication.\n3. property, __str__.\n"}
{"snippet": "input_strings = ['1', '5', '28', '131', '3']\noutput_integers = [int(num) for num in input_strings]\noutput_integers\n", "intent": "optimized syntax for creating a list, set or dictionary fomr an existing sequence.\nlist comprehensions. e.g. convert strings to integers.\n"}
{"snippet": "es.put_script(lang='ranklib', id='our_silly_model', body={'script': linearModel})\n", "intent": "Following the [documentation for the Learning to Rank Plugin]() we can upload this model as a ranklib script, and give it a name. \n"}
{"snippet": "fullName = firstName + \" \" + lastName\nprint(fullName)\n", "intent": "* Remember that computers don't understand context.\n"}
{"snippet": "send('Hello','World', \"Rachel\", \"Laura\")\n", "intent": "Here cc and bcc are optional, and evaluate to `None` when they are not passed another value.\n"}
{"snippet": "def get_country(rec):\n    return(rec_country)\nget_country(rec)\n", "intent": "Create a function called `get_country` that passes an individual recommendation and returns the recommending country\n"}
{"snippet": "m = 1000;\nx1 = rand(1,m);\na = 1;  \nb = 5;\nx2 = a + (b-a).*rand(1,m);\nx3 = randn(1,m);\nx4 = 5 + 2.*randn(1,m);\nx5 = randi([1 6],1,m);\n", "intent": "- Data sampled from population/process/generative model\n"}
{"snippet": "<iframe width=\"560\" height=\"315\" \nsrc=\"https://www.youtube.com/embed/a357NoXy4Nk\" frameborder=\"0\" allowfullscreen>\n</iframe>\n", "intent": "- non-parametric estimate of density\n- Learning Theory (Reza Shadmehr, Johns Hopkins University) \n"}
{"snippet": "$.getScript('https://kmahelona.github.io/ipython_notebook_goodies/ipython_notebook_toc.js')\n", "intent": "__iSystems Demo__\n<img src=\"./image_files/recurrisveBayesian_1.gif\" width = 800>\n"}
{"snippet": "maximum(abs(eigvals(A)))\n", "intent": "Note that all eigenvalues of $A$ lie inside the unit disc:\n"}
{"snippet": "Image(filename = PATH + \"bias_variance1.png\")\n", "intent": "**Lets look at another example**\n"}
{"snippet": "from nltk import FreqDist\nmovie_tokstags = nltk.pos_tag(movie_words)\nmovie_adjs = [tok for (tok,tag) in movie_tokstags if re.match('JJ', tag)]\nall_adjfreqs = FreqDist(movie_adjs)\ntop_adjfreqs = all_adjfreqs.most_common()[:1000]\nfeature_words = [x[0] for x in top_adjfreqs]\n", "intent": "We left the first part of the code the same as above, but created a new list of most common adjectives as our feature words:\n"}
{"snippet": "rows = soup.find_all(\"tr\")\nlen(rows)\n", "intent": "Now let's try to get a list of rows in that table. Remember that rows are identified by the `tr` tag.\n"}
{"snippet": "trips = sc.textFile('file:///home/vagrant/data/201408_babs_open_data/201408_trip_data.csv')\n", "intent": "> **Note:** the data has been pre-loaded on your VM. `201408_babs_open_data/201408_trip_data.csv`\n"}
{"snippet": "D = {'name': 'Drew', 'age': 32, 'job': 'prof'}\nprint(D)\nprint(D.keys())\n", "intent": "Returns all the keys in the dict as a list\n"}
{"snippet": "class mycreation(Exception):\n    pass \n", "intent": "This section will use classes, which will be taught in coming weeks\n"}
{"snippet": "values = [2,5,2,89,3.4,0,-8]\nprint values\nvalues.sort()\nprint values\n", "intent": "Sorts the elements of a list in ascending order\n"}
{"snippet": "D = {'name': 'Drew', 'age': 32, 'job': 'prof'}\nprint D\nprint D.get('name')\nprint D\n", "intent": "Same as just using dict['key']\n"}
{"snippet": "test_list = [1,3,9,3,18,9,21,19,7,12,15,22,29,65]\n", "intent": "Use the format:\n0: 1\n1: 3\n2: 9\n"}
{"snippet": "compute_asymptotic_var(A, Sigma)\n", "intent": "Let's compute the asymptotic variance:\n"}
{"snippet": "let liste_x = range (-10) 11 1 in\nlet xs = Array.of_list (List.map float_of_int liste_x) in\nlet ys = Array.of_list (List.map (fun x -> f_triangle x 5) liste_x) in\nlet p = initialisation \"graph3\" (-.15.) 15. 0. 0.18 in\nP.plot ~stream:p [bar `blue xs ys];\nP.finish ~stream:p ();;\n", "intent": "Tracer la loi triangulaire $f\\_{triangle}(x,5)$ sur l'intervalle $[[-10,10]]$\n"}
{"snippet": "tracer_ecart_type \"graph7\" 50 5 Reel2D\n", "intent": "<img src=\"graph6.svg\" width=500 />\n"}
{"snippet": "print_big_int(power_mod (Big_int.big_int_of_int 4) (Big_int.big_int_of_int 13) (Big_int.big_int_of_int 497))\n", "intent": "Test <tt>power_mod</tt>\n"}
{"snippet": "def old_macdonald(name):\n    return name[0].upper() + name[1:3] + name[3].upper() + name[4:]\n", "intent": "    old_macdonald('macdonald') --> MacDonald\nNote: `'macdonald'.capitalize()` returns `'Macdonald'`\n"}
{"snippet": "def gridSuccessors(state):\n    row, col = state\n    succs = []\n    for r in [-1, 0, 1]:\n        for c in [-1, 0, 1]:\n            newr = row + r\n            newc = col + c\n            if 0 <= newr <= 9 and 0 <= newc <= 9:  \n                succs.append( (newr, newc) )\n    return succs\n", "intent": "Let's try a navigation problem around a grid of size 10 x 10.\n"}
{"snippet": "def negamaxIDSab(game, depthLimit):\n    bestValue = -100 \n    for depth in range(depthLimit+1):\n        gameValue, move = negamaxab(game, depth)\n        if gameValue == game.getWinningValue():\n            return gameValue, move\n        if gameValue != None and bestValue < gameValue:\n            bestValue=gameValue\n            bestMove=move\n    return bestValue, bestMove\n", "intent": "`negamaxIDSab` is identical to `negamaxIDS` above except that it instead calls `negamaxab`.\n"}
{"snippet": "unExpanded = [Node([3,2,1],2,1,1),\n    Node([2,1,3],4,2,2),\n    Node([3,1,2],3,1,2),\n    Node([1,3,2],1,1,0)]\nunExpanded\n", "intent": "Hey, how about sorting nodes???  Here is list of unexpanded nodes, maybe from someplace in the middle of an A* search.\n"}
{"snippet": "bin(1024)\nhex(1024)\n", "intent": "**Problem 1: Convert 1024 to binary and hexadecimal representation:**\n"}
{"snippet": "N = 46708822349259203361344297606349795508624596894610331963475250447878049614343188469958138667702672064437158794030506161936018920993393470466541259138024527655091597122885936534640983967743981020417066596244043571854706943422478922714341547167502363866097396753119154853150662020146962118536726679429506821989\nph = 46708822349259203361344297606349795508624596894610331963475250447878049614343188469958138667702672064437158794030506161936018920993393470466541259138024513978876893776281066371789960571608641635171633767722385559809330963145405657507385159096521621672648416769760458924356578637127097073558518163200222200556\n", "intent": "2a. There exist two primes $p$ and $q$ such that $N = pq$ and $\\varphi(N)$ have the following values. Find $p$ and $q$.\n"}
{"snippet": "a = 1 < 2 ? \"foo\" : \"bar\"\na\n", "intent": "We can simplify this somewhat using the **ternary operator**.  Here's some examples\n"}
{"snippet": "def length(self):\n    return sqrt(self['x']^2 + self['y']^2)\nself = {'x':10,  'y':25,  'length':length}\nself\n", "intent": "Here's a dictionary with a Python *function* as a value:\n"}
{"snippet": "A = [2 1; 4 3]\nB = [2,1; 4 3]\n", "intent": "MATLAB assignments, section 1.6: Matrices in MATLAB\n"}
{"snippet": "timeit('sin_sum(50000)')\n", "intent": "We've already seen the `timeit` function.\n"}
{"snippet": "Partitions(10^4).random_element()\n", "intent": "At a somewhat smaller scale, we can sample random partitions:\n"}
{"snippet": "ph = (p-1)*(q-1)\nprint(ph)\n", "intent": "The bank needs to compute $\\varphi(N),$ which it can do since it knows $p$ and $q.$\n"}
{"snippet": "n = 0\nwhile n < 10\n    n += 1\n    println(n)\nend\n", "intent": "* while loops\n* for loops\n"}
{"snippet": "plot(lambda x: sin(x), 0, 2*pi)\n", "intent": "factor uses PARI\nSource: factor?? \"These implementations are not used by the\n    generic factor command, which currently just calls PARI\"\n"}
{"snippet": "g = f.taylor(x,2*pi,10)\np1 = plot(f, (x, pi, 3*pi), color='green', legend_label='$sin(x^2)$')\np2 = plot(g, (x, pi, 3*pi), color='blue', linestyle='--', ymin =-2, ymax = 2, legend_label='$p_{10}$')\nshow(p1 + p2)\n", "intent": "6b. Make a single Sage plot on the interval $x=[\\pi, 3\\pi]$ showing both $f(x)$ and its degree 10 Taylor series $p_{10}$ about $x_0 = 2\\pi$.\n"}
{"snippet": "a = randn(9,6) + 1im*randn(9,6)\nb = randn(2,7,8,3) + 1im*randn(2,7,8,3)\nu,s,vh = svd(a, thin =false)\nsize(u),size(s),size(vh)\n", "intent": "Write Julia code to emulate this example as faithfully as possible.\n"}
{"snippet": "np.linalg.eigvals(W)\n", "intent": "To compute the eigenvalues of a matrix, we can use the function `np.linalg.eigvals`:\n"}
{"snippet": "import gym\nenv = gym.make(\"CliffWalking-v0\")\n", "intent": "Let's implement these methods for a simple classical problem (Cliffwalk) from the Sutton and Barto book. The code below can help you get started\n"}
{"snippet": "print primes[0:5]  \n", "intent": "Python `list` indexing is a powerful feature. We can also use it access a sublist:\n"}
{"snippet": "print 'Isaac Newton' in physicists\nprint 'Nikola Tesla' in physicists\nif 'Marie Curie' in physicists:\n    print physicists['Marie Curie']\n", "intent": "Happily we can test a `dict` to see if it has a given key before the lookup:\n"}
{"snippet": "person_a_likes = {'pizza', 'python', 'music', 'ice cream'}\nperson_b_likes = {'tea', 'pb&j sandwiches', 'python', 'reading'}\nprint person_a_likes.intersection(person_b_likes)\nprint person_b_likes.union(person_a_likes)\nprint person_b_likes.difference(person_a_likes)\nprint person_a_likes.difference(person_b_likes)\n", "intent": "A Python `set` is very much like a mathematical set. It can do the same mathematical operations. Much can be accomplished with this functionality.\n"}
{"snippet": "f = open('companies_name.tsv', 'r')\nnew_f = open('companies_name1.tsv', 'w')\nfor line in f:\n    line = line.strip()\n    id_num, names = line.split(\"\\t\")\n    name_list = names.split(\"|\")\n    new_names = preproc(name_list)\n    print(\"|\".join(new_names))\n    new_f.write(id_num + \"\\t\" + \"|\".join(new_names) + \"\\n\")\nf.close()\n", "intent": "others to think about:\ninc\nrd\nst\nwy\n"}
{"snippet": "create index zip_index on complaints(zip_code);\nanalyze\n", "intent": "The syntax to create a view is below\n> create index (index_name) on (table)(attributes)\n"}
{"snippet": "pluralLambdaRDD = wordsRDD.map(lambda x:x+'s')\nprint pluralLambdaRDD.collect()\n", "intent": "** (1d) Pass a `lambda` function to `map` **\nLet's create the same RDD using a `lambda` function.\n"}
{"snippet": "a = 10\na += 10         \nprint(a)\n", "intent": "    =,  +=,  -=,  *=,  /=,  %=,  //=,  **=, &=,  |=,  ^=,  >>=,  <<= are Assignment operators\n"}
{"snippet": "a = True                          \nprint(type(a))\n", "intent": " Boolean represents the truth values False and True\n"}
{"snippet": "x_vals = [1, 2, 3]\ny_vals = [1, 1, 1]\nsum([x * y for (x, y) in zip(x_vals, y_vals)])\n", "intent": "Here's one possible solution\n"}
{"snippet": "nS_rand = 10 \nnA_rand = 2 \nR_rand = nr.rand(nS_rand, nA_rand, nS_rand) \nP_rand = nr.rand(nS_rand, nA_rand, nS_rand) \nP_rand /= P_rand.sum(axis=2,keepdims=True) \ngamma = 0.90\n", "intent": "First, let's randomly generate the reward function and transition probabilities.\n"}
{"snippet": "get_analogy('man', 'woman', 'son', glove_6b50d)\n", "intent": "Verify the \"male-female\" analogy.\n"}
{"snippet": "def ancestry(fil):\n    for lin in struct:\n        match=re.search(r\"(\\d\\d\\d):\\s+(\\d+\\.\\d+)\\s+(\\d+\\.\\d+).+\",lin)\n        if match:\n            print(\"Percent indicus ancestry for breed %s is %i%%\" %(match.group(1),int(100*float(match.group(2)))))\n", "intent": "And, make a function!\n"}
{"snippet": "fit.arima.man <- Arima(tSeries, order=c(3,1,3), seasonal=c(0,1,1), lambda=LambdaOpt)\nres.arima.man <- residuals(fit.arima.man)\nfit.arima.man\noptions(repr.plot.width=10, repr.plot.height=5)\nplot(res.arima.man)\n", "intent": "Let's investigate it deeper:\n"}
{"snippet": "h = cos(t*pi()/2) .* double(abs(t)<1);\nhf = fftshift(abs(fft(h)));\nhf = log10(eta+hf); hf = hf/max(hf);\nclf;\nsubplot(2,1,1);\ntitle('Hamming window');\nplot(t, h); axis([-2 2, -.1, 1.1]);\nsubplot(2,1,2);\nplot(t, hf); axis([-2 2, vmin, 1.1]);\ntitle('Fourier transform');\n", "intent": "A Hamming window is smoother.\n"}
{"snippet": "eS = norm(abs(S),'fro').^2;\ndisp(strcat(['Energy conservation (should be 1)=' num2str(e/eS)]));\n", "intent": "energy of the coefficients\n"}
{"snippet": "Theta = mod(atan2(P(:,2),P(:,1)), pi());\n", "intent": "We compute the angle associated to each point over the transformed\ndomain. The histograms shows the main direction of mixing.\n"}
{"snippet": "options.multichannel = 0;\nS = perform_stft(x0,wlist,qlist, options);\n", "intent": "Compute its short time Fourier transform with a collection of windows.\n"}
{"snippet": "options.multichannel = 1;\nS = perform_stft(y, wlist, qlist, options);\n", "intent": "We transform the stero pair using the multi-channel STFT (each channel is transformed independantly.\n"}
{"snippet": "pairs = ((2, 5), (4, 2), (9, 8), (12, 10))\nsum([(x % 2 == 0) && (y % 2 == 0) for (x, y) in pairs])\n", "intent": "Here's one possibility\n"}
{"snippet": "H = h; \nfor i=1:q-1\n    Hold = H;\n    H = [];\n    for i=1:length(h)\n        H = [H; Hold*h(i)];\n    end\nend\n", "intent": "We generate the probability table |H| of |x1| that represents the probability\nof each new block symbols in |1,...,m^q|.\n"}
{"snippet": "options.normalize = 1;\n[H,x,xc] = compute_conditional_histogram(MW1q,C, options);\n", "intent": "Compute the conditional histogram.\n"}
{"snippet": "clf;\nsubplot(2,1,1);\nbar(t0,h0); axis('tight');\ntitle('Pixels');\nsubplot(2,1,2);\nbar(t,h); axis([-5 5 0 max(h)])\ntitle('Wavelets (zoom)');\n", "intent": "Display the histograms.\n"}
{"snippet": "wmax = 7;\n[Y,X] = meshgrid(-wmax:wmax, -wmax:wmax);\nnormalize = @(x)x/sum(x(:));\nstrel = @(w)normalize( double( X.^2+Y.^2<=w^2 ) );\n", "intent": "Round structuring element.\n"}
{"snippet": "clf;\nfor i=1:16\n    x = floor( rand*(n-1)+1 );\n    y = floor( rand*(n-1)+1 );\n    imageplot( squeeze(P(x,y,:,:)), '', 4,4,i );\nend\n", "intent": "Display some example of patches\n"}
{"snippet": "D = distance(i);\nK = kernel(i,tau);\n", "intent": "Compute a typical example of kernel for some pixel position $(x,y)$.\n"}
{"snippet": "closing = @(f)phi(f,0);\nclf;\nimageplot(closing(f));\n", "intent": "The case $\\beta=0$ corresponds to the closing operator from\nmathematical morphology (min filter).\n"}
{"snippet": "F = bileteral_stack(f0,sx,sv);\n", "intent": "Compute the bilateral stack $\\{ F_{v_i} \\}_i $.\n"}
{"snippet": "sx = 5; sv = .02;\nFV1 = bilateral_lin(FV, sx,sv);\n", "intent": "The base layer is defined as\n$ B_V = \\Bb_{\\si_x,\\si_v}(F_V) $.\n"}
{"snippet": "function f(string)\n    count = 0\n    for letter in string\n        if (letter == uppercase(letter)) && isalpha(letter)\n            count += 1\n        end\n    end\n    return count\nend\nf(\"The Rain in Spain\")\n", "intent": "Here's one solution:\n"}
{"snippet": "n = 1024;\nname = 'piece-regular';\nf0 = rescale( load_signal(name,n) );\n", "intent": "Load a clean signal.\n"}
{"snippet": "H = M;\nH = (H(1:n-1,:) - H(2:n,:))'/sqrt(2);\nH = (H(1:n-1,:) - H(2:n,:))'/sqrt(2);\n", "intent": "First we extract the high frequency residual.\n"}
{"snippet": "clf;\nplot( denoise(y,mu) );\naxis([1 N -.05 1.05]);\n", "intent": "Display the results.\n"}
{"snippet": "clf;\nimageplot( denoise(y,mu) );\n", "intent": "Display a denoised signal.\n"}
{"snippet": "tau = 2 / ( 1 + lambda * 8 / epsilon);\n", "intent": "The step size for diffusion should satisfy:\n$$ \\tau < \\frac{2}{1 + \\lambda 8 / \\varepsilon} . $$\n"}
{"snippet": "Theta0W = @(f,T)Wi(Theta0(W(f),T));\nTheta1W = @(f,T)Wi(reinject(Theta1(W(f),T)));\n", "intent": "Define the soft and hard thresholding estimators.\n"}
{"snippet": "clf;\nplot_wavelet(aT,Jmin);\n", "intent": "Display the thresholded coefficients.\n"}
{"snippet": "fS = circshift(fS,-delta(:,i));\n", "intent": "After denoising, do the inverse shift.\n"}
{"snippet": "Jmin = 3;\nMW = perform_wavelet_transf(M,Jmin,+1);\n", "intent": "Compute a 2D orthogonal wavelet transform.\n"}
{"snippet": "f(seq_a, seq_b) = issubset(Set(seq_a), Set(seq_b))\nprintln(f([1, 2], [1, 2, 3]))\nprintln(f([1, 2, 3], [1, 2]))\n", "intent": "If we use the `Set` data type then the solution is easier\n"}
{"snippet": "block = @(x)reshape(x(I(:)),size(I));\niblock = @(H)assign(zeros(size(fw)), I, H);\n", "intent": "Forward and backward extraction operators.\n"}
{"snippet": "boundary = @(x)mod(x-1,n)+1;\n", "intent": "For simplicity of implementation, we use periodic boundary conditions.\n"}
{"snippet": "n = 100;\nx = linspace(-1,1,n);\n[Y,X] = meshgrid(x,x);\nsigma = .2;\nW = 1 + 8 * exp(-(X.^2+Y.^2)/(2*sigma^2));\n", "intent": "Computation of Geodesic Paths\n-----------------------------\nWe use a more complicated, non-constant metric, with a bump in the\nmiddle.\n"}
{"snippet": "options.order = 2;\nG0 = grad(D, options);\n", "intent": "Compute the gradient $G_0(x) = \\nabla D(x) \\in \\RR^2$ of the distance map. Use centered differences.\n"}
{"snippet": "c = max(f1(:));\nepsilon = 1e-2;\nW = epsilon + abs(f1-c);\n", "intent": "We compute a metric tthat is small for large values of $f_1$:\n$$ W(x) = \\epsilon +  \\abs{f_1(x)-c}$\n      \\qwhereq c = \\umax{x} f_1(x). $$\n"}
{"snippet": "warning off\naddpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('toolbox_graph')\naddpath('solutions/fastmarching_3_anisotropy')\nwarning on\n", "intent": "This tour explores the use of geodesic distances for anisotropic metric.\n"}
{"snippet": "[tmp,i] = max(D(:));\n[x,y] = ind2sub([n n],i); \nvertex(:,end+1) = [x;y];\n", "intent": "Choose the second point as the farthest point.\n"}
{"snippet": "options.method = 'continuous';\npaths = compute_geodesic_mesh(D, vertex, faces, pend, options);\n", "intent": "In order to extract a smooth path, one needs to use a gradient descent.\n"}
{"snippet": "name = 'earth';\nf = load_spherical_function(name, vertex, options);\noptions.name = name;\n", "intent": "Load a function on the mesh.\n"}
{"snippet": "using Plots\nplotlyjs()\n", "intent": "Our aim is to plot the sequence of functions described in the exercise.  We will use the library `Plots.jl`.\n"}
{"snippet": "[tmp,landmarks(end+1)] = max(D);\n", "intent": "Select as the next sampling point the farthest point.\n"}
{"snippet": "clf;\nhold on;\noptions.face_vertex_color = W;\nplot_mesh(vertex,faces, options);\ncolormap jet(256);\n", "intent": "Display the speed function.\n"}
{"snippet": "vapprox = compute_orthoproj_triangulation(vertex, faces, M);\nMapprox = compute_triangulation_interpolation(faces,vertex,vapprox, n);\n", "intent": "Another, better way to compute the approximation is to compute\ncoefficients |vapprox| that performs the best L2 approximation with\nlinear spline.\n"}
{"snippet": "clf;\nimageplot(Q);\ncolormap(jet(256));\n", "intent": "Display Voronoi diagrams.\n"}
{"snippet": "Dland = zeros(n,n,q);\nfor i=1:q\n    Dland(:,:,i) = perform_fast_marching(1./W, landmarks(:,i));\nend\n", "intent": "Pre-compute distances to landmarks.\n"}
{"snippet": "t = linspace(0,1,n)';\ng = repmat( psi(t)*psi(t)', [1 1 size(f0,3)]);\n", "intent": "Define the $g$ windowing mask.\n"}
{"snippet": "M1 = reshape(d1*U',[n n 3]);\n", "intent": "Perform the inverse change of color space.\n"}
{"snippet": "sigma2 = 0.2;\nmu = -sigma2/2;\n", "intent": "Parameters for the law of multipliers Wi (Wi>0).\nHere we choose a log-normal law. Another simple possible choice\nis to set Wi=2/3 for all the Wi.\n"}
{"snippet": "clf\nh = plot3(xi, yi, ri, '.');\naxis([-1/2,Xmax+1/2,-1/2,Ymax+1/2,0,1]);\n", "intent": "Display the points in the scale-space plane.\n"}
{"snippet": "using QuantEcon\nusing Plots\nplotlyjs()\n", "intent": "Common imports for the exercises\n"}
{"snippet": "s1 = [2:n 1]; s2 = [n 1:n-1];\nDelta = @(g)1/4 *( g(s1,:,:) + g(s2,:,:) + g(:,s1,:) + g(:,s2,:) ) - g;\n", "intent": "We implement the Laplacian using finite difference.\n"}
{"snippet": "Mp = M;\nMp(Xs + (Ys-1)*n) = P;\n", "intent": "Reconstruct the image.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('toolbox_graph')\naddpath('solutions/graphics_7_shape_shading')\n", "intent": "This tour explores the resolution of the shape from shading inverse\nproblem using Fast Marching.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('solutions/introduction_1_basics')\n", "intent": "This tour shows some basics about Matlab/Scilab programming.\n"}
{"snippet": "clf;\nplot(1:n, f);\naxis('tight');\ntitle('My title'); % title\nset_label('variable x', 'variable y'); % axis\n", "intent": "Display the signal.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('solutions/introduction_4_fourier_wavelets')\n", "intent": "This numerical tour overviews the use of Fourier and wavelets for image\napproximation.\n"}
{"snippet": "FT = F .* (abs(F)>T);\n", "intent": "Do the hard thresholding.\n"}
{"snippet": "clf;\nsubplot(2,1,1);\nplot(f(:,n0/2)); \naxis('tight'); title('f');\nsubplot(2,1,2);\nplot(fM(:,n0/2)); \naxis('tight'); title('f_M');\n", "intent": "Compare two 1D profile (lines of the image).\nNote how the ringing artifacts are reduced with respec to the Fourier\napproximation.\n"}
{"snippet": "disp(strcat(['      M=' num2str(M)]));\ndisp(strcat(['|fWT|_0=' num2str(sum(fWT(:)~=0))]));\n", "intent": "Check the number of non-zero coefficients in |fWT|.\n"}
{"snippet": "using QuantEcon\ninclude(\"lqramsey.jl\");\n", "intent": "Solutions for http://quant-econ.net/jl/lqramsey.html\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('solutions/inverse_3_deconvolution_sparsity')\n", "intent": "This numerical tour explores the use of\nsparsity regularization to perform image deconvolution.\n"}
{"snippet": "clf;\nimageplot(clamp(fBestOrtho), ['Sparsity deconvolution, SNR=' num2str(snr(f0,fBestOrtho),3) 'dB']);\n", "intent": "Display the result.\n"}
{"snippet": "clf;\nimageplot(f, strcat(['Inpainted, SNR=' num2str(snr(f0,f),3) 'dB']));\n", "intent": "Display the result.\n"}
{"snippet": "clf;\nimageplot(y, 'Observations y');\n", "intent": "Display the observations.\n"}
{"snippet": "J = @(u)sum(sum( sqrt( epsilon^2 + sum3(grad(u).^2,3) ) ));\ndisp(['J(f) = ' num2str(J(f),3)]);\n", "intent": "Compute the (smoothed) total variation of $f$.\n"}
{"snippet": "tau = 1.9 /( max(W(:))^2 + 8*lambda/epsilon );\n", "intent": "The gradient descent step size should satisfy:\n$$ \\tau < \\frac{2}{ \\max_{\\omega} W_\\omega^2 + \\lambda \\epsilon /8  } $$\n"}
{"snippet": "clf;\nimageplot(clamp(fSob), ['Sobolev inversion, SNR=' num2str(snr(f0,fSob),3) 'dB'] );\n", "intent": "Display the result.\n"}
{"snippet": "[normal,normalf] = compute_normal(vertex1,faces);\n", "intent": "Check which faces have the correct orientation.\nnormal to faces\n"}
{"snippet": "clf;\nplot(Edir/Edir(1));\n", "intent": "Plot the decay of the energy.\n"}
{"snippet": "using PlotlyJS\ninclude(\"lucastree.jl\")\n", "intent": "Solutions for http://quant-econ.net/jl/lucas_model.html\n"}
{"snippet": "applyinterp = @(C,x)sum(repmat(reshape(x(:), [1 1 k]),[n n 1]).*C,3);\n", "intent": "Interpolation function.\n"}
{"snippet": "i = 4;\nj = mod(i,k)+1;\nvi = V(:,i);\nvj = V(:,j);\nni = -N(:,i);\n", "intent": "Select two consecutive points on the polygon,\ncompute the associated normal\n"}
{"snippet": "t = linspace(-1,1,q+2); t([1 length(t)]) = [];\nvertex = vertex0;\nfor i=1:q\n    for j=1:q\n        d = (X(:)'-t(i)).^2 + (Y(:)'-t(j)).^2;\n        vertex(3,:) = vertex(3,:) + h * exp( -d/(2*sigma^2)  );\n    end\nend\n", "intent": "Elevate the surface using bumps.\n"}
{"snippet": "vertex = 2*rand(2,n)-1;\n", "intent": "Compute randomized points in a square.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('toolbox_graph')\naddpath('solutions/meshproc_2_basics_3d')\n", "intent": "This tour explores some basics about 3D triangulated mesh (loading,\ndisplay, manipulations).\n"}
{"snippet": "v1 = L*vertex(1,:)';\nv2 = L*vertex(2,:)';\n", "intent": "We can compute the Laplacian of a function on the mesh, for instance the\nX and Y position.\n"}
{"snippet": "[tmp,I] = sort(E0(1,:)');\nE0 = E0(:,I);\n", "intent": "Sort the edge according to the first point (this is optional, this change nothing in the\noperators ...).\n"}
{"snippet": "clf;\nplot(0:length(err)-1, err, '.-'); axis('tight');\nset_label('Iteration', 'SNR');\n", "intent": "Plot the error as a function of the number of iterations.\n"}
{"snippet": "[S,I] = sort(S, 'ascend');\nU = real( U(:,I) );\n", "intent": "Order the eigenvector by increasing frequencies.\n"}
{"snippet": "y = [1 3 -3]'\nX = [1 0; 0 -6; 2 2];\n", "intent": "Here are the arrays we'll work with\n"}
{"snippet": "options.face_vertex_color = f0(:);\nclf;\nplot_mesh(X0,F, options);\nlighting none;\n", "intent": "Display the initial condition $f_0$ as a function on the mesh.\n"}
{"snippet": "clf; hold on;\nmyplot(f, 'k.-');\nmyplot(f0, 'r.--');\nmyaxis(0);\n", "intent": "Display the original and filtered discrete curves.\n"}
{"snippet": "clf;\nsubplot(1,2,1);\nplot_mesh(vertex0,face0); \nshading('faceted'); lighting('flat'); view(3); axis('tight');\nsubplot(1,2,2);\nplot_mesh(vertex,face); \nshading('faceted'); lighting('flat'); view(3); axis('tight');\n", "intent": "Display before/after subdivision.\n"}
{"snippet": "faces1 = faces;\nvertex1 = vertex;\n", "intent": "Initialize the simplification.\n"}
{"snippet": "distmat = @(X,Z)bsxfun(@plus,dot(X',X',1)',dot(Z',Z',1))-2*(X*Z');\n", "intent": "Macro to compute pairwise squared Euclidean distance matrix.\n"}
{"snippet": "[U,D,V] = svd(Xm(X0),'econ');\nZ = Xm(X0) * V;\n", "intent": "Compute PCA ortho-basis and\nthe feature in the PCA basis.\n"}
{"snippet": "yn = reshape(Y(Xn),[q,q]);\nclf;\nimagesc(t,t,yn); axis image; axis off; \ncolormap jet(256);\n", "intent": "Display as an image.\n"}
{"snippet": "clf; hold on;\nimagesc(t,t, Theta');\noptions.disp_legend = 0;\nplot_multiclasses(X,y,options);\ncolormap jet(256); caxis([0 1]);\naxis off;\n", "intent": "Display the classification probability.\n"}
{"snippet": "name = 'quantum';\nload(['ml-' name]);\nA = A(randperm(size(A,1)),:);\nX = A(:,1:end-1);\ny = A(:,end);\n", "intent": "Load the dataset.\nRandomly permute it.\nSeparate the features $X$ from the data $y$ to predict information.\n"}
{"snippet": "eigvals, eigvecs = np.linalg.eig(W)\n", "intent": "If you also want the eigen vectors, then the function `np.linalg.eig` will return a tuple of both the eigenvalues and the eigenvectors:\n"}
{"snippet": "Mspin = zeros(n,n,n);\n", "intent": "initialize spinning process\n"}
{"snippet": "clf;\nsubplot(2,1,1);\nv = M(pos(1),pos(2),:); v = v(:);\nplot(v); axis('tight');\ntitle('Spetral content');\nsubplot(2,1,2);\nv = U(pos(1),pos(2),:); v = v(:);\nplot(v); axis('tight');\ntitle('DCT tranform');\n", "intent": "We plot the spectral content of a pixel and its DCT transform.\nYou can note that the DCT coefficients are quikcly decaying.\n"}
{"snippet": "U = Dt + sum(v.*D,3);\n", "intent": "Compute the gradient of the functional.\nFirst compute |Dt+v1*D1+v2*D2|\n"}
{"snippet": "selx = clamp( (i-1)*w+1:i*w, 1,n);\nsely = clamp( (j-1)*w+1:j*w, 1,n);\n", "intent": "Block pixels index.\n"}
{"snippet": "F = fftn(M);\ny = F(mask==1);\n", "intent": "Tomographic measurement can thus be intepreted as a selection of a few\nFourier frequencies.\n"}
{"snippet": "p = 100; % number of outliers\nsel = randperm(n); sel = sel(1:p); % index of outliers\nX(:,sel) = rand(d,p)*50;\n", "intent": "We modify some points as positive outliers (to shift the mean).\n"}
{"snippet": "m = mean(X, 2);\nclf;\nhold('on');\nplot3(X(1,:), X(2,:), X(3,:), '.');\nplot3(m(1), m(2), m(3), '*k');\nplot3(med(1), med(2), med(3), 'or');\nview(3); axis('tight');\n", "intent": "We can display the points, the mean and the median, in 3D.\n"}
{"snippet": "dotp = @(a,b)sum(a(:).*b(:));\nfprintf('Should be 0: %.3i\\n', dotp(grad(x0), grad(x0)) + dotp(delta(x0),x0) );\n", "intent": "Check that the relation $ \\norm{\\nabla x} = - \\dotp{\\Delta x}{x}.  $\n"}
{"snippet": "clf;\nimageplot( perform_hist_eq(F, 'linear') );\ncolormap jet(256);\n", "intent": "2-D display (histogram equalization helps to better visualize\nthe iso-contours).\n"}
{"snippet": "U = gram_schmidt(X)\n", "intent": "Now let's orthogonalize first, using Gram--Schmidt:\n"}
{"snippet": "y = Phi(x0) + sigma*randn(N,1);\n", "intent": "Compute the measurements $y=\\Phi x_0 + w$ where $w$ is a realization\nof a Gaussian white noise of variance $\\si^2$.\n"}
{"snippet": "plot(log10(lun(1:end/2)-lun(end)));\naxis('tight');\n", "intent": "We display the convergence speed of the $\\ell^1$ norm on the first half iterations, in log\nscales.\n"}
{"snippet": "f = y;\ng = K(y)*0;\nf1 = f;\n", "intent": "Initialization, here |f| stands for the current iterate $f_k$,\n|g| for $g_k$ and |f1| for $\\tilde f_k$.\n"}
{"snippet": "Jmin = 4;\nPsi = @(x)perform_wavortho_transf(x,Jmin,+1);\n", "intent": "Create the wavelet transform $\\Psi$.\n"}
{"snippet": "lambda = lambda - gamma;\n", "intent": "Update the value of $\\la$, to define the next breakpoint location\n$$ \\la_{k+1} = \\la_{k} - \\ga $$\n"}
{"snippet": "gauss = @(q,a,c)a*randn(2,q)+repmat(c(:), [1 q]);\nX0 = randn(2,n0)*.3;\nX1 = [gauss(n1/2,.5, [0 1.6]) gauss(n1/4,.3, [-1 -1]) gauss(n1/4,.3, [1 -1])];\n", "intent": "Compute a first point cloud $X_0$ that is Gaussian.\nand a second point cloud $X_1$ that is Gaussian mixture.\n"}
{"snippet": "clf; hold on;\nmyplot(X0(1,:), X0(2,:), 10, 'b');\nmyplot(X1(1,:), X1(2,:), 10, 'r');\naxis equal; axis off;\n", "intent": "Display the coulds.\n"}
{"snippet": "grad = @(f)cat(4, dx(f), dy(f));\ndiv  = @(u)-dxS(u(:,:,:,1)) - dyS(u(:,:,:,2));\n", "intent": "Define spacial gradient and divergence, satisfying $\\text{div}=-\\nabla^*$.\n"}
{"snippet": "ProxG = @(w,lambda)w + AS( pA(r0-A(w)) );\n", "intent": "Define the projection operator $\\text{Prox}_{\\la G}$.\n"}
{"snippet": "y = [1, 3, -3]\nX = [[1, 0],\n     [0, -6],\n     [2, 2]]\nX, y = [np.asarray(z) for z in (X, y)]\n", "intent": "Here are the arrays we'll work with\n"}
{"snippet": "clf;\nhold on;\nh = plot([f(1,:);f1(1,:)], [f(2,:);f1(2,:)], 'k');\nset(h, 'LineWidth', 2);\nplotp(f, 'b');\nplotp(g, 'r');\naxis('off'); axis('equal');\n", "intent": "Display final configuration with the matching.\n"}
{"snippet": "clf; hold on;\nplotp(x, 'b');\nplotp(y, 'r');\naxis('off'); axis('equal');\n", "intent": "Display of the two clouds.\n"}
{"snippet": "a = p ./ (xi*b);\nb = q ./ (xi'*a);\n", "intent": "One sinkhorn iteration.\n"}
{"snippet": "t = [0:n/2 -n/2+1:-1];\n[X2,X1] = meshgrid(t,t);\nnormalize = @(h)h/sum(h(:));\nh = @(t)normalize( exp( -(X1.^2+X2.^2)/(4*t) ) );\n", "intent": "Define a discrete Gaussian blurring kernel of width $\\sqrt{t}$.\n"}
{"snippet": "ortho = @(u)deal(u, cat(3,-u(:,:,2), u(:,:,1)));\neigbasis = @(S)ortho(eig1(S));\n", "intent": "Vector $e_2$ is obtained by applying a $\\pi/2$ rotation to $e_1$,\nwhich defines the eigenbasis.\n"}
{"snippet": "sigma = @(x)alpha*abs(x-c)+beta;\n", "intent": "Definition of $\\sigma$\n"}
{"snippet": "S1 = sparse(Gamma(S,tau(m)));\n", "intent": "In order to save computation time when applying $S_\\tau$, it should be\nstored as a sparse matrix $S_1$.\n"}
{"snippet": "hessian = @(f)cat(3, d2x(f), dxy(f), d2y(f));\n", "intent": "Define Hessian operator.\n"}
{"snippet": "delta = .03;\ngamma2 = gamma1 + delta * normal(gamma1);\ngamma3 = gamma1 - delta * normal(gamma1);\n", "intent": "Move the curve in the normal direction, by computing $ \\ga_1(t) \\pm \\delta n_{\\ga_1}(t) $.\n"}
{"snippet": "Py1 = X @ np.linalg.inv(X.T @ X) @ X.T @ y\n", "intent": "First let's try projection of $y$ onto the column space of $X$ using the ordinary matrix expression:\n"}
{"snippet": "g0 = grad(phi,options);\n", "intent": "We now compute the right hand side of the evolution equation.\nCompute the gradient $\\nabla \\phi$.\n"}
{"snippet": "phi = perform_redistancing(phi);\n", "intent": "Once in a while (e.g. every 30 iterations), perform re-distancing of $\\phi$.\n"}
{"snippet": "I = round(linspace(1,L+1,N0+1));\nX = round(b(:,I(1:end-1)));\n", "intent": "Sampling on the boundary.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('toolbox_graph')\naddpath('solutions/shapes_2_bendinginv_3d')\n", "intent": "This tour explores the computation of bending invariants of surfaces.\n"}
{"snippet": "opt.disp = 0; \n[Xstrain, val] = eigs(K, 3, 'LR', opt);\nXstrain = Xstrain .* repmat(sqrt(diag(val))', [n 1]);\nXstrain = Xstrain';\n", "intent": "Perform classical MDS on the reduced set of points, to obtain new positions in 3D.\n"}
{"snippet": "Mh = perform_convolution(M,h);\n", "intent": "Compute convolution.\n"}
{"snippet": "options.constraint_map = L;\nD = perform_fast_marching(W, start_points, options);\n", "intent": "Compute the geodesic distance with constraints using Fast Marching.\n"}
{"snippet": "clf; hold on;\nimageplot(convert_distance_color(D, W));\nh = plot(pstart(2,:), pstart(1,:), '.r'); set(h, 'MarkerSize', ms);\n", "intent": "Display the geodesic distance.\n"}
{"snippet": "k0 = 2;\nJ = log2(n)-k0;\nWav  = @(f)perform_wavelet_transf(f,J,+1);\nWavI = @(x)perform_wavelet_transf(x,J,-1);\n", "intent": "Shortcuts for the wavelet transform $ \\{\\dotp{f}{\\psi_m}\\}_m $.\nWe only compute up to a scale $J$ so that only $k_0$ sub-bands are\ntransformed.\n"}
{"snippet": "U = gram_schmidt(X)\n", "intent": "Now let's do the same using an orthonormal basis created from our `gram_schmidt` function.\n"}
{"snippet": "q = 3*m;\nx = floor( rand(1,1,q)*(n0-w) )+1;\ny = floor( rand(1,1,q)*(n0-w) )+1;\n", "intent": "Random patch location.\n"}
{"snippet": "[y,x] = meshgrid(1:q:n0-w/2, 1:q:n0-w/2);\nm = size(x(:),1);\nXp = repmat(dX,[1 1 m]) + repmat( reshape(x(:),[1 1 m]), [w w 1]);\nYp = repmat(dY,[1 1 m]) + repmat( reshape(y(:),[1 1 m]), [w w 1]);\n", "intent": "Define regularly space positions for the extraction of patches.\n"}
{"snippet": "maxall = @(C)max(C(:));\nmu = @(Phi)maxall(Correlation(Phi));\n", "intent": "Compute the coherence $\\mu(\\Phi)$.\n"}
{"snippet": "U = repmat( reshape(1:n, [1 1 n]), n,n );\n", "intent": "Comparison matrix used for encoding to binary format.\n"}
{"snippet": "disp(['Should be 0: ' num2str(norm(Acol*X(:)-1)) '.']);\n", "intent": "Show that constraint |Acol*X(:)=1| is satisfied.\n"}
{"snippet": "d = projector(Xproj)-Xproj;\ndisp(['Should be 0: ' num2str(norm(d(:), 'fro')) '.']);\n", "intent": "Check that |Xproj| projects onto itself because it satisfies the constraints.\n"}
{"snippet": "fc = 6;\nN = 2*fc+1;\n", "intent": "Set the cutoff pulsation $f_c$ and number of measurements $N=2f_c+1$.\n"}
{"snippet": "etaLambda = PhiS(fc,u,p);\nclf; hold on;\nstem(x0, sign(a0), 'k.--', 'MarkerSize', ms, 'LineWidth', lw);\nplot([0 1],  [1 1], 'k--', 'LineWidth', lw); \nplot([0 1], -[1 1], 'k--', 'LineWidth', lw);\nplot(u, etaLambda, 'b', 'LineWidth', lw);\naxis([0 1 -1.1 1.1]);\nset(gca, 'XTick', [], 'YTick', [0 1]); box on;\n", "intent": "Display $\\eta_\\la = \\Phi^* p $ where $p=p_\\la$ is the solution of\n$\\Dd_\\la(y)$.\n"}
{"snippet": "convol  = @(x,h)real(ifft(fft(x).*fft(h)));\nconvolS = @(x,h)real(ifft(fft(x).*conj(fft(h))));\n", "intent": "Useful helpers: computer periodic convolutions, and adjoint of convolution\n(i.e. convolution with the time-reversed kernel).\n"}
{"snippet": "from scipy.linalg import qr\nQ, R = qr(X, mode='economic')\n", "intent": "This is the same answer.  So far so good.  Finally, let's try the same thing but with the basis obtained via QR decomposition:\n"}
{"snippet": "Ubot = U(:,N+1:end);\nd = Ubot'*exp(-2i*pi*(0:L-1)'*z(:)');\nd = sum(abs(d).^2) / L;\n", "intent": "Imaging function $d_{y_0}$, evaluated on a thin grid $z \\in \\mathbb{T}^Q$.\n"}
{"snippet": "fprintf('Should be 0: %.3f.\\n', (norm(f-f1))/norm(f));\n", "intent": "Check that we have correctly recovered the signal.\n"}
{"snippet": "ihaar = @(a,dH,dV,dD)ihaarV( ihaarH(a,dH), ihaarH(dV,dD) );\n", "intent": "Shortcut to invert horizontal and then vertical transforms. This defines\nthe invert of the Haar transform.\n"}
{"snippet": "fw(1:2^(j+1)) = cat(1, a, d );\n", "intent": "_Note:_ |subsampling(A)| is equivalent to |A(1:2:end)|.\nConcatenate them to get the result and store it in |fw|.\n"}
{"snippet": "A = fW(1:2^(j+1),1:2^(j+1));\n", "intent": "Select the sub-part of the image to transform.\n"}
{"snippet": "Coarse = A(1:2^j,:);\nDetail = A(2^j+1:2^(j+1),:);\n", "intent": "Retrieve coarse and detail coefficients in the vertical direction (you\ncan begin by the other direction, this has no importance).\n"}
{"snippet": "Inv1 = @(M,d)[M(2,2,:)./d -M(1,2,:)./d; -M(2,1,:)./d M(1,1,:)./d];\nInv  = @(M)Inv1(M, M(1,1,:).*M(2,2,:) - M(1,2,:).*M(2,1,:));\nMult = @(M,u)[M(1,1,:).*u(1,1,:) + M(1,2,:).*u(2,1,:);  M(2,1,:).*u(1,1,:) + M(2,2,:).*u(2,1,:)];\n", "intent": "Shortcut for the explicit inverse of a series of 2D matrices, and the multiplication with a vector.\n"}
{"snippet": "W = ones(n,1); \nW(vertex(1,:)<.5) = 1/2;\n", "intent": "Generate a binary metric in order to produce a reflexion effect.\n"}
{"snippet": "sigma = .04; % noise level\nx = x0 + sigma*randn(size(x0));\nclf;\nsubplot(2,1,1);\nplot(x0); axis([1 N -.05 1.05]);\nsubplot(2,1,2);\nplot(x); axis([1 N -.05 1.05]);\n", "intent": "We add some noise to it to obtain the noisy signal $x = x_0 + w$.\nHere $w$ is a realization of a Gaussian white noise of variance\n$\\si^2$.\n"}
{"snippet": "def x(t):\n    if t == 0:\n        return 0\n    if t == 1:\n        return 1\n    else:\n        return x(t-1) + x(t-2)\n", "intent": "Here's the standard solution\n"}
{"snippet": "fHard = perform_wavortho_transf(aT,Jmin,-1,h)\n", "intent": "Reconstruct the image $\\tilde f$ from these noisy coefficients.\n"}
{"snippet": "imageplot(-M, '-M', [1,2,1])\nimageplot(M[::-1,:], 'Flipped', [1,2,2])\n", "intent": "An image is a 2D array, that can be modified as a matrix.\n"}
{"snippet": "figsize(8,8)\ncontourf(t,t,F,35)\nxarray=GradDescentArray(Grad_f,[0.6,0.6],30,0.225)\nplot(xarray[:,0], xarray[:,1], 'w.-')\n", "intent": "We plot the iterates above the contourplot of $f$:\n"}
{"snippet": "def Proj_Omega(x, y, mask):\n    x[mask] = y[mask] \n    return x\n", "intent": "The Lipschitz constant $\\beta$ of $\\nabla f$ is 8.\n"}
{"snippet": "plot(log10((En_array[0:1800]-En_array[-1])/(En_array[0]-En_array[-1])))\n", "intent": "We plot the relative error $(E_k-E^\\star)/(E_0-E^\\star)$ in log-scale with respect to $k$.\n"}
{"snippet": "A = randn(P,N) / sqrt(P)\n", "intent": "We create a random Gaussian measurement matrix $A$.\n"}
{"snippet": "delta = .03\ngamma2 = gamma1 + delta * normal(gamma1)\ngamma3 = gamma1 - delta * normal(gamma1)\n", "intent": "Move the curve in the normal direction, by computing $ \\ga_1(t) \\pm \\delta n_{\\ga_1}(t) $.\n"}
{"snippet": "dotp = lambda c1,c2: real(c1)*real(c2) + imag(c1)*imag(c2)\n", "intent": "Pointwise innerproduct on the curve.\n"}
{"snippet": "p = 128\nt = transpose(linspace(0, 1, p))\ngamma0 = t*x1 + (1-t)*x0\n", "intent": "Initial curve $\\ga_0$.\n"}
{"snippet": "x_vals = [1, 2, 3]\ny_vals = [1, 1, 1]\nsum([x * y for x, y in zip(x_vals, y_vals)])\n", "intent": "Here's one possible solution\n"}
{"snippet": "aT = thresh_soft(a,T);\n", "intent": "Perform the soft thresholding.\n"}
{"snippet": "print norm(f-f1)/norm(f)\n", "intent": "Check that we really recover the same signal.\n"}
{"snippet": "plot_wavelet(fW,j);\n", "intent": "Display the result of the horizontal transform.\n"}
{"snippet": "fWT = fW * (abs(fW)>T)\n", "intent": "Then set to 0 coefficients with magnitude below the threshold.\n"}
{"snippet": "plot(1: n, x)\naxis('tight')\nset_graphic_sizes([], 20)\ntitle('Signal')\n", "intent": "We can display the sound.\n"}
{"snippet": "g3 = g1 .* sin(t * 2*pi/ w * f)\n", "intent": "Position 0, frequency w/8\n"}
{"snippet": "for i in 1: p:\n    subplot(p, 1, i)\n    plot(y(: , i)); axis('tight')\n    set_graphic_sizes([], 20)\n    title(strcat('Micro \n", "intent": "Display of the micro output.\n"}
{"snippet": "i = 1\nsound(x(: , i), fs)\nsound(xr(: , i), fs)\n", "intent": "One can listen to the recovered sources.\n"}
{"snippet": "S1 = perform_thresholding(S1, lambda, 'soft')\n", "intent": "Step 2: thresholding and update of |x1|.\nthreshold\n"}
{"snippet": "len([x for x in range(100) if x % 2 == 0])\n", "intent": "Some less natural alternatives that nonetheless help to illustrate the flexibility of list comprehensions are\n"}
{"snippet": "err = norm(x-x1)\ndisp(strcat(['Error (should be 0) = ' num2str(err) '.']))\n", "intent": "We test if the decoding is correct.\n"}
{"snippet": "options.normalize = 1\n[H, x, xc] = compute_conditional_histogram(MW1q, C, options)\n", "intent": "Compute the conditional histogram.\n"}
{"snippet": "t0 = 0: 1/ T0\nMI = floor(abs(M/ T0)); % quantized pixel values\nh0 = hist(MI(: ), t0); h0 = h0/ sum(h0)\n", "intent": "Compute the histogram of the quantized pixels or the original image.\n"}
{"snippet": "wmax = 7\n[Y, X] = meshgrid(-wmax: wmax, -wmax: wmax)\nnormalize = lambda x: x/ sum(x(: ))\nstrel = lambda w: normalize(double(X.^2 + Y.^2 <= w^2))\n", "intent": "Round structuring element.\n"}
{"snippet": "remove_mean = lambda Q: Q - repmat(mean(Q), [w1*w1 1])\n", "intent": "operator to remove the mean of the patches to each patch.\n"}
{"snippet": "NLval = lambda K, sel: sum(sum(K.*f(sel{1}, sel{2})))\nNLval = lambda i, tau: NLval(kernel(i, tau), selection(i))\n", "intent": "The NL-filtered value at pixel $(x,y)$ is obtained by averaging the values\nof $f$ with the weight $K$.\n"}
{"snippet": "medfilt = lambda f: phi(f, 1/ 2)\n", "intent": "Median Filter\n-------------\nThe median filter corresponds to the case where $\\be=1/2$.\n"}
{"snippet": "sx = 4; sv = .2\nimageplot(clamp(bilateral_lin(f, sx, sv)))\n", "intent": "Perform denoising using the bilateral filter.\n"}
{"snippet": "h = lambda f, lambda: convol(f, g(lambda))\n", "intent": "Define our denoising operator $h=h_\\la$ (we make explicit the\ndependency on $\\la$):\n$$ h_\\la(f) = g_\\la \\star f. $$\n"}
{"snippet": "pairs = ((2, 5), (4, 2), (9, 8), (12, 10))\nsum([x % 2 == 0 and y % 2 == 0 for x, y in pairs])\n", "intent": "Here's one possibility\n"}
{"snippet": "x0 = rand(n, 1) <rho\n", "intent": "location of the spike\n"}
{"snippet": "mu = 10\nsubplot(2, 1, 1)\nplot(t, h(mu)); axis('tight')\ntitle('h')\nsubplot(2, 1, 2)\nplot(t, real(fft(h(mu)))); axis('tight')\ntitle('fft(h)')\n", "intent": "Display the filter $h$ and its Fourier transform.\n"}
{"snippet": "mu = 10\nsubplot(2, 1, 1)\nimageplot(fftshift(h(mu))); axis('tight')\ntitle('h')\nsubplot(2, 1, 2)\nimageplot(fftshift(real(fft2(h(mu))))); axis('tight')\ntitle('fft2(h)')\n", "intent": "Display the filter $h$ and its Fourier transform.\n"}
{"snippet": "esob = snr(f0, fSob0);  enoisy = snr(f0, y)\nimageplot(clamp(y), strcat(['Noisy ' num2str(enoisy, 3) 'dB']), 1, 2, 1)\nimageplot(clamp(fSob0), strcat(['Sobolev regularization ' num2str(esob, 3) 'dB']), 1, 2, 2)\n", "intent": "Display best \"oracle\" denoising result.\n"}
{"snippet": "subplot(2, 1, 1)\nplot(f); axis([1 N 0 1])\ntitle('f')\nsubplot(2, 1, 2)\nplot(f1); axis([1 N 0 1])\ntitle('f_1')\n", "intent": "Display noisy and denoised signal.\n"}
{"snippet": "plot_wavelet(aT, Jmin)\n", "intent": "Display the thresholded coefficients.\n"}
{"snippet": "fS = circshift(fS, -delta(: , i))\n", "intent": "After denoising, do the inverse shift.\n"}
{"snippet": "Jmin = 3\nMW = perform_wavelet_transf(M, Jmin, + 1)\n", "intent": "Compute a 2D orthogonal wavelet transform.\n"}
{"snippet": "[dX, dY, X, Y] = ndgrid(0: w-1, 0: w-1, 1: w: n-w + 1, 1: w: n-w + 1)\nI = X + dX + (Y + dY-1)*n\n", "intent": "Compute indexing of the blocks.\n"}
{"snippet": "[np.linalg.norm(i) for i in eigvecs]\n", "intent": "By convention, the norm of each eigenvector is 1:\n"}
{"snippet": "boundary = lambda x: mod(x-1, n) + 1\n", "intent": "For simplicity of implementation, we use periodic boundary conditions.\n"}
{"snippet": "n = 100\nx = linspace(-1, 1, n)\n[Y, X] = meshgrid(x, x)\nsigma = .2\nW = 1 + 8 * exp(-(X.^2 + Y.^2)/ (2*sigma^2))\n", "intent": "Computation of Geodesic Paths\n-----------------------------\nWe use a more complicated, non-constant metric, with a bump in the\nmiddle.\n"}
{"snippet": "clf; hold on\nimageplot(f)\nh = plot(gamma(2, : ), gamma(1, : ), '.b'); set(h, 'LineWidth', 2)\nh = plot(x0(2), x0(1), '.r'); set(h, 'MarkerSize', 25)\nh = plot(x1(2), x1(1), '.b'); set(h, 'MarkerSize', 25)\naxis ij\n", "intent": "Display the curve on the image background.\n"}
{"snippet": "slices = round(linspace(10, n-10, 4))\nfor i in 1: length(slices):\n    s = slices(i)\n    imageplot(M(: , : , s), strcat(['Z = ' num2str(s)]), 2, 2, i)\n", "intent": "We can display some horizontal slices.\n"}
{"snippet": "[e1, e2, l1, l2] = perform_tensor_decomp(T)\n", "intent": "Compute the eigenvector and eigenvalues of the tensor field.\n"}
{"snippet": "options.W = ones(nvert, 1)\n", "intent": "Use a uniform, constant, metric for the propagation.\n"}
{"snippet": "epsilon = .5\nW = rescale(-min(C, 0.1), .1, 1)\n", "intent": "Compute a metric that depends on the curvature.\nShould be small in area that the geodesic should follow.\n"}
{"snippet": "i = [faces(1, : ) faces(2, : ) faces(3, : )]\nj = [faces(2, : ) faces(3, : ) faces(1, : )]\nk = [faces(3, : ) faces(1, : ) faces(2, : )]\n", "intent": "Computation of the set of indexes for $i,j,k$.\n"}
{"snippet": "options.face_vertex_color = W\nplot_mesh(vertex, faces, options)\ncolormap jet(256)\n", "intent": "Display the metric.\n"}
{"snippet": "def f(seq_a, seq_b):\n    return set(seq_a).issubset(set(seq_b))\n", "intent": "Of course if we use the `sets` data type then the solution is easier\n"}
{"snippet": "[B, I, J] = unique(Q)\nv = randperm(m)'; J = v(J)\nclf; hold on\noptions.face_vertex_color = J\nplot_mesh(vertex, faces, options)\ncolormap jet(256)\nh = plot3(vertex(1, landmarks), vertex(2, landmarks), vertex(3, landmarks), 'k.')\nset(h, 'MarkerSize', 15)\n", "intent": "Display the update distance map.\n"}
{"snippet": "C = abs(Cmin) + abs(Cmax)\n", "intent": "Compute the total curvature.\n"}
{"snippet": "pstart = [154; 175]\n", "intent": "Starting point of the grodesic ball.\n"}
{"snippet": "clf; hold on\nimageplot(convert_distance_color(D, M), 'Distance')\nh = plot(p(2, : ), p(1, : ), '.k'); set(h, 'LineWidth', 2)\nh = plot(pstart(2), pstart(1), '.r'); set(h, 'MarkerSize', 25)\nh = plot(pend(2), pend(1), '.b'); set(h, 'MarkerSize', 25)\naxis ij\n", "intent": "Display the distance and the geodesic curve.\n"}
{"snippet": "P = fft2(d)./ repmat(U, [1 1 size(f, 3)])\nP(1, 1, : ) = sum(sum(f, 1), 2)\np = real(ifft2(P))\n", "intent": "Inverse the Laplacian.\n"}
{"snippet": "MW1 = perform_wavelet_transf(M1, Jmin, + 1, options)\n", "intent": "We also compute the wavelet transform of the noise.\n"}
{"snippet": "x = linspace(0, 1, n*n)\nM2 = perform_hist_eq(M1, x)\n", "intent": "We impose a flat histogram to enhance the contrast.\n"}
{"snippet": "f(I) = f(I) * Wi(i)\n", "intent": "Perform the multiplication with the random multiplier.\n"}
{"snippet": "f(I) = f(I) * Wi(i)\n", "intent": "Multiplication of the image with the random multiplier.\n"}
{"snippet": "import numpy as np\nf = lambda x: np.sin(4 * (x - 0.25)) + x + x**20 - 1\nbisect(f, 0, 1)\n", "intent": "We can test it as follows\n"}
{"snippet": "Xs = mod(X + ofx-1, n) + 1\nYs = mod(Y + ofy-1, n) + 1\n", "intent": "Shift location, with proper boundary condition (cyclic).\n"}
{"snippet": "I = find(min(min(P0, [], 1), [], 2)~ = 0)\nP0 = P0(: , : , I)\n", "intent": "Remove those that cross the holes.\n"}
{"snippet": "W = sqrt(1./ L.^2-1)\n", "intent": "Compute the Eikonal speed $W$ (right hand side of the equation).\n"}
{"snippet": "imageplot(M(1: 50, 1: 50), 'Zoom', 1, 2, 1)\nimageplot(-M, 'Reversed contrast', 1, 2, 2)\n", "intent": "You can manipulate an image just like an arbitrary array\n"}
{"snippet": "imageplot(f, 'Image f')\n", "intent": "Display the original image.\n"}
{"snippet": "L = fftshift(log(abs(FT) + 1e-1))\nimageplot(L, 'thresholded Log(Fourier transform)')\n", "intent": "Display. Note that we use the function |fftshift| is useful to put the 0 low frequency in the\nmiddle.\n"}
{"snippet": "PsiS = lambda fw: perform_wavelet_transf(fw, Jmin, -1)\n", "intent": "A short-cut for the inverse wavelet transform $\\Psi^{-1} = \\Psi^*$:\n"}
{"snippet": "fTrans = PsiS(Thresh(Psi(fTrans) , T))\n", "intent": "Denoise this translated image, to obtain $H_T(\\theta_{\\tau_i} f,\\mathcal{B})$.\n"}
{"snippet": "imageplot(y, strcat(['Observation, SNR = ' num2str(snr(f0, y), 3) 'dB']), 1, 2, 1)\nimageplot(clamp(fSob), strcat(['Sobolev deconvolution, SNR = ' num2str(snr(f0, fSob), 3) 'dB']), 1, 2, 2)\n", "intent": "Display the result.\n"}
{"snippet": "using Distributions\ntype AR1\n    a::Real\n    b::Real\n    sigma::Real\n    phi::Distribution\nend\n", "intent": "Let's start with the AR1 definition as specified in the lecture\n"}
{"snippet": "Delta = lambda f: div(grad(f))\n", "intent": "Here $ \\Delta = -\\nabla^* \\circ \\nabla = \\text{div} \\circ \\nabla $ is the\ngradient of the Sobolev energy $ E $.\n"}
{"snippet": "Omega = zeros(n, n)\nsel = randperm(n^2)\nOmega(sel(1: round(rho*n^2))) = 1\n", "intent": "Then we construct a mask $\\Omega$ made of random pixel locations.\n"}
{"snippet": "J = lambda u: sum(sum(sqrt(epsilon^2 + sum3(grad(u).^2, 3))))\ndisp(['J(f) = ' num2str(J(f), 3)])\n", "intent": "Compute the (smoothed) total variation of $f$.\n"}
{"snippet": "tau = 1.9 / (max(W(: ))^2 + 8*lambda/ epsilon)\n", "intent": "The gradient descent step size should satisfy:\n$$ \\tau < \\frac{2}{ \\max_{\\omega} W_\\omega^2 + \\lambda \\epsilon /8  } $$\n"}
{"snippet": "fSpars = fSpars + tau * PhiS(y-Phi(fSpars))\n", "intent": "First step: perform one step of gradient descent of the energy\n$ \\|y-\\Phi f\\|^2 $.\n"}
{"snippet": "vertex1 = vertex1*tW'\nvertex1 = vertex1 ./ repmat(sqrt(sum(vertex1.^2, 1)), [3 1])\n", "intent": "Perform smoothing and projection.\n"}
{"snippet": "[U, S] = eig(full(L)); S = diag(S)\n[S, I] = sort(S, 'ascend'); U = U(: , I)\n", "intent": "Compute the eigenvalues and eigenvectors\n"}
{"snippet": "plot(stress(2: end), '.-')\naxis('tight')\n", "intent": "Plot stress evolution during minimization.\n"}
{"snippet": "rho = .7\nV1 = V*(1-rho) + V2*rho\n", "intent": "Modify the position of the cage.\n"}
{"snippet": "function simulate(m::AR1, n::Integer, x0::Real)\n    X = Array(Float64, n)\n    X[1] = x0\n    for t in 1:(n-1)\n        X[t+1] = m.a * X[t] + m.b + rand(m.phi)\n    end\n    return X\nend\n", "intent": "Now let's write the function to simulate AR1s\n"}
{"snippet": "d = full(sum(W, 1))\nD = spdiags(d(: ), 0, n, n)\nL = D - W\n", "intent": "Compute the symmetric Laplacian matrix.\n"}
{"snippet": "faces1 = delaunay(vertex1(1, : ), vertex1(2, : ))'\n", "intent": "Compute the delaunay triangulation.\n"}
{"snippet": "[normal, normalf] = compute_normal(vertex, face)\n", "intent": "You can compute the normal to the mesh per vertex and per face\n"}
{"snippet": "options.lighting = 1\nplot_mesh(X0, F, options); axis('tight')\n", "intent": "Display the mesh in 3-D.\n"}
{"snippet": "v = X0 - repmat(mean(X0, 2), [1 n])\ntheta = acos(v(1, : )./ sqrt(sum(v.^2)))/ pi\nphi = (atan2(v(2, : ), v(3, : ))/ pi + 1)/ 2\n", "intent": "Compute spherical coordinates $ (\\theta_i,\\phi_i)$ for each vertex $x_{0,i}$\non the mesh.\n"}
{"snippet": "plot_mesh(Xmu, F, options)\n", "intent": "Display the result.\n"}
{"snippet": "E = [faces([1 2], : ) faces([2 3], : ) faces([3 1], : )]\nW = sparse(E(1, : ), E(2, : ), ones(size(E, 2), 1))\nW = max(W, W')\nL = spdiags(sum(W)', 0, n, n) - W\n", "intent": "Compute the combinatorial laplacian operator |L| of the mesh.\n"}
{"snippet": "name = 'bunny'\nclear options\noptions.name = name\n[X0, F] = read_mesh(name)\nn = size(X0, 2)\noptions.name = name\n", "intent": "Spacial Differential Operator\n-----------------------------\nWe first define differential operator using sparse matrices.\nLoad a mesh of $n$ vertices.\n"}
{"snippet": "i = round(rand(20, 1)*n) + 1\nb = zeros(n, 1)\nb(i) = (-1).^(1: length(i))\n", "intent": "Compute a set of random sources.\n"}
{"snippet": "m = AR1(0.9, 1, 1, Beta(5, 5))\n", "intent": "Let's test it out on the AR(1) process discussed in the lecture\n"}
{"snippet": "plot_mesh(vertex, face, options)\nshading('interp'); lighting('phong'); axis('tight')\n", "intent": "Display the new mesh.\n"}
{"snippet": "f = rescale(load_spherical_function(M, x, options))\n", "intent": "Load a function on the sphere.\nUse the center of each face to sample the function.\n"}
{"snippet": "MW = cat3(3, (MW(: , : , 1: 2: n) + MW(: , : , 2: 2: n))/ sqrt(2), (MW(: , : , 1: 2: n)-MW(: , : , 2: 2: n))/ sqrt(2))\n", "intent": "average/difference along Z\n"}
{"snippet": "sel = 1: 2: n\nisosurface(Mwav(sel, sel, sel), .5)\ntitle(['Soft thresholding, SNR = ' num2str(snr(M, Mwav), 3) 'dB'])\naxis('off')\n", "intent": "Display denoised iso-surface with optimal soft thresholding.\n"}
{"snippet": "rgbsel = [10 15 20]\nimageplot(M(: , : , rgbsel), 'RGB')\n", "intent": "Display an approximate RGB image.\n"}
{"snippet": "U = Dt + sum(v.*D, 3)\n", "intent": "Compute the gradient of the functional.\nFirst compute |Dt+v1*D1+v2*D2|\n"}
{"snippet": "selx = clamp((i-1)*w + 1: i*w, 1, n)\nsely = clamp((j-1)*w + 1: j*w, 1, n)\n", "intent": "Block pixels index.\n"}
{"snippet": "Q = length(y)\ndisp(strcat(['Number of measurements Q = ' num2str(Q) '.']))\ndisp(strcat(['Sub-sampling Q/ N = ' num2str(length(y)/ n^3, 2) '.']))\n", "intent": "Number of measures.\n"}
{"snippet": "plot(energy, '.-'); axis('tight')\nset_label('Iteration', 'L1 energy')\n", "intent": "We can display the decay of the L1 energy through the iterations.\n"}
{"snippet": "using Plots\nplotlyjs()\n", "intent": "Next let's plot the time series to see what it looks like\n"}
{"snippet": "Normalize = lambda u, epsilon: u./ repmat(NormEps(u, epsilon), [1 1 2])\nGradJ = lambda x, epsilon: -div(Normalize(grad(x), epsilon))\n", "intent": "Gradient of $J_\\epsilon$. Note that |div| implement $-G^*$.\n"}
{"snippet": "dotp = lambda a, b: sum(a(: ).*b(: ))\nfprintf('Should be 0: %.3i\\n', dotp(grad(g), grad(g)) + dotp(delta(g), g))\n", "intent": "Check that the relation $ \\norm{\\nabla f} = - \\dotp{\\Delta f}{f}.  $\n"}
{"snippet": "t = (-N/ 2: N/ 2-1)'\nh = (1-t.^2/ s^2).*exp(-(t.^2)/ (2*s^2))\nh = h-mean(h)\n", "intent": "Second derivative of Gaussian.\n"}
{"snippet": "x = proxg(x - gamma*gradf(x), gamma)\n", "intent": "Perform one step of FB.\n"}
{"snippet": "Phi = lambda f: f.*Lambda\n", "intent": "Masking operator $ \\Phi $.\n"}
{"snippet": "LShift = lambda x, s:  L(circshift(x, s))\nLi = {lambda x: LShift(x, [0, 0]), lambda x: LShift(x, [1, 0]), lambda x: LShift(x, [0, 1]), lambda x: LShift(x, [1, 1])}\n", "intent": "We create the four shifted version $L_1,L_2,L_3,L_4$ and store them using a\ncell array, so that |Li{i}| implements $L_i$.\n"}
{"snippet": "imageplot(clamp(x0))\n", "intent": "Display the original image $x_0$.\n"}
{"snippet": "[~, i] = max(abs(c))\n", "intent": "Extract the coefficient with maximal correlation\n"}
{"snippet": "fprintf('Number of non-zero: %d (n0 + n1-1 = %d)\\n', full(sum(gamma(: )~ = 0)), n0 + n1-1)\n", "intent": "Check that the number of non-zero entries in $\\ga^\\star$ is $n_0+n_1-1$.\n"}
{"snippet": "function f(k::Integer)\n    @assert k > 0 \"k must be a natural number\"\n    z = randn(k)\n    return sum(z.^2)\nend\n", "intent": "Here's the function to act on integers\n"}
{"snippet": "Proxj0 = lambda m0, f, lambda: cat(2, m0 ./ repmat(1 + 2*lambda./ f, [1 2]), f)\nProxj  = lambda m0, f0, lambda: Proxj0(m0, CubicReal(PolyCoef(m0, f0, lambda)), lambda)\n", "intent": "Define the proximal operator of $j$. Note that it can operate in\nparallel over arrays |m| of size $k \\times 2$ and |f| of size $k \\times 1$\n"}
{"snippet": "[h, t] = hist(f(: ), Q)\n", "intent": "Compute the histogram.\n"}
{"snippet": "[Theta, ~] = qr(randn(d))\n", "intent": "Compute an orthogonal coordinate system for this iteration.\n"}
{"snippet": "ProjC1 = lambda pi, p: pi .* repmat(p./ max(sum(pi, 2), 1e-10), [1 N])\n", "intent": "Define $\\KLproj_{\\Cc_1}$.\n"}
{"snippet": "heat = lambda f, t: cconv(f, h(t))\n", "intent": "Define blurring operator.\n"}
{"snippet": "recompose = lambda lambda1, lambda2, e1, e2: repmat(lambda1, [1 1 3]).*tensorize(e1) + repmat(lambda2, [1 1 3]).*tensorize(e2)\n", "intent": "Implement the reconstruction formula\n$$ S = \\la_1 (e_1 \\otimes e_1) + \\la_2 (e_2 \\otimes e_2). $$\n"}
{"snippet": "I = round(linspace(1, N, 17))\nplot(K(: , I)); axis tight\naxis([1 N -.005 .1])\n", "intent": "Display a few lines of the kernel.\n"}
{"snippet": "rep = [repweb name '/ ']\nif not(exist(rep))\n    mkdir(rep)\n", "intent": "directory where the specific publishing is made\n"}
{"snippet": "f0 = load_image('hibiscus', n)\nf0 = rescale(sum(f0, 3))\n", "intent": "Load an image $f_0$ of $N=n \\times n$ pixels.\n"}
{"snippet": "newdf <- data.frame(date = seq(min(df$date), max(df$date), by = \"day\"))\nnewdf\n", "intent": "**Create new dataframe with all dates**\n"}
{"snippet": "r = .98*n/ 2\np = 128; % number of points on the curve\ntheta = linspace(0, 2*pi, p + 1)'; theta(end) = []\ngamma0 = n/ 2*(1 + 1i) +  r*(cos(theta) + 1i*sin(theta))\n", "intent": "Create a circular curve $\\ga_0$.\n"}
{"snippet": "d = max(eps, sqrt(sum(g0.^2, 3)))\n", "intent": "Norm $\\norm{\\nabla \\phi}$ of the gradient.\n"}
{"snippet": "Tmax = 100\nniter = round(Tmax/ tau)\n", "intent": "Number of iterations.\n"}
{"snippet": "clf; hold on\nimageplot(1-S)\nplot(X(2, : ), X(1, : ), 'r.', 'MarkerSize', 15)\naxis('ij')\n", "intent": "Display the sampling points.\n"}
{"snippet": "plot_mesh(Y, F, options)\n", "intent": "Display the bending invariant surface.\n"}
{"snippet": "for i in 1: 2:\n    bound0{i} = compute_shape_boundary(M{i})\n", "intent": "Compute the boundaries of the shape.\n"}
{"snippet": "bound = compute_shape_boundary(M)\nnbound = size(bound, 2)\n", "intent": "Compute its boundary\n"}
{"snippet": "for i in 1: 4:\n    u = A{i}(M = =1); u = u(u >0)\n    subplot(4, 1, i)\n    hist(u, 40); axis('tight')\n    title(titles{i})\n", "intent": "Display histograms of the statistics.\n"}
{"snippet": "options.constraint_map = L\n[D, S, Q] = perform_fast_marching(W, pstart, options)\nD(M = =0) = Inf\n", "intent": "Compute the fast marching, from the boundary points.\n"}
{"snippet": "df_final <- merge(newdf, df, by = \"date\", all.x = TRUE)\ndf_final[is.na(df_final)] <- 0\ndf_final\n", "intent": "**Merge newdf with df, then convert NA values to zeros**\n"}
{"snippet": "y = Phi(x0) + sigma*randn(P, 1)\n", "intent": "Measurements $y=\\Phi x_0 + w$ where $w \\in \\RR^P$ is a Gaussian white noise.\n"}
{"snippet": "if not(exist('D'))\n    sparsity_4_dictionary_learning\n", "intent": "Perform the numerical tour on Dictionary Learning to obtain a dictionary\n$D \\in \\RR^{n \\times p}$\n"}
{"snippet": "imageplot(clamp(f1), ['Denoised, SNR = ' num2str(snr(f0, f1), 4) 'dB'])\n", "intent": "Display the result.\n"}
{"snippet": "x = floor(rand(n)*n) + 1\n", "intent": "Create a random integer matrix with entries in 1...9.\n"}
{"snippet": "disp(['Should be 0: ' num2str(norm(Arow*X(: )-1)) '.'])\n", "intent": "Show that constraint |Arow*X(:)=1| is satisfied.\n"}
{"snippet": "Xproj = projector(zeros(n, n, n))\n", "intent": "We project an arbitrary vector (that does not satisfy the constraint) onto the\nconstraint |A*X(:)=1|.\n"}
{"snippet": "P = 2048*8\noptions.P = P\nu = (0: P-1)'/ P\n", "intent": "Sampling grid for the display of functions.\n"}
{"snippet": "X = zeros(2*fc + 2)\n", "intent": "Initial point of the DR iterations.\n"}
{"snippet": "clf; hold on\nstem(x0, sign(a0), 'k.--', 'MarkerSize', ms, 'LineWidth', lw)\nplot([0 1],  [1 1], 'k--', 'LineWidth', lw)\nplot([0 1], -[1 1], 'k--', 'LineWidth', lw)\nplot(u, etaV, 'b', 'LineWidth', lw)\naxis([0 1 -1.1 1.1])\nset(gca, 'XTick', [], 'YTick', [-1 1])\nbox on\n", "intent": "Display the pre-certificate. In this case, it is a certificate and hence\n$\\eta_V = \\eta_0$.\n"}
{"snippet": "Wv = np.dot(W, eigvecs)\nWv\n", "intent": "We can verify that these values and vectors do in fact satisfy the equation $\\mathbf{Wv} = \\lambda \\mathbf{v}$:\n"}
{"snippet": "MusicHankel = lambda y: hankel(y(1: L), y(L: M))\n", "intent": "Build Hankel matrix,\none must have min(size(H))>N.\n"}
{"snippet": "subplot(2, 1, 1)\nplot(t, x); axis('tight')\ntitle('Noisy')\nsubplot(2, 1, 2)\nplot(t, xh); axis('tight')\ntitle('Denoised')\n", "intent": "We display the denoised signal.\nAlthough most of the noise is removed, the singularity have been blurred.\n"}
{"snippet": "fw(1: 2^(j + 1)) = haar(fw(1: 2^(j + 1)))\n", "intent": "At iteration indexed by $j$,\nselect the sub-part of the signal containing $a_{j+1}$,\nand apply it the Haar operator.\n"}
{"snippet": "imageplot(f, 'Original image', 1, 2, 1)\nsubplot(1, 2, 2)\nplot_wavelet(haar(f), log2(n)-1); title('Transformed')\n", "intent": "Display the result of the first step of the algorithm.\n"}
{"snippet": "a = subsampling(cconvol(f, h))\nd = subsampling(cconvol(f, g))\n", "intent": "Low/High pass filtering followed by sub-sampling.\n"}
{"snippet": "disp(strcat((['Error |f-f1|/ |f| = ' num2str(norm(f-f1)/ norm(f))])))\n", "intent": "Check that we have correctly recovered the signal.\n"}
{"snippet": "disp(strcat(['Energy of the signal       = ' num2str(norm(f(: )).^2)]))\ndisp(strcat(['Energy of the coefficients = ' num2str(norm(fW(: )).^2)]))\n", "intent": "Check for orthogonality of the transform (conservation of energy).\n"}
{"snippet": "subplot(1, 2, 1)\nopt.separable = 0\nplot_wavelet(fW, 1, opt)\ntitle('Isotropic wavelets')\nsubplot(1, 2, 2)\nopt.separable = 1\nplot_wavelet(fWSep, 1, opt)\ntitle('Separable wavelets')\n", "intent": "Display the result.\n"}
{"snippet": "C = abs(t(M) %*% t(A))\n", "intent": "Compute the projection of the coefficients on the directions.\n"}
{"snippet": "dft = ts(df$Qty,frequency=12,start=c(2013,1))\n", "intent": "**The Date column is of type Date.  But we need it to be of type time series (ts).**\n"}
{"snippet": "options(repr.plot.width=4, repr.plot.height=4)\nsource(\"nt_solutions/coding_1_approximation/exo12.R\")\n", "intent": "__Exercise 12__\nCompare the approximation error decay for those images.\nDisplay $ \\log_{10}(\\norm{f-f_M}) $ as a function of $\\log_{10}(M)$.\n"}
{"snippet": "f <- as.cimg(f0) + sigma*as.cimg(rnorm(n**2))\n", "intent": "Generate a noisy image $f=f_0+\\epsilon$ where $\\epsilon \\times\n\\Nn(0,\\si^2\\text{Id}_N)$.\n"}
{"snippet": "options(repr.plot.width=7, repr.plot.height=7)\nfor (i in 1:16){\n    imageplot(abs(array(V[,i], c(w1,w1))), \"\", c(4,4,i))\n}\n", "intent": "Display the leading eigenvectors - they look like Fourier modes.\n"}
{"snippet": "f0 = load_image(\"nt_toolbox/data/hibiscus.png\",n)\n", "intent": "We load an image $f_0 \\in \\RR^N$.\n"}
{"snippet": "options(repr.plot.width=14, repr.plot.height=7)\nsource(\"nt_solutions/denoisingadv_7_rankfilters/exo4.R\")\n", "intent": "__Exercise 4__\nPerform iterated opening and closing.\n"}
{"snippet": "denoise <- function(x,mu){ cconv(h(mu), x) }\n", "intent": "Shortcut for the convolution with $h$.\n"}
{"snippet": "a <- perform_wavortho_transf(f,Jmin,+1,h)\n", "intent": "First we compute the wavelet coefficients $a$  \nof the noisy image $f$.\n"}
{"snippet": "dY <- meshgrid_2d(1:m, 1:m)$X ; dX <- meshgrid_2d(1:m, 1:m)$Y\ndelta <- cbind( array(dY, c(m*m,1)), array(dX, c(m*m,1)) )\n", "intent": "Generate a set of shifts $(\\de_i)_i$.\n"}
{"snippet": "imageplot(clamp(fThresh), paste(\"SNR = \", round(snr(f0, fThresh),1), \"dB\"))\n", "intent": "Display the optimal thresolding.\n"}
{"snippet": "library(forecast)\nhwm = HoltWinters(dft, gamma=TRUE)\nhwf = forecast.HoltWinters(hwm, h=24)\nsummary(hwf)\n", "intent": "**Now, we are ready to use the forecast package.**\n"}
{"snippet": "x0 <- c(n/2 + 1 , n/2 + 1)\n", "intent": "Set $\\Ss = \\{x_0\\}$ of initial points.\n"}
{"snippet": "options(repr.plot.width=3.5, repr.plot.height=3.5)\nplot(as.cimg(displ(D)), colourscale=cmap_jet, interpolate = FALSE, axes = FALSE)\n", "intent": "Display the geodesic distance map using a cosine modulation to make the\nlevel set appears more clearly.\n"}
{"snippet": "options(repr.plot.width=7, repr.plot.height=3.5)\nsource(\"nt_solutions/graphics_1_synthesis_gaussian/exo1.R\")\n", "intent": "__Exercise 1__\nCompare the log of the modulus of the Fourier transforms of the input image $f$\nand its periodic component $p$. What do you observe ?\n"}
{"snippet": "myplot <- function(V){ plot_vf(V[seq(1,n,6),seq(1,n,6),]) }\n", "intent": "Subsampling display operator.\n"}
{"snippet": "rho <- 2\noptions(repr.plot.width=5, repr.plot.height=5)\nimageplot(W(f, rho*U))\n", "intent": "Display a warped image $\\Ww_{\\rho U}(f)$ for some scaling $\\rho$.\n"}
{"snippet": "G = grad(M[,])\nimageplot(G[,,1], 'd/ dx', c(1, 2, 1))\nimageplot(G[,,2], 'd/ dy', c(1, 2, 2))\n", "intent": "Several differential and convolution operators are implemented.\n"}
{"snippet": "imageplot(L, 'Log(Fourier transform)')\n", "intent": "Display. Note that we use the function fftshift to put the 0 low frequency in the\nmiddle.\n"}
{"snippet": "fwT = fw * (abs(fw) > T)\n", "intent": "Perform hard thresholding.\n"}
{"snippet": "set.seed(123)\ny = y0 + randn(n,n) * sigma\n", "intent": "Add some noise to obtain the measurements $y = \\Phi f_0 + w$.\n"}
{"snippet": "Chart(population, transform=t).mark_bar(\n    opacity=0.6,\n    stacked='none'\n).encode(\n    x='age:O',\n    y='sum(people):Q',\n    color=Color('gender:N', scale=Scale(range=[\"\n)\n", "intent": "Re-using the transform from above:\n"}
{"snippet": "a = U * PsiS(fSpars)\n", "intent": "Initialize the wavelet coefficients with those of the previous reconstruction.\n"}
{"snippet": "Y = Matrix(0, nrow=2, ncol=n)\nY[1,] = solve(L1,R[1,])\nY[2,] = solve(L1,R[2,])\n", "intent": "Solve the two linear systems.\n"}
{"snippet": "options(repr.plot.width=3.5, repr.plot.height=3.5)\nplot_mesh(X0, F, \"grey\")\n", "intent": "Display the mesh in 3-D.\n"}
{"snippet": "source(\"nt_solutions/meshproc_3_denoising/exo1.R\")\n", "intent": "__Exercise 1__\nDisplay the evolution of the image on the mesh as the number of\niterations increases.\n"}
{"snippet": "plot_mesh(Xmu, F, \"grey\")\n", "intent": "Display the result.\n"}
{"snippet": "A = A[sample(dim(A)[1]),]\n", "intent": "Randomly permute it.\n"}
{"snippet": "options(repr.plot.width=4, repr.plot.height=4)\nplot( X1 %*% w, type=\"l\", col=\"blue\", ylim=c(min(y1), max(y1)), xlab=\"\", ylab=\"\")\nlines(y1,  type=\"l\", col=\"orange\")\nlegend(\"topright\", legend=c(\"X1*w\", \"y1\"), col=c(\"blue\", \"orange\"), pch=\"-\")\n", "intent": "Prediction (along 1st eigenvector).\n"}
{"snippet": "theta = function(v){1 / (1 + exp(-v))}\nnablaL = function(s, r){ - 1/n * y * theta(-s * y)}\nnablaE = function(w,X,y){t(X) %*% nablaL(X %*% w,y)}\n", "intent": "Define their gradients.\n"}
{"snippet": "source(\"nt_solutions/ml_3_classification/exo5.R\")\n", "intent": "__Exercise 5__\nDisplay evolution of the classification probability with $\\sigma$\n"}
{"snippet": "Chart(cars).mark_text(applyColorToBackground=True).encode(\n    Row('Origin:O'),\n    Column('Cylinders:O'),\n    Color('mean(Miles_per_Gallon):Q', sort='descending'),\n    Text('mean(Miles_per_Gallon):Q')\n)\n", "intent": "Here is some of this information as a table, with the text/color of the cell encoding the average MPG for that row and column:\n"}
{"snippet": "a <- (MW[,seq(1,n,2),] + MW[,seq(2,n,2),])/sqrt(2)\nb <- (MW[,seq(1,n,2),] - MW[,seq(2,n,2),])/sqrt(2)\nc <- array(0, c(n, n, n))\nc[,1:(n/2),] <- a\nc[,(n/2+1):n,] <- b\nMW <- c\n", "intent": "Average/difference along Y\n"}
{"snippet": "Mh <- Re(fft( fft(Mnoisy) * fft(fftshift_3d(h)), inverse=T)/length(h))\n", "intent": "The filtering is computed over the Fourier domain.\n"}
{"snippet": "t = linspace(-.7,.7,101)\ntemp = meshgrid(t,t)\nx = temp$X\ny = temp$Y\nF = ( x**2 + eta * y**2 ) / 2\n", "intent": "Background image of the function.\n"}
{"snippet": "f = function(x, y, epsilon){1/2 * base::norm(x - y,\"F\")**2 + la * J(x, epsilon)}\n", "intent": "Function $f$ to minimize.\n"}
{"snippet": "hf = Re(pracma::fftshift(fft(h1))) / sqrt(N)\noptions(repr.plot.width=5, repr.plot.height=3.5)\nq = 200\nplot(t, h, type=\"l\", main=\"Filter, Spacial (zoom)\", \n     col=\"blue\", xlim=c(-200,200), ylab=\"\")\nplot(t, hf, type=\"l\", \n     main=\"Filter, Fourrier (zoom)\", col=\"blue\", \n     xlim=c(-200,200), ylab=\"\")\n", "intent": "We display the filte and its spectrum (amplitude of its Fourier transform).\n"}
{"snippet": "A = randn(p,n) / sqrt(p)\n", "intent": "Create a random Gaussian measurement matrix $A$.\n"}
{"snippet": "Amplitude = function(u){sqrt(u[,,1]^2 + u[,,2]^2)}\nF = function(u){sum(sum(Amplitude(u)))}\n", "intent": "Shortcut for the TV norm.\n"}
{"snippet": "options(repr.plot.width=5, repr.plot.height=5)\nimageplot(clamp(x0))\n", "intent": "Display the original image $x_0$.\n"}
{"snippet": "gamma <- otransp(C, p0, p1)\n", "intent": "Compute the optimal transport plan.\n"}
{"snippet": "Chart(cars).mark_line().encode(\n    X('Year:T', timeUnit='year'),\n    Y('Miles_per_Gallon:Q', aggregate='mean'),\n    Color('Origin:N')\n).configure_cell(height=150)\n", "intent": "Finally, let's look at how the average MPG by origin is trending over time:\n"}
{"snippet": "options(repr.plot.width=7, repr.plot.height=7)\npar(mfrow=c(2,1))\nplot(t, p, col=\"blue\", type=\"h\", xlab=\"\", ylab=\"\")\nplot(t, q, col=\"blue\", type=\"h\", xlab=\"\", ylab=\"\")\n", "intent": "Display the histograms.\n"}
{"snippet": "options(repr.plot.width=9, repr.plot.height=9)\nsource(\"nt_solutions/optimaltransp_5_entropic/exo5.R\")\n", "intent": "__Exercise 5__\nCompute barycenters for varying weights $\\la$ corresponding to\na bilinear interpolation inside a square.\n"}
{"snippet": "options(repr.plot.width=3.5, repr.plot.height=3.5)\nimageplot(delta(as.matrix(f0)))\n", "intent": "Display $\\Delta f_0$.\n"}
{"snippet": "interpc <- function(x, xf, yf){ approx(xf, Re(yf), x)$y + 1i*approx(xf, Im(yf), x)$y }\ncurvabs <- function(gamma){ c(0, cumsum(1e-5 + abs(gamma[1:(length(gamma)-1)]-gamma[2:length(gamma)]))) }\nresample1 <- function(gamma, d){ interpc((1:p)/p, d/d[length(d)], gamma)}\nresample <- function(gamma){ resample1( periodize(gamma), curvabs(periodize(gamma)) ) }\n", "intent": "Shortcut to re-sample a curve according to arc length.\n"}
{"snippet": "G <- grad(W)\nG <- G[,,1] + 1i*G[,,2]\n", "intent": "Pre-compute the gradient $\\nabla W(x)$ of the metric.\n"}
{"snippet": "d <- pmin(d, 0.4)\nW <- rescale(-d, .8, 1)\n", "intent": "Compute a decreasing function of the gradient to define $W$.\n"}
{"snippet": "source(\"nt_solutions/segmentation_3_snakes_levelset/exo1.R\")\n", "intent": "__Exercise 1__\nLoad a square shape $\\phi_2$ at a different position for the center.\n"}
{"snippet": "source(\"nt_solutions/segmentation_3_snakes_levelset/exo4.R\")\n", "intent": "__Exercise 4__\nCompute an initial shape $\\phi_0$ at time $t=0$,\nfor instance a centered square.\n"}
{"snippet": "ms <- 200\nel <- 20; az <- -110\n", "intent": "Parameter for display.\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"unemployment-across-industries\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "options(repr.plot.width=6, repr.plot.height=5)\nplot(Xstress1[2,], Xstress1[1,], axes=FALSE, ann=FALSE, pch=19, col=color_function(X[1,], X[2,], X[3,]))\nI <- as.vector(t(array(rep(1:n,k), c(n, k)))) ; J <- as.vector(t(NN))\nxx <- array(0, c(2, k*n)) ; xx[1,] <- Xstress1[2,I] ; xx[2,] <- Xstress1[2,J]\nyy <- array(0, c(2, k*n)) ; yy[1,] <- Xstress1[1,I] ; yy[2,] <- Xstress1[1,J]\nfor (i in 1:length(I)){\n  lines(xx[,i], yy[,i], col=\"black\", lw=1.5)\n}\n", "intent": "Display the final result of the dimensionality reduction.\n"}
{"snippet": "c = t(Phi) %*% Phi\nc = abs(c[,dim(c)[2]/2])\noptions(repr.plot.width=5, repr.plot.height=5)\nplot(c[(length(c)/2 - 50):((length(c)/2) + 50)], type=\"l\", xlab=\"\", ylab=\"\", col=4)\n", "intent": "Plot the correlation function associated to the filter.\nCan you determine the value of the coherence $\\mu(\\Phi)$?\n"}
{"snippet": "A <- rbind(Coarse, Detail)\n", "intent": "Concatenate them in the vertical direction to get the result.\n"}
{"snippet": "Coarse <- A[,1:2**j, drop=F]\nDetail <- A[,(2**j + 1):2**(j+1), drop=F]\n", "intent": "Retrieve coarse and detail coefficients in the vertical direction (you\ncan begin by the other direction, this has no importance).\n"}
{"snippet": "stringA = 'aca'\nstringB = 'bdb'\nprint stringA\nprint stringB\n", "intent": "You can perform basic numerical operations (addition multiplication) on strings and the outcome is a visual representation of the math!\n"}
{"snippet": "print type('hello world')\n", "intent": "Python has a handy function - __type()__ - that allows us to check what is the type of an object:\n"}
{"snippet": "file_number = 1\nfile_name = \"myoutputfile_{:03d}\".format(file_number)\nprint file_name\n", "intent": "You can also customize how you want your numbers printed out:\n"}
{"snippet": "s = \"hello \\\"world\\\", if that is your real name.\\nThat\\'s World, to you\"\nprint s\n", "intent": "    Reproduce the triple-quoted string from earlier:\n"}
{"snippet": "fasta_text = makeFasta('AAGTGTGTAGT')\n", "intent": "Note that if you don't include all specified input variables when calling the function, your code will not sucessfully run.\n"}
{"snippet": "chart.to_dict(data=False)\n", "intent": "Generate JSON dict, leaving data out:\n"}
{"snippet": "time_wasters = ['facebook', '9gag', 'snapface', 'reddit'] \nlab_space = ['wet lab', 'cold room', 'shared space'] \nprint 'time_wasters:', time_wasters\nprint 'lab_space:', lab_space\n", "intent": "Let's first start by making a couple of lists.\n"}
{"snippet": "time_wasters = ['facebook', 'xanga', '9gag', 'reddit']\nlab_space = ['wet lab', 'cold room', 'shared space']\nresearch = [time_wasters, lab_space]\nfor i in research[0]:\n    for j in research[1]:\n        print 'procrastinate with {} in the {}' .format(i, j)\n", "intent": "How does this work with nested data structures? Let's use the original *research* list and find all the lab spaces and ways we can procrastinate.\n"}
{"snippet": "a = {'hello':['friend', 'world', 'kitty']}\n", "intent": "Make sure to close all brackets and curly braces before starting a new one -- otherwise, this will happen!\n"}
{"snippet": "def ran_bool(num,low,high):\n    if num>low and num<high:\n        return True\n    else:\n        return False\nran_bool(3,1,10)\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "type state = var -> const\n", "intent": "Weiterhin definieren wir einen Zustand (State), welcher Variablen auf deren Werte abbildet.\n"}
{"snippet": "let rec ldrop n (Cons (h, t)) =\n  if n <= 0 then\n    Cons (h, t)\n  else\n    ldrop (n - 1) (t ())\n", "intent": "(d) `ldrop : int -> 'a llist -> 'a llist` entfernt die ersten n (1. Argument)\nElemente der Liste.\n"}
{"snippet": "len(\"pneumonoultramicroscopicsilicovolcanoconiosis\")\n", "intent": "We often want to do things to our objects that are more complicated than just assigning them to variables.\n"}
{"snippet": "various_things = [1, 2, \"banana\", 3.4, [1,2] ]\n", "intent": "Lists *do not* have to contain just one type:\n"}
{"snippet": "name = \"James Philip John Hetherington\".split(\" \")\nprint(name)\n", "intent": "A list can be modified:\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"cars\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "x = 3.2\nif not (x>0 and type(x)==int):\n    print(x,\"is not a positive integer\")\n", "intent": "We can use logical not and logical and to combine true and false:\n"}
{"snippet": "result = []\nfor x in range(10):\n    result.append(2**x)\nresult\n", "intent": "Which is equivalent to the following code without using comprehensions:\n"}
{"snippet": "{'garden': 1, 'living': 1}\n", "intent": "The output should look similar to:\n"}
{"snippet": "def doubler(*sequence):\n    return [x*2 for x in sequence]\n", "intent": "Similiarly, if a `*` is used in the **definition** of a function, multiple\narguments are absorbed into a list **inside** the function:\n"}
{"snippet": "graham = Person('Graham')\neric = Person('Eric')\nterryg = Person('TerryG')\njohn = Person('John')\n", "intent": "And we use these classes to define our people, rooms, and their relationships:\n"}
{"snippet": "function = Mock(name=\"myroutine\", side_effect=[2, \"xyz\"])\n", "intent": "Mock objects can return different values for each call\n"}
{"snippet": "for agent in agents:\n    agent.turn()\n    agent.move()\nclass Agent:\n    def turn(self):\n         self.direction += self.angular_velocity;\n    def move(self):\n        self.x += Agent.step_length * sin(self.direction)\n        self.y += Agent.step_length * cos(self.direction)\n", "intent": "we have used comments to make the code readable.\nWhy not make the code readable instead?\n"}
{"snippet": "flight_speed = 2.0 \nbounds = [0, 0, 100, 100]\nturning_circle = 3.0 \nbird_counts = {\"hawk\": 5, \"starling\": 500}\n", "intent": "Smell: You need to change your code file to explore different research scenarios.\nBefore:\n"}
{"snippet": "def can_see(source, target):\n    return (source.facing - target.facing) < source.viewport\nif can_see(hawk, starling):\n    hawk.hunt()\n", "intent": "Smell: A function is always called with the same kind of thing\nBefore:\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"population\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "first = Term(['x', 'y'], [2, 1], 5)\nsecond = Term(['x'], [1], 7)\nthird = Term([], [], 2)\nresult = Expression([first, second, third])\n", "intent": "So that $5x^2y+7x+2$ might be constructed as:\n"}
{"snippet": "x = Boring()\nx.name = \"Michael\"\n", "intent": "If we are adding our own attributes, we can just do so directly:\n"}
{"snippet": "my_features = ['constant'] + all_features\nfor i in range(len(weights1e7)):\n    if weights1e7[i] != 0:\n        print my_features[i]\n", "intent": "In the model trained with l1_penalty=1e7, which of the following features has non-zero weight? (Select all that apply)\n"}
{"snippet": "print 4.0999999999999995\n", "intent": "Careful: floats are limited by their 16-bit representation (same as in other languages)\n"}
{"snippet": "v.sort(reverse=True)\nprint v\n", "intent": "`reverse` is a *keyword* of the `.sort()` method\n"}
{"snippet": "phone_numbers['co-workers']\n", "intent": "Some examples of getting values:\n"}
{"snippet": "import glob\nFitsFiles = glob.glob('./data/*.fit*')\nprint FitsFiles\n", "intent": "First, lets find some FITS files to play with\n"}
{"snippet": "def uni_char(s):\n    return len(set(s)) == len(s)\nfrom collections import Counter\ndef uni_char2(s):\n    counter = Counter(s)\n    return all(([value == 1 for value in counter.values()]))\n", "intent": "Fill out your solution below:\n"}
{"snippet": "total_ask_comments = 0\nfor post in ask_posts:\n    total_ask_comments += int(post[4])\navg_ask_comments = total_ask_comments / len(ask_posts)\nprint(avg_ask_comments)\n", "intent": "Now that we separated ask posts and show posts into different lists, we'll calculate the average number of comments each type of post receives.\n"}
{"snippet": "def prior(m,b):\n    p_m=np.array([0.999,0.001])\n    p_b=np.array([0.99,0.01])\n    return p_m[m]*p_b[b]\n", "intent": "1. $P(M=1)=0.001$\n1. $P(B=1)=0.01$\n1. $P(M=m,B=b)=P(M=m)\\cdot P(B=b)$\n"}
{"snippet": "my_spark.catalog.listTables()\n", "intent": "- See what tables are in your cluster by calling spark.catalog.listTables() and printing the result!\n"}
{"snippet": "for i in (0, 1, 2, 3, 4):\n    print(i)\n", "intent": "computers use loops to work for us: \n"}
{"snippet": "print(\"Flight    \\tDestination\\t\\tGate\\tTime\")\nprint(\"-\"*53) \nfor flight in flights:\n    dest = airports[flight[2]]\n    dest += \" \"*(20 - len(dest))  \n    print(flight[0] + \" \" + str(flight[1]) + \"\\t\" + dest + \"\\t\" + str(flight[3]) + \"\\t\" + str(flight[4]))\n", "intent": "<h2>Printing the list</h2>\nNote that when printing, we lookup the destination name by the airport code key in the airports dictionary.\n"}
{"snippet": "class Fraction:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n    def add(self, other):\n        return Fraction(self.numerator * other.denominator\n                        + self.denominator * other.numerator,\n                        self.denominator * other.denominator)\n    def eq(self, other):\n        return self.numerator * other.denominator == self.denominator * other.numerator\n", "intent": "Now we let's add methods to do addition and equality comparison:\n"}
{"snippet": "incrementedRDD = rdd.map(increment)\n", "intent": "<img align=left src=\"https://cdn.rawgit.com/jkthompson/pyspark-pictures/master/images/pyspark-page3.svg\" width=500 height=250 />\n"}
{"snippet": "def add(x, y):\n    return x + y\n", "intent": "Finally, you will need a function that receives two numbers and returns their sum.\n"}
{"snippet": "rdd.map(lambda x: x + 1).collect()\n", "intent": "Let's now `map` a function to our RDD to increment all its elements.\n"}
{"snippet": "df.describe().printSchema()    \n", "intent": "If you get stuck on this, don't worry, just view the solutions.\n"}
{"snippet": "Sentence.replace(\"I am\",\"He is\",3).replace(\"I'm\",\"He's\")\n", "intent": "Use replace to change the sentence from first to 2nd person\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"gapminder-health-income\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "l = [1,2,[3,4,'hello']];l[2][2] = 'goodbye'; l\n", "intent": "Reassign 'hello' in this nested list to say 'goodbye' item in this list:\n"}
{"snippet": "def simpsons_rule(start_point, end_point, function, number_of_bins=10):\n", "intent": "Complete an implementation of Simpson's rule and test it on our sine function.\n"}
{"snippet": "def f(x):\n    return 2*x + x*sin(x-3) - 5\nx0 = 1.\nauxilliary_plots.newton_convergence_pattern(f, 1E-8, x0, 1E-7, 2, inset=False, maxiter=14, \n                                            flabel='$f(x)= 2x + x\\mathrm{sin}(x-3) - 5$')\n", "intent": "The iterations are trapped in a region with gradients of equal magnitude but opposite directions.\n"}
{"snippet": "library(Information)\nlibrary(gridExtra)\nlibrary(compareGroups)\nlibrary(ClustOfVar)\nlibrary(reshape2)\nlibrary(plyr)\noptions(scipen=10)\n", "intent": " marketing campaign from the insurance industry \n"}
{"snippet": "mindset = 'growth'\nprint(mindset)\n", "intent": "Now try assigning a value to a variable.\n"}
{"snippet": "num_of_registered_courses = randint(1,3)\nnum_of_registered_courses\n", "intent": "** Use randint function from random module to generate the number of registered courses ranging between 1 and 3 **\n"}
{"snippet": "total_gp = gp_subject_1+gp_subject_2+gp_subject_3\ntotal_credits = credits_for_subject_1+credits_for_subject_2+credits_for_subject_3\nprint(total_gp)\nprint(total_credits)\n", "intent": "** Compute total grade points and total credits again and print the results **\n"}
{"snippet": "desired_job = input('Which is the position you are lookig for?:').strip().title()\n", "intent": "** Take input from the end user, asking to which job opportunity is he looking for **\n"}
{"snippet": "tweet_string = tweet_substring1+tweet_substring2+tweet_substring3\n", "intent": "** Concatenate the above generated three substrings **\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"github\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "U_cnot = np.array([[1,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,0]])\ncnot_choi = outer(vectorize(U_cnot))\nplot_state_city(cnot_choi)\n", "intent": "We will demonstrate a process tomography experiment for a CNOT gate.\n"}
{"snippet": "x = np.array([1,2,3,4])\nx.T\n", "intent": "1-dimension ndarray.T\n"}
{"snippet": "i = \"I love pizza and tacos\"\ncount=0\nfor x in i:\n    if x==\" \":\n        count+=1\nprint (\"The number of spaces in a string are: \" + str(count))\n", "intent": "<h3>Q no 4 : Count the number of spaces in a string below using list comprehension and print the result</h3>\n"}
{"snippet": "car_loan_amt = Decimal(13000-2500)\nr_month = Decimal(7)/Decimal(12) \npmt_original_month = payment(r=r_month, n=60, pv=car_loan_amt)\nprint(pmt_original_month)\n", "intent": "So for the first step, we need to find out what is the monthly payment under the original loan contract:\n"}
{"snippet": "titanic = spark.read.csv('../../data/kaggle-titanic-train.csv', header=True, inferSchema=True)\ntitanic.show(5)\n", "intent": "Data source: https://www.kaggle.com/c/titanic/data\n"}
{"snippet": "def disp_by_hp(disp, hp):\n    return(disp/hp)\n", "intent": "**Case 1**: divide **disp** by **hp** and put the result to a new column\nThe user defined function returns a float value.\n"}
{"snippet": "words = ['alpha', 'bravo', 'charlie', 'delta', 'echo']\nletters = []\nfor w in words:\n    letters.append(w[0].upper())\nletters = [w[0].upper() for w in words]\n", "intent": "It doesn't need to only be mathematical operations, any type of operation that can occur in a standard loop, can occur in a comprehension.\n"}
{"snippet": "query = 'SELECT \"CategoryName\", count(\"ProductID\") \\\nFROM products AS p \\\nJOIN categories AS c \\\nON p.\"CategoryID\" = c.\"CategoryID\" \\\nGROUP BY c.\"CategoryName\";'\npd.read_sql(query, engine)\n", "intent": "<a name=\"guided-practice\"></a>\n- How many products per category does the catalog contain? Print the answer with the `CategoryName`, and `Count`.\n"}
{"snippet": "PE = float(totalPurchases) / 100000.0\nprint(\"P(Purchase): \" + str(PE))\n", "intent": "Now we'll compute P(E): overall probability of buying something regardless of age\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"movies\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "def get_target_for_label(label):\n    if(label == 'POSITIVE'):\n        return 1\n    else:\n        return 0\n", "intent": "check if the label is Positive return 1\nif not then it has to be negative so we return 0\n"}
{"snippet": "t = (1, u'Toy Story (1995)')\nprint t[0]\nprint t[1]\nprint unicode(t[0])\nprint unicode('%0.3f' % t[0])\nprint unicode('%0.3f' % t[0]) + ' ' + t[1]\n", "intent": "[sortby]: https://spark.apache.org/docs/latest/api/python/pyspark.html\n"}
{"snippet": "print_summary_stats('volume_sold',sales_data['volume_sold'])\n", "intent": "**5.A** Using your function, print the summary statistics for 'volume_sold'\n"}
{"snippet": "summary('2015_q1_sales',sales_data)\n", "intent": "**5.C** Using your function, print the summary statistics for '2015_q1_sales'\n"}
{"snippet": "if toModify == desired:\n    print(\"Congratulations! You did it!\")\nelse:\n    print(\"Congratulations! You suck!\")\n", "intent": "When the code below runs, you get congratulated!\n"}
{"snippet": "x = {'the americans':1}\nx * 5\n", "intent": "What will this look like?\n    x = {'the americans':1}\n    x * 5\nTry it...\n"}
{"snippet": "shuttles = ['columbia', 'endeavour', 'challenger', 'discovery', 'atlantis', 'enterprise', 'pathfinder']\n", "intent": "Let's try one more list:\n"}
{"snippet": "def decorate(arg1):\n    def wrap(f):\n        def _wrap(arg):\n            f(arg + arg1)\n        return _wrap\n    return wrap\n@decorate(1)\ndef func(arg):\n    pass\n", "intent": "again, here's the basic syntax:\n"}
{"snippet": "a_oil = 1420.0  \nK_oil = 1.66  \nD = 1.  \ne = 0.025  \nE = 200.  \n", "intent": "$$\n\\begin{align*}\na = {a_O \\over 1 + DK_O/eE} \\\\\n\\end{align*}\n$$\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"flights-2k\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "SELECT DISTINCT manufacturer\nFROM product\nWHERE pname LIKE '%gizmo%'\n", "intent": "Next, write a query that returns the _distinct_ names of manufacturers that make products with \"Gizmo\" in the name:\n"}
{"snippet": "A = set(['name', 'ssn', 'phone', 'city', 'zipcode'])\nF = [('city', 'zipcode'), ('ssn', set(['name', 'city']))]\n", "intent": "Given the following FDs:\n"}
{"snippet": "R   = set([\"A\",\"B\",\"C\",\"D\",\"E\"])\nfds = [(set([\"A\"]),\"B\"), (set([\"A\"]),\"C\"), \n          (set([\"C\"]),\"D\")]\nc.compute_closure(fds[0][0],fds)\n", "intent": "Consider the following instance.\n* $R(A,B,C,D,E)$\n* $A \\rightarrow B,C$\n* $C \\rightarrow D$\n"}
{"snippet": "x = 3.14159\nprint( 'number : {:.2f} \\n\\t   x 2 = {:3.2f}\\n\\t   x 3 = {:3.2f}'.format(x, x*2, x*3) )\n", "intent": "find a nice tutorial [here](http://www.python-course.eu/python3_formatted_output.php)\n"}
{"snippet": "x = 3       \ny = x       \ny += 1      \nprint(x)     \n", "intent": "* like tuples and simple built-in datatypes (integers, floats, strings), \n**Assignment behaves as you would expect:**\n"}
{"snippet": "sarah.get_age.__name__\n", "intent": "Get attribute name as string\n"}
{"snippet": "data1 = [6, 7.5, 8, 0, 1]\narr1 = np.array(data1)\nprint(arr1.dtype)\narr1\n", "intent": "The function _array_ is one of the ways to make an array. This kind of object accepts any sequence-like object and produces a new NumPy array. \n"}
{"snippet": "C = 41\nprint \"C != 40: \", C != 40\nprint \"C < 40: \", C < 40\nprint \"C == 41: \", C == 41\n", "intent": "We can test boolean expressions in a Python shell:\n"}
{"snippet": "n = 16\nCdegrees = [];  Fdegrees = []  \nfor i in range(n):\n    Cdegrees.append(-5 + i*0.5)\n    Fdegrees.append((9.0/5)*Cdegrees[i] + 32)\nprint \"Cdegrees = \", Cdegrees\nprint \"Fdegrees = \", Fdegrees\n", "intent": "Consider this example where we compute two lists in a *for* loop:\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"stocks\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "from pylab import *\nt = linspace(0, 3, 51)\ny = t**2*exp(-t**2)\nplot(t, y)\nshow()\n", "intent": "Now, onwards and upwards...\nA curve $y = f(x)$ stored in the 1D NumPy arrays *x* and *y* can easily be plotted:\n"}
{"snippet": "for key in sorted(temps):\n    value = temps[key]\n    print key, value\n", "intent": "Note that the sequence of keys is **arbitrary**! Never rely on it, if you need a specific order of the keys then you should explicitly sort:\n"}
{"snippet": "class Y:\n    def __init__(self, v0):\n        self.v0 = v0\n        self.g = 9.81\n    def __call__(self, t):\n        return self.v0*t - 0.5*self.g*t**2\n", "intent": "Let us replace the *value* method in *class Y* by a *\\_\\_call\\_\\_* special method:\n"}
{"snippet": "survived = data[0::,1] == '1'\nsurvived_ages = data[survived,5].astype(np.float)\navg_age_survived = np.nanmean(survived_ages)\nprint 'The average of age of passengers who survived was ' + str(\"{0:.2f}\".format(avg_age_survived))\n", "intent": "**8) What is the average age of passengers who survived?**\n"}
{"snippet": "wordCountsCollected = (wordsRDD\n                       .map(lambda word : (word, 1))\n                       .reduceByKey(lambda knt1, knt2 : knt1 + knt2)\n                       .collect())\nprint wordCountsCollected\n", "intent": "The expert version of the code performs the `map()` to pair RDD, `reduceByKey()` transformation, and `collect` in one statement.\n"}
{"snippet": "fdist1.plot(50, cumulative=True)\n", "intent": "We can generate a cumulative frequency plot for these most common words to show what proportion of the text is taken up.\n"}
{"snippet": "x = n.array([1,2,3,4,5,6,7,8], dtype=float)\n", "intent": "- operators on numpy arrays are evaluated element-wise\n"}
{"snippet": "def get_actions(parsed):\n    actions = []\n    parsed = nlp_toolkit(parsed)\n    X = [word.lemma_ for word in parsed]\n    [i.append(actions) for i in X if X.label_ == VB]\n    return actions\n", "intent": "Write a function that can take a sentence parsed by `spacy` \nand return the verbs of the sentence (preferably lemmatized)\n"}
{"snippet": "def ran_check(num,low,high):\n    if num in range(low, high):\n        print(num + \" is in the range\")\n    else:\n        print(\"The number is outside the range\")\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"barley\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "fit <- aov(int_rate ~ grade, data=acc_dt)\n", "intent": "http://www.statmethods.net/stats/anova.html\nhttp://www.gardenersown.co.uk/education/lectures/r/anova.htm\n"}
{"snippet": "s = pd.Series(range(10))\nprint(type(s.index.values))\n", "intent": "<span style=\"color:green\">What type of object is returned from the values of the index of a Series?</span>\n"}
{"snippet": "from IPython.display import Image\nImage(\"pics/advertising_diagram.png\")\n", "intent": "* track mobile better!\n* get metrics right!\n"}
{"snippet": "lhs = a*x**2 + b*x + c\nrhs = 0 \nquadraticEqn = sp.Eq(lhs,rhs)\nquadraticEqn\n", "intent": "Now we can easily represent the quadratic equation.\n"}
{"snippet": "from sympy import *\nfrom IPython.display import display\ninit_printing(order=\"lex\",use_latex='mathjax')\n", "intent": "Adapted from: https://github.com/sympy/sympy/wiki/Quick-examples\n"}
{"snippet": "print((vector_1 - vector_2))\nprint((vector_1 - vector_2) ** 2)\nprint(sum((vector_1 - vector_2) ** 2))\nprint(np.sqrt(sum((vector_1 - vector_2) ** 2)))\nnp.linalg.norm(vector_1 - vector_2), np.linalg.norm(vector_1 - vector_3)\n", "intent": "<img src=\"img/cf3.png\" style=\"width:150px; float:left;\">\n"}
{"snippet": "...\nprint(test_rmse)\n", "intent": "- Now, make predictions for the test set and use a ***RegressionEvaluator*** to find out the RMSE of the predictions\n"}
{"snippet": "from scipy.interpolate import splrep, splev\ntck = splrep(R, V)\nn_spline = -(splev(R, tck, der=2)+2/R*splev(R, tck, der=1))/(4*pi)\n", "intent": "Calculate cubic splines interpolation.\n"}
{"snippet": "print \"residual 1 =\", norm(dot(A, x1)-b0)\nprint \"residual 2 =\", norm(dot(A, x2)-b0)\n", "intent": "Then the solution does not exist:\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"driving\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "what_is_a_rabbit = animals['rabbit']\nprint(what_is_a_rabbit)\n", "intent": "You can get the value of a particular key and store it in a variable:\n"}
{"snippet": "from client.api.notebook import Notebook\nok = Notebook('hw01.ok')\n_ = ok.auth(inline=True)\n", "intent": "Please complete this notebook by filling in the cells provided. Before you begin, execute the following cell to load the provided tests.\n"}
{"snippet": "e = 1.0\nf = 2.1\ng = 3.142\nh = 4.1234567890\n", "intent": "<b>Floats</b> are perhaps better known as decimals:\n"}
{"snippet": "def traffic_printer(cars,bikes,buses,day):\n    print(\"There were %s cars counted on %s\"  % (cars,day))\n    print(\"There were %s bikes counted on %s\" % (bikes,day))\n    print(\"There were %s buses counted on %s\" % (buses,day))\ntraffic_printer(200,50,25,\"Monday\")\ntraffic_printer(150,10,30,\"Tuesday\")\n", "intent": "We could go even further and use multiple string tokens...\n"}
{"snippet": "mylist3 = [a,b,c,d,e]       \n", "intent": "We can also create a list using variables:\n"}
{"snippet": "mylist1.remove('Fruit')   \nmylist1\n", "intent": "Removing values from a list:\n"}
{"snippet": "myset1.add(2)\nmyset1\n", "intent": "What happens when we try and add a value that's already in our set?\n"}
{"snippet": "ingredients_soup = soup.find_all('li',class_=\"recipe-ingredients__list-item\")\ningredients_soup\n", "intent": "We'll use this as the source of our ingredients list but as there's more than one ingredient we'll need to use the find_all method:\n"}
{"snippet": "fruit_dict = {'apple':'red',  'orange':'orange',  'banana':'yellow'}\nfor fruit in fruit_dict:\n    print(fruit_dict[fruit])\n", "intent": "<div style=\"border-left: 3px solid \n<p>If we use a `dict` in a for-loop, then the behavior is to iterate over the *keys* of the `dict`:\n</div>\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"seattle-weather\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "print(localizer_anat_filename)\nprint(localizer_tmap_filename)\n", "intent": "The variables `localizer_anat_filename` and `localizer_tmap_filename` only hold filenames \nfor MRI data stored on the hard disk.\n"}
{"snippet": "x = -15\nif x == 0:\n    print(x, \"is zero\")\nelif x > 0:\n    print(x, \"is positive\")\nelif x < 0:\n    print(x, \"is negative\")\nelse:\n    print(x, \"is unlike anything I've ever seen...\")\n", "intent": "Conditional statements, often referred to as *if-then* statements, allow us to execute certain pieces of code depending on some Boolean condition.\n"}
{"snippet": "def fibonacci_rec(n):\n    if n < 2:\n        return n\n    return fibonacci_rec(n-2) + fibonacci_rec(n-1)\nfibonacci_rec(37)\n", "intent": "Fibonacci function example\n"}
{"snippet": "p7 = figure(plot_width=400, plot_height=400)\np7.patch([1, 2, 3, 4, 5], [6, 7, 8, 7, 3], alpha=0.5, line_width=2)\nshow(p7)\n", "intent": "We can create simple patches that connect vertices of polygons.\n"}
{"snippet": "mylist = [1,2,3]\nprint(mylist[10])\n", "intent": "Accessing an index that does not exist generates an error:\n"}
{"snippet": "astring = \"Hello world!\"\nprint(astring.count(\"l\"))\n", "intent": "That prints out 12, because \"Hello world!\" is 12 characters long, including punctuation and spaces.\n"}
{"snippet": "def sum_three_numbers(a, b=5, c=10, d=\"Hello\"):\n    return a+b+c\nprint(sum_three_numbers(2))\nprint(sum_three_numbers(2, b=3))\n", "intent": "Function arguments can also be **defaulted**, meaning that the default value is used if no argument is passed:\n"}
{"snippet": "def sum_two_numbers(a, b):\n    return a + b\nsum_two_numbers(2, 2)\n", "intent": "Functions may return a value to the caller, using the keyword- 'return' . For example:\n"}
{"snippet": "sym.simplify((x + x * y) / x)\n", "intent": "We can use simplify to transform an expression into a *simpler* form:\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"anscombe\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "sym.differentiate_finite(f(x)*g(x), evaluate=True)\n", "intent": "If we want to expand the intermediate derivative we can pass the flag `evaluate=True`:\n"}
{"snippet": "YouTubeVideo('tytpl-51GBI')\n", "intent": "---------------------------------------------------------------------------------------------------------------------------------\n"}
{"snippet": "scatter(F[1,:],F[2,:], legend = false)\nxlabel!(\"Square footage\")\nylabel!(\"Housing prices\")\ntitle!(\"Housing prices vs. square footage\")\n", "intent": "Recall how the data looks when we plot housing prices against square footage.\n"}
{"snippet": "LowerTriangular(tril(A))\n", "intent": "Creando una matriz triangular inferior\n"}
{"snippet": "features_ground = ['grnd-rx','grnd-ry','grnd-lx','grnd-ly']\ntraining = asl.build_training(features_ground)\n", "intent": "To build a training data, we need to provide a `feature_list` i.e column-names to be used as features e.g\n"}
{"snippet": "a = np.linspace(1,10,10)\nnp.sin(a)\n", "intent": "Transcendental functions:\n"}
{"snippet": "x = np.array([[1,2,3],[4,5,6]])\nprint np.ravel(x,order='False')\n", "intent": "Q2. Let x be array [[1, 2, 3], [4, 5, 6]]. Convert it to [1 4 2 5 3 6].\n"}
{"snippet": "x = np.array([0, 1, 2])\nprint np.repeat(x, 2)\n", "intent": "Q15. Let x be an array [0, 1, 2]. Convert it to <br/>\n[0, 0, 1, 1, 2, 2].\n"}
{"snippet": "x = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])\nprint np.isreal(x)\n", "intent": "Q7. Predict the result of the following code.\n"}
{"snippet": "p_h_given_d[1]/p_h_given_d[2]\n", "intent": "Posterior odds = Prior Odds x Likelihood Ratio\n$\\frac{P(h_1|d)}{P(h_2|d)}=\\frac{P(h_1)}{P(h_2)}\\cdot \\frac{P(d|h_1)}{P(d|h_2)}$\n"}
{"snippet": "n = np.array([3,8,12,18,7,11,30])\nprint(n)\n", "intent": "a) Generate an arbitrary one dimensional array `n` with `n.shape=(8,)` and display it.\n"}
{"snippet": "a=[0,0,0]\nprint a\nb=[0]\nprint b*3\n", "intent": "Build this list [0,0,0] two separate ways.\n"}
{"snippet": "tab <- read.csv(\"../spicy_data.csv\", header = T)\n", "intent": "b.\t(1 point) Run an ANOVA model using software, and test the model assumptions. If necessary, make a transformation of the data.\n"}
{"snippet": "y <- rnorm(10000,0,1)\nhist(y)\n", "intent": "Today we are going to learn about confidence intervals of the mean. \n"}
{"snippet": "opening_sentence[::3]\n", "intent": "This takes every third character in the entire string (note the colons without numbers to imply the start and end of the string)\n"}
{"snippet": "kitchen_inventory = {\n    'cutting_boards': 2,\n    'knives': 1,\n    'oven': 1\n}\n", "intent": "Like lists and strings, dictionaries have a variety of methods. I find that they are generally less useful than list or string methods however.\n"}
{"snippet": "output = [double(item) for item in old_list]\n", "intent": "We learned a slightly more fancy way to do this same thing with list comprehensions\n"}
{"snippet": "this_3x3_array[0,:]\n", "intent": "Let's get a single row:\n"}
{"snippet": "conn = psycopg2.connect(host=your_host, database=your_database, user=your_user, password=your_password)\ncurs = conn.cursor()\nballoons_from_db = curs.fetchall()\nconn.close()\nballoons_from_db\n", "intent": "Show the balloons that are currently inflated.\n"}
{"snippet": "new_date = datetime.now() + timedelta(days=100)\nnew_date\n", "intent": "Let's add 100 days from the current date:\n"}
{"snippet": "initialize_2d_plot()\ndraw_vector(a_pr, kwargs={'linewidth': 3, 'color':'red'})\ndraw_vector(a)\ndraw_vector(b)\n", "intent": "1. plot `a_pr` with `linewidth` 5 and color `red`\n2. plot `a`\n3. plot `b`\n"}
{"snippet": "lst3 = [ x for x in range(11) if x %2 == 0]\nprint lst3\n", "intent": "Lets see how to add in if statements:\n"}
{"snippet": "first = lambda string: string[0]\n", "intent": "Grab first character of a string:\n"}
{"snippet": "sync local instructor repository by issuing a 'git pull' from inside it\ncopy current week's assigned files into personal homework repository\nwork on current week's assignment in jupyter, saving often\nadd the new files to personal homework repository with 'git add <filelist>'\ncommit the changes with a message with 'git commit -a -m \"a useful description of the changes\"'\npush the changes back to your repository on github with 'git push'\n", "intent": "**Do homework for this class**\n"}
{"snippet": "sns.factorplot(x='sex', y='total_bill', data=tips, kind='bar')\n", "intent": "factorplot is the most general form of a categorical plot. It can take in a **kind** parameter to adjust the plot type:\n"}
{"snippet": "def outer():\n    number = 5\n    def inner():\n        print(number)\n    inner()\n", "intent": "- We can nest function\n"}
{"snippet": "Image(url='https://d396qusza40orc.cloudfront.net/mmds/images/otc_pagerank3.gif')\n", "intent": "Consider three Web pages with the following links:\n"}
{"snippet": "x.append('e','f')\nx\n", "intent": "If we append a list made of several items, the result as expected is (a list is an object):\n"}
{"snippet": "name.append(\"Jr\")\nprint(name)\n", "intent": "We can an item to a list:\n"}
{"snippet": "new_date.strftime('%m/%d/%Y')\n", "intent": "But, let's format this datetime object to mm/dd/YYYY format:\n"}
{"snippet": "x = -3\nif x < 0:\n    print(\"x is negative\")\nelse:\n    print(\"x is positive\")\n", "intent": "Python's if statement has optional elif (else-if) and else clauses:\n"}
{"snippet": "for room_name in house:\n    print(room_name)\n", "intent": "We can count the occupants and capacity like this:\n"}
{"snippet": "def double_inplace(vec):\n    vec[:] = [element*2 for element in vec]\nz=[1, 2, 3, 4]\ndouble_inplace(z)\nprint(z)\n", "intent": "Functions can do things to change their **mutable** arguments,\nso `return` is optional.\n"}
{"snippet": "class Room(object):\n    def overfull(self):\n        return len(self.occupants) > self.capacity\n", "intent": "We define functions **inside** the definition of a class, in order to give them capabilities, just like the methods on built-in\ntypes.\n"}
{"snippet": "print(\"Hello World\")\n", "intent": "This will print Hello world\n"}
{"snippet": "a = [1, 2, 3, 4, 5]\nfor value in a:\n    print(value, end=' ')\n", "intent": "    for value in iterable:\n        execute statement(s)\n    Only by looking at many examples will this become clear\n"}
{"snippet": "conf_int = np.percentile(bs_replicates,[2.5,97.5])\nprint conf_int\n", "intent": "Thus, no matter our significance level, we reject the null hypothesis. Let's construct a confidence interval based on our bootstrap replicates.\n"}
{"snippet": "sizejingle = len(jingleLP)\njingleLP10 = jingleLP[1:N_J1:10]\nN_J10LP = len(jingleLP10)\nJingleLP10 = f.fft(jingleLP10)\nJJingleLP10 = np.append(JingleLP10[1:N_J10LP/2],np.zeros(sizejingle - N_J10LP))\nJJingleLP10 = np.append(JJingleLP10,JingleLP[N_J10LP/2:N_J10LP]) * float(sizejingle)/float(N_J10LP)\njjingleLP10 = np.real(f.ifft(JJingleLP10))\n", "intent": "Now down-sample the low passed signal and reconstruct the original low passed signal from the down-sampled data:\n"}
{"snippet": "n = len(wave.ys)                 \nd = 1 / wave.framerate           \nfs = np.fft.rfftfreq(n, d)\nfs\n", "intent": "Compute the frequencies that match up with the elements of the FFT.\n"}
{"snippet": "p = ggplot(aes(x='wt'), data=mtcars)\n", "intent": "ggplots take 2 arguments: a data frame and accompanying \"aesthetics\" or `aes`. These are equivalent.\n"}
{"snippet": "shopping_list = [\"Apples\", \"Computer\", \"Cheese\", \"Civilization 6\"] \nprint(shopping_list)\n", "intent": "In order to add new elements to the list, you can do one of two things:\nFirst, use `.append()`.\n"}
{"snippet": "print(sorted(values_to_sort))\n", "intent": "Normally, `sorted()` will sort based on alphabetical order:\n"}
{"snippet": "x = True\ny = False\nprint (x and y)  \ny = True\nprint (x and y)  \nx = False\ny = False\nprint (x and y)  \n", "intent": "The operator **`and`** compares two boolean values and outputs True _if and only if_ both values are True\n"}
{"snippet": "username = 'george'\npassword = 'secret'\nif username == 'george':\n    if password == 'secret':\n        print('Successful login.')\n    else:\n        print('Incorrect password.')\nelse:\n    print('Incorrect username.')\n", "intent": "Conditionals can be nested:\n"}
{"snippet": "contact = {\n    'name': 'James Bond',\n    'agent_id': '007',\n    'location': 'London'\n}\nfor key in contact:\n    print(key, contact[key])\n", "intent": "What about dictionaries? \n"}
{"snippet": "result = bz.by(db.AllstarFull.teamID, all_stars=db.AllstarFull.playerID.count()\n                ).sort('all_stars', ascending=False)\nr = bz.Data(odo(result, pd.DataFrame))\nm = odo(r, pd.DataFrame)[\"all_stars\"].max()\nprint \"max number of all stars from a single team:\", m\nprint \"normalized list of all_stars:\\n\", bz.compute((r.all_stars / m).head())\ndf1 = odo(r, pd.DataFrame)\ndf1['all_stars'] /= (df1['all_stars'].max() / 10)\ndf1['all_stars'] += 10\n", "intent": "<hr/>\nNow let's join on the AllStars table to see how max salaries and all star count correlate.\n"}
{"snippet": "A = np.arange(100).reshape((10,10))\n", "intent": "This function will work on any numpy array, regardless of the shape (or dimenson).\n"}
{"snippet": "list1 = [3,7,10,5]\nlist1_copy = list(list1)\nprint(list1_copy is list1)\n", "intent": "In contrast, if you copy the list, the `is` test return `False`.\n"}
{"snippet": "def game_of_life_iter1a(x):\n    count = sum( np.roll(np.roll(x,i,0),j,1)\n                for i in (-1,0,1) for j in (-1,0,1) if not (i==0 and j==0)  )\n    return ((count==3) | ((x==1) & (count==2))).astype(int)\ndef game_of_life_iter2a(x):\n    count = ( np.roll(np.roll(x,-1,0),-1,1) + np.roll(np.roll(x,-1,0),0,1)\n    + np.roll(np.roll(x,-1,0),1,1) + np.roll(np.roll(x,0,0),-1,1)\n    + np.roll(np.roll(x,0,0),1,1) + np.roll(np.roll(x,1,0),-1,1)\n    + np.roll(np.roll(x,1,0),0,1) + np.roll(np.roll(x,1,0),1,1) )\n    return ((count==3) | ((x==1) & (count==2))).astype(int)\n", "intent": "Let's try again with version which work with arrays of integers, not bools:\n"}
{"snippet": "from mpld3 import enable_notebook, save_json\nenable_notebook()\np = ggplot(aes(x='price'), data=diamonds)\np + geom_histogram()\n", "intent": "Output matplotlib figures as d3 charts.\n"}
{"snippet": "def sum2(x, y):\n    result = x + y\n    return result\n", "intent": "Functions in Python are generally declared and named such as this\n"}
{"snippet": "def math9(mat):\n  return np.linalg.inv(mat)\n", "intent": "[[ 0  1  4  9]\n [ 0  5 12 21]\n [ 0  9 20 33]\n [ 0 13 28 45]]\n"}
{"snippet": "Q = mc_prediction_q(env, 500000, generate_episode_from_limit_stochastic)\nV_to_plot = dict((k,(k[0]>18)*(np.dot([0.8, 0.2],v)) + (k[0]<=18)*(np.dot([0.2, 0.8],v))) \\\n         for k, v in Q.items())\nplot_blackjack_values(V_to_plot)\n", "intent": "Use the cell below to obtain the action-value function estimate $Q$.  We have also plotted the corresponding state-value function.\n"}
{"snippet": "sample_list = ['cat', 'dog', 1, 2, 3,4, 9, 'bird']\n", "intent": "Write single line of code that returns last five items in the list below\n"}
{"snippet": "print(\"Full name: \" + full_name)\n", "intent": "Run the cell above, and you'll notice it doesn't seem to do anything yet. Let's fix that!\nRun this cell:\n"}
{"snippet": "draw(sierpinski(100))\n", "intent": "When you call the draw function below, you should see a sierpinski triangle.\n"}
{"snippet": "string = 'A1f1f4d2s4g3a4s5d1f1df3s4dfg5a4d5f2s4d1f2f2g3s4d1g4'\ndictionary = {}\ndictionary[1] = len(string) - len(''.join(string.split('1')))\ndictionary[2] = len(string) - len(''.join(string.split('2')))\ndictionary[3] = len(string) - len(''.join(string.split('3')))\ndictionary[4] = len(string) - len(''.join(string.split('4')))\ndictionary[5] = len(string) - len(''.join(string.split('5')))\ndictionary\n", "intent": "Create a dictionary show how many times each number (1,2,3,4,5) appear in this string ->\n'A1f1f4d2s4g3a4s5d1f1df3s4dfg5a4d5f2s4d1f2f2g3s4d1g4'\n"}
{"snippet": "strExamp.capitalize()\n", "intent": "For the mehtods of an object, hit tab after the dot.\n"}
{"snippet": "df.orderBy(df[\"High\"].desc()).select([\"Date\", \"High\"]).show()\n", "intent": "What day had the Peak High in Price?\n"}
{"snippet": "f.rename(columns={'Adj Close':'Adj_Close'}, inplace=True)\n", "intent": "sqlite3 will complain if column names have a blank space in them\n"}
{"snippet": "import numpy as np\nn = [3, 75, 98, 2, 10, 3, 14, 99, 44, 25, 31, 100, 356, 4, 23, 55, 327, 64, 6, 20]\nnp.median(n)\nnp.mean(n)\n", "intent": "Use numpy's np.median() and np.mean() functions to easily calculate the median and the mean.\n"}
{"snippet": "[x for x in xrange(1,51) if x % 3 == 0]\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "sentence_length = len(sentence)\n", "intent": "In this case, Python returned an interger instead of string. This also can be stored in a variable.\n"}
{"snippet": "len(gendered_lists)\n", "intent": "Note the two closing brackets next to each other. The first closes the list that ends with 'mother' while the second closes our `gendered_lists`.\n"}
{"snippet": "def adjectivizer(noun):\n    return noun+\"ly\"\n", "intent": "**def** is used to define a function.\nA function should either return some value, or print it.\n"}
{"snippet": "output = re.findall(\"@\",financier_online)\nprint output\n", "intent": "Let's see how many times and on what occasions the symbol \"@\" was used.\n"}
{"snippet": "favorite_numbers = [2, 3, 5, 7, 11]\nfor number in favorite_numbers:\n    print(number)\n", "intent": "A for loop executes a piece of code for every value in a sequence:\n```\nfor each in sequence:\n    do a thing\n```\n"}
{"snippet": "latex(diff((x+4)*sqrt(x-1),x))\n", "intent": "$$f(x)=(x+4)\\sqrt{x-1}$$\n"}
{"snippet": "B=matrix([[n(real_part(3.75*(cos(15*pi/180)+i*sin(15*pi/180))))],[n(imag_part(3.75*(cos(15*pi/180)+i*sin(15*pi/180))))]])\n", "intent": "$Z\\approx{}3005.81-1907.54i$\n"}
{"snippet": "py.iplot(data, filename='basic-scatter')\n", "intent": "**Then near the bottom of each example script, there is a line that looks like:**\n"}
{"snippet": "def pythagoras(a, b):\n    return math.sqrt(a**2 + b**2)\n", "intent": "Pythagoras Theoram: $ c = \\sqrt(a^2 + b^2) $\n"}
{"snippet": "print 'Cython:'\nprint 'Numpy solve:'\n", "intent": "While it is substantially slower than numpy&\n"}
{"snippet": "print(\"{:10f}\".format(3.121312312312))\nprint(\"{:10f}\".format(-3.121312312312))\n", "intent": "For proper alignment, a space can be left blank in the field width so that when a negative number is used, proper alignment is maintained.\n"}
{"snippet": "x = 0\nwhile x < 10:\n    print(x)\n    print('add one to x')\n    x += 1\n    if x == 3:\n        break\n", "intent": "The **break** keyword allows you to \"break\" out of the loop that contains the break keyword. For example\n"}
{"snippet": "L = [num for num in range(100)\\\n     if (num % 7 == 0) or (num % 11 == 0)]\nprint L\n", "intent": "We can also do this with a list comprehension:\n"}
{"snippet": "f.root.my_array1[1:5:2,0:5]\n", "intent": "We can also select sub-arrays. In this case, just the data related to the sub-array are actually read from disk:\n"}
{"snippet": "from scipy import sparse\nX = np.random.random((5, 6)) \nX[X < 0.85] = 0\nprint X\nX_csr = sparse.csr_matrix(X) \nprint X_csr\n", "intent": "We can create and manipulate sparse matrices as follows:\n"}
{"snippet": "data = [(('Chloe', 'Stuart'), '(831) 758-7214'),\n        (('Emily', 'Winsor'), '(877) 359-8474'),\n        (('Sophia', 'Davidson'), '(800) 445-2854')]\nd = dict(data)\nprint(d[('Chloe', 'Stuart')])\n", "intent": "Here we make a dictionary using tuples as keys and telephone numbers as values. Then we access a dictionary item by providing a key (tuple)\n"}
{"snippet": "def complex(real, imag = 0.0):\n    return magic(r = real, i = imag)\n", "intent": "Don't use spaces around the **=** operator when used to indicate a keyword argument or a default parameter value.\n"}
{"snippet": "fig = dict( data=data, layout=layout )\n", "intent": "**But if you see a variable called \"data\" and a variable called \"layout\", you need to create a Python dict from both like so:**\n"}
{"snippet": "b5 = ipywidgets.Button(description=\"Click Me!\")\ndisplay(b5)\ndef on_button_clicked(b):\n    print('Button clicked !!')\nb5.on_click(on_button_clicked)\n", "intent": "Since button clicks are stateless, they are transmitted from the front-end to the back-end using custom messages.\n"}
{"snippet": "import os.path\npath = os.path.join(os.path.curdir, \"example_data\", \"my_input.txt\")\nifile = open(path, 'r')\nfor l in ifile: \n    print l,    \nifile.close()\n", "intent": "In Python is very easy to work with files. \n***Try by yourself*** &nbsp;this self-explaining code:\n"}
{"snippet": "time.sleep(2.0)\nstart_time = time.time()\nf1.reset()\nf2.reset()\nresults = []\nfor _ in range(5):\n    results.append(f1.increment())\n    results.append(f2.increment())\nend_time = time.time()\nduration = end_time - start_time\n", "intent": "**EXERCISE:** Parallelize the code below. The two actors can execute methods in parallel (though each actor can only execute one method at a time).\n"}
{"snippet": "dv = np.array([-0.2517+0.3129j, 0.2307-0.4667j])\nqv = np.array([0.2377, 0.1557])\nm = dv.size\n", "intent": " circle(-0.2517+0.3129i, 0.2377), ...\n circle(0.2307-0.4667i, 0.1557));\n"}
{"snippet": "print 'How many pizzas can we buy together?'\nprint (myMoney+yourMoney)/pizzaCost\n", "intent": "Python will follow math precedence rules. You can also use parentheses to change precedence, just like in math.\n"}
{"snippet": "print my_short_string[-2]\nprint my_short_string[len(my_short_string) - 2]\n", "intent": "Using negative values counts backwards instead.\n"}
{"snippet": "print \"Enter five numbers, pressing return after each number:\"\nnum1 = float(raw_input(\"Number 1:  \"))\nnum2 = float(raw_input(\"Number 2:  \"))\nnum3 = float(raw_input(\"Number 3:  \"))\nnum4 = float(raw_input(\"Number 4:  \"))\nnum5 = float(raw_input(\"Number 5:  \"))\ntotal_sum = num1 + num2 + num3 + num4 + num5\nmean = total_sum / 5\nprint \"The sum of these numbers is {}\".format(total_sum)\nprint \"And the mean is {:.2f}\".format(mean)\n", "intent": "__Sum and Mean__\n  Read five numbers in. Print out their sum and mean.\n"}
{"snippet": "is_true = ((((0 < 1))))\nprint is_true\nis_false = (0 > 1)\nprint is_false\n", "intent": "And this can be stored in a variable....\n"}
{"snippet": "my_string = \"mvd\"\nfor x in range(len(my_string)):\n    print x\n", "intent": "You can even count backwards by making *step* negative.\n"}
{"snippet": "import pandas as pd\nfrom db import DB\ndb = DB(filename=\"/home/pybokeh/databases/nba\", dbtype=\"sqlite\")\n", "intent": "I've created a sqlite3 database containing NBA player game stats and shooting stats.\n"}
{"snippet": "loads_of_arguments(1,2,fourth=4)\n", "intent": "You can mix and match...\n"}
{"snippet": "print \"one\", \"two\", \"three\"\nprint(\"one\", \"two\", \"three\")\n", "intent": "Here's an example that shows that the parentheses (aka parens) don't do exactly what we expect when there is more than a single argument.\n"}
{"snippet": "seq = \"ATGTTCTGGGCCGCACGCGTGCTACACTGAGCGGGTCAACGGGTGAGGATGTGCGAGAGCACTTCCCAAT\"\nnucmap = create_chrnum_map('ACGT',seq)\nprint nucmap\nprint\nGCnum = nucmap['G'] + nucmap['C']\nGCfrac = GCnum*1.0 / len(seq) \nGCpct = 100 * GCfrac \nprint '{0} GC is {0:.1%} of seq length {1}'.format(GCfrac,len(seq))\n", "intent": "Let's use the dictionary created by **create_chrnum_map()** to calculate GC percentage of a nucleotide string just like before with the counts.\n"}
{"snippet": "emoji = re.compile(r\"^[:;=]-?[)(\\]PD@op|O]$\") \nemoji2 = re.compile(r\"^[:;=]-?.$\")\nemojis = {w for w in chat if emoji2.search(w)}\nsorted(emojis)\n", "intent": "Clearly we're catching some non-emojis, but let's assume we're getting most of the list. \n"}
{"snippet": "not_vowel_pattern = re.compile(r\"[^aeiouAEIOU]\") \nprint(not_vowel_pattern.sub(\"X\",s))\n", "intent": "And now let's just leave the vowels behind.\n"}
{"snippet": "map2.basemap = 'streets' \n", "intent": "Assigning a basemap of your choice to the basemap property will update the widget.\n"}
{"snippet": "Mobile_2015_Bcn_HotSpots = public_content[1]\nmap1.add_layer(Mobile_2015_Bcn_HotSpots)\n", "intent": "Get the first item from your search result and add it the map you created\n"}
{"snippet": "print ('Is user \"dldemo\" currently logged-in?  %s' % authClient.isUserLoggedIn ('demo00'))\nprint ('Is my token currently logged-in:  %s' % authClient.isTokenLoggedIn (token))\nprint ('Is user \"Scooby\" currently logged-in?  %s' % authClient.isUserLoggedIn ('Scooby'))\n", "intent": "Users can also check on their login status using either the account name or the current token:\n"}
{"snippet": "class LoggingContextManager:\n    def __enter__(self):\n        print('LoggingContextManager.__enter__()')\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('LoggingContextManager.__exit__({},{},{})'.format(exc_type, exc_val, exc_tb))\n        return\n", "intent": "- an object designed to be used in a with statement\n- ensures that resources are properly and automatically managed \nwith context-manager:\n    body\n"}
{"snippet": "import pandas as pd\nfrom db import DB\ndb = DB(filename=\"/home/pybokeh/temp/nhtsa\", dbtype=\"sqlite\")\n", "intent": "I've created a sqlite3 database using recall data from NHTSA's website\n"}
{"snippet": "mixedmap = {1:\"ucd\",0.8:False,\"b\":10,\"c\":\"d\"}\n", "intent": "Note that types of keys and values in a dictionary can be mixed\n"}
{"snippet": "list(range(5,20,4))\n", "intent": "Note that the output of *range()* is not actually a list. If we want to convert it to one, we need to call the *list()* function:\n"}
{"snippet": "random.shuffle( countries )\nprint( countries )\nrandom.shuffle( countries )\nprint( countries )\n", "intent": "We can also randomly shuffle a list in place (i.e modify the original list):\n"}
{"snippet": "print(\"\nexpected_X = 1*.25+2*.45+3*.3\nexpected_Y = 1*.4+2*.2+3*.4\ncov = 1*.17 + 2*.15 + 4*.1 + 3*.16 + 6*.3 + 9*.12 - (expected_X*expected_Y)\nprint('Cov(X,Y) = ', cov)\n", "intent": "**_1.10_** Find $Cov(X,Y)$\n**_1.11_** Find $Corr(X,Y)$, or $\\rho$. \n"}
{"snippet": "for product in products:\n    customer_id = product[-2]\n    print(customer_id)\n", "intent": "We can now iterate over the products and extract the customer. The customer is in the position `-2`:\n"}
{"snippet": "f1 = function(){\n    s = sample(c(\"H\", \"T\"), size = 4, replace = TRUE)\n    return(s)\n}\nf1()\nf2 = function() {\n    sa = sample(seq(1,6), size=8, replace=TRUE)\n    return(sa)\n}\nf2()\n", "intent": "The function f1 below produces results like 'T' 'H' 'T' 'T'. We can think of f1 a function that flips a coin four times. \n"}
{"snippet": "feilds=c.execute(\"select sql from sqlite_master where type='table' and name = 'EmployeeBase';\").fetchall()\nprint''.join(feilds[0])\nfeilds=c.execute(\"select sql from sqlite_master where type='table' and name = 'RecipientBase';\").fetchall()\nprint''.join(feilds[0])\nfeilds=c.execute(\"select sql from sqlite_master where type='table' and name = 'MessageBase';\").fetchall()\nprint''.join(feilds[0])\n", "intent": "Query the `sqlite_master` table to retrieve the schema of the `EmployeeBase` table.\n1. What fields are there?\n1. What's the type of each of them?\n"}
{"snippet": "linalg.norm(B, ord=1)\n", "intent": "Norm L1 of B = |6|  + |20| + |10| + |-4|\n"}
{"snippet": "b = a**12\nprint(b)\ntype(b)\nprint(b.bit_length())\n", "intent": "We see that 4 bits are used to store the number 8. If we increase the size of the number dramatically by raising it to the power of 12:\n"}
{"snippet": "mylist = [3, 6, 1, 0, 10, 3]\nmylist\n", "intent": "Arrays are very similar to `lists`. Let's first review how lists work. Remember that we can create them using square brackets:\n"}
{"snippet": "lab_group0.sort()\nfor member in lab_group0:\n    print(member)\n", "intent": "There are many functions for manipulating lists. It might be useful to sort the list:\n"}
{"snippet": "for entry in room_allocation:\n    if len(entry) > 1:\n        print(\"Name: {} \\n  Room: {}\".format(entry[0], entry[1]))\n", "intent": "We could improve the printed list by not printing those living outside of the college:\n"}
{"snippet": "name_entry = PersonName(\"Bloggs\", \"Joanna\")\nprint(type(name_entry))\n", "intent": "Before dissecting the syntax of this class, we will use it. \nWe first create an object (an instantiation) of type `PersonName`:\n"}
{"snippet": "aerosol_cci = read_data_list('../resources/WorkshopData2016/AerosolCCI', 'AOD*0')\naoerosol_cci_Alaska = aerosol_cci.subset(x=[-170,-100],y=[35,80])\n", "intent": "This is an ungridded to ungridded collocation:\n<img src=\"../images/ungridded_ungridded_collocation.png\" width=\"640\" />\n"}
{"snippet": "test = 'Yes' if 1 < five() < six() else 'No'\nprint('Did my test pass?: {}'.format(test))\n", "intent": "Though often frowned upone this is actually very readable in Python:\n"}
{"snippet": "print('5 ones:', np.ones(5, dtype=np.int))\n", "intent": "and similarly for `ones`:\n"}
{"snippet": "print(np.arange(3))\nprint(np.arange(3) + 5)\n", "intent": "Here is an example of broadcasting a scalar to a 1D array:\n"}
{"snippet": "A = np.arange(6).reshape(2, 3)\nprint(A, '\\n')\nprint(np.dot(A, A.T))\n", "intent": "For matrix-matrix multiplication, the regular $matrix \\times matrix$ rules must be satisfied. For example $A \\times A^T$:\n"}
{"snippet": "for coord in cube.coords():\n    print(coord.name())\n", "intent": "5\\. Print the names of all coordinates on the cube. (Hint: Remember the cube.coords method)\n"}
{"snippet": "\"settings\":\n{\n\t\"python_interpreter\": \"/home/pybokeh/miniconda3/envs/jupyter/bin/python\"\n}\n", "intent": "Save **\"Project As\"** (ie 'jupyter')\nThen edit project (**\"Project\" -->  \"Edit Project\"**) and add the following to the json file:\n"}
{"snippet": "saw_wave = saw_sig.make_wave(duration=0.5)\nsaw_wave.make_audio()\n", "intent": "Here's what it sounds like:\n"}
{"snippet": "l = [1,2,2,33,4,4,11,22,3,3,2]\ns = set(l)\ns\n", "intent": "Use a set to find the unique values of the list below:\n"}
{"snippet": "trace = go.Candlestick(x = ford.Date,\n                       open = ford.Open,\n                       high = ford.High,\n                       low = ford.Low,\n                       close = ford.Close)\n", "intent": "The fields which are passed to the chart include the OHLC fields along with the series which is represented on the X axis (typically the date)\n"}
{"snippet": "colors = ['burlywood', 'silver', 'olive', 'skyblue', 'violet', 'crimson' ]\n", "intent": "These will be used to represent the different continents on the chart\n"}
{"snippet": "import pymysql\nfrom sqlalchemy import create_engine\nimport pandas as pd\nfrom pandas import DataFrame\ndef pymysql_sqlalchemy_stringgen(user, passwd, host, dbname):\n    return \"mysql+pymysql://\" + user + \":\" + passwd + \"@\" + host + \"/\" + dbname\nconn = create_engine(pymysql_sqlalchemy_stringgen(\"root\", pswd, \"localhost\", \"poppyramids\")).connect()    \n", "intent": "*Curtis Miller*\nHere we extract data from a MySQL database and store it in Python as a pandas `DataFrame`.\nFirst, boilerplate.\n"}
{"snippet": "castid = out.split('/')[-1]\nhtml_tag = html_tag.format(castid)\nHTML(data=html_tag)\n", "intent": "You can look on that link, or better, let's show it on the notebook:\n"}
{"snippet": "r.get_discount_factors(np.array([0., 1., 1.5, 2.]),\n                       dtobjects=False)\n", "intent": "You can also pass, for instance, an `ndarry` object containing year fractions.\n"}
{"snippet": "np.shape(vc.generate_payoff())\n", "intent": "The **payoff of a European option** is a one-dimensional `ndarray` object.\n"}
{"snippet": "plot_greeks_3d([a_1, a_2, value], ['gbm1', 'gbm2', 'present value'])\n", "intent": "The resulting plot then looks as follows. Here, a helper plot function of DX Analytics is used.\n"}
{"snippet": "{\"keys\": [\"ctrl+enter\"], \"command\": \"repl_transfer_current\", \n \"args\": {\"scope\": \"selection\"}\n}\n", "intent": "Go to: **\"Preferences\" --> \"Key Bindings - User\"**, then add:\n"}
{"snippet": "euro_put_gbm.present_value()\n", "intent": "We need to initialize the valuation object first.\n"}
{"snippet": "raw_data_items = raw_data.map(lambda x: x.split(\",\"))\nnormal_tags = raw_data_items.filter(lambda x: \"normal.\" in x)\nt0 = time()\nnormal_tags_count = normal_tags.count()\ntt = time() - t0\nnormal_ratio = normal_tags_count / float(total_size)\nprint (\"The ratio of 'normal' interactions is {}\".format(round(normal_ratio,3))) \nprint (\"Count done in {} seconds\".format(round(tt,3)))\n", "intent": "Let's compare this with calculating the ratio without sampling.  \n"}
{"snippet": "numbersRDD.setName('Range of integers')\nnumbersRDD.name()\n", "intent": "A name can be set to provide a more meaningful way of identifying an RDD\n"}
{"snippet": "df<-na.omit(df)\ndim(df)\nthreshold <- mean(df$hourly_wage)\noutlier_df<- df[(df[,13]>threshold*2),]\ndim(outlier_df)\n", "intent": "Filtering saved records\n"}
{"snippet": "x = 41\nx = x + 1\nprint(x)\n", "intent": "What will the following program print out? Figure it our _before_ running the program.\n"}
{"snippet": "nums = [3, 41, 12, 9, 74, 15]\nprint(\"Length:\", len(nums))\nprint(\"Max:\", max(nums))\nprint(\"Min:\", min(nums))\nprint(\"Sum:\", sum(nums))\n", "intent": "You have already encountered `len`, `sum`, `max`, and `min`.\n"}
{"snippet": "for i, color in enumerate(colors):\n    ratio = ratios[i]\n    percentage = 100*ratio\n    print(\"{}% {}\".format(percentage,color))\n", "intent": "Write a `for`-loop that prints\n    percentage color \ne.g.\n    20.0% red\n1. Using `enumerate`\n2. Using `zip`\n"}
{"snippet": "a = np.random.rand(10) \na.sort() \nprint(a) \n", "intent": "Create a random vector of size 10, then sort it.\n"}
{"snippet": "def angle_between(v1, v2):\n", "intent": "Also, we want to measure the angle between to vectors. This is done by the next function definition.\n"}
{"snippet": "from sympy import symbols\nx, y, z, a = symbols('x y z a')\ninit_printing(use_unicode=True)     \n", "intent": "<center><h1>SymPy Cheat Sheet</h1></center>\n"}
{"snippet": "lambda = max(X0'*y0)/10;\n", "intent": "Choose a regularization parameter $\\la$.\n"}
{"snippet": "plot(linspace(0,1,10))\ntick_params(axis='x', labelbottom='off')\ntick_params(axis='y', labelleft='off')\n", "intent": "Display the features.\n"}
{"snippet": "run -i nt_solutions/ml_2_regression/exo5\n", "intent": "__Exercise 5__\nDisplay the regularization path, i.e. the evolution of $w$ as a function\nof $\\lambda$.\nlot(lambda_list, W', 'LineWidth', 2);\n"}
{"snippet": "delta = lambda x : div(grad(x))\n", "intent": "The Laplacian operatore is defined as $\\Delta=\\text{div} \\circ  \\nabla = -\\nabla^* \\circ \\nabla$.\nIt is thus a negative symmetric operator.\n"}
{"snippet": "print( 'Energy of the signal/coefficients = ' + str(norm(f)/norm(fW)) )\n", "intent": "Check for orthogonality of the transform (conservation of energy).\n"}
{"snippet": "def last(n): return n[-1]  \ndef sort_list_last(tuples):  \n  return sorted(tuples, key=last)  \nprint(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))\n", "intent": "**Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples.**\n"}
{"snippet": "from datetime import date\nf_date = date(2018, 7, 2)   \nl_date = date(2018, 7, 21)\ncurrent = l_date - f_date\nprint(current.days)\n", "intent": "**Write a Python program to calculate number of days between two dates.**\n- Sample dates : (2018, 7, 2), (2018, 7, 21)\n"}
{"snippet": "def triple_number(x):\n    return 3 * x\nprint(triple_number(4))\nprint(triple_number(5))\nx = triple_number(6)\nprint(x)\n", "intent": "Functions can also take *inputs* and return *outputs*. `say_hello()` has zero inputs.\n"}
{"snippet": "import math\nfor i in range(32):\n    x = int(math.fabs((i*math.cos(i/4)))+1)\n    print(x*'\n", "intent": "We can also add more functions by `import`-ing libraries. For example, we can import the `math` library. \n"}
{"snippet": "import simplejson\nfrom urllib import request\nfrom pprint import pprint  \njson_data = request.urlopen('http://uk.eurosport.yahoo.com/_fantasy_api/resource/salcap.players;game=sogb;split=1;stats=1?crumb=WF3j1BB7uBQ')\nplayers_data = simplejson.load(json_data)\n", "intent": "Programming environment:\n* Python 3.3\n* IPython 1.1\n"}
{"snippet": "ant_params = my_robot.get_default_body_params()\n", "intent": "Now, it's time to modify the default robot, creating your own design.\n"}
{"snippet": "import numpy as np\nx = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\nprint(x + y)\nprint(np.add(x, y))\n", "intent": "Basic mathematical functions operate elementwise on arrays, and are available both as operator overloads and as functions in the numpy module:\n"}
{"snippet": "aerosol_cci_both = cis.read_data_list(data_path + \"AerosolCCI\",\n                                     [\"AOD550\", \"AOD670\"])\n", "intent": "**1.** Read in ``AOD550`` and ``AOD670`` from the 5 days of satellite data \n"}
{"snippet": "from cis.time_util import PartialDateTime\ndata = {}\ndata['2012'] = methane.subset(t=PartialDateTime(2012))\ndata['2013'] = methane.subset(t=PartialDateTime(2013))\ndata['2014'] = methane.subset(t=PartialDateTime(2014))\n", "intent": "Subsetting for the three years 2012, 2013, and 2014.\n"}
{"snippet": "try:\n    n = int(input(\"Enter an integer: \"))\n    print(\"Hello \" * n)\nexcept ValueError:\n    print(\"That wasn't an integer!\")\n", "intent": "We can re-write this so that we catch the exception before it gets to the user, and print a helpful message instead:\n"}
{"snippet": "x = numpy.array([\"true\", \"false\"])\na = x.astype('bool')\nprint( a, a.dtype )\n", "intent": "Not every data type can be converted to all other data types. Some examples:\n"}
{"snippet": "def old_macdonald(name):\n    return name[0:3].capitalize()+name[3:].capitalize()\n", "intent": "    old_macdonald('macdonald') --> MacDonald\nNote: `'macdonald'.capitalize()` returns `'Macdonald'`\n"}
{"snippet": "np.random.seed(10)\nx = np.random.normal(0, 1, (5,5))\nx\n", "intent": "Understanding the importance of np.random.seed()\n"}
{"snippet": "for i in range(NoOfEpochs):\n", "intent": "It's time to update weight matrix using above defined functions. Store training and validation loss in loss_train and loss_val.\n"}
{"snippet": "from requests import get\nfrom libextract.api import extract\nr = get('http://datatau.com')\ntextnodes = list(extract(r.content))\n", "intent": "Dependencies:\n- requests\n- lxml\n- statscounter\n"}
{"snippet": "distance = d_e.T.dot(normal)/(np.linalg.norm(normal))\n", "intent": "Now, let's take the projection of the vector d_e to the normal vector;\n"}
{"snippet": "one6in4 = pd.Series(6 in (sample(D6), sample(D6), sample(D6), sample(D6)) for _ in range(2000))\n(one6in4.cumsum()/(one6in4.index+1)).plot(ylim=(0,1))\none6in4.mean()\n", "intent": "Now let's do this 2000 times:\n"}
{"snippet": "t_stat_hearing = (diff_means - 0)/(before_after['difference_hearing'].std()/len(before_after)**0.5)\nt_stat_hearing\n", "intent": "$\\alpha$ = 0.05\n$H_0$ = 0\n$H_a$ < 0\n"}
{"snippet": "import sequence_tools as st\nprint st.fastaparser2(\"madeupfile.fasta\")\nprint st.fastaparser2(\"../resources/seq_badheader.fasta\")\nprint st.fastaparser2(\"../resources/seq_badsequence.fasta\")\nprint st.fastaparser2(\"../resources/seq_lowercase.fasta\")\n", "intent": "Here I run four commands to account for every type of error. \n"}
{"snippet": "F = 88\nC = 0\nprint(f'{F:.1f} degrees fahrenheit is {C:.1f} degrees celsius')\n", "intent": "The formula to convert Fahrenheit to Celsius is given by\n$$ C = \\frac{5}{9}(F - 32) $$\nWrite a code snippet to calculate the temperature in Celsius.\n"}
{"snippet": "a = np.array([1,2.0,3.2])\na[0] \n", "intent": "Like lists and strings, numpy arrays support indexing and slicing.\n"}
{"snippet": "M = np.random.random((3, 4))\nprint(M)\n", "intent": "One common type of aggregation operation is an aggregate along a row or column.\nSay you have some data stored in a two-dimensional array:\n"}
{"snippet": "integrate(x**2, (x, 0, 3))\n", "intent": "y la integral definida\n$$ \\int_0^3 x^2 dx = \\left.\\frac{x^3}{3} \\right|_0^3 = \\frac{3^3}{3} - \\frac{0^3}{3} = 9 $$\n"}
{"snippet": "LunchOptionPizza.remove('Pizza Hut')  \nLunchOptionPizza.remove('Pizza Hut')  \nLunchOptionPizza.discard('Pizza Hut')  \nLunchOptionPizza.discard('Pizza Hut')  \n", "intent": "** 4. Inorder to remove the extra item in the set. we can use remove() or discard(). Both are different module, check which is best suited.**\n"}
{"snippet": "f = open(tmp_file,'w')\nfor l in lines:\n    if l.count(DELIM) > 1:\n        f.write(l+\"\\n\")\nf.close()\nos.system(tmp_file)\n", "intent": "That last step actually writes the csv data gathered so far to a file.\n"}
{"snippet": "[num for num in range(1, 51) if num % 3 == 0]\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "print(scores['Sally'])\nprint(scores2['John'])\n", "intent": "Unlike with lists, we cannot access elements of the dictionary with slicing. We must instead use the keys. Let's see how to do this.\n"}
{"snippet": "heads = 35\nlegs = 94\nfor c in range(heads):\n    p = 35-c\n    if 2*c + 4*p == 94:\n            print (c,p)\n", "intent": "We have a count of 35 heads and 94 legs among the chickens and pigs in a farm. How many pigs and how many chickens do we have?\n"}
{"snippet": "def ran_check(num,low,high):\n    if num < low:\n        print '{} less than {}'.format(num, low)\n    elif num > high:\n        print '{} higher than {}'.format(num, high)\n    else:\n        print '{} betwen {} and {}'.format(num, low, high)\nran_check(1, 5, 10)\nran_check(7, 5, 10)\nran_check(11, 5, 10)\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "d = {'simple_key':'hello'}\nprint d['simple_key']\n", "intent": "Using keys and indexing, grab the 'hello' from the following dictionaries:\n"}
{"snippet": "false = False\ntrue = True\n", "intent": "- `True` and `False` (Notice the capitalization)\nWhat can we do with them?  Let's try:\n- assign to a variable\n- using as a variable\n- math operators?\n"}
{"snippet": "{word for word in song.split()}  \n", "intent": "Strings by default iterate character by character.  We can get the words out by calling .split() on the collection in our comprehension.\n"}
{"snippet": "x.append   x.count    x.extend   x.index    x.insert   x.pop      x.remove   x.reverse  x.sort\n", "intent": "**Supported methods for lists**\n"}
{"snippet": "SELECT s.sname\nFROM Suppliers s\nWHERE NOT EXISTS ( SELECT p.pid\n                   FROM Parts p\n                   WHERE p.color = 'red'\n                   EXCEPT\n                   SELECT c.pid\n                   FROM Catalog c, Parts p\n                   WHERE c.sid = s.sid AND c.pid = p.pid\n                                   AND p.color = 'red' )\n", "intent": "**3.\tFind the snames of suppliers who supply every red part.**\n"}
{"snippet": "for cell in Range('A1').current_region:\n    for border_id in range(7,12):\n        cell.api.Borders(border_id).LineStyle = 1\n        cell.api.Borders(border_id).Weight = 2\n", "intent": "Border ids are 7 through 12 and correspond to borders for xlEdgeTop, xlEdgeBottom, xlEdgeRight, xlEdgeLeft, xlInsideHorizontal, and xlInsideVertical\n"}
{"snippet": "SELECT DISTINCT s.sid\nFROM Suppliers s, Parts p, Catalog c\nWHERE s.sid = c.sid AND p.pid = c.pid AND (p.color IS 'Red' OR p.color IS 'GREEN')\nGROUP BY c.pid\nHAVING COUNT(*) = (SELECT COUNT(*)\n                   FROM Parts p1);\n", "intent": "7.Find the sids of suppliers who supply every red or green part.\n"}
{"snippet": "a = 3.6\nb = int(a)\nprint(a, b, sep='\\n')\n", "intent": "Where sensible, you can cast between types:\n"}
{"snippet": "name_list = ['adam', 'nate', 'kevin', 'paul', 'ryan', 'engelbert', 'aristophenes', 'jim']\nprint (\"And the short names are: \")\nfor name in name_list:\n        if len(name) > 8:\n            print (\"\\n\\n*****STOP*****\\n\\n We found a really long name: \", name)\n            break\n        print (name)\n", "intent": "`break`, on the other hand, just breaks you out of your current blocks (works in loops and also `if`):\n"}
{"snippet": "h = ROOT.TH1F(\"h\", \"My Notebook Histo;x;\n", "intent": "We now create our histogram\n"}
{"snippet": "std::vector<float> x2 {-0.28, 0.005, 0.19, 0.29, 0.45, 0.56,0.65,0.80,0.90,1.01};\nstd::vector<float> y2 {2.1,3.86,7,9,10,10.55,9.64,7.26,5.42,2};\nstd::vector<float> ex2 {.04,.12,.08,.06,.05,.04,.07,.06,.08,.04};\nstd::vector<float> ey2 {.6,.8,.7,.4,.3,.3,.4,.5,.6,.7};\nconst Int_t n2 = x2.size();\nTGraphErrors gr2(n2,x2.data(),y2.data(),ex2.data(),ey2.data());\ngr2.SetMarkerColor(kRed);\ngr2.SetMarkerStyle(20);\nmg.Add(&gr2);\n", "intent": "We then create our second one.\n"}
{"snippet": "f = ROOT.TFile.Open(\"https://root.cern.ch/files/summer_student_tutorial_tracks.root\")\n", "intent": "Open a file which is located on the web. No type is to be specified for \"f\".\n"}
{"snippet": "elton[['tfidf']].stack('tfidf', new_column_name=['word','tfidf']).sort('tfidf', ascending=False)\n", "intent": "- furnish\t18.38947184\n- elton\t17.48232027\n- billboard\t17.3036809575\n"}
{"snippet": "all_test_users = test_data['user_id'].unique()\n", "intent": "Since TuriCreate uses GPU on MacBook Pro, it goes very fast\n"}
{"snippet": "def is_anagram(o,t):\n    if o.strip(t) == '':\n        return True\n    else:\n        return False\nis_anagram('banana','popcorn')\nis_anagram('banana','nabana')\nimport doctest\ndoctest.run_docstring_examples(is_anagram, globals(), verbose=True)\n", "intent": "Passes tests, but we don't have enough coverage. For example, what if we add:\n```\n    False\n    False\n```\n"}
{"snippet": "Range('A2:B64').api.Sort(Key1=Range('B2').api, Order1=1, Orientation=1)\n", "intent": "Order: 1 = ascending, 2 = descending\n"}
{"snippet": "env = BanditEnv(num_actions, distribution, evaluation_seed)\nagent = ThompsonBeta(num_actions)\nexperiment = Experiment(env, agent)\nexperiment.run_bandit(trials)\n", "intent": "What do you think the regret graph would look like?\n"}
{"snippet": "set1 = {2,3,1,5,6,8}\nset2 = {3,1,7,5,6,8}\nset1.difference(set2)\n", "intent": "Find the elements that are in `set1` but not `set2`.\n"}
{"snippet": "sns.lmplot(data=tips,\n           x='total_bill',\n           y='tip',\n           col='sex')\n", "intent": "Make categorical separation more obvious by spreading them across rows and columns.\n"}
{"snippet": "dfSmall = df2.sample(False, .0005, 2718).coalesce(8)\ndfSmall.write.parquet(\"/mnt/data_quick/wiki/smallwiki.parquet\")\n", "intent": "Save an even smaller sample.\n"}
{"snippet": "Auto = read.csv(\"/Users/austin/OneDrive/Code/data_sci/ml/Intro_Stat_Learning_R/datasets/Auto.csv\",header=T,na.strings=\"?\")\ndim(Auto)\nAuto = na.omit(Auto)\ndim(Auto)\n", "intent": "**9.** This exercise involves the Auto data set studied in the lab. Make sure that the missing values have been removed from the data.\n"}
{"snippet": "x_marginal_table = Table().with_columns('X',np.arange(1,4),'P(X=x)',np.array([.25,.45,.3]))\ny_marginal_table = Table().with_columns('Y',np.arange(1,4),'P(Y=y)',np.array([.4,.2,.4]))\nx_marginal_table.show()\ny_marginal_table.show()\nEXY = 1*(.17)+2*(.15+0)+3*(.08+.08)+4*(.1)+6*(.1+.2)+9*(.12)\nEX = np.sum(x_marginal_table.column(0)*x_marginal_table.column(1))\nEY = np.sum(y_marginal_table.column(0)*y_marginal_table.column(1))\ncov = EXY - EX*Ey\ncov\n", "intent": "**_1.10_** Find $Cov(X,Y)$\n**_1.11_** Find $Corr(X,Y)$, or $\\rho$. \n"}
{"snippet": "print('Problem 1.10')\nprint('Cov(X,Y) = E(XY)-E(X)E(Y)')\nE_XY = (1*0.17)+(2*(0+.15))+(3*(.08+.08))+(4*(.10))+(6*(.2+.1))+(9*(.12))\nEX = 1*(.17+.08)+2*(.15+.1+.2)+3*(.08+.1+.12)\nEY = 1*(.17+.15+.08)+2*(.1+.1)+3*(.08+.2+.12)\nCov_XY = E_XY-EX*EY\nprint('Cov(X,Y) = ' + str(round(Cov_XY,2)))\n", "intent": "**_1.10_** Find $Cov(X,Y)$\n**_1.11_** Find $Corr(X,Y)$, or $\\rho$. \n"}
{"snippet": "wordCountsCollected = (wordsRDD\n                       .map(lambda k:(k,1))\n                       .reduceByKey(lambda a,b:a+b)\n                       .collect())\nprint wordCountsCollected\n", "intent": "The expert version of the code performs the `map()` to pair RDD, `reduceByKey()` transformation, and `collect` in one statement.\n"}
{"snippet": "for x in range(1,101):\n    print(x)\n", "intent": "---\nFor now, just print each number and we'll build on it.\n"}
{"snippet": "for x in Range('A1').vertical:\n    if x.value > 5:\n        x.color = (160,160,160)  \n", "intent": "We can use the same logic for searching text to perform conditional formatting:\n"}
{"snippet": "Z = np.zeros((8,8), dtype=int)\nZ[1::2,::2] = 1\nZ[::2,1::2] = 1\nprint(Z)\n", "intent": "15\\. Create a 8x8 matrix and fill it with a chessboard pattern (say, 1 == 'black' and 0 == 'white'). Use fancy indexing.\n"}
{"snippet": "[x for x in range(0,51) if x % 3 == 0]\n", "intent": "___\n**Use a List Comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "for i in range(len(reviews)):\n    if(labels[i] == 'POSITIVE'):\n        for word in reviews[i].split(\" \"):\n            positive_counts[word] +=1\n            total_counts[word] +=1\n    else:\n        for word in reviews[i].split(\" \"):\n            negative_counts[word] +=1\n            total_counts[word] +=1\n", "intent": "Count positive word, negative word and total word \n"}
{"snippet": "from closure import *\ndef is_superkey_for(A, X, fds, verbose=False): \n    return X.issubset(compute_closure(A, fds, verbose=verbose))\nimport itertools\ndef is_key_for(A, X, fds, verbose=False):\n    subsets = set(itertools.combinations(A, len(A)-1))\n    return is_superkey_for(A, X, fds) and \\\n        all([not is_superkey_for(set(SA), X, fds) for SA in subsets])\n", "intent": "Activity 3NF\n------------\nIn this activity, you can use the tools from last time:\n"}
{"snippet": "print(li)\nprint(li[-1:], \"is equivalent to\", li[len(li)-1:len(li)])\nprint(li[:-1], \"is equivalent to\", li[0:len(li)-1])\n", "intent": "When $i < 0$ ($j < 0$), then its value is replaced by `i + len(li)` (`j + len(li)`).\n"}
{"snippet": "key = \"\"\nwith open('key.txt','r') as f:\n    key = f.readline().strip()\nif len(key) > 0:\n    print(\"Succesfully retrieved API key\")\n", "intent": "Now that we donwloaded our key, we should read it into a variable to use it for the rest of this notebook.\n"}
{"snippet": "def print_names_from_JSON(response):\n", "intent": "Can you do the same thing for the JSON response? Notice that a JSON object is basically a dictionary.\n"}
{"snippet": "df.registerTempTable(\"people\")\n", "intent": "Finally, let's run a couple SQL commands.\n"}
{"snippet": "for i in range(5):\n  rdd.map(lambda x: len(broadcastVar.value)).collect()\n", "intent": "Now we'll run the job 5 times, and notice how much faster it is since we don't have to retransmit the data set each time.\n"}
{"snippet": "print(\"The first element of 'mylist' is: \" + str(mylist[0]))\n", "intent": "And we can access an element via its *index*. To get the first element, we use an index of 0:\n"}
{"snippet": "dbutils.fs.rm(\"/temp/demo\", True)\nx = sc.parallelize([2,4,1])\nx.saveAsTextFile(\"/temp/demo\")\ny = sc.textFile(\"/temp/demo\")\nprint(y.collect())\n", "intent": "Action / Distributed: Save the RDD to the filesystem indicated in the path\n"}
{"snippet": "x=3.2\nif not (x>0 and type(x)==int):\n    print(x,\"is not a positive integer\")\n", "intent": "We can use logical not and logical and to combine true and false:\n"}
{"snippet": "def arrowify(**args):\n    for key, value in args.items():\n        print(key+\" -> \"+value)\narrowify(neutron=\"n\",proton=\"p\",electron=\"e\")\n", "intent": "If two asterisks are used, named arguments are supplied inside the function as a dictionary:\n"}
{"snippet": "def double(decorated_function):\n   def result_function(input):\n       return decorated_function(decorated_function(input))\n   return result_function\n@double\ndef try_me_twice():\n    pass\n", "intent": "Code that *is* good style, but you're not familiar with, or \nthat colleagues might not be familiar with\n"}
{"snippet": "class One(object):\n    pass\nclass Two(object):\n    def __init__():\n        self.child = One()\n", "intent": "Smell: You find it hard to locate a piece of code\nSmell: You get a lot of version control conflicts\nBefore:\n"}
{"snippet": "class MyCustomErrorType(Exception):\n    def __init__(self, category=None):\n        self.category=category\n    def __str__(self):\n        return \"Error, cateory \" + str(self. category)\nraise(MyCustomErrorType(404))\n", "intent": "You can add custom data to your exception:\n"}
{"snippet": "initial_fruit_count=0\nbananas=initial_fruit_count\napples=initial_fruit_count\noranges=initial_fruit_count\n", "intent": "The right hand side of these assignments doesn't respect the DRY principle. We\ncould of course define a variable for our initial value:\n"}
{"snippet": "alphabet_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\",\"i\", \"j\", \"k\", \"l\", \"m\", \"n\",\"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n", "intent": "HINT: Remember where python indexing starts from\n"}
{"snippet": "from statistics import variance\nSAVE_VARIANCE = variance \n", "intent": "Python has a built-in function, [`statistics.variance`](https://docs.python.org/3.5/library/statistics.html\n"}
{"snippet": "current_location = wb.get_selection()  \nfor n in range(10):\n    current_location.value = n\n    current_location = current_location.offset(row_offset = 1)\n", "intent": "This snippet below will insert numbers 0 through 9 in a column\n"}
{"snippet": "                        re.VERBOSE)\nprint (re_names3.match ('Rich Vuduc').group ('first'))\nprint (re_names3.match ('Rich S Vuduc').group ('middle'))\nprint (re_names3.match ('Rich Salamander Vuduc').group ('last'))\n", "intent": "**Tagging pattern groups**\n"}
{"snippet": "xr.concat((aa,bb),'z').mean(dim='z')\n", "intent": "Usually you would find these last 2 operations combined as you don't need to store the results of the `concat` operation.\n"}
{"snippet": "tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7\nprint(tuplex)\n", "intent": "<div class=\"alert alert-success\">\n<h3>Exercise 3</h3>\nPrint the number of unique values in a tuple.\n</div>\n"}
{"snippet": "_ = ok.grade('q01')\n_ = ok.backup()\n", "intent": "Be sure to name your results `q01.csv`.\n"}
{"snippet": "arr4 = arr1 * arr2\nprint(\"arr4:\", arr4)\n", "intent": "<div style=\"border-left: 3px solid \n<p>Elementwise multiplication:\n</div>\n"}
{"snippet": "arr20[np.where(np.logical_or(arr20<2,arr20>7))]\n", "intent": "<div style=\"background: \n<p>**Exercise 4.11:**\n<p>Return all of the values of arr20 that are less than 2 or greater than 7\n</div>\n"}
{"snippet": "our_dictionary = {}\nour_dictionary['me'] = my_dict\nour_dictionary['my neighbor'] = {}\nprint(our_dictionary)\n", "intent": "<div style=\"background: \n<p>**Exercise \n</div>\n"}
{"snippet": "type(9223372036854775807 + 1)\n", "intent": "Bigger than this? Python automatically switches to arbitrary precision longs\n"}
{"snippet": "for n, c in enumerate('hi there'):\n    print n, c\n", "intent": "Sometimes want the index of an element as well as the element.\n"}
{"snippet": "Range('1:10').api.Delete()\n", "intent": "Delete rows 1 through 10\n"}
{"snippet": "positive_counts = Counter()\nnegative_counts = Counter()\ntotal_counts = Counter()\n", "intent": "We'll create three `Counter` objects, one for words from postive reviews, one for words from negative reviews, and one for all the words.\n"}
{"snippet": "vocab = set(total_counts.keys())\n", "intent": "**<span style=\"background-color: \n"}
{"snippet": "delta_w_i_h = np.dot(np.array([learnrate*hidden_error_term]).T,np.array([x])) \n", "intent": "$$\n  \\begin{matrix}\n   0.5 & -0.6  \\\\\n   0.1 & -0.2  \\\\\n   0.1 & 0.7 \n  \\end{matrix} \\tag{1}\n$$\n$\\Delta w_i = \\eta\\delta^hx_i$\n"}
{"snippet": "s2 = Signal([s,s,s], s.fs)\n", "intent": "The Signal container can store more then one channel\n"}
{"snippet": "import re\nraw_string = 'Hi, how are you today?'\nprint re.search('Hi', raw_string)\n", "intent": "The library **re** is used to implement regular expressions in python.\n"}
{"snippet": "Naive bayes states that P(A/B)= p(B/A). p(A)/p(B) \nin this formula it states that given a condition B what is the probability of the occurence of A.\nSo in this we make assumption that \nthe value of a particular feature is independent of the value of any other feature, given the class variable.\n", "intent": "8) Why is Naive Bayes so naive? Use the mathematics to provide an explanation. The best answer will discuss the probability theory involved.\n"}
{"snippet": "vocab = set(total_counts.keys())\n", "intent": "Create a set named vocab that contains every word in the vocabulary.\n"}
{"snippet": "hdfs dfs -ls /data/shakespeare\n", "intent": "We can find a cleaned-up text file with all of Shakespeare's work in\n"}
{"snippet": "def countDog(inputString):\n    lowercase_list = inputString.lower().split()\n    return len(list(filter(lambda item: item == 'dog',lowercase_list)))\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "Range('A:B').api.Delete()\n", "intent": "Delete columns A through B\n"}
{"snippet": "from collections import defaultdict\ndef count(s):\n    count_dict = defaultdict(int)\n    for word in s:\n        count_dict[word] += 1\n    return count_dict\n", "intent": "From a list of words return a dictionary that mantains a count for each word in the original list.\n"}
{"snippet": "print arr1, '*', arr2, '=', arr1 * arr2\n", "intent": "Importantly, even the multiplication operator is by default applied element-wise, it is *not* the matrix multiplication from linear algebra:\n"}
{"snippet": "name= 'Put your name here!'\nprint name * 10\n", "intent": "Do you understand what happened in a cell above?\n"}
{"snippet": "s=0\nfor x in range(1000): \n  x_string = str(x)\n  str_reversed = x_string[::-1]\n  x_reversed = int(str_reversed)\n  if x == x_reversed:\n    s=s+x\nprint s\n", "intent": "Now lets sum all palindromes below 1000:\n"}
{"snippet": "sum(i*i for i in range(100))\n", "intent": "Just as an exercise: sum of squares below 100:\n"}
{"snippet": "print (X.T)\nprint (X.dot(np.array([2, 3])))\n", "intent": "Be carefull with matrix product\n"}
{"snippet": "print('Hello World')\n", "intent": "This is a demonstration of how Jupyter Notebook works\n"}
{"snippet": "try:\n    for i in ['a','b','c']:\n        print(i**2)\nexcept:\n        print('strings cant be multipied')\n", "intent": "Handle the exception thrown by the code below by using <code>try</code> and <code>except</code> blocks.\n"}
{"snippet": "assert(res.shape == (5, 5))\n", "intent": "When unsure about the dimensions of a matrix, make sure you throw in an assert statement to check if we have a matrix of expected dimensions: \n"}
{"snippet": "from xlwings.constants import DeleteShiftDirection\nRange('A1:B2').api.Delete(DeleteShiftDirection.xlShiftToLeft)  \n", "intent": "To specify direction to shift cells when deleting block of cells, import DeleteShiftDirection and choose either xlShiftUp or xlShiftToLeft\n"}
{"snippet": "eta = linspace(-.5,.5,1000) \nplot(-BV(eta),eta) \nylabel(\"Potential (V)\") \nxlabel(\"Current (Arb)\")\n", "intent": "Assuming no other overpotentials, as we charge or discharge a system assuming\n$$\\alpha_a = \\alpha_c = .5 $$\n"}
{"snippet": "results = [] \nfor i in range(10000): \n    results.append(lets_make_a_deal(random.choice(['A','B','C']),'S')) \nfrom collections import Counter \nCounter(results) \n", "intent": "Question 9: Simulate 10,000 games where the person always switched. Report your results.\n"}
{"snippet": "v = [5, 10, 2, 6, 1]\n", "intent": "Here are a few exercises to get you started with coding matrices. The exercises start off with vectors and then get more challenging\n"}
{"snippet": "from functools import reduce\na = range(1, 10)\nresult = reduce(lambda x, y: x * y, a)\nprint(result)\n", "intent": "> PYTHON 2 to 3:  In Python 2.7, `reduce` is a built-in function, but in Python 3 it's in the <b>`functools`</b> package.\n"}
{"snippet": "L=A.collect()\nprint type(L)\nprint L\n", "intent": "* RDD content is distributed among all executors.\n* `collect()` is the inverse of `parallelize()'\n* collects the elements of the RDD\n* Returns a list\n"}
{"snippet": "from pyspark import SparkContext\nsc = SparkContext(master=\"local[3]\")\n", "intent": "Here we initialize spark to use 3 of the 4 cores on my laptop.\n"}
{"snippet": "print hex(1024)\nprint bin(1024)\n", "intent": "**Problem 1: Convert 1024 to binary and hexadecimal representation:**\n"}
{"snippet": "class Line(object):\n    def __init__(self,coor1,coor2):\n        self.coor1 = coor1\n        self.coor2 = coor2\n    def distance(self):\n        return ((self.coor1[1] - self.coor2[1])**2 + \\\n                (self.coor1[0] - self.coor2[0])**2)**0.5\n    def slope(self):\n        return float((self.coor1[1] - self.coor2[1])) / \\\n                     (self.coor1[0] - self.coor2[0])\n", "intent": "Fill in the Line class methods to accept coordinate as a pair of tuples and return the slope and distance of the line.\n"}
{"snippet": "Holding.__dict__['cost'](h)\n", "intent": "When you write cost() it actually calls. It looks up the function inside class definition and passes instances of a class to it.\n"}
{"snippet": "document_tree = ET.parse( './data/mondial_database_less.xml' )\n", "intent": "+ for details about tree traversal and iterators, see https://docs.python.org/2.7/library/xml.etree.elementtree.html\n"}
{"snippet": "class(exemple$Segment)\n", "intent": "Regardons la classe de la variable \"Segment\";\n"}
{"snippet": "a<-df[-nrow(df), 2]-df[-1, 2]\na<-c(a, a[length(a)])\ndf$dx<-a\n", "intent": "$$d_x=l_x -l_{x+1}$$\n"}
{"snippet": "moyenne_B<-mean(dat$rating[dat$cond == \"B\"])\nmoyenne_B\n", "intent": "Ou calculer directement la moyenne de chaque groupe comme suit;\n"}
{"snippet": "sf = {'sunset':94122, 'presidio':94129,\n      'soma':94105, 'marina':94123}\nprint sf\n", "intent": "---\nWith the following key:value pairs:\n    'sunset':94122\n    'presidio':94129\n    'soma':94105\n    'marina':94123\n"}
{"snippet": "column = \"volume_sold\"\nsumStats(column,sales_dict[column])\n", "intent": "**5.A** Using your function, print the summary statistics for 'volume_sold'\n"}
{"snippet": "ggplot(data=dat, aes(x=examen, y=moyenne,group=1))+\n    geom_line() +\n    geom_point()\n", "intent": "Ajouter des points:\n"}
{"snippet": "def bisection_line_search(a,b,f,L,epsilon):\n    x = a\n    y = b\n    while y-x<2*L:\n        if f((x+y)/2-epsilon)<f((x+y)/2+epsilon):\n            y = (x+y)/2+epsilon\n        else:\n            x = (x+y)/2-epsilon\n    return (x+y)/2\n", "intent": "This is what we should end up. The following function is not shown on the slides.\n"}
{"snippet": "new_line = re.sub(r'cat', 'monkey', line)\nprint(line)\nprint(new_line)\n", "intent": "**re.sub** substitutes strings/patterns\n"}
{"snippet": "def is_matching(word):\n    return 'a' in word\n", "intent": "needed for code below\n"}
{"snippet": "def countDog(sentence):\n    thetotal = 0\n    for word in sentence.lower().split():\n        if word == 'dog':\n            thetotal += 1\n    return thetotal\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "def solve_subs (s, t):\n    locs = []\n    for i in range(len(s)-len(t)):\n        matching = True\n        for j in range(len(t)):\n            if s[i+j] != t[j]:\n                matching = False\n        if matching:\n            locs += [i+1]\n    return locs\n", "intent": "It turns out that `i+j` may become larger than the length of `s`.  \nTherefore the programmer changed the bound of the outer loop.\n"}
{"snippet": "two_dimensional_array = np.array([range(i, i + 4) for i in [2, 4, 6]])\ntwo_dimensional_array\n", "intent": "NumPy arrays can be multi-dimensional. We'll start with a two dimensional array, which can be thought of a grid with x and y coordinates.\n"}
{"snippet": "print(x + y) \nprint(x - y) \nprint(x * y) \nprint(x / y) \nprint(x**2) \n", "intent": "Use `+`, `-`, `*`, `/` and `**` to perform element wise addition, subtraction, multiplication, division and power.\n"}
{"snippet": "def isEven(number):\n    if(number%2==0):\n        return True\n    else:\n        return False\n", "intent": "A function is a chunk of code that always performs specific task when triggered/called/invoked!\nLets use the even_numbers context again.\n"}
{"snippet": "def vol(rad):\n    return 4 * 3.14159 * rad**2\nvol(100)\n", "intent": "Complete the following questions:\n____\n**Write a function that computes the volume of a sphere given its radius.**\n"}
{"snippet": "pb = [(0, 0),\n      (1, 0), (1, 1),\n      (2, 0), (2, 1), (2, 2),\n      (3, 0), (3, 1), (3, 2), (3, 3),\n      (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)]\n", "intent": "This contains a list of valid coordinates on the board. It will be used to check boundaries `actionsF_pb`.\n"}
{"snippet": "playGames(opponent, 9)\n", "intent": "Let's play some games!\n"}
{"snippet": "game52.play_game(alphabeta_player, alphabeta_player)\n", "intent": "Demonstrating the play_game function on the game52:\n"}
{"snippet": "A, B, C, D = expr('A, B, C, D')\nto_cnf(A |'<=>'| B)\n", "intent": "Let's convert some sentences to see how it works\n"}
{"snippet": "class Car:\n        return('Car has started')\nbmw = Car()\nbmw.start()\n", "intent": "A Python class can be defined using the `class` statement.\n"}
{"snippet": "sequential_decision_environment = GridMDP([[-0.4, -0.4, -0.4, +1],\n                                           [-0.4, None, -0.4, -1],\n                                           [-0.4, -0.4, -0.4, -0.4]],\n                                          terminals=[(3, 2), (3, 1)])\n", "intent": "---\nR(s) = -0.4 in all states except in terminal states\n"}
{"snippet": "dmdp = CustomDMDP(t, r, terminals, init, gamma=.9)\n", "intent": "We're all set.\nLet's instantiate our class.\n"}
{"snippet": "grammar = ProbGrammar(\"A Simple Probabilistic Grammar\", rules, lexicon)\nprint(\"How can we rewrite 'VP'?\", grammar.rewrites_for('VP'))\nprint(\"Is 'the' an article?\", grammar.isa('the', 'Article'))\nprint(\"Is 'here' a noun?\", grammar.isa('here', 'Noun'))\n", "intent": "Let's use the above to assemble our probabilistic grammar and run some simple queries:\n"}
{"snippet": "def goal_test(kb):\n    return kb.ask(expr('At(Bucharest)'))\n", "intent": "Finally, we can define a a function that will tell us when we have reached our destination, Bucharest.\n"}
{"snippet": "solution = [expr('Go(Home, SM)'),\n            expr('Buy(Milk, SM)'),\n            expr('Buy(Banana, SM)'),\n            expr('Go(SM, HW)'),\n            expr('Buy(Drill, HW)')]\nfor action in solution:\n    shoppingProblem.act(action)\n", "intent": "We now define a valid solution that will help us reach the goal.\nThe sequence of actions will then be carried out onto the `shoppingProblem` PDDL.\n"}
{"snippet": "trivial_vacuum_env.add_thing(random_agent)\nprint(\"RandomVacuumAgent is located at {}.\".format(random_agent.location))\n", "intent": "We will now add our agent to the environment.\n"}
{"snippet": "d2d3 = sp.Matrix(composition(d2, d3))\nd2d3\n", "intent": "$\\Huge d_2 \\circ d_3$\n"}
{"snippet": "for letter in \"Psychology\":\n    if letter == \"o\": \n        pass  \n        print(\"passing on this one\")\n    else:\n        print(\"current letter : \", letter)\n", "intent": "**The `pass` statement:**\n"}
{"snippet": "from math import sin, sqrt\nprint(sqrt(a))\nprint(sin(a))\n", "intent": "If you want to use elementary functions such as sqrt or sin, you first have to import them:\n"}
{"snippet": "hasattr(mustang, 'wheels'), hasattr(mustang, 'brand'), \\\nhasattr(mustang, 'about'), hasattr(mustang, 'start'), \\\nhasattr(mustang, 'engine')\n", "intent": "Using `hasattr`, `setattr`, `getattr`, and `del` functions you can perform operations on class methods, instance variables, and class variables.\n"}
{"snippet": "class Apple(Fruit):\n    def __init__(self, taste, color):\n        self.taste = taste\n        self.color = color\ngreen_apple = Apple('tasty', 'green')\ngreen_apple.eat()  \n", "intent": "One final piece to know about objects is *inheritance*: making a new class from an old one.\n"}
{"snippet": "for m in 0:T+1, n in 0:(T-m)    \n    V[T+1][m,n] = 0.0\nend\n", "intent": "Initialize the value function for $T+1$\n"}
{"snippet": "for i, color in enumerate(colors):\n    print (color, ratios[i])\n", "intent": "Write a `for`-loop that prints\n    percentage color \ne.g.\n    20.0% red\n1. Using `enumerate`\n2. Using `zip`\n"}
{"snippet": "cur.execute(\"SELECT title FROM books WHERE description LIKE '%software%';\")\nprint(cur.fetchall())\n", "intent": "The LIKE keyword needs a % if we want to say that it can have any words before or after the sentence that we are looking for.\n"}
{"snippet": "for player in x:\n    print(x[player])\n", "intent": "<br>\nIterate over all of the keys:\n"}
{"snippet": "tournaments = set(d['tournament'] for d in d_results)\ntournaments\n", "intent": "<br>\nUse `set` to return the unique values for the tournaments played in our dataset have.\n"}
{"snippet": "number_of_acceptablecars = length(car$acc)\nnumber_of_acceptablecars\nnone_acceptable = rep(0, number_of_acceptablecars)\nfor (i in 1:number_of_acceptablecars) {\n    acceptabilitymodel[i] = car$acc[i]\n}\nacceptabilitymodel\n", "intent": "Prepare a vectorized model for acceptability.\n"}
{"snippet": "path_to_chromedriver = 'C:\\Users\\liuleo\\Documents\\Python\\chromedriver_win32\\chromedriver.exe' \nbrowser = webdriver.Chrome(executable_path = path_to_chromedriver)\nurl = 'https://www.ura.gov.sg/realEstateIIWeb/transaction/search.action'\nbrowser.get(url)\nbrowser.find_element_by_xpath('//*[@id=\"searchForm\"]/ul/li[2]/a').click()\n", "intent": "The webdriver is browser specific, for chorm you can find at http://chromedriver.storage.googleapis.com/index.html\n"}
{"snippet": "SF = []\nfor i in sf:\n    c = i.upper()\n    SF.append(c)\nSF\n", "intent": "Create a list of capitalized San Francisco neighborhoods\n"}
{"snippet": "packed_tuple = \"Jhon\", \"Doe\", 32, \"Male\"\nfirst, last, age, sex = packed_tuple\nprint(first, last, age, sex)\n", "intent": "Defining a tuple as comma separated values is also called packing. Unpacking separates the packed values to multiple variables.\n"}
{"snippet": "for x in future.result():\n    print(x)\n", "intent": "Unfortunately this is not very readable because result() returns a list. We can make it prettier by printing each record on its own line.\n"}
{"snippet": "wc = wordcount('lipsum.txt')\nprint(wc['bacon'], wc['filet'], wc['ham'])\n", "intent": "If your solution is correct, evaluating the following cell should produce `(1, 2, 3)` as output.\n"}
{"snippet": "triads_to_try = [('italy', 'italian', 'spain'), ('india', 'delhi', 'japan'), ('man', 'woman', 'boy'), ('small', 'smaller', 'large'),('man', 'success', 'woman')]\nfor triad in triads_to_try:\n    print ('{} -> {} :: {} -> {}'.format( *triad, complete_analogy(*triad,word_to_vec_map)))\n", "intent": "Run the cell below to test your code, this may take 1-2 minutes.\n"}
{"snippet": "import time\ndelay = 3\ndef title_modifier(lst):\n", "intent": "**modifier**\nA function which changes its arguments inside the function body. Only mutable types can be changed by modifiers.\n"}
{"snippet": "preg = nsfg.ReadFemPreg()\nlive = preg[preg.outcome == 1]\n", "intent": "Reads Data and keep alive babies\n"}
{"snippet": "thinkstats2.SpearmanCorr(live.agepreg, live.totalwgt_lb)\n", "intent": "Computes Spearman's correlation:\n"}
{"snippet": "my_list = []\nfor number in range(0, 1000):\n    if number % 2 == 0:\n        my_list.append(number)\n", "intent": "<br>\nLet's iterate from 0 to 999 and return the even numbers.\n"}
{"snippet": "a = State( NormalDistribution( 5, 1 ), \"a\" )\nb = State( NormalDistribution( 23, 1 ), \"b\" )\nc = State( NormalDistribution( 100, 1 ), \"c\" )\n", "intent": "Let's create the states for our FSM, this is the same way as one would create states for a HMM.\n"}
{"snippet": "model.add_transition( a, b, 0.33 )\nmodel.add_transition( a, a, 0.33 )\nmodel.add_transition( a, e, 0.33 )\nmodel.add_transition( b, c, 0.5 )\nmodel.add_transition( b, f, 0.5 )\nmodel.add_transition( c, e, 1.0 )\nmodel.add_transition( d, a, 1.0 )\nmodel.add_transition( e, d, 0.5 )\nmodel.add_transition( e, f, 0.5 )\nmodel.add_transition( f, a, 1.0 )\n", "intent": "Now lets connect the states acoording to possible transactions.\n"}
{"snippet": "print(\"The second element of 'mylist' is: \" + str(mylist[1]))\n", "intent": "To get the second element, we use an index of 1:\n"}
{"snippet": "a = \"Hello World\"\nb = len(a)\nprint(b)\n", "intent": "You can also \"nest\" functions inside one another like so:\n"}
{"snippet": "dict1['Ronnie'] = 15\ndict1\n", "intent": "We can also add values to our dictionary as follows:\n"}
{"snippet": "3.times { puts 'hello' }\n", "intent": "There are cell magics to execute cells in several non-Python languages -- for example, in Ruby...\n"}
{"snippet": "select * \nfrom R as r1, R as r2\nwhere\n(r1.X = r2.X and r1.Y = r2.Y) and (r1.W <> r2.W or r1.Z <> r2.Z);\n", "intent": "**_[5 points]_**\n$\\{X, Y\\}$ is a **superkey** for a relation $R(W,X,Y,Z)$.\n"}
{"snippet": "for num in range(10):\n    print( num, '-->', num * 10 )\n", "intent": "You can also work over a range of numbers, using range(). This is particulary useful is you need to do a certain things for a fixed number of times.\n"}
{"snippet": "numbers = [-5, 3, 2, -1, 9, 6]\nsum_pos, sum_neg = 0, 0\nfor n in numbers:\n    if n >= 0:\n        sum_pos += n\n    else:\n        sum_neg += n\nprint('sum of positive values:', sum_pos)\nprint('sum of negative values:', sum_neg)\n", "intent": "We could equally well calculate the positive and negative sums in a single loop:\n"}
{"snippet": "color[0] = 40\nprint('first element of color after change:', color[0])\n", "intent": "Unlike lists and arrays,\nthough,\ntuples cannot be changed after they are created&mdash;in technical terms,\nthey are [immutable](./gloss.html\n"}
{"snippet": "x = np.array([[1,2,3],[4,5,6]])\ny = np.ravel(x)\nprint y[4]\n", "intent": "Q3. Let x be array [[1, 2, 3], [4, 5, 6]]. Get the 5th element.\n"}
{"snippet": "x = np.array([2, 2, 1, 5, 4, 5, 1, 2, 3])\nu, indices = np.unique(x, return_counts=True)\nprint u, indices\n", "intent": "Q17. Let x be an array [2, 2, 1, 5, 4, 5, 1, 2, 3]. Get two arrays of unique elements and their counts.\n"}
{"snippet": "base_url = \"http://www.apress.com/in/blog/all-blog-posts\"\nblog_suffix = \"/wannacry-how-to-prepare/12302194\"\n", "intent": "Set the URL and blog post to be parsed\n"}
{"snippet": "def multiply(numbers):\n    result = 1\n    for n in numbers:\n        result *= n\n    return result\n", "intent": "____\n**Write a Python function to multiply all the numbers in a list.**\n    Sample List : [1, 2, 3, -4]\n    Expected Output : -24\n"}
{"snippet": "a=7\n{i:a for (i,j) in [(1,1),(1,2)]}\n", "intent": "Similar to list comprehensions, there are dictionary comprehensions that defines, in a single line, a for loop\nthat defines a whole table.\n"}
{"snippet": "print('Hello World 1')\nprint('Hello World 2')\n", "intent": "It only printed the second string which is why you need to use print statements\n"}
{"snippet": "print('Latitude: {0}, Longitude: {1} ==> [{0}, {1}]'.format('37.24N', '115.81W'))\n", "intent": "We can of course re-order and use multiple times the placeholders:\n"}
{"snippet": "val = 5\nprint(\"Value {d} does not appear in my_set: {tf}\".format(d=val, tf=(val not in some_set)))\nval = 1\nprint(\"Value {d} does not appear in my_set: {tf}\".format(d=val, tf=(val not in some_set)))\n", "intent": "We also have the \"`not in`\" operator\n"}
{"snippet": "ar[np.array([\n    [True, False],\n    [False, True],\n    [True, False],\n])]\n", "intent": "We can also pass boolean arrays as indices. These will exactly define which elements to select.\n"}
{"snippet": "pd.Series(data=my_list) \n", "intent": "** Using Lists**\n* Creating Pandas Series using Python Lists\n* pd.Series -> typical usage, it takes data and index as arguments\n"}
{"snippet": "from datetime import datetime \ndatetime.now()\n", "intent": "We can import specific names form a module without importing the module as a whole.\n"}
{"snippet": "myinst.newbool = False\nprint('myinst.__dict__ =', myinst.__dict__)\nprint('')\nprint('myClass.__dict__ =', myClass.__dict__)\n", "intent": "As with the class itself, attributes can be assigned to the instance object. \n"}
{"snippet": "response = requests.get(base_url+blog_suffix)\n", "intent": "Use requests library to make a get request\n"}
{"snippet": "state = env.reset()  \nenv.render()\n", "intent": "Let's know test our SARSA agent on a different environment\n"}
{"snippet": "t2 = table(x,  y, z, names = [:x, :y, :z])\n", "intent": "- We can use the keyword argument `names` to label the columns:\n"}
{"snippet": "select(stocks, (1, :Date))\n", "intent": "- Multiple selections return a table:\n"}
{"snippet": "print ('Hello World!')\n", "intent": "Double quotes and Single quotes both work!\n"}
{"snippet": "pair_rdd = sc.parallelize([(1,2), (3,4)])\nprint pair_rdd.collect()\n", "intent": "**Method 1:** `parallelize` a list of pairs.\n"}
{"snippet": "text_file = sc.textFile(data_dir+'/'+filename)\ntype(text_file)\n", "intent": "Note that, as execution is Lazy, this does not necessarily mean that actual reading of the file content has occured.\n"}
{"snippet": "def to_sq_rt(i):\n    return i**(1/2)\n", "intent": "Practice 1: create a map that transforms a list of integers into their square roots:\n"}
{"snippet": "Alpha = [[1, 1, 2], [3, 4, 8], [-2, 2, 1]]\nBeta = [3, 10, 7]\nnp.linalg.solve(Alpha, Beta).reshape(3, 1)\n", "intent": "$$\n\\begin{align}\nx + y + 2z & = 3 \\\\\n3x + 4y + 8z & = 10 \\\\\n-2x + 2y + z & = 7\n\\end{align}\n$$\n"}
{"snippet": "import numpy as np\nP = np.random.randint(1, 10, size=(3,3))\nQ = np.random.randint(1, 10, size=(3,3))\nR = np.asarray([[3,3,3], [3,3,3], [3,3,3]])\n", "intent": "$\\text{P and Q are similar if} P = R^{-1}QR$\n"}
{"snippet": "if response.status_code == 200:\n        content = response.text.encode('utf-8', 'ignore').decode('utf-8', 'ignore')\n        content = content.replace(\"\\n\", '')\n        blog_post_content = extract_blog_content(content)\n", "intent": "Identify and Parse blog content using python's regex library (re)\n"}
{"snippet": "f(x) = sin(x)\nlimit((f(x+h) - f(x))/ h, h, 0)\n", "intent": "The following code gives the answer but not the steps.\n"}
{"snippet": "fuv = lambda u,v: v*cos(u*v)/3\ndef guv(x,y): return 1\nIuv_mc = MonteCarlo_double(fuv, guv, -6, -3, -3*pi/4, -pi/2, 2000)\n", "intent": "Maybe it's a substituion problem.\n"}
{"snippet": "a, b = 3, 4\nstr = [string(a) * \" + \" * string(b), string(a+b)]\nfor i in str\n    println(i)\nend\n", "intent": "Declare two variables\n```julia\na = 3\nb = 4\n```\nand use them to create two strings:\n```julia\n\"3 + 4\"\n\"7\"\n```\n"}
{"snippet": "words = ['apple', 'banana', 'chicago', 'do', 'elephant']\ndict1={}\nfor w in words:\n    dict1[w]=len(w) \nprint dict1\nwords_dict = {w : len(w) for w in words} \nprint words_dict\n", "intent": "* dictionary comprehension\n"}
{"snippet": "(3. * u.nm**2 * u.Mpc / u.m**3).decompose()\n", "intent": "Level 2\n-------\nWhat is $3 \\mathrm{nm}^2 \\mathrm{Mpc} / \\mathrm{m}^3$ in dimensionless units?\n"}
{"snippet": "X=([0]*10000+[1]*23000+[2]*15532+[3]*10000)\nkeys=rand(len(X))\nR=sc.parallelize(zip(keys,X)).cache()\nR=R.repartitionAndSortWithinPartitions(2).map(lambda x:x[1])\n", "intent": "13.)\nSuppose R is an RDD that contains integer numbers in the range 0 to 3. Write code to efficiently compute and plot an approximate histogram.\n"}
{"snippet": "from pandas.tools.plotting import scatter_matrix\nscatter_matrix(df, alpha=0.1, figsize=(15, 15));\n", "intent": "The [scatter_matrix](http://pandas.pydata.org/pandas-docs/stable/visualization.html\n"}
{"snippet": "from IPython.display import HTML\nHTML('<iframe width=\"900\" height=\"608\" src=\"https://www.youtube.com/embed/NjGSl5-_1Sw\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>')\n", "intent": "<img src=\"../../../files/img/algebra/19-moon-quality.png\">\n"}
{"snippet": "from IPython.display import HTML\nHTML('<iframe width=\"960\" height=\"540\" src=\"https://www.youtube.com/embed/8BXX05HZkHY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>')\n", "intent": "<img src=\"../../../files/img/algebra/mimic-what-practice.png\">\n"}
{"snippet": "blog_post_content[0:500]\n", "intent": "View first 500 characters of the blogpost\n"}
{"snippet": "for i in range(10):\n    print i\n", "intent": "Since ``range(...)`` returns a list, it can therefore be used in a ``for`` loop:\n"}
{"snippet": "fig = ScatterMapFigure()\nfig.add(data, xgrid, ygrid, title, [], \"\", mapkwargs)\nfig.plot()\nsaveFigure(fig, \"genesis.png\")\nImage(\"genesis.png\")\n", "intent": "Plot the genesis points across the domain. \n"}
{"snippet": "len(cities[2]['residents'])\n", "intent": "We can then check, for instance, how many people currently reside in the third city:\n"}
{"snippet": "[2 ** x for x in range(30) if x % 3 == 0 ]\n", "intent": "You can write an `if` statement in comprehensions too: \n"}
{"snippet": "def doubler(*sequence):\n    return [x * 2 for x in sequence]\nprint(doubler(1, 2, 3, 'four'))\n", "intent": "Similiarly, if a `*` is used in the **definition** of a function, multiple\narguments are absorbed into a list **inside** the function:\n"}
{"snippet": "alphabet = {'a', 'b', 'c', 'd'}\n", "intent": "What is the alphabet of this language?\n"}
{"snippet": "print(\"Hello World\")\n", "intent": "To print a value to the screen, we use the function `print()`\ne.g. `print(1)`\n"}
{"snippet": "inp = input('Enter Fahrenheit Temperature:')\ntry:\n    fahr = float(inp)\n    cel = (fahr - 32.0) * 5.0 / 9.0\n    print(cel)\nexcept:\n    print('Please enter a number')\n", "intent": "This can be useful when evaluating a user's input, to make sure it is what you expected.\n"}
{"snippet": "print(sushi_order[-3])\n", "intent": "You can use negative indexing to get the last element of a list\n"}
{"snippet": "crawl_url = \"http://www.apress.com/in/blog/all-blog-posts\"\npost_url_prefix = \"http://www.apress.com\"\n", "intent": "Set the URL and get a list of blogs to be parsed\n"}
{"snippet": "raspberry_season = fruit_season['raspberry']\nprint(raspberry_season)\n", "intent": "To access a value, you index into it similarly to a list using square brackets.\n    value_of_key1 = my_dict['key1'] \n"}
{"snippet": "true_fruit_season = {\n    'raspberry': ['May', 'June'],\n    'apple': ['September', 'October', 'November', 'December'],\n    'peach': ['July', 'August'],\n    'grape': ['August', 'September', 'October']\n} \nprint (true_fruit_season)\n", "intent": "Let's use this to create a more realistic fruit season dictionary\n"}
{"snippet": "print np.__version__\n", "intent": "2 Print the numpy version and the configuration.\n"}
{"snippet": "(1.212).is_integer()\n", "intent": "Numbers are an instance of an object, which have methods that can act upon itself:\n"}
{"snippet": "print(2)\n    print(3)\n", "intent": "<img src = \"images/logo.jpg\", width=\"100\" align=\"left\">\n<br>Ram Narasimhan\n"}
{"snippet": "oil_temps = ['83.1', '103.8', '102.1', '94.0', '90.7', '81.9', '92.9', '87.4', '88.8', '97.6', \n'91.5', '84.8', '100.6', '89.9', '102.8', '83.0', '82.5', '104.6', '85.0', '89.6', \n'104.6', '98.6', '80.3', '95.2', '80.8', '86.1', '109.6', '82.1', '83.7', '82.2', \n'105.1', '92.3', '91.6', '95.3', '89.2', '109.6', '87.9', '100.6', '108.9', '106.8', \n'100.0', '103.5', '91.1', '106.0', '102.4', '100.8', '91.0', '81.0', '100.4', '95.5', \n'95.5', '106.7', '84.3', '88.3', '102.9', '107.3', '98.8', '94.7', '98.5', '93.9', \n'84.8', '108.7', '103.9', '98.2', '109.5', '84.8', '105.8', '85.6', '97.3', '107.0', \n'94.8', '85.8', '88.5', '108.4', '103.7', '89.2', '82.8', '99.5', '88.1', '102.6', \n'83.8', '109.3', '87.5', '92.5', '97.5', '104.4', '99.3', '98.3', '81.7', '87.4', \n'99.2', '95.1', '85.1', '83.3', '84.8', '82.6', '99.5', '93.8', '98.4', '109.8']\n", "intent": "We have 100 values of oil temperatures\n"}
{"snippet": "student_name = {1: 'Abe', 2: 'Betty', 3: 'charlie'}\n", "intent": "Dictionaries are **comma-separated key:value pairs, contained within {curly braces}**\n"}
{"snippet": "def print_hi_first(func):\n    def inner():\n        print('hi')\n        return func()\n    return inner\n", "intent": "Because a decorator is a wrapper around another function (so it's a function), you write it the same way you write any other function:\n"}
{"snippet": "print('{:<20s}'.format('abcde'))\nprint('{:>20s}'.format('abcde'))\nprint('{:^20s}'.format('abcde'))\nprint('{:.>20s}'.format('abcde'))\n", "intent": "... or you can modify your strings to pad them with spaces or other characters\n"}
{"snippet": "response = requests.get(crawl_url)\n", "intent": "Crawl recent posts on the website\n"}
{"snippet": "session.query(func.count(Passenger.survived))\\\n.filter(Passenger.survived == 1).all()\n", "intent": "List the total number of survivors\n"}
{"snippet": "session = Session(engine)\n", "intent": "It communicates through transactions and queries.\n"}
{"snippet": "def lesser_of_two_evens(a,b):\n    if a%2==0 and b%2==0 :\n        return min(a,b)\n    else :\n        return max(a,b)\n", "intent": "    lesser_of_two_evens(2,4) --> 2\n    lesser_of_two_evens(2,5) --> 5\n"}
{"snippet": "for n in range(11):\n    if n % 2 == 0 and n != 0:\n        print(n)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "def ran_bool(num,low,high):\n    if num >= low and num <= high:\n        return True\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "matrix = np.arange(1,26).reshape(5,5)\nmatrix\n", "intent": "Du wirst nun einige Matrizen sehen und deine Aufgabe ist es, die angezeigten Ergebnis-Outputs zu reproduzieren:\n"}
{"snippet": "def gencubes(n):\n    for num in range(n):\n        yield num**3\n", "intent": "Iterators and Generators - EXTRA NOTES\n"}
{"snippet": "i=5\nwhile(i>0):\n    print (i)\n    i -= 1            \n", "intent": "https://docs.python.org/3/reference/compound_stmts.html\nwhile (condition):\n"}
{"snippet": "def paper_doll(text):\n    return \"\".join([x*3 for x in text])\n", "intent": "    paper_doll('Hello') --> 'HHHeeellllllooo'\n    paper_doll('Mississippi') --> 'MMMiiissssssiiippppppiii'\n"}
{"snippet": "if response.status_code == 200:\n        blog_post_details = get_post_mapping(response.content)\n", "intent": "Extract blog post title and url from response object\n"}
{"snippet": "def rectange(x,y):\n    print '-' * int(x)\n    for i in range(0,y):\n        print '|' + ' '*int(x-2) + '|'\n    print '-' * int(x)\n    return\nrectange(3,5)\n", "intent": "E.g. if your function gets the inputs x=3, y =2, it should print out:\n```\n---\n| |\n| |\n---\n```\n"}
{"snippet": "import pandas as pd\npd.options.display.max_columns = 10\npd.options.display.max_rows = 10\n", "intent": "The notebook exercises below provide practice in basic data wrangling. We focus on the NYC Pizza Inspection Data Set.\n"}
{"snippet": "p1 = 1/3.\np2 = 1/3.\np3 = 1/3.\nc3 = 0\nc2 = 1.\nc1 = 1/2.\npd3 = c3*p3 + c2*p2 + c1*p1\n", "intent": "**B**: Using what we've learned about Bayes' rule, let's calculate the probability of winning if you switch or stay. \n"}
{"snippet": "x = 9.\ny = 2.\nz = x % y\nz\n", "intent": "Remainder 9 mod 2 is 1.0\n"}
{"snippet": "num = int(raw_input(\"Enter a number? \"))\nif num == 0:\n    print \"%d is zero\" %num\nelif (num % 2) == 0:\n    print \"%d is even\" %num\nelse:\n    print \"%d is odd\" %num\n", "intent": "Control statement in Python if then else (check even or odd)\n"}
{"snippet": "l = [1,2,[3,4,'hello']]\nl.pop()\nl.append([3,4,'goodbye'])\nl\n", "intent": "Reassign 'hello' in this nested list to say 'goodbye' item in this list:\n"}
{"snippet": "numbers = [2,5,4,6,8,1,3,9,7,0]\n", "intent": "Python indices lists beginning at 0 (not 1!), so the first element of a list is indexed by [0]  and the last element is (len(list)-1).\n"}
{"snippet": "a = [2,3,6,4,1]\nb = [1,5,6,0]\n", "intent": "Using the code above, write a program to print the elements of b that are not in a.\n"}
{"snippet": "number = int(input(\"Enter a positive number: \"))\nwhile number < 0:\n    number = int(input(\"%d is negative, enter another number: \" %(number)))\nprint(\"At last %d is positive.\" %(number))\n", "intent": "We can use a `while` loop to prevent the program from proceding until the correct input has been enetered.\n"}
{"snippet": "if blog_post_details:\n        print(\"Blog posts found:{}\".format(len(blog_post_details)))\n        for post in blog_post_details:\n            print(\"Crawling content for post titled:\",post.get('title'))\n            post_response = requests.get(post_url_prefix+post.get('url'))\n            if post_response.status_code == 200:\n                post['content'] = get_post_content(post_response.content)\n            print(\"Waiting for 10 secs before crawling next post...\\n\\n\")\n            sleep(10)\n        print(\"Content crawled for all posts\")\n", "intent": "For each recent post, crawl the content and parse plain text content using beautiful soup\n"}
{"snippet": "for student in studentInfo:\n    s = studentInfo[student]\n    print(s[\"matrix\"])\n", "intent": "Sometimes if the dictionary is deeply nested it is easier to use variables rather than writing all the whole dictionary.\n"}
{"snippet": "mult = 10\nprint(mul_add(2, 5, 2))\nprint(mult)  \n", "intent": "Even if we modify the parameter variable inside the function, the argument variable is unchanged. \n"}
{"snippet": "negatives = [1,4,-3,-4,5,6,-2]\n", "intent": "Remove all the negative numbers from the following list\n"}
{"snippet": "def message():\n    print(\"I called this without calling message()\")\notherName = message\n", "intent": "Functions can be used just like we use variables.\nLook at the following program...\n"}
{"snippet": "x = np.arange(0,10,1)\ny = np.arange(0,5,0.2)\nz = np.full(3, np.nan)\nprint(\"Integer array: \\n\", x, \"\\n\")\nprint(\"Float array: \\n\", y, \"\\n\")\nprint(\"Nan array: \\n\", z, \"\\n\")\n", "intent": "   * Integers\n   * Floats\n   * NaN\n"}
{"snippet": "elements = {'hydrogen': 1, 'helium': 2, 'carbon': 6}\n", "intent": "Let's revisit the elements dictionary,\n"}
{"snippet": "def count_primes(num):\n    count = 0\n    for i in range(num):\n        if i == 0 or i == 1:\n            continue\n", "intent": "    count_primes(100) --> 25\nBy convention, 0 and 1 are not prime.\n"}
{"snippet": "s = 'hello'\niter_s = iter(s)\n", "intent": "Use the iter() function to convert the string below into an iterator:\n"}
{"snippet": "import signal\nimport time\ndef receive_alarm(signum, stack):\n    print('Alarm :', time.ctime())\n", "intent": "**`Signal Handler`**\n"}
{"snippet": "for post in blog_post_details[:5]:\n    print(\"title:{}\\n-----------\".format(post['title']))\n    print(\"content:{}\\n\".format(post['content'][0:250]))\n", "intent": "Print Title and Content for first 5 posts\n"}
{"snippet": "def temperature_difference(temp1, temp2):\n    difference = temp1 - temp2\n    return difference\n", "intent": "Functions can take more than one argument. For instance, here's a function which calculates the difference between two temperatures:\n"}
{"snippet": "def print_characters(my_string):\n    for char in my_string:\n        print(char)\nprint_characters(\"GACT\")\n", "intent": "Let's think about `for` loops for solving our Hamming distance problem. We saw above how to loop over the characters in a string:\n"}
{"snippet": "print(heights[\"Sam\"])\n", "intent": "We can retrieve a value using its key. We use square brackets `[]`, just like getting an item from a list.\n"}
{"snippet": "def countDog(str):\n    count = 0\n    lst = str.split()\n    for element in lst:\n        if element == 'dog':\n            count = count + 1\n    return count\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "store = Bookstore(\"RMOTR's bookstore\")\n", "intent": "A bookstore contains books... Which in turn, contain authors\n"}
{"snippet": "typeof(my.named.list$one)\nlong.listed.list <- list(first = 1, second = list(2,3))\nlong.listed.list\ntypeof(long.listed.list$second)\n", "intent": "Lists are made up of atomic vectors or other lists\n"}
{"snippet": "my.df[1,2]\nclass(my.df[1,2])\n", "intent": "If working in a notebook factors are not displayed as such (it will do so in an interactive R session)\n"}
{"snippet": "conda install -c bioconda bowtie2\n", "intent": "Installing bowtie2\nUse the codna install function for installing bowtie2\n"}
{"snippet": "my_favs_doubled = []\nfor number in my_favorite_numbers:\n    doubled = 2 * number\n    my_favorite_numbers.append(doubled)\nmy_favs_doubled\n", "intent": "Write a `for`-loop to create a list called `my_favs_doubled` that doubles each number in `my_favorite_numbers`.\n"}
{"snippet": "myarray = np.array(mylist) \nmyarray\n", "intent": "Arrays work very similarly. The first way to create an array is from an already existing list:\n"}
{"snippet": "def func(number):\n    print(number)\ndef func(output=2):\n    print(output)\ndef func(*args):\n    for number in args:\n        print(number)\ndef func(**kwargs):\n    for key, value in kwargs.items():\n        print('%s: %s' % (key, value))\n", "intent": "---\n```python\ndef function_name(positional_argument, keyword=argument, *args, **kwargs):\n```\n"}
{"snippet": "out = [item**2 for item in x]\nout\n", "intent": "Membuat list secara otomatis dari setiap item di x dipangkatkan 2\n"}
{"snippet": "arr.reshape(1,25).shape\n", "intent": "jika array berdimensi `n`, `shape` akan mengembalikan banyak nilai di dimensi ke 1, 2, ... ,`n`\n"}
{"snippet": "promos = [fidelity_promo, bulk_item_promo, large_order_promo]\ndef best_promo(order):\n    return max(promo(order) for promo in promos)  \n", "intent": "choose best strategy by iterating over a list of functions\n"}
{"snippet": "suppressMessages(library(dplyr))\nres <- dataf %>% filter(grepl(\"^M\", state))\nres %>% head()\n", "intent": "<!-- label:dplyr_filter -->\n"}
{"snippet": "par(mfrow = c(1,2))\nhist(x)\ntruehist(x)\n", "intent": "A simple grid layout can be specified with the parameter `mfrow` or `mfcol`:\n"}
{"snippet": "np.array([1, 2, 3, 4])\n", "intent": "There are a number of ways to initialize new numpy arrays, for example from a Python list or tuples!\n"}
{"snippet": "def find_longest_word(word_list):\n    max_word=0\n    for w in word_list:\n        if len(w) > max_word:\n            max_word = len(w)\n    return max_word\nl = ['uydfguyfg', 'ffefu', \"kuurhr\", \"hggug\", \"hgrhggrel\"]\nfind_longest_word(l)\n", "intent": "Write a function `find_longest_word()` that takes a list of words and returns the length of the longest one\n"}
{"snippet": "(fit.lm <- lm(log(-res$atmSkew/res$atmVols) ~ log(res$expiries)))\n", "intent": "Figure 2: Empirical ATM skews term structure as of April 24, 2017.\n"}
{"snippet": "def largest_even_divide_num(limit):\n    a = range(1,limit +1)  \n    lcm = a[0]\n    for i in a:\n        lcm = int(int(lcm*i)/int(gcd(lcm, i)))\n    return (lcm)\nlargest_even_divide_num(10)\nlargest_even_divide_num(20)\n", "intent": "Problem \nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n"}
{"snippet": "curve(d.20regimes(x),from=-1.5,to=1.5,col=\"blue\")\n", "intent": "The resulting density is:\n"}
{"snippet": "evolveEulerF <- function(v,x,dt,Z,W,i){\n        v2 <- (v > 0) * v  \n        vf <- v - lambda*(v2-vbar)*dt +eta * sqrt(v2)*sqrt(dt)*W \n        x <- x  - (v+vf)/4*dt + sqrt(v2*dt) * Z\n        x <- x - log(mean(exp(x))) \n        v <- vf \n        return(cbind(x,v)) \n}\n", "intent": "Recall that this discretization reads:\n$$\nv_{t+\\Delta}=v_t - \\lambda\\,\\left(v_t^+-\\bar v\\right)\\,\\Delta+\\eta\\,\\sqrt{v_t^+}\\,\\sqrt{\\Delta}\\,Z.\n$$\n"}
{"snippet": "xi.vec <- c(vs[1],diff(vs*expiries)/diff(expiries))\n", "intent": "- We build a piecewise constant forward variance curve by differencing the variance swap curve.  \n"}
{"snippet": "plot(log(texp[-1]),log(-varskew.empirical[-1]),col=\"blue\",pch=20,\n    xlab=\"Log expiry\",ylab=\"Log skew\")\nabline(fit.lm, col=\"red\")\n", "intent": "From this, it seems that $H \\approx 0.14$.\n"}
{"snippet": "r <- 1.5\ncurve(svi(vogtParams,x),from=-r,to=r,col=\"blue\",lwd=2,\n      ylab=expression(w=sigma^2*T),xlab=\"Log-strike k\")\n", "intent": "Now let's take a look at the smile and graph the function $g(k)$:\n"}
{"snippet": "options(repr.plot.width=10,repr.plot.height=6)\n", "intent": "Figure 13: If we fit the slices independently, we see arbitrage\neverywhere!\n"}
{"snippet": "print(sviSliceArbitrageCheck(sviMatrix))\nprint(sviSliceArbitrageCheck(fit0))\nprint(sviSliceArbitrageCheck(fitSqrt))\nprint(sviSliceArbitrageCheck(fitQR))\n", "intent": "and then for butterfly arbitrage:\n"}
{"snippet": "cMJR <- function(S0, K, T, r, lambda, sigma){BSFormula(S0, K, T, r+lambda, sigma)};\nimpVolMJR <- function(k,lambda){BSImpliedVolCall(1, K= exp(k), T=0.25, r=0, \n   cMJR(S0=1, K=exp(k), T=0.25, r=0, lambda, sigma=0.2))}\n", "intent": "We now examine the dependence of the smile on the credit spread in the Merton jump-to-ruin model.\n"}
{"snippet": "print(head(spx.rk))\nprint(tail(spx.rk))\n", "intent": "Figure 1: Oxford-Man Log KRV estimates of SPX realized variance from January 2000 to the current date.\n"}
{"snippet": "sum([d for d in range(2,2000000+1) if check_prime(d)])\n", "intent": "Problem \nFind the sum of all the primes below two million.\n"}
{"snippet": "names(stock.prices) <- c('Mon','Tues','Wed','Thu','Fri')\nstock.prices\n", "intent": "Assign names to the price data points relating to the day of the week, starting with Mon, Tue, Wed, etc...\n"}
{"snippet": "filter(mtcars,mpg>20,cyl==6)\n", "intent": "**Return rows of cars that have an mpg value greater than 20 and 6 cylinders.**\n"}
{"snippet": "x <- 3 \nif (x%%2 == 0){\n    print('Even Number')\n}else{\n    print('Not Even')\n}\n", "intent": "**Ex 1: Write a script that will print \"Even Number\" if the variable x is an even number, otherwise print \"Not Even\":**\n"}
{"snippet": "tokenizer = MWETokenizer([('Data','For','Good'), ('natural', 'language', 'processing')])\ntokenizer.add_mwe(('wednesday', 'evening'))\ntokenizer.tokenize('BZU is hosting Data For Good natural language processing workshops on saturay evening'.split(),)\n", "intent": "**Multi-word Expression tokenizer**\n"}
{"snippet": "n = 6\nx = linspace(a, b, n + 1)\ny = f2(x)\nI4 = simps(y, x)\nI4\n", "intent": "**d) Single application of Simpson's 1/3 rule**\n"}
{"snippet": "a,*b, c = range(5)\na,b,c\n", "intent": "Try to predict and understand what this does:\n    a=5; b=7\n    a, b = b, a\n    a,b,c = range(3)\n    a, b, c = range(5)\n    a, b, *c = range(5)\n"}
{"snippet": "def run_both(n=100000):\n    count(n)        \n    jit_count(n)    \n", "intent": "Define a function that will run both `count()` and `jit_count()`:\n"}
{"snippet": "import pandas as pd\nfrom bokeh.models import Range1d, ColumnDataSource\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\nfrom bokeh.tile_providers import STAMEN_TONER\nfrom pyproj import transform, Proj\noutput_notebook()\n", "intent": "Python imports you need include:\n"}
{"snippet": "def false_color_veg(x_range, y_range, w, h):\n    return combine_bands(r, g, b)\n", "intent": "(Red=Near Infrared, Green=SWIR 1, Blue=Coastal)\n"}
{"snippet": "import pylab as pl\nts = data['speed']\nts.plot(rot=90)\npd.rolling_mean(ts, 10).plot(style='g', rot=90)\n", "intent": "http://pandas.pydata.org/pandas-docs/stable/computation.html\n"}
{"snippet": "adapter.num_records\n", "intent": "The PostgreSQL adapter has a few properties that we can use to find out more about our data. We can get the number of records in our dataset:\n"}
{"snippet": "a = np.array([1,2,3,4])\nprint(a)\nb = np.roll(a,-1)\nprint(b)\n", "intent": "We used slicing to do a right shift on a 1-D array.  Do a left shift on a 1-D array.\n"}
{"snippet": "print('True or False is', True or False)\nprint('True and False is', True and False)\nprint('True or True is', True or True)\nprint('not True is', not True)\n", "intent": "Values can be combined logically using ``or``, ``and``, or ``not``.\ndisjunction | conjunction | negation \n:-:|:-:|:-:\n`or` | `and` | `not` \n"}
{"snippet": "int((-5)/3) == int(-(5/3))\n", "intent": "How can you correctly compare the integer value of `-(5/3)` and `(-5)/3` and avoid trucation.\n"}
{"snippet": "{city['state'] for city in cities if city['pop'] > 600000}\n", "intent": "A `set` of the states that have cities with populations greater than 600,000 people.\n"}
{"snippet": "print(myfunc(3, 6, \"None\"))\n", "intent": "<img src=\"img/decorator_args.png\" width=800px height=800px/>\n"}
{"snippet": "'{:10s}'.format('short')\n", "intent": "The same works to *pad* strings on the right, or pad on the left with `>`.\n"}
{"snippet": "r = [x.split('') for x in r]\nr\n", "intent": "Now, vectorize each sentence so that each sentence is a list of words. You should now have a list of lists\n"}
{"snippet": "list = range(10)\nfor l in list:\n    if (l%2 == 0):\n        print(\"even\")\n    else: \n        print(\"odd\")\n", "intent": "Write some code that creates a list of integers, loops through each element of the list, and only prints out even numbers!\n"}
{"snippet": "df1.Country.nunique()\n", "intent": "We need to do santity check about the data\n"}
{"snippet": "project_walltime.values().take(5)\n", "intent": "A `values` method is also available.\n"}
{"snippet": "index = np.where(array_seating_arrangement==1)[0][0]\narray_seating_arrangement = np.roll(array_seating_arrangement, -index)\n", "intent": "**Shifting the array so 1 is at the first position**\n"}
{"snippet": "from IPython.display import display, Image, SVG, Math, YouTubeVideo\ni = Image(filename='8 puzzle.png')\ndisplay(i)\n", "intent": "In this part, we will utilize A* algorithm in a puzzle game.\n"}
{"snippet": "600851475143.0/(71*839*1471*6857)\n", "intent": "- Therefore, if we solve for the biggest prime factor of $X$, we've solved for the biggest prime factor of 600,851,475,143\n"}
{"snippet": "total = 0\nfor square in range(501):\n    list_temp = dict_square_elements[square]\n    step_size = 2*square\n    if step_size > 0:\n        list_temp = list_temp[step_size-1::step_size]\n    sum_val = sum(list_temp)\n    total += sum_val\n", "intent": "- Now, we take the sums by skipping values\n"}
{"snippet": "for n in range(1,25):\n    print(n, len(str(9**n)))\n", "intent": "- Since we can't loop through all possible $n$ values, let's see how big $9^{n}$ can get\n"}
{"snippet": "wordCountsCollected = (wordsRDD\n                       .map(lambda w: (w,1))\n                       .reduceByKey(lambda a,b: a+b)\n                       .collect())\nprint wordCountsCollected\n", "intent": "The expert version of the code performs the `map()` to pair RDD, `reduceByKey()` transformation, and `collect` in one statement.\n"}
{"snippet": "print(empty_list[2])\nprint(empty_list[3][1])\n", "intent": "After you have filled a list, you can access its elements like you would with an array.\n"}
{"snippet": "knn_model_rwc_quiz = graphlab.nearest_neighbors.create(people_quiz,\n                                                      features=['word_count'],\n                                                      label='name',\n                                                      distance='cosine')\n", "intent": "* Stephen Dow Beckham\n* Louis Molloy\n* Adrienne Corri\n* Mary Fitzgerald (artist) (Selected)\n"}
{"snippet": "df1.UnitPrice.min()\n", "intent": "Check the min and max values in Unit price column\n"}
{"snippet": "print(voltages[0:len(voltages)])  \nprint(voltages[:])                \n", "intent": "Note: when taking slices, the elements returned **include** the **starting** index but **exclude** the **final** index.  \n"}
{"snippet": "print(listofsillypeople[1])\n", "intent": "Retrieve the \"Chapman\" field from listofsillypeople.\n"}
{"snippet": "genos = ['AA', 'GG', 'AG', 'AG', 'GG']\ngenos_new = []  \n", "intent": "Create a new list which has the converted genotype for each subject ('AA' -> 0, 'AG' -> 1, 'GG' -> 2).\n"}
{"snippet": "ratio = mass / age\nprint 'pounds per year:', ratio\n", "intent": "And of course,\nwe can use one variable to calculate a value for another:\n"}
{"snippet": "def make_thumbnail(filename, width):\n    picture = novice.open(filename)\n    new_height = int(picture.height * float(width) / picture.width)\n    picture.size = (width, new_height)\n    return picture\n", "intent": "A better design is to require users to tell us how wide they want thumbnails to be:\n"}
{"snippet": "grid.lines_on = True\ngrid[0, 0] = (0, 255, 0)\ngrid.show()\n", "intent": "We're finally ready to change the color of one cell of our grid:\n"}
{"snippet": "from ipythonblocks import ImageGrid, colors \nrow = ImageGrid(6, 1)\nrow[1, 0] = colors['Orchid']\nrow[5, 0] = colors['Orchid']\nrow.show()\n", "intent": "Let's create another grid and color a few cells:\n"}
{"snippet": "filled_incorrectly = ImageGrid(12, 1)\ncolor_from_string(filled_incorrectly, 'GGGGGGRRRPRR')\nfilled_incorrectly.show()\n", "intent": "We can check more than just the lengths of the row to be filled and the input string,\nand we should.\nHere's another mistaken call to our function:\n"}
{"snippet": "import ears\nears.run()\n", "intent": "Let's try running that:\n"}
{"snippet": "df1 = df1[(df1['Quantity']>0)]\ndf1.Quantity.min()\n", "intent": "Remove the negative values in Quantity column\n"}
{"snippet": "all_keys = birthdays.keys()\nprint all_keys\n", "intent": "* Use the `keys` and `values` methods to get lists of keys and values\n"}
{"snippet": "print type(myinteger) == int\nprint type(myfloat) == float\nprint type(mystring) == str\n", "intent": "Confirm that the types are int, float, and string by running the following expressions.\n"}
{"snippet": "print digitsdict[\"nine\"] + digitsdict[\"seven\"]\n", "intent": "Predict the output of the following command\n"}
{"snippet": "fruit = {\"apple\", \"banana\", \"pear\", \"banana\"}\nprint fruit\n", "intent": "The Python set type is similar to the idea of a mathematical set: it is an unordered collection of unique things. Consider:\n"}
{"snippet": "myadd = loud(myadd)\nmyadd(42, 65)\n", "intent": "Most of the time such functions may be used such that the original function name is preserved.\n"}
{"snippet": "from stats import mean\ndef test_mean():\n    assert mean([0, 0, 0, 0]) == 0\n    assert mean([0, 200]) == 100\n    assert mean([0, -200]) == -100\n    assert mean([0]) == 0\ndef test_floating_mean():\n    assert mean([1, 2]) == 1.5\n", "intent": "**Test File:** `test_mean.py`\n"}
{"snippet": "plot(m_times_1,m_hights_1, \"*\",m_times_2,m_hights_2, \"*\")\nxlabel(\"Time\");ylabel(\"Height\")\n", "intent": "We can compare both approaches\n"}
{"snippet": "last_value = 1\nfor y in legislators:\n    if y[7] == 0:\n        y[7] = last_value\n    last_value = y[7]\nprint(legislators)\n", "intent": "Notice that the birth year is almost ordered in chronological order. we can replace the missing value with the birth year in last row\n"}
{"snippet": "for pos, e in enumerate(b):\n    if 'i' in e:\n        b[pos] = e.replace('i', '1')\n    if 'I' in e:\n        b[pos] = e.replace('I', '1')\nprint('My new list \"b\" is: ', b)\n", "intent": "Replace every lower- or upper-case letter 'i' in the list b with a '1'.\n"}
{"snippet": "def unique_counts(df1):\n   for i in df1.columns:\n       count = df1[i].nunique()\n       print(i, \": \", count)\nunique_counts(df1)\n", "intent": "Check unique value for each column\n"}
{"snippet": "d_options = {option.text.strip(): option.get_attribute(\"value\") for option in district_options if option.get_attribute(\"value\").isdigit()}\nprint(d_options)\n", "intent": "Now we'll make a dictionary associating each name with its value.\n"}
{"snippet": "  1:30\n  x <- 1:30\n  x\n  x_seq <- seq(1, 5, 0.5)\n  x_seq\n  x_vector <- c(1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5)\n  x_vector\n", "intent": "In addition to loading in a dataset as described above, we can also create our own data in R.  \n"}
{"snippet": "round(qt(0.95, t_values$parameter), 2) \n", "intent": "A two-sided t-test at 10% significance level, the critical t-value under the degress of freedom above would be:\n"}
{"snippet": "model.vocab[indexes]\n", "intent": "Its possible to get the words of those indexes\n"}
{"snippet": "num = [20, 43, 12, 88, 97]\nfor number in num:\n    if number > 100:\n        print(number, 'is high')\n", "intent": "*   Not much point using a conditional when we know the value (as above).\n*   But useful when we have a collection to process.\n"}
{"snippet": "def combine_outputs(dicts):\n    return output\n", "intent": "Now let's write a function that takes a list of output recommendation dictionaries and creates a new one that is the combination of all of them. \n"}
{"snippet": "clinton = people[people['name'] == 'Bill Clinton']\n", "intent": "Let's manually compare the distances between the articles for a few famous people.\n"}
{"snippet": "w = data[['race', 'call']][data.race=='w'] \nb = data[['race', 'call']][data.race=='b']\ndf = data[['race', 'call']]\n", "intent": "<div class=\"span5 alert alert-success\">\n<p>Your answers to Q1 and Q2 here</p>\n</div>\n"}
{"snippet": "print('The weighted sum of the inputs at the node in the output layer is {}'.format(np.around(z_2, decimals=4)))\n", "intent": "Print the weighted sum of the inputs at the node in the output layer.\n"}
{"snippet": "df1['TotalPrice'] = df1['Quantity'] * df1['UnitPrice']\ndf1.head()\n", "intent": "Add a column for total price\n"}
{"snippet": "[x - y for x in range(4) for y in range(4)]\n", "intent": "If you have multiple `for` statements in a comprehension, you get a single list generated over all the pairs\n"}
{"snippet": "p1 = subprocess.Popen(['echo', 'Hello World'], stdout=subprocess.PIPE)\nechoout, echoerr = p1.communicate()\np2 = subprocess.Popen(['sed','s/World/There/'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)\np2.communicate(input=echoout)\n", "intent": "Finally, we can use these pipes to move data from one system command to another, creating a python pipeline of external programs.\n"}
{"snippet": "n_range= n[-1]-n[0]\nn_range\n", "intent": "data is positively skewed\n"}
{"snippet": "[{\"event_type\": \"started-mission\", \"keen\": {\"created_at\": \"2015-06-12T23:09:03.966Z\", \"id\": \"557b668fd2eaaa2e7c5e916b\", \"timestamp\": \"2015-06-12T23:09:07.971Z\"}, \"sequence\": 1}, {\"event_type\": \"started-screen\", \"keen\": {\"created_at\": \"2015-06-12T23:09:03.979Z\", \"id\": \"557b668f90e4bd26c10b6ed6\", \"timestamp\": \"2015-06-12T23:09:07.987Z\"}, \"mission\": 1, \"amount\":\"$3k\", \"sequence\": 4, \"type\": \"code\"}, {\"event_type\": \"started-screen\", \"keen\": {\"created_at\": \"2015-06-12T23:09:22.517Z\", \"id\": \"557b66a246f9a7239038b1e0\", \"timestamp\": \"2015-06-12T23:09:24.246Z\"}, \"mission\": 1, \"amount\":\"$2k\", \"sequence\": 3, \"type\": \"code\"} ]\n", "intent": "How about [this JSON](./assets/datasets/test.json)? Is it valid?\n"}
{"snippet": "z = list('abcdefg')\nfor i in range(len(z)):\n    print('The index is ' + str(i) + ' and the value is ' + z[i])\n", "intent": "Let's say we're in a `for` loop, and we want to print out the index as well as the object as we loop through a list. We could do it like this:\n"}
{"snippet": "myList2 = list('abcdefghijklmnop')\n", "intent": "**Question 10:** Reverse the list below. \n"}
{"snippet": "print(my_list + my_list2)\n", "intent": "Just like with strings, we can use the `+` and `*` operators to perform concatenation and replication operations on lists. \n"}
{"snippet": "while True:\n    try:\n        x = int(input('Please input an integer: '))\n        print('Good Choice!',x)\n        break\n    except ValueError:\n        print('That is not an integer dummy!')\n        break\n", "intent": "**Question 9:** Write a program that asks for integer input. Use a while loop with a try/except block to account for incorrect inputs. \n"}
{"snippet": "rostopic list                    \n", "intent": "Lets see some commands related to topics:\n"}
{"snippet": "df1['InvoiceDate'].min()\n", "intent": "Find out first and last order date in the data\n"}
{"snippet": "rossrv show std_srvs/SetBool\n", "intent": "There is no request & response message type. You can use this srv if you don't need both of the message types.\n"}
{"snippet": "rostopic pub /demo_as/cancel actionlib_msgs/GoalID \"stamp:\n  secs: 0\n  nsecs: 0\nid: ''\" \n", "intent": "While running, open new tab and publish cancel request to the server\n"}
{"snippet": "using Images, Colors, ImageCore\n", "intent": "First install the necessary image manipulation packages and load them:\n"}
{"snippet": "Vol{Int64}(1) + Vol{BigInt}(3)\n", "intent": "However, this may be too restrictive; for example, we may wish to be able to add volumes with different integer types inside:\n"}
{"snippet": "Rational{Int} <: Rational\n", "intent": "We also have a subtype relationship:\n"}
{"snippet": "v = rand(2)\nnormalize!(v)    \nv /= norm(v)     \n", "intent": "and an initial non-zero, normalized vector:\n"}
{"snippet": "log10(2)*precision(M[1,1])\n", "intent": "which is about 77 decimal digits:\n"}
{"snippet": "(A::AveragingOp)(v) = A*v\n", "intent": "We can even define $\\mathcal{L}(\\mathbf{v})$:\n"}
{"snippet": "macro simple(ex)\n    show(ex)\n    return nothing\nend\n", "intent": "A macro takes an expression as argument:\n"}
{"snippet": "print(\"The first element of 'myarray' is: \" + str(myarray[0]))\nprint(\"The second element of 'myarray' is: \" + str(myarray[1]))\n", "intent": "We can get elements from a NumPy array in exactly the same way as we get elements from a list:\n"}
{"snippet": "interval = alt.selection_interval()\nalt.Chart(cars).mark_point().encode(\n    x='Miles_per_Gallon',\n    y='Horsepower',\n    color=alt.condition(interval, 'Origin', alt.value('lightgray'))\n).properties(\n    selection=interval\n)\n", "intent": "Currently this selection doesn't actually do anything, but we can change that by conditioning the color on this selection:\n"}
{"snippet": "alt.Chart(iris).mark_rect().encode(\n    x=alt.X('petalLength', bin=True),\n    y=alt.Y('sepalLength', bin=True),\n    color='count()'\n)\n", "intent": "Binning and aggregation works in two dimensions as well; we can use the ``rect`` marker and visualize the count using the color:\n"}
{"snippet": "alt.Chart(cars).mark_tick().encode(\n    x='Miles_per_Gallon',\n    y='Origin',\n    color='Cylinders'\n)\n", "intent": "Let's look at a simple plot containing three of the columns from the cars data:\n"}
{"snippet": "alt.Chart(stocks).mark_line().encode(\n    x='date:T',\n    y='price:Q',\n    color='symbol:N'\n)\n", "intent": "Here is a simple line plot for the stocks data:\n"}
{"snippet": "interval = alt.selection_interval()\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin'\n).properties(\n    selection=interval\n)\n", "intent": "To add selection behavior to a chart, we create the selection object and add it to the chart's properties:\n"}
{"snippet": "tesla_model_s = Vehicle(4, 'electric', 5, 250)\nprint(tesla_model_s.number_of_wheels) \ntesla_model_s.number_of_wheels = 2 \nprint(tesla_model_s.number_of_wheels) \n", "intent": "And we can use these methods as attributes:\n"}
{"snippet": "friends = ['Curly', 'Moe', 'Larry', 'Tweedle Dee', 'Tweedle Dumb']\nprint(friends)\n", "intent": "'Curly', 'Moe', 'Larry', 'Tweedle Dee', 'Tweedle Dumb'\n"}
{"snippet": "ricci = ricci_raw.applyfunc(lambda x: x.simplify())\nricci\n", "intent": "The Ricci-Tensor is not zero anymore!\nLet's simplify:\n"}
{"snippet": "is_prime = 10*[True]\nis_prime\n", "intent": "One thing you may (or may not) find useful is to create a list like this:\n"}
{"snippet": "(NOW - dt.datetime(2011,1,18)).days==326\n", "intent": "The first customer has shopped only once, bought one item at a huge quantity(74215). The unit price is very low, seems a clearance sale.\n"}
{"snippet": "n = 0\ncounter = 0\nwhile counter <= 100: \n    if isprime(n): \n        print n\n        counter += 1\n    n += 1\n", "intent": "**Question**: Write a loop to print the first 100 prime numbers:\n"}
{"snippet": "print mylist[0], mylist[1], mylist[2], mylist[3]\n", "intent": "The indexing (numbering) always starts from zero. \n"}
{"snippet": "x = [1,2,3]\ny = x\nprint x, y\ny[0] = 999\nprint x, y\n", "intent": "`x` didn't change. \nNow try doing a similar thing for lists:\n"}
{"snippet": "xs=[1,2,3,4]\nys = xs\nys[0] = 0\nxs\n", "intent": "An important thing about slicing is that it actually makes a new list:\n"}
{"snippet": "v = Vector(1,2,3)   \n", "intent": "This creates the vector $\\langle 1, 2, 3\\rangle$:\n"}
{"snippet": "tokenRDD2 = tokenRDD1.filter(lambda x: x[1]>100).cache()\nprint_count(tokenRDD2)\nprint_tokens(tokenRDD2.top(20, lambda x:x[1]))\n", "intent": "original time: 138 ms\n"}
{"snippet": "df = pd.concat([series_a, series_b], axis=1)\ndf\n", "intent": "`DataFrame`: _\"Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns).\"_\n"}
{"snippet": "my_list = [1, 2, 3]\nprint(my_list)\n", "intent": "A `list` in Python is an ordered collection of objects that can contain any data type. We define a `list` using brackets (`[]`).\n"}
{"snippet": "str_1, str_2, int_1 = my_other_tuple\nprint(str_1, str_2, int_1)\n", "intent": "We can 'pack' values together, creating a tuple (as above), or we can 'unpack' values from a tuple, taking them out.\n"}
{"snippet": "segmented_rfm = rfmTable\n", "intent": "Create a segmented RFM table\n"}
{"snippet": "a = point_maker(0, 10)\nb = point_maker(5, 3)\ndef calculate_slope(point_a, point_b):\n", "intent": "This above function returns an ordered pair of the input parameters, stored as a tuple.\n"}
{"snippet": "print \"{0} {1}, its {2}, time for some tea.\".format(d,e,1500)\n", "intent": "You can also use some shiny formatting tricks with .format().\n"}
{"snippet": "arr[::4], arr[4::3], arr[95::-5]\n", "intent": "This allows some creative slicing opportunities!\n"}
{"snippet": "vso.attrs.Instrument('AIA')\n", "intent": "The `Time` attribute, specifies a time range for the data, you must specify a start and an end value to `Time`.\n"}
{"snippet": "storageLocation = \"s3://dimajix-training/data/weather\"\n", "intent": "First we load the weather data, which consists of the measurement data and some station metadata.\n"}
{"snippet": "joined_weather = weather.join(stations, (weather.usaf == stations.USAF) & (weather.wban == stations.WBAN))\nresult = joined_weather.groupBy(joined_weather.CTRY, joined_weather.year).agg(\n        min(when(joined_weather.air_temperature_qual == lit(1), joined_weather.air_temperature)).alias('min_temp'),\n        max(when(joined_weather.air_temperature_qual == lit(1), joined_weather.air_temperature)).alias('max_temp')\n    )\nresult.explain(True)\n", "intent": "First let's have the execution plans of the original query as our reference.\n"}
{"snippet": "cp_weather.explain(True)\n", "intent": "Let us have a look at the execution plan of the checkpointed DataFrame\n"}
{"snippet": "result = raw_weather.select(extract_weather(raw_weather[\"value\"]).alias(\"measurement\"))\nresult.limit(5).toPandas()\n", "intent": "Now we can use the modified UDF and check if the accumulators are used.\n"}
{"snippet": "result = weather_rep.groupBy(weather[\"usaf\"], weather[\"wban\"]).agg(\n        min(when(weather_rep.air_temperature_qual == lit(1), weather_rep.air_temperature)).alias('min_temp'),\n        max(when(weather_rep.air_temperature_qual == lit(1), weather_rep.air_temperature)).alias('max_temp'),\n)\nresult.explain()\n", "intent": "Now let us perform the same aggregation, but this time let's use the preaggregated weather data set `weather_rep` instead.\n"}
{"snippet": "segmented_rfm.head()\n", "intent": "Add segment numbers to the RFM table\n"}
{"snippet": "result = \nresult.explain()\n", "intent": "Let read in the raw data and add a filter operation that refers to the bucketing columns.\n"}
{"snippet": "from pyspark.sql.types import *\nselect_longest_udf = udf(select_longest, StringType())\n", "intent": "Now we have to encapsulate the Python function into a Spark UDF.\n"}
{"snippet": "import builtins\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\n@pandas_udf('string', PandasUDFType.SCALAR)\ndef select_longest(series):\n", "intent": "Of course a Pandas UDF might improve performance significantly. Let's try that instead of the classic Python UDF.\n"}
{"snippet": "result.plot(x='timestamp', y=['temp','avg_temp'], figsize=[16,8])\n", "intent": "In order to verify our approach, let's draw a picture with Matplotlib, which shows the current temperature and the sliding average in a single plot.\n"}
{"snippet": "raw_input(\"Hit return\")\n", "intent": "What built-in function can be called from within your program to read in data from the command line?\n"}
{"snippet": "def countDog(string):\n    return string.lower().split().count('dog')\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "lst = [10,20,30,40,50]\nbiggest = 0\nsmallest = max(lst)\nfor val in lst:\n    if val > biggest:\n        biggest = val\n    if val < smallest:\n        smallest = val\nprint('The largest values is %d. The smallest value is %d' % (biggest, smallest))\n", "intent": "Add code to the script you just wrote to find the smallest value and print that as well.\n"}
{"snippet": "j = pyfits.getdata('/astro/ferguson1/ferguson/python_course/hlsp_hudf09_hst_wfc3ir_hudf09_F125W_v1_sci.fits')\nh = pyfits.getdata('/astro/ferguson1/ferguson/python_course/hlsp_hudf09_hst_wfc3ir_hudf09_F160W_v1_sci.fits')\nweight = pyfits.getdata('/astro/ferguson1/ferguson/python_course/hlsp_hudf09_hst_wfc3ir_hudf09_F160W_v1_wht.fits')\n", "intent": "Read in a few images:\n"}
{"snippet": "my_favs_doubled = []\nfor x in my_favorite_numbers:\n    my_favs_doubled.append(x*2)\nprint(my_favs_doubled)\n", "intent": "Write a `for`-loop to create a list called `my_favs_doubled` that doubles each number in `my_favorite_numbers`.\n"}
{"snippet": "segmented_rfm[segmented_rfm['RFMScore']=='111'].sort_values('monetary_value', ascending=False).head(10)\n", "intent": "Here is top 10 of our best customers!\n"}
{"snippet": "num = -4\nres = num**0.5\nres / int(res) == 1\n", "intent": "The problem appears to be solved, but wait, what if a negative number is passed?\n"}
{"snippet": "data_dir = 'queries'\nh5denorm = \"compression/blosc-zstd-5-shuffle-denorm.h5\"\nh5norm = \"compression/blosc-zstd-5-shuffle.h5\"\n", "intent": "We'll be using the same datasets again, but we'll copy them, to add indexes: \n"}
{"snippet": "f['some_dataset'] = [0, 1, 2]\n", "intent": "`We now have a \"regular\" (high-level interface) `h5py.File` object:\n"}
{"snippet": "def countDog(x):\n    x.count('dog')\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "def gain(targets, attr_values):\n    unique = set(attr_values)\n    reduction = 0\n    for elem in unique:\n        indices = [index for index,value in enumerate(attr_values) if value == elem]\n        s_v = [targets[index] for index in indices]\n        reduction += attr_values.count(elem)/len(attr_values)*entropy(s_v)\n    return entropy(targets) - reduction\n", "intent": "$$\\operatorname{Gain}(S,A) = \\operatorname{Entropy}(S) - \\sum_{v \\in \\operatorname{Values}(A)} \\frac{|S_v|}{|S|} \\operatorname{Entropy}(S_v)$$\n"}
{"snippet": "from pyspark import SparkContext\nsc = SparkContext(master=\"local[4]\")\nsc\n", "intent": "We start by creating a **SparkContext** object named **sc**. In this case we create a spark context that uses 4 *executors*\n"}
{"snippet": "import itertools      \nd ={'1':['a','b'], '2':['c','d']}\nfor combo in itertools.product(*[d[k] for k in sorted(d.keys())]):\n    print(''.join(combo))\n", "intent": "* Sample data : {'1':['a','b'], '2':['c','d']}\nac\nad\nbc\nbd\n"}
{"snippet": "for i in range(10):\n    print(str(i) * i)\n", "intent": "1\n22\n333\n4444\n55555\n666666\n7777777\n88888888\n999999999\n"}
{"snippet": "door1 = Door(1, 'closed')\ndoor2 = Door(2, 'closed')\n", "intent": "Pay attention: the `colour` attribute here is not created using `self`, so it is contained in the class and shared among instances\n"}
{"snippet": "df.describe().printSchema()\n", "intent": "If you get stuck on this, don't worry, just view the solutions.\n"}
{"snippet": "contour(-grid_ra, grid_dec, grid_power, 50, cmap=cm.jet)\naxis('image')\nxlabel('Right Ascension (degrees)')\nylabel('Declination (degrees)')\n", "intent": "There are two popular ways to plot such an image: as a contour plot or a bitmap image. Here are some examples of how to do this:\n"}
{"snippet": "for k in d.keys():\n    print(k)\n", "intent": "Dictionaries can be iterated over using the iter methods available in a dictionary. For example:\n"}
{"snippet": "long_string = \"This is a really really loooooong string\"\nprint long_string\n", "intent": "You can also use the backslash\n"}
{"snippet": "date_str = \"01-10-2015\"\ndate_ts = dt.datetime.strptime(date_str,\"%m-%d-%Y\")\nprint date_ts\nprint type(date_ts)\n", "intent": "Convert a string to datetime format\n"}
{"snippet": "{True:'yes', 1:'no', 1.0:'maybe'}\n", "intent": "1. Python does not have switch/case statement\n"}
{"snippet": "arr6 = np.random.rand(10,10)\narr6_min = np.min(arr6[1,:])\narr6_max = np.max(arr6[:,3])\nprint arr6\nprint \"The minimum value of the 2nd row is \"+str(arr6_min)+''\nprint \"The maximum value of the 4th column is \"+str(arr6_max)+''\n", "intent": "Create a 10x10 array with random values. Find \n- the minimum value of the 2nd row\n- the maximum value of the 4th column\n"}
{"snippet": "verse = 8*n + 2*h + gb + \"\\n\"\n", "intent": " Define a variable `verse` that contains 8 copies of `n`, 2 copies of `h`, one copy of `gb`, and a newline, in that order. \n"}
{"snippet": "print(min(small_list))\nprint(max(small_list))\n", "intent": "Print the smallest and largest elements of `small_list`.\n"}
{"snippet": "my_string = \"Hello World\"\nprint(my_string)\nprint(type(my_string))\n", "intent": "Two other basic data types in Python are `str` and `bool`. \n"}
{"snippet": "cursor.execute(\"SELECT name FROM sqlite_master\").fetchall()\n", "intent": "a shortcut to directly execute the query and gather the results is the `fetchall` method:\n"}
{"snippet": "arr5 = np.array([[3, 2],[8, 8],[7, 6],[8, 2],[5, 9]])\nprint(arr5)\n", "intent": "* In a multidimensional array, you access items using a comma-separated tuple of indices.\n"}
{"snippet": "arr22 = np.arange(-8,8).reshape(4, 4)\nprint(arr22)\n", "intent": "* Let's some of the ufuncs in action.<br>\n"}
{"snippet": "census = list(csv.reader(open(\"census.csv\",\"r\")))\n", "intent": "Reading census data\n"}
{"snippet": "def main():\n    print 'match_ends'\n    test(match_ends(['aba', 'xyz', 'aa', 'x', 'bbb']), 3)\n    test(match_ends(['', 'x', 'xy', 'xyx', 'xx']), 2)\n    test(match_ends(['aaa', 'be', 'abc', 'hello']), 1)\n", "intent": "Calls the above functions with interesting inputs.\n"}
{"snippet": "Base.show{n}(io::IO, k::ModInt{n}) = print(io, \"$(k.k) mod $n\")\n", "intent": "First, some nicer display:\n"}
{"snippet": "celsius = [0,10,20.1,34.5]\n", "intent": "Can also do more complicated arithmetic:\n"}
{"snippet": "len('Hello World, why do you suck')\n", "intent": "We can also use a function called len() to check the length of a string!\n"}
{"snippet": "num = 123 \nprint(\"%05d\" % 123)\n", "intent": "Output the following integer in 5 digits. Add '0' to the front of the integer if it has less than 5 digits.\nFro example: 123 should be print as 00123\n"}
{"snippet": "git pull origin master\n", "intent": "If the master branch has changed. To get all new updates :\n"}
{"snippet": "indicators = spark.read.format(\"csv\") \\\n    .option(\"header\", \"true\") \\\n    .option(\"inferSchema\", \"true\") \\\n    .load(\"../../data/WDIData.csv\")\n", "intent": "Repeat the same steps for the `WDIData.csv` file and read it into a dataframe called `indicators`.\n"}
{"snippet": "a = np.arange(1,13).reshape(3,4)\na\n", "intent": "We can also calculate the functions across specific axis.\n"}
{"snippet": "a = np.arange(9)\na.reshape(3,3)\n", "intent": "(**hint**: reshape)\n"}
{"snippet": "last_letters = name[1:]\n", "intent": "String Concatenation\n"}
{"snippet": "for num in range(0,10,1):\n    if(num%2==0):\n        print(num)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "i =0\nwhile i < 5:\n    if i<3:\n         print('interrupt  to stop me!')\n    i =i+1\n", "intent": "while test:\n    statements\nelse:\n    statements\n"}
{"snippet": "bx = ds[\"lon\"][:];\nby = ds[\"lat\"][:];\nb = ds[\"bat\"][:];\n", "intent": "Then if we want to access the values only, we can use similar commands but with the `[:]` at the end:\n"}
{"snippet": "run(`more ./DIVAnd.log`)\n", "intent": "In bash, use the `more` command to view the file content with the formatting.\n"}
{"snippet": "defVar(ds, \"lon\", Float64, (\"lon\",));\ndefVar(ds, \"lat\", Float64, (\"lat\",));\n", "intent": "We continue by defining the variables corresponding to the coordinates:\n"}
{"snippet": "RATIO_VC_BAFFLE = 1/(np.sqrt(exp.K_MINOR_FLOC_BAFFLE)+1)\nRATIO_HS_MIN = 3\nRATIO_HS_MAX = 6\n", "intent": "$$\\Pi_{VCBaffle}=\\frac{1}{\\sqrt{K_{Minor,FlocBaffle}}+1}$$\n"}
{"snippet": "import numpy as np\nimport pandas as pd\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom kaggle.competitions import twosigmanews\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\nenv = twosigmanews.make_env()\n", "intent": "Let's start with importing the necessary libraries.\n"}
{"snippet": "print max([9, 8, 42, 3, -17, 2])\n", "intent": "The `max()` function will evaluate to the highest value in the list:\n"}
{"snippet": "print [4, 5, 6, 10, 12, 15][:-3]\n", "intent": "To get the last three elements of the list:\n"}
{"snippet": "print min(str_list)\n", "intent": "Looks good so far. What does `max()` have to say about it?\n"}
{"snippet": "import numba\nprint(\"numba\", numba.__version__)\n", "intent": "* Opensource BSD license\n* Basic CUDA GPU JIT compilation\n* OpenCL support coming\n"}
{"snippet": "response3 = chromeUXreport.query_to_pandas_safe(query3)\nresponse3.head(20)\n", "intent": "Compute the density sum for bins less than 1000ms.\n"}
{"snippet": "response2 = usa.query_to_pandas_safe(query2)\nresponse2.head(50)\n", "intent": "What are the most common female names?\n"}
{"snippet": "response1 = stackOverflow.query_to_pandas_safe(query1)\nresponse1.head(10)\n", "intent": "What is the percentage of questions that have been answered over the years?\n"}
{"snippet": "response7 = sf.query_to_pandas_safe(query7, max_gb_scanned=10)\nresponse7.head(10)\n", "intent": "What were the most common police incidents in the category of LARCENY/THEFT in 2016?\n"}
{"snippet": "response5 = sampleTables.query_to_pandas_safe(query5, max_gb_scanned=10)\nresponse5.head(10)\n", "intent": "How many children were born to mother's over 50 in the ten states with the most births?\n"}
{"snippet": "mt_df['time'].dt.time.describe()\n", "intent": "According to the competition's data description:\n> all rows are taken at 22:00 UTC\nLet's see...\n"}
{"snippet": "response13 = nyc.query_to_pandas_safe(query13, max_gb_scanned=10)\nresponse13.head(5)\n", "intent": "Which boroughs have the most 311 requests related to parties?\n"}
{"snippet": "response22 = nyc.query_to_pandas_safe(query22, max_gb_scanned=10)\nresponse22.head(30)\n", "intent": "What was the average speed of Yellow taxi trips in 2015 by day of week?\n"}
{"snippet": "import bq_helper\nfrom bq_helper import BigQueryHelper\nnoaa = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"ghcn_d\")\n", "intent": "**How to Query the Daily NOAA Global Historical Climatology Network Weather Data (BigQuery Dataset)**\n"}
{"snippet": "response3 = medicare.query_to_pandas_safe(query3, max_gb_scanned=10)\nresponse3.head(10)\n", "intent": "What is the average cost for inpatient and outpatient treatment in each city and state?\n"}
{"snippet": "response2 = chicago_taxi.query_to_pandas_safe(query2, max_gb_scanned=10)\nresponse2.head(10)\n", "intent": "Which drop-off areas have the highest average tip?\n"}
{"snippet": "response1 = census_data.query_to_pandas_safe(query1)\nresponse1.head(10)\n", "intent": "What are the ten most populous zip codes in the US in the 2010 census?\n"}
{"snippet": "response4 = open_images.query_to_pandas_safe(query4, max_gb_scanned=10)\nresponse4.head(10)\n", "intent": "What are some landing pages of images with a trolleybus?\n"}
{"snippet": "response6 = usfs.query_to_pandas_safe(query6, max_gb_scanned=50)\nresponse6.head(50)\n", "intent": "What information is there in this table about forestland?\n"}
{"snippet": "metadata <- read.table(\"SRX190717_metadata.txt\",header=TRUE,row.names=NULL,sep=\",\",stringsAsFactors=FALSE)\nnames(metadata) <- toupper(names(metadata))\nmetadata$MID <- paste(\"MID\",metadata$MID,sep=\"\")\nhead(metadata)\n", "intent": "Load in metadata and process.\n"}
{"snippet": "print(\"mylist:\", mylist)\nprint(\"myarray:\", myarray)\n", "intent": "First, let's quickly look at what is in our array and list (defined above), for reference:\n"}
{"snippet": "d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}\n", "intent": "** Given this nest dictionary grab the word \"hello\". **\n"}
{"snippet": "sample_text = 'this watch is better than this watch'\nregex = re.compile(r'watch$')\nmatches = regex.finditer(sample_text)\nfor match in matches:\n    print(match)\n", "intent": "We can clearly see that we get two matches. Now let's use the dollar sign to only match the `watch` that appears at the end of the string:\n"}
{"snippet": "def fn1 (arg1=[], arg2=27):\n    arg1.append(arg2)\n    return arg1\nmy_list=[1, 2, 3]\nprint(my_list)\nprint(fn1(my_list,4))\nprint(fn1(my_list,27))\nprint(fn1())\nprint(fn1())\n", "intent": "<img src=\"../images/chapter8/Slide35.jpg\">\n<img src=\"../images/chapter8/Slide36.jpg\">\n"}
{"snippet": "l\nl[2] = 7 \nl\nt[2] = 7 \n", "intent": "You can assign new values to elements, except for tuples\n"}
{"snippet": "def createDataSet():\n    shape = (1000, 1000)\n    xcenter = shape[0]/2\n    ycenter = shape[1]/2\n    t = numpy.zeros(shape)\n    y, x=numpy.ogrid[:t.shape[0], :t.shape[1]]\n    r=1.0+numpy.sin(numpy.sqrt((x-xcenter)**2+(y-ycenter)**2)/8.0)\n    return r + numpy.random.rand(shape[0], shape[1])\ndata = createDataSet()\n", "intent": "This function create some data with noise.\n"}
{"snippet": "def slowest_call(fn, arg1, arg2, arg3):\n    pass\n", "intent": "*Note: this question depends on a working solution to the previous question.*\nComplete the function below according to its docstring.\n"}
{"snippet": "def greet(who=\"Colin\"):\n    print(\"Hello,\", who)\ngreet()\ngreet(who=\"Kaggle\")\ngreet(\"world\")\n", "intent": "Adding optional arguments with default values to the functions we define turns out to be pretty easy:\n"}
{"snippet": "planets[:3] = ['Mur', 'Vee', 'Ur']\nprint(planets)\nplanets[:4] = ['Mercury', 'Venus', 'Earth', 'Mars',]\n", "intent": "Hm, that's quite a mouthful. Let's compensate by shortening the names of the first 3 planets.\n"}
{"snippet": "short_planets = [planet for planet in planets if len(planet) < 6]\nshort_planets\n", "intent": "We can also add an `if` condition:\n"}
{"snippet": "print(\"There are {:,} missing values in the `volume` column\".format(mt_df['volume'].isna().sum()))\n", "intent": "> trading volume in shares for the day\n"}
{"snippet": "' '.join(sorted(planet_to_initial.values()))\n", "intent": "We can access a collection of all the keys or all the values with `dict.keys()` and `dict.values()`, respectively.\n"}
{"snippet": "from opensignalstools.__notebook_support__ import cssStyleApply\ncssStyleApply()\n", "intent": "<span class=\"color6\">**Auxiliary Code Segment (should not be replicated by the user)**</span>\n"}
{"snippet": "from IPython.display import Javascript\nostVis.opensignalsStyle([item for sublist in list_figures for item in sublist])\nostVis.opensignalsStyle([item for sublist in list_figures_2 for item in sublist])\nostVis.opensignalsStyle([item for sublist in list_figures_zoom for item in sublist])\nJavascript(\"Jupyter.notebook.execute_cells([16, 19, 22])\")\n", "intent": "<span class=\"color6\">**Auxiliary Code Segment (should not be replicated by the user)**</span>\n"}
{"snippet": "nyquist_fs = fs / 2\nlow_cutoff = 5\nhigh_cutoff = 15\nnormalized_cutoffs = [low_cutoff / nyquist_fs, high_cutoff / nyquist_fs]\ntransfer_function_num, transfer_function_den = scipySig.butter(2, normalized_cutoffs, btype='bandpass')\nfiltered_signal = scipySig.filtfilt(transfer_function_num, transfer_function_den, signal, padlen=150)\n", "intent": "<p class=\"steps\">5.1 - Step 1 of Pan-Tompkins Algorithm - ECG Filtering (Bandpass between 5 and 15 Hz)</p>\n"}
{"snippet": "file_folder = \"../Open/signals\" \nh5_file_name = \"biosignalsplux_Electrocardiogram_(ECG)_Sample.h5\"\nh5_object = h5py.File(file_folder + \"/\" + h5_file_name)\nh5_support_dict = dict(h5_object.get(\"00:07:80:3B:46:61\").attrs.items())\nh5_data = list(h5_object.get('00:07:80:3B:46:61').get(\"raw\").get(\"channel_1\"))\nh5_data_unpacked = [item for sublist in h5_data for item in sublist]\n", "intent": "<p class=\"steps\">4 - Loading of .h5 file (as described in <span class=\"color5\">Jupyter Notebook</span> \n"}
{"snippet": "mac_address = list(data.keys())[0]\nchannel = list(data[mac_address].keys())[0]\ndevice = header[mac_address][\"device\"]\nresolution = header[mac_address][\"resolution\"][0]\nprint (\"Mac Address: \" + str(mac_address) + \" Channel: \" + str(channel))\n", "intent": "<p class=\"steps\">3 - Identification of mac address of the device and the channel used during acquisition</p>\n"}
{"snippet": "list_figures_2 = []\nlist_figures_2.append(figure(x_axis_label='Time (s)', y_axis_label='Cardiac Cycle (s)', x_range=(0, time[-1]), **ostVis.opensignalsKwargs(\"figure\")))\nlist_figures_2[-1].line(tachogram_time, tachogram_data, legend=\"Original Tachogram\", **ostVis.opensignalsKwargs(\"line\"))\nlist_figures_2[-1].line(tachogram_time_NN, tachogram_data_NN, legend=\"Post Ectopy Removal Tachogram\", line_dash=\"dashed\", **ostVis.opensignalsKwargs(\"line\"))\n", "intent": "<p class=\"steps\">7 - Comparison between the tachograms obtained before and after ectopic beat removal</p>\n"}
{"snippet": "filter_signal_1 = bandpass(signal, f1=0.5, f2=40, order=1, fs=fs, use_filtfilt=True)\nfreq_axis_2, power_spect_2 = plotfft(filter_signal_1, fs)\n", "intent": "<p class=\"steps\">5 - Application of a pass-band filter in order to be excluded the unwanted information out of [0.5, 40] Hz frequency band</p>\n"}
{"snippet": "burst_begin, burst_end = ostDetect.detectBursts(signal, fs, smoothLevel=20, thresholdLevel=10, timeUnits=False, volts=True, resolution=resolution, device=device, plotResult=False)\n", "intent": "<p class=\"steps\">5 - Detection of muscular activations</p>\n*Each burst defines a processing window*\n"}
{"snippet": "zeroVolume = mt_df[mt_df['volume'] == 0]\n", "intent": "There are 0 trading volumes, let's examine those.\n"}
{"snippet": "from IPython.display import Javascript\nostVis.opensignalsStyle(figure_list)\nostVis.opensignalsStyle(grid_figure_list)\nJavascript(\"Jupyter.notebook.execute_cells([20, 30, 32])\")\n", "intent": "<span class=\"color6\">**Auxiliary Code Segment (should not be replicated by the user)**</span>\n"}
{"snippet": "print(organisms_classes['Pan troglodytes'])\nprint(organisms_classes['Gallus gallus'])\n", "intent": "Accessing a dictionary record is similar to what we did with lists, only this time we'll call a <u>_key_</u> instead of an _index_:\n"}
{"snippet": "user_number_input()\n", "intent": "If you don't feel like writing a custom message,\n"}
{"snippet": "L = [\"eu\", \"Eu\", \"EU!!!\"]\n", "intent": "Because lists are sequences, indexing and slicing work the same way for lists as they do for strings.\nAssuming following input\n"}
{"snippet": "def create_disaster_probability(diag=0.9, alpha=0.01, n=5):\n    offdiag = (1 - diag - alpha)/(n-2)\n    P = np.ones((n, n)) * offdiag\n    P = P + np.eye(5)*(diag-offdiag)\n    P[:, -1] = alpha\n    P[-1, :] = np.zeros(n)\n    P[-1, -1] = 0.5\n    P[-1, n//2] = 0.5\n    return P\nP = create_disaster_probability(alpha=0.05)\n", "intent": "** Question \\\nIn the next cell, we claim to generate a transition matrix 5 state Markov chain\n"}
{"snippet": "a = 1 + 2 + 3 + 4 + 5 + 6 + 7 \\\n    + 8 + 9 + 10 + 11 + 12 + 13\n", "intent": "You can tell Python to continue a line using: ``\\``\n"}
{"snippet": "noprimes = [j for i in range(2, 8) for j in range(i*2, 50, i)]\nprimes = [x for x in range(2, 50) if x not in noprimes]\nprint(primes)\n", "intent": "**Example** Computing Prime Numbers using list comprehensions and sets\n(ref: http://www.secnetix.de/olli/Python/list_comprehensions.hawk)\n"}
{"snippet": "val = 0\nfor i in range(0,len(p),1):\n    val += p[i]*q[i]\n", "intent": "What went wrong here and how might be fix this loop to make it more general?\n"}
{"snippet": "uniqueWords = wordCounts.distinct().count()\nprint uniqueWords\n", "intent": "Calculate the number of unique words in `wordsRDD`.  You can use other RDDs that you have already created to make this easier.\n"}
{"snippet": "print(\"The scoring function will consider {:,} out of {:,} 'zero trading' training samples\".format(len(zeroVolume[zeroVolume['universe'] == 1]), len(zeroVolume)))\n", "intent": "How many of them are included in the scoring calculation?\n"}
{"snippet": "REDIS.set('foo', 42)\n", "intent": "Redis is a key-value store. Values can be stored in redis associated with a given key.\n"}
{"snippet": "stop('Not implemented.')\n", "intent": "(4) Plot the response and the predictor. Use the `abline()` function to display the least squares regression line.\n"}
{"snippet": "map2 = gis.map('Barcelona')\nmap2\n", "intent": "Get the first item from your search result and add it the map you created\n"}
{"snippet": "d1, d2, d3 = 1000, 2000, 50\ni0, i1, istep = 10, 700, 10\nj0, j1, jstep = 8, 1000, 7\naa = np.random.rand(d1,d2,d3)\ni = np.arange(i0,i1,istep)\nj = np.arange(j0,j1,jstep)\nk = [1,2, 10]\naa.shape\n", "intent": "Create a 3D array with random data\n"}
{"snippet": "def prime_list(n, is_prime_func=is_prime_all):\n    return map(is_prime_func, range(3,n))\ndef is_prime_generator1(p):\n    return is_prime_any(p, generator_map)\nis_prime_generator2 = lambda p ...\nassert prime_list(100)==prime_list(100, is_prime_generator1)\nassert prime_list(100)==prime_list(100, is_prime_generator2)\n", "intent": "- Finish `is_prime_generator2` to be a lambda function analougue to `is_prime_generator2`\n"}
{"snippet": "columns([\ncfig('myfig.pdf', width=u'\\\\textwidth')\n])\n]\n)\n", "intent": "You can have some columns as well\n"}
{"snippet": "shuttles = ['columbia', 'endeavour', 'challenger', 'discovery',\n            'atlantis', 'enterprise', 'pathfinder']\n", "intent": "Let's try one more list:\n"}
{"snippet": "df = pd.read_sql(sql, con=engine)\ndf.head(10)\n", "intent": "Print the answer with the `CategoryName`, and `Count`.\n"}
{"snippet": "l = [1,2[3,4,'Hallo']]\n", "intent": "Ersetze in dieser verschachtelten Liste \"Hallo\", um stattdessen \"Auf Wiedersehen\" zu sagen.\n"}
{"snippet": "print(\"There are {:,} missing values in the `open` column\".format(mt_df['open'].isna().sum()))\n", "intent": "> the open price for the day (not adjusted for splits or dividends)\n"}
{"snippet": "def spieler_eingabe():\n", "intent": "Funktion, die die Spielerhandlung abfragt:\n"}
{"snippet": "a = 1 \nb = a \na = 2 \nprint a,b\n", "intent": "Variables are bound to objects. An integer is a python object of type int.\n"}
{"snippet": "s = 'Mort Canty'\nprint len(s)\ns[0:4]\n", "intent": "Strings are sequences (ordered collections)\n"}
{"snippet": "update table1 set field3 = 3 where field1 = 4;\nselect * from table1;\n", "intent": "Suppose we need to update an existing record with new data - e.g. maybe `Jesse James` is only 9. Use the update command to do this.\n"}
{"snippet": "x5 = np.random.normal(0, 1, 3*3*3).reshape(3,3,3)\nx5\n", "intent": "Q4. Find indices of non-zero elements\n"}
{"snippet": "def find_pattern(text, patterns):\n    abc = re.search(patterns, text)\n    if abc:\n        return abc\n    else:\n        return 'Not Found!'\n", "intent": "Let's define a function to match regular expression patterns\n"}
{"snippet": "results = c.execute(\"SELECT * FROM EmployeeBase LIMIT 5;\").fetchall()\nfor row in results:\n    print row\n", "intent": "1. Print the first 5 rows of EmployeeBase table\n1. Print the first 5 rows of MessageBase table\n1. Print the first 5 rows of RecipientBase table\n"}
{"snippet": "for i in range(1,101):\n    if (i%3 == 0) and (i%5 == 0):\n        print \"FizzBuzz\"\n    elif i%5 == 0:\n        print \"Fizz\"\n    elif i%3 == 0:\n        print \"Buzz\"\n    else:\n        print i\n", "intent": "For example, the numbers 8-15 look like: ... 8 Buzz 9 Fizz 11 Buzz 13 14 BuzzFizz ...\n"}
{"snippet": "list4 = [5,3,4,6,1]\nlist4.sort() \nlist4\n", "intent": "Sort the list below:\n"}
{"snippet": "print(\"There are {:,} missing values in the `close` column\".format(mt_df['close'].isna().sum()))\n", "intent": "> the close price for the day (not adjusted for splits or dividends)\n"}
{"snippet": "try:\n    for i in ['a','b','c']:\n        print(i**2)\nexcept TypeError:\n    print(\"Type of i is wrong\")\nexcept:\n    print(\"Not even possible\")\n", "intent": "Handle the exception thrown by the code below by using <code>try</code> and <code>except</code> blocks.\n"}
{"snippet": "a = list(range(10,102,5))\nprint(a)\nprint(\"Last entry in a: {0:d}\".format(a[-1]))\nprint(\"Second-last entry in the variable a: {0:d}\".format(a[-2]))\nprint()\nc = \"This is a long string\"\nprint(\"Last entry in a: {0:s}\".format(c[-1]))\nprint(\"Second-last entry in a: {0:s}\".format(c[-2]))\n", "intent": "You can also address the last elements in a list, array, etc. by using:\n"}
{"snippet": "def ran_bool(num,low,high):\n    print(low<= num <= high)\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "tc.parse_atcf(filename='../test/matthew14l.2016092912.trak.hwrf.atcfunix')\n", "intent": "If there are no active TCs try loading local files\n"}
{"snippet": "Str1 = 'This is a string'\n", "intent": "If you need to instead find the location of a substring use the find method of the string object.\n"}
{"snippet": "@function_name\ndef adder(x,y):\n    return x+y\n", "intent": "You can then use it just like any other decorator, as in Listing 8-4.\n"}
{"snippet": "stock_index = \"SP500\"\nprint(stock_index[2:])\n", "intent": "Given the string:\n    stock_index = \"SP500\"\nGrab '500' from the string using indexing.\n"}
{"snippet": "while True:\n    print ('Uh Oh infinite Loop!')\n", "intent": " A word of caution however! It is possible to create an infinitely running loop with while statements. For example:\n"}
{"snippet": "x = np.array([[[0,1],[2,3]],[[4,5],[6,7]]])\nx\n", "intent": "- Use np.transpose to permute all the axes at once.\n- Use np.swapaxes to swap any two axes.\n- Use np.rollaxis to \"rotate\" the axes.\n"}
{"snippet": "print(\"x3 ndim: \", x3.ndim)\nprint(\"x3 shape:\", x3.shape)\nprint(\"x3 size: \", x3.size)\n", "intent": "Each array has attributes ``ndim`` (the number of dimensions), ``shape`` (the size of each dimension), and ``size`` (the total size of the array):\n"}
{"snippet": "anHmat = Hmatrix([1.0 ,2.0 ,3.0], [5.0 ,6.0, 7.0])\nbnHmat = Hmatrix([0.0 ,2.0 ,3.0], [0.0 ,6.0, 7.0])\n", "intent": "Creat an instance of two Hmatrices. Basic default constructor\n"}
{"snippet": "a = ['The', 'farmer', 'killed', 'the', 'duckling']\na[0] = a[0].lower()\ntokens = len(a)\ntypes = len(set(a))\nprint('Number of tokens: '+str(tokens))\nprint('Number of types: '+str(types))\n", "intent": "Now we can try again to get the number of types and tokens in the list a:\n"}
{"snippet": "print(list(zip(a)))\n", "intent": "Either way, the end result is a list of lists, with each succesive list offset by 1 more place, up to the number specified by \"n\". \n"}
{"snippet": "period = 'Flat'\nnew_df = margin_tbl(new_margin, period)\nold_df = margin_tbl(old_margin, period)\n", "intent": "Filtering on Period Type and calcultion the delta margin\n"}
{"snippet": "DummySwapRepricing = ((df_old['DummySwapMW'] / -2) * delta(df_new, df_old, ['RealPrice'])).rename('DummySwapRepricing')\nExposure = (df_old['ExposureMWH'] * delta(df_new, df_old, ['RealPrice']) - df_new['ExposureMWH'] * df_new['CapCurve']).rename('Ex[psure]')\nDummyCapRepricing = ((df_old['DummyCapMW'] / -2) * delta(df_new, df_old, ['CapCurve'])).rename('DummyCapRepricing')\nCapVolMvt = ((df_new['DummyCapMW'] + df_new['CapMW'] - df_old['DummyCapMW'] - df_old['CapMW']) * df_new['CapCurve'] *-1).rename('CapVolMvt')\n", "intent": "Dummies Repricing and Exposure\n"}
{"snippet": "x = \"Julie loves \"\ny = \"watching youtube videos\"\nz = x + y\nprint x + y    \nprint y[-1]    \nprint z[6:20]  \n", "intent": "`x = \"Julie loves \"`\n`y = \"watching youtube videos\"`\n`z = x + y`\n"}
{"snippet": "regex = re.compile(r'W.*TE,' )\ntext = \"Norman White, Dealing with Data, 212-998-0842, nwhite@stern.nyu.edu\"\nmatches = regex.finditer(text)\nfor match in matches:\n    print(match.group())\n", "intent": "Regular expressions are typically case-sensitive. \n"}
{"snippet": "b1_list = [\"Norm\", \"John\", \"Chris\", \"Josh\", \"Mary\", \"Anna\"]\nb2_list = [\"Elena\", \"Sofia\"]\nb1_list.append(b2_list)\nprint(b1_list)\n", "intent": "But what if we append a list to a list? \n"}
{"snippet": "print('Hello World!')\n", "intent": "Use print() to print strings\n"}
{"snippet": "x2_sub = x2[:2, :2]\nprint(x2_sub)\n", "intent": "Let's extract a $2 \\times 2$ subarray from this:\n"}
{"snippet": "x = \"hi\"\nrepeat(x, 10)\n", "intent": "Create a string that says \"hi\" 1000 times, first with `repeat` and then with the exponentiation operator, which can call `*` under the hood.\n"}
{"snippet": "from pyspark.sql.functions import lit\nsqlContext.sql(\"Select cod_persona \\\nFROM mdv_prealtas\")\\\n.withColumn(\"tenencia_ingresos_semanal\",lit('1'))\\\n.withColumn(\"area_recibos\",lit('13'))\\\n.registerTempTable(\"ingresos_semanal\")\n", "intent": "*data ingresos_semanal (keep= cod_persona tenencia_ingresos_semanal);  \nset mdv_prealtas;  \ntenencia_ingresos_semanal=1;  \narea_recibos=13;  \nrun;*  \n"}
{"snippet": "parsing.render_transitions(transitions[9:13])\n", "intent": "If no rule can be found and the buffer is non-empty, go back to last decision point\n"}
{"snippet": "token = re.compile('Mr.|[\\w\\']+|[.?]')\ntokens = token.findall(text)\nsentences = sentence_segment(re.compile('\\.'), tokens)\nfor sentence in sentences:\n    print(sentence)\n", "intent": "Next, modify the following code so that sentence segmentation returns correctly segmented sentences on the following text:\n"}
{"snippet": "print np.linalg.norm(x)**2\nprint np.dot(x, x)\n", "intent": "The norm squared of a vector is just the vector dot product with itself:\n$$||x||^2 = x \\cdot x$$\n"}
{"snippet": "summary(\"Volume Sold\", float_sales_data[\"volume_sold\"])\n", "intent": "**5.A** Using your function, print the summary statistics for 'volume_sold'\n"}
{"snippet": "t.test(Active,Noexe,var.equal=T)\n", "intent": "According to the above qqplot, we can assume the sample follows normal distribution.\n"}
{"snippet": "y = logsurv\nx = log(data)\nfit <- lm(y~x)\nsummary(fit)\n", "intent": "***(2pt) Assume that the Weibull distribution is a good fit, use least squares approach to estimate its parameters.***\n"}
{"snippet": "library(MASS)\nlibrary(quadprog)\ndata3 <- read.csv(\"hw3.csv\", header = T, stringsAsFactors = F)\n", "intent": "Load 'hw3.csv' as 'data3':\n"}
{"snippet": "x2_sub[0, 0] = 99\nprint(x2_sub)\n", "intent": "Now if we modify this subarray, we'll see that the original array is changed! Observe:\n"}
{"snippet": "newList = range(-1,3)\nprint(newList)\n", "intent": "Use the **```range```** function to create the following list: ```[-1, 0, 1, 2]```\n"}
{"snippet": "x_ord = OrdinalScale()\ny_sc = LinearScale()\nbar = Bars(x=np.arange(10), y=np.arange(-5, 5), scales={'x': x_ord, 'y': y_sc},\n           orientation='horizontal')\nax_x = Axis(scale=x_ord, orientation='vertical')\nax_y = Axis(scale=y_sc, tick_format='0.2f')\nFigure(marks=[bar], axes=[ax_x, ax_y], padding_x=0.025, padding_y=0.025)\n", "intent": "To generate a horizontal bar chart, pass `orientation='horizontal'` to the bar.\n"}
{"snippet": "dates_new = date_range(start='06-01-2007', periods=150)\n", "intent": "We pass each data set as an element of a `list`. The colors attribute allows us to pass a specific color for each line.\n"}
{"snippet": "from nltk.stem import WordNetLemmatizer\nlemmatizer = WordNetLemmatizer()\nprint(lemmatizer.lemmatize(\"cats\"))\nprint(lemmatizer.lemmatize(\"python\"))\nprint(lemmatizer.lemmatize(\"better\", pos=\"a\"))\nprint(lemmatizer.lemmatize(\"best\", pos=\"a\"))\nprint(lemmatizer.lemmatize(\"running\"))\nprint(lemmatizer.lemmatize(\"running\",'v'))\n", "intent": "Convert to normal state of that word eg. cats -> cat, running -> run\n"}
{"snippet": "x_nbr_rdd_2.collect()\n", "intent": "Now look at all the elements of the new RDD (using collect): \n"}
{"snippet": "print('Bye Jupyter...')\n", "intent": "[Google It!](https://google.com)\n"}
{"snippet": "mesh = UnitIntervalMesh(20) \nplot(mesh);\n", "intent": "We can now use FEniCS to solve our problem. First, we discretize our domain by creating a mesh of $\\Omega$. \n"}
{"snippet": "(not grade1 >= 50) or (grade2 >= 50)\n", "intent": "To make the order clear, we can add parentheses:\n"}
{"snippet": "def get_upper(s):\n    upper = ''\n    for ch in s:\n        if ch.isupper():\n            upper = upper + ch\n    return upper\nprint(count_upper('abc'))\nprint(count_upper('aAbBcC'))\n", "intent": "Define a function named `get_upper` that has one `str` parameter and returns a string containing the uppercase letters from the given string.\n"}
{"snippet": "x2_sub_copy[0, 0] = 42\nprint(x2_sub_copy)\n", "intent": "If we now modify this subarray, the original array is not touched:\n"}
{"snippet": "values = [5.4, 6, 3.2, 8.1, 11]\nprint(min(values))\nprint(max(values))\nprint(sum(values))\n", "intent": "There are several other functions that can take lists as arguments, including `min`, `max`, and `sum`:\n"}
{"snippet": "def max_visits(visits_by_patient):\n", "intent": "Next, the header (the `def` line), which involves naming the parameter:\n"}
{"snippet": "for key in phone:\n    print(key)\n", "intent": "(a) Going through the keys\n"}
{"snippet": "Image(filename='images/gradient-descent-linear-regression-2.png')\n", "intent": "Don't need to know calculus, but solving for the partial derivative in this application gives you about 2.\n"}
{"snippet": "Image(filename='images/normal-equation-1.png')\n", "intent": "Method to mimnimize cost function other than gradient descent. All notes below are specific to the linear regression model.\n"}
{"snippet": "s + ' concatenate me!'\n", "intent": "Notice how the error tells us directly what we can't do, change the item assignment!\nSomething we can do is concatenate strings!\n"}
{"snippet": "l = [1,2,2,33,4,4,11,22,3,3,2]\nset(l)\n", "intent": "**16.** Use a set to find the unique values of the list below:\n"}
{"snippet": "[num for num in xrange(1,50) if num % 3 == 0]\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "def check_range(num1,num2,check):\n    if check in xrange(num1,num2+1):\n        print \"{check} is in the range {num1} and {num2}\".format(check=check,num1=num1,num2=num2)\n    else:\n        print \"{check} is not in the range {num1} and {num2}\".format(check=check,num1=num1,num2=num2)\ncheck_range(2,7,7)\ncheck_range(1,8,9)\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "mylist = [3, 6, 1, 0, 10, 22]\nmylist_plus1 = [x + 1 for x in mylist]\nmylist_plus1\n", "intent": "Or, you could use a list comprehension:\n"}
{"snippet": "s = 'hello'\niter_s = iter(s)\nnext(iter_s)\n", "intent": "Use the iter() function to convert the string below:\n"}
{"snippet": "demo_pvs = diff_pvs[0:1000]\n", "intent": "Select 1000 PVs for archiving\n"}
{"snippet": "import os\nsorted(os.listdir('.'))\n", "intent": "The notebook is saved as a ``.ipynb`` file:\n"}
{"snippet": "countChannel = customerDF.groupBy(customerDF.Channel).count()\ntotalChannel = countChannel.agg({\"count\": \"sum\"})\ncountChannel.show()\ntotalChannel.show()\n", "intent": "Create aggregates on channels and regions variables.\n"}
{"snippet": "employee = pd.read_sql(\"SELECT * FROM EmployeeBase\", conn)\nrecipient = pd.read_sql(\"SELECT * FROM RecipientBase\", conn)\nmessage = pd.read_sql(\"SELECT * FROM MessageBase\", conn)\n", "intent": "Import each of the 3 tables to a Pandas Dataframes\n"}
{"snippet": "print(id(a), id(b))\n", "intent": "You can see this pointer with `id()`.\n"}
{"snippet": "mylist = [i**2 for i in range(50) if i % 7 == 0]\n", "intent": "Python has a something called *list comprehension*:\n"}
{"snippet": "a = np.zeros((4,4))\na\n", "intent": "---\nIndexing into numpy arrays usually results in a so-called *view*.\n"}
{"snippet": "a_buf = cl.Buffer(ctx, mf.READ_WRITE | mf.COPY_HOST_PTR, hostbuf=a)\n", "intent": "Now allocate a buffer. `Buffer(context, flags, size=None, hostbuf=None)`\n"}
{"snippet": "grid = np.array([[1, 2, 3],\n                 [4, 5, 6]])\n", "intent": "It can also be used for two-dimensional arrays:\n"}
{"snippet": "c=np.arange(27).reshape(3,3,3)\nprint(c)\nc[1,...] \nc[...,1] \n", "intent": "use dots(...) to represent as many dimensions as needed of the remaining dimensions\n"}
{"snippet": "d = {x:x**3 for x in range(5)}\nd\n", "intent": "**Problem 7: Create this dictionary:\n{0: 0, 1: 1, 2: 8, 3: 27, 4: 64}\n using dictionary comprehension.**\n"}
{"snippet": "def ran_check(num,low,high):\n    if low<=num<=high:\n        print('The number %d falls within the given range of %d to %d'%(num,low,high))\n    else: print('The number %d does NOT fall within the given range of %d to %d'%(num,low,high))\nran_check(5.12341235,6,6)\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "s ='hello'\nprint(s[-1])\nprint(s[len(s)-1])\n", "intent": "Given the string hello, give two methods of producing the letter 'o' using indexing.\n"}
{"snippet": "interact(f, x=(0,8,1));\n", "intent": "If a 3-tuple of integers is passed `(min,max,step)`, the step size can also be set.\n"}
{"snippet": "example_set = set()\nprint(example_set.add(3))\nprint(bool(example_set.add(3)))\n", "intent": "Noticing here that Python's `set.add` returns `None`, which evalutes to `False` if cast to a boolean.\n"}
{"snippet": "parameters = {\"lat\": 37.78, \"lon\": -122.41}\nresponse = requests.get(\"http://api.open-notify.org/iss-pass.json\", params=parameters)\njson_data = response.json()\nprint(type(json_data))\nprint(json_data)\n", "intent": "We can get the content of a response as a Python object by using the `.json()` method on the response.\n"}
{"snippet": "def countDog(string):\n    lst=string.split(' ')\n    return len(list(filter(lambda x: 'dog' in x,lst)))\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "math.degrees(math.pi)\n", "intent": "__math__ also offers common trigonometric functions (__sin__, __cos__, etc.) and conversion between __degrees__ and __radians__:\n"}
{"snippet": "grid = np.arange(16).reshape((4, 4))\ngrid\n", "intent": "Notice that *N* split-points, leads to *N + 1* subarrays.\nThe related functions ``np.hsplit`` and ``np.vsplit`` are similar:\n"}
{"snippet": "A[np.where(A > A.mean())]\n", "intent": "`np.where` returns the advanced indices for which the condition is satisfied (where the boolean array is `True`):\n"}
{"snippet": "word_neighber_model.query(victoria)\n", "intent": "Who is the nearest neighbor to 'Victoria Beckham' using raw word counts?\n"}
{"snippet": "fibonacci(10, 5, 10)\n", "intent": "But now we can use the function to explore new things, such as the effect of new starting values:\n"}
{"snippet": "from itertools import combinations\nc = combinations(xrange(4), 2)\nfor x in c:\n    print x\n", "intent": "Similarly, the ``itertools.combinations`` function iterates over all unique combinations of ``N`` values within a list:\n"}
{"snippet": "mg2.set_closed_boundaries_at_grid_edges(True, False, True, False)\nimshow_grid(mg2, mg2.status_at_node, color_for_closed='Blue')\n", "intent": "Note that this has the right and left edges as fixed_value (status value of 1).  \nWe can change those to closed if we want.\n"}
{"snippet": "z = mg.add_ones('node', 'field__number_3', units='km', noclobber=False)\nmg.at_node.units['field__number_3']\n", "intent": "The units are recorded in a further dict-like structure attached to `at_[element]`:\n"}
{"snippet": "h_edge = mg.map_max_of_link_nodes_to_link('surface_water__depth')\nfor i in range(mg.number_of_links):\n    print(i, h_edge[i])\n", "intent": "... or the maximum:\n"}
{"snippet": "def validity(a, b):\nfor p in (True,False):\n    for q in (True,False):\n        validity(p,q)\n", "intent": "**Problem 1.2 (b)** Write your code in the next cell.\n"}
{"snippet": "the_vars['vortD'] =   the_vars['n']*Delp2(the_vars[r'$\\phi$'], metric=metric)\\\n                    + metric.g11*DDX(the_vars['n'], metric=metric)*DDX(the_vars[r'$\\phi$'], metric=metric)\\\n                    + metric.g33*DDZ(the_vars['n'], metric=metric)*DDZ(the_vars[r'$\\phi$'], metric=metric)\n", "intent": "We have that\n$$\\Omega^D = \\nabla\\cdot(n\\nabla_\\perp(\\phi))$$\n"}
{"snippet": "data = np.zeros(4, dtype={'names':('name', 'age', 'weight'),\n                          'formats':('U10', 'i4', 'f8')})\nprint(data.dtype)\n", "intent": "We can similarly create a structured array using a compound data type specification:\n"}
{"snippet": "x_g = x_0 - h\np = get_polynomial(get_coeff(values, specifiedPositions), specifiedPositions, x_g)\ndisplay(Eq(fg, simplify(p)))\n", "intent": "Evaluating the polynomial in $x_g=x_0-h$ yields\n"}
{"snippet": "vortD = div(gradPerp(phi)*n)\ndisplay(Eq(symbols('Omega^D'), vortD.doit().expand()))\n", "intent": "We define the vorticity-like field $\\Omega^D$ to be $\\Omega^D = \\nabla\\cdot\\left(n\\nabla_\\perp\\phi\\right)$. In the Clebsch system this is written as\n"}
{"snippet": "factors = [J, A, gzz, g]\nterm2 = finiteDifferenceOfOneTerm(factors, z, forwardZ)\nterm2 /= J\ndisplay(Eq(symbols('T_2^F'), term2))\n", "intent": "We start by making the substitution $\\partial_z f \\to g$ and calulate the second term of the equation under consideration\n"}
{"snippet": "theta1 = atan2(py, px)\n", "intent": "theta1 is the hypotenuse of the wrist center projected onto the X, Y plane.  Simply:\n"}
{"snippet": "\"etc\" is None\nNone is None  \n", "intent": "Don't use the equality \"==\" symbol to compare objects to None. Use \"is\" instead\n"}
{"snippet": "def add(x, y):\n    print \"x is {0} and y is {1}\".format(x, y)\n    return x + y  \n", "intent": " - defined by `def`\n - calling using\n   - parameters (arguments): order is important\n   - keyword arguments: order is unimportant\n"}
{"snippet": "from pyspark import StorageLevel\nrdd.persist(StorageLevel.MEMORY_ONLY)\nrdd.persist(StorageLevel.DISK_ONLY)\nrdd.persist(StorageLevel.MEMORY_AND_DISK)\n", "intent": "It is also possible to indicate a the storage location:\n"}
{"snippet": "temperature_lines = rdd.filter(lambda line: 'Temperatura media' in line)\n", "intent": "Filter data from the RDD keeping only \"Temperatura media\" lines.\n"}
{"snippet": "for eq in matching_pennies.lemke_howson_enumeration():\n    print(eq)\n", "intent": "You can also iterate over all possible starting labels:\n"}
{"snippet": "data[data['age'] < 30]['name']\n", "intent": "Using Boolean masking, this even allows you to do some more sophisticated operations such as filtering on age:\n"}
{"snippet": "mean(Float64.(blue.(banana)))\n", "intent": "What is the average value of blue in the banana?\n(To open a new box use <ESC>+b (b is for \"below\", what do you think a does?))\n"}
{"snippet": "function g1(x)\n    return x^2\nend\n", "intent": "Alternatively, we could declare this function using the `function` and `end` keywords:\n"}
{"snippet": "savefig(\"sines.pdf\")\n", "intent": "Once we have a figure, we can save it with \n"}
{"snippet": "broadcasted_g = g.(r)\ni = 1\nfor entry in r\n    println((g(entry) == broadcasted_g[i])\n    i += 1\nend\n", "intent": "We can check this via\n"}
{"snippet": "@show partial_w((x, y) -> 3 * x * y^2, 0.3, 0.2) \n@show partial_b((x, y) -> 3 * x * y^2, 0.3, 0.2) \n@show partial_w((x, y) -> 3 * x^2 * y, 0.3, 0.2, 0.1) \n@show partial_b((x, y) -> 3 * x^2 * y, 0.3, 0.2, 0.1) \n", "intent": "Test that x and y are treated separately:\n"}
{"snippet": "function stencil_kernel!(B, A)\n    i = (blockIdx().x-1) * blockDim().x + threadIdx().x\n    if i > 1 && i < 16\n        B[i] = A[i-1] - 2*A[i] + A[i+1]    \n    end\n    return nothing\nend\n", "intent": "Below is a first example of a stencil kernel.\n"}
{"snippet": "remotecall(() -> println(fetch(r)), 3);\n", "intent": "In some cases, this could also happen from another worker process but JuliaBox is by default set up to only allow master-worker communication so\n"}
{"snippet": "matrix =  hcat([vec(Float64.(i)) for i in imgs]...);\nsize(matrix)\n", "intent": "There are 60,000 of these images, each with 784 pixels. This means our dataset is of size `784 x 60000`, and our data is 784-dimensional.\n"}
{"snippet": "x = 256\ny = 256\nprint(x == y)\nprint(x is y)\nx = 257\ny = 257\nprint(x == y)\nprint(x is y)\n", "intent": "As an aside: in most cases, equivalent variables are not identical (as above). An exception are integers in the range from -5 to 256.\n"}
{"snippet": "np.dtype({'names':('name', 'age', 'weight'),\n          'formats':('U10', 'i4', 'f8')})\n", "intent": "Structured array data types can be specified in a number of ways.\nEarlier, we saw the dictionary method:\n"}
{"snippet": "import doctest\ndoctest.testmod()\n", "intent": "Next, we import the **doctest** module and run its **testmod()** function:\n"}
{"snippet": "a = np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]])\nprint(a)\na[[1, 3, 2]]\n", "intent": "You can index a list to print the array in the given order. For instance, you want to print the 1st row, 3rd row, and 2nd row in that order. \n"}
{"snippet": "my_add = add\ntype(my_add)\n", "intent": "It's the same for functions, because they are objects too:\n"}
{"snippet": "reviews.country.unique()\n", "intent": "**Exercise 2**: What countries are represented in the dataset?\n"}
{"snippet": "def main():\n    for n in primes(): \n        if n > 100: break\n        print(n)\n", "intent": "Syntax : Example  \n[READ Iterables / Generators/ Yield](https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do)\n"}
{"snippet": "def ran_bool(num,low,high):\n    return num in range(low, high + 1)\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "from bs4 import BeautifulSoup\nimport requests\nURL = \"http://www.nationalgeographic.com.cn/animals/\"\n", "intent": "**Download amazing pictures from [national geographic](http://www.nationalgeographic.com.cn/animals/)**\n"}
{"snippet": "from pickle import load\nfilename=\"../../Data/users-partition.pickle\"\npartition = load(open(filename,'rb'))\n", "intent": "(1) Load the pickle file.\n"}
{"snippet": "forcefield = app.ForceField('amber99sbildn.xml', 'tip3p.xml')\n", "intent": "<p style=\"font-family:arial;font-size:20px\">Select the force field and solvent model</p>\n"}
{"snippet": "np.dtype({'names':('name', 'age', 'weight'),\n          'formats':((np.str_, 10), int, np.float32)})\n", "intent": "For clarity, numerical types can be specified using Python types or NumPy ``dtype``s instead:\n"}
{"snippet": "simulation.reporters = []\nprint ('Heating the system from 0 to 600K (increasing target_temperature in 6 steps of 50K)')\nsimulation.reporters.append(PDBReporter('TetraAspDimer_Heat_wRestraints.pdb', 100))\nsimulation.reporters.append(StateDataReporter(stdout, 500, step=True, potentialEnergy=True, temperature=True))\nfor target_temperature in range(50, 601, 50):\n    integrator.setTemperature(target_temperature)\n    simulation.step(2000)\n    print ('Done heating to', target_temperature, 'K.')\n", "intent": "<h2>Heating in 50 K increments from 0 to 600 K</h2>\n"}
{"snippet": "re.search(r'Co\\wk\\we', 'Cookie').group()\n", "intent": "* `\\w`: any single character, digit, underscore\n"}
{"snippet": "re.search(r'Co+kie', 'Cooookie').group()\n", "intent": "* `+`: Checks for >1 characters to its left\n"}
{"snippet": "image = {'color': 'greyscale', 'size': 289983, 'type': 'jpg',\n         'address': 'https://upload.wikimedia.org/wikipedia/commons/7/7b/Moby_Dick_p510_illustration.jpg'}\nimage\n", "intent": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/7/7b/Moby_Dick_p510_illustration.jpg\" width=\"200px\">\n"}
{"snippet": "vs.plot_trials('sim_improved-learning.csv')\n", "intent": "$$ \\epsilon_{t+1} = \\epsilon_{t} - 1/300, \\hspace{10px}\\textrm{for trial number } t $$\ntolerance = 0.001\nlearning rate \\alpha = 0.9\n"}
{"snippet": "print(best_square(8,deposits,4))\nstart = best_square(8,deposits,4)\nprint(display(deposits, start[0], start[0] + 4, start[1], start[1] + 4))\n", "intent": "Finally, write code to find the 4x4 subgrid of the sample grid above with the highest density of deposits and display that subgrid.\n"}
{"snippet": "sc.textFile('sales.txt')\\\n    .map(lambda x: x.split())\\\n    .filter(lambda x: not x[0].startswith('\n    .map(lambda x: (x[-3],float(x[-1])))\\\n    .reduceByKey(lambda amount1,amount2: amount1+amount2)\\\n    .collect()\n", "intent": "- Now use `reduceByKey` to add them up.\n"}
{"snippet": "    --logtostderr \\\n    --pipeline_config_path=\"./config/faster_rcnn_inception_v2_pets.config\" \\\n    --checkpoint_dir=\"./models/our_faster_rcnn_model/train/\" \\\n    --eval_dir=\"./models/our_faster_rcnn_model/eval/\"\n", "intent": "<a id='another_cell'></a>\n"}
{"snippet": "p_disease = 1/100000\np_disease\n", "intent": "What is P(rare disease), the probability that a randomly selected patient has the rare disease? Save your answer to p_disease.\n"}
{"snippet": "np.dtype([('name', 'S10'), ('age', 'i4'), ('weight', 'f8')])\n", "intent": "A compound type can also be specified as a list of tuples:\n"}
{"snippet": "df[df[\"Reference Name\"].isnull()]\n", "intent": "Take a look at **Reference name**. Is there something you should set to be `NaN`? Use either of the two ways we have covered.\n"}
{"snippet": "ax = combined.to_crs(epsg=2163).plot(column=\"pct\", figsize=(20,8), scheme=\"equal_interval\", edgecolor=\"white\", legend=True)\nax.axis(\"off\")\n", "intent": "And oooone more time with `legend=True` and `scheme='equal_interval'`\n"}
{"snippet": "from IPython.display import clear_output\nimport base64\nbase64.decodestring(b'S2VlcCBhIGxpc3Qgb2Ygc2VudGVuY2VzLCBhbmQgYSB0ZW1wIHN0cmluZyB3aXRoIHRoZSBjdXJy\\nZW50IHNlbnRlbmNlLiBBcHBlbmQgd2hlbiB5b3UgaGl0IHRoZSByaWdodCBjaGFyYWN0ZXJz\\n')\n", "intent": "Let's start with sentence segmentation. English typically end with a period, exclamation, or question mark. Let's start easy.\n"}
{"snippet": "se_mc = stability_exponent_mc_factory(mp, parallel_flag=True)\n", "intent": "Once more with parallelization:\n"}
{"snippet": "logPath = \"E:\\\\DataScience\\\\access_log.txt\"\n", "intent": "Here's the full path to the log file I'm analyzing; change this if you want to run this stuff yourself:\n"}
{"snippet": "d = d['key1']['nestkey']['subnestkey'].upper()\n", "intent": "Wow! That's a quite the inception of dictionaries! Let's see how we can grab that value:\n"}
{"snippet": "trading_vol = [entry[6] for entry in fse_data]\ntrading_vol\n", "intent": "***\nAgain, extract all the trading volumes (index 6) and save them as a list ``trading_vol``.\n"}
{"snippet": "my_list = []\nfor number in range(0, 10):\n    if number % 2 == 0:\n        my_list.append(number)\nmy_list\n", "intent": "<br>\nLet's iterate from 0 to 999 and return the even numbers.\n"}
{"snippet": "m <- cbind(Index = c(1:3), Age = c(30, 45, 34), Salary = c(500, 600, 550)) \nclass(m)\nm\n", "intent": "(to create a matrix)\n"}
{"snippet": "np.dtype('S10,i4,f8')\n", "intent": "If the names of the types do not matter to you, you can specify the types alone in a comma-separated string:\n"}
{"snippet": "d = {0: 0, 1: 1, 2: 8, 3: 27, 4: 64}\n{x:x**3 for x in range(5)} \n", "intent": "**Problem 7: Create this dictionary:\n{0: 0, 1: 1, 2: 8, 3: 27, 4: 64}\n using dictionary comprehension.**\n"}
{"snippet": "def multiply(s):\n    product =1\n    for n in s:\n        product *= n\n    return product\nmultiply([50,66,789,9876])\n", "intent": "____\n**Write a Python function to multiply all the numbers in a list.**\n    Sample List : [1, 2, 3, -4]\n    Expected Output : -24\n"}
{"snippet": "s = 'hello'\ns[1]\nprint s[1]\n", "intent": "Given the string 'hello' give an index command that returns 'e'. Use the code below:\n"}
{"snippet": "println(\"hello world!\")\n", "intent": "Let's begin our Julia journey with a proper way. Write a hello world program in Julia!\n"}
{"snippet": "using Plots\nx = -10:10\ny = x.^2\nplot(x, y)\n", "intent": "Given `x = -10:10` plot y vs. x for \n$\ny=x^2\n$\n"}
{"snippet": "for i = 1:2\n    for j = 3:3\n        println((i,j))\n    end\nend\n", "intent": "Multiple nested loops can be combined into a single outer loop. \n"}
{"snippet": "x = 1\nfunction foobar()\n    global x = 2\nend\n", "intent": "An explicit `global` is needed to assign to a global variable:\n"}
{"snippet": "f=np.linspace(0,1,12,endpoint=True)[1:11]\nf\n", "intent": "Create a vector of size 10 with values ranging from 0 to 1, both excluded.\n"}
{"snippet": "count = 0\nwhile count < 5: \n    print count\n    count = count + 1 \n    break\n", "intent": "Let's create a simple counter using a while loop. \n"}
{"snippet": "data_rec = data.view(np.recarray)\ndata_rec.age\n", "intent": "If we view our data as a record array instead, we can access this with slightly fewer keystrokes:\n"}
{"snippet": "a = ['a','b','c','d']\nz = ['z','y','x','w']\nzipped = []\nfor a_i, z_i in zip(a, z):\n    zipped.append([a_i, z_i])\n[['a', 'z'], ['b', 'y'], ['c', 'x'], ['d', 'w']]\n", "intent": "**zip** goes through each element of two lists iteratively at the same time:\n"}
{"snippet": "df = pd.read_sql(SQL_STRING, con=conn)\ndf\n", "intent": "From the employees table find the 10 women that were hired the most recently.\n"}
{"snippet": "d = np.array([a[0,0], a[1,1], a[2,0]])\nprint(d)  \nprint(type(d))\nprint(d.shape)\n", "intent": "Similarly, can reference the array thus:\n"}
{"snippet": "from redis import Redis \nredis_connection = Redis('this_redis')\n", "intent": "In practice we will pass these tokens to redis as they are created.\n"}
{"snippet": "cubed_numbers = [i ** 3 for i in range(15)]\nprint(cubed_numbers)\n", "intent": "Since list comprehensions work with all iterables, you could use this with other objects types such as range objects:\n"}
{"snippet": "in_li = raw_input()\n", "intent": "Reading the input value in string and put inside the list and convert it into a integer format\n"}
{"snippet": "m_cut = m[(0,-1),:][:,(0,-1)]\nprint(m_cut)\n", "intent": "**h)** Create an array `m_cut` which contains only the elements from the first and last rows and columns of `m`. Display it.\n"}
{"snippet": "(test_feature_matrix, test_output) = get_np_data(test_data, all_features, 'price')\n", "intent": "Let's now evaluate the three models on the test data:\n"}
{"snippet": "select *\nfrom r as r1, r as r2\nwhere\n(r1.a = r2.a and r1.b = r2.b and r1.c =  r2.c) and (r1.d != r2.d or r1.e != r2.e);\n", "intent": "**_[5 points]_**\n$\\{A, B, C\\}$ is a **superkey** for a relation $R(A,B,C,D,E)$.\n"}
{"snippet": "myarray = np.array([3, 6, 1, 0, 10, 22])\nmyarray_plus1 = myarray + 1\nmyarray_plus1\n", "intent": "In contrast, adding one to every element of a NumPy array is far simpler:\n"}
{"snippet": "def wait_here(t):\n    import time, os\n    time.sleep(t)\n    return os.getpid()\n", "intent": "When you do async execution, the calls return an AsyncResult object immediately\n"}
{"snippet": "def problem0048():\n    n = 1000\n    total = 0\n    while n > 0:\n        total += n**n\n        n -= 1\n    return int(str(total)[-10:])\nprint(time_execution(\"problem0048()\"))\n", "intent": "The series, $1^1 + 2^2 + 3^3 + ... + 10^{10} = 10405071317$.\nFind the last ten digits of the series, $1^1 + 2^2 + 3^3 + ... + 1000^{1000}$.\n"}
{"snippet": "countWords = z_str_rdd_split_flatmap.map(lambda word:(word,1))\ncountWords.collect()\n", "intent": "Convert the elements into key-value pairs:\n"}
{"snippet": "def my_abs(x):\n    if x >= 0:\n        return x\n    return -x\n", "intent": "You can make any function that accepts primitive data types vectorized using the numpy function `np.vectorize`:\n"}
{"snippet": "x = [[1, 2, 3], [4, 5, 6]]\na,b = np.array_split(x,2)\nprint(a)\nprint(b)\nnp.concatenate((a,b),axis =1)\nprint(np.array([[1, 2, 3], [4, 5, 6]]))\n", "intent": "Let x be array [[1, 2, 3], [4, 5, 6]]. Convert it to [1 4 2 5 3 6].\n"}
{"snippet": "x.shape = (1,3)     \nprint np.shape(x)\n", "intent": "We can re-shape this array as a row vector by performing the following action.\n"}
{"snippet": "print get_residual_sum_of_squares(test_feature_matrix,normalized_weights1e4,test_output)\n", "intent": "Compute the RSS of each of the three normalized weights on the (unnormalized) `test_feature_matrix`:\n"}
{"snippet": "twitter2orcid('catmacOA')\n", "intent": "Let's do a quick test of the function\n"}
{"snippet": "first\nsecond\nthe third line\nthen a fourth line\n", "intent": "Create an example file:\n"}
{"snippet": "datetime.strptime('20150120', '%Y%m%d')\n", "intent": "Convert a string into a datetime object:\n"}
{"snippet": "Cov_XY = E_XY - E_X * E_Y\nprint(\"Cov(XY) = \", Cov_XY)\n", "intent": "We are now ready to compute the covariance:\n"}
{"snippet": "def bayes(p_A, p_B_given_A, p_notB_given_notA):\n    posterior = 0\n    return posterior\np_A = 0.2\np_B_given_A = 0.9\np_notB_given_notA = 0.5\nposterior = bayes(p_A, p_B_given_A, p_notB_given_notA)\nprint('Your function returned that the posterior is: ' + str(posterior))\n", "intent": "Complete this function so that it returns the posterior probability for any set of inputs.\n"}
{"snippet": "long_string = 'This is a really, really, really '\\\n              'long sentence'\nprint long_string\n", "intent": "You can also use the backslash\n"}
{"snippet": "lst = [1,2,3,4]\nlst\n", "intent": "1-dimension (array)\n"}
{"snippet": "n = 10\nd = 2\nresult = n / d \nprint result \nn = 10\nd = 3\nresult = n / d\nprint result \n", "intent": "Division is slightly peculiar:\n"}
{"snippet": "L = float(raw_input('Please enter length (m) --> '))\nw = float(raw_input('Please enter u.d.l. (kNm) --> '))\nm_max = w * L**2 / 8.0\nq_max = w * L / 2.0\nprint 'Our beam has a max. bending moment of %s kNm and shear force of %s kN' % (m_max, q_max)\n", "intent": "We remember the following formulae: $M_{max} = \\frac{wL^2}{8}$, $Q_{max} = \\frac{wL}{2}$\n"}
{"snippet": "my_list = [1,3,5,7,9]\nfav_foods = ['ice cream', 'butter', 'pies']\nfor x in my_list:\n    print x\nfor f in fav_foods:\n    print f\n", "intent": "Jumping ahead a little, we can loop over a *list* (lists will be defined more fully in lecture 3)\n"}
{"snippet": "print(\" Left Encoder: %7.3f radians\" % p3dx.leftEncoder)\nprint(\"Right Encoder: %7.3f radians\" % p3dx.rightEncoder)\n", "intent": "You can use them in your programs; for example,\nthe following code pretty-prints their values:\n"}
{"snippet": "def follow_line():\n    print('Following the line')\n    while not is_obstacle_detected():\n        ...\n    print('Obstacle detected')\n", "intent": "The second function is the line following behavior as seen in previous notebooks during this week.\n"}
{"snippet": "dt_now = datetime.now()\n", "intent": "Get the current datetime:\n"}
{"snippet": "lst = [1,2,[3,4],[5,[100,200,['hello']],23,11],1,7]\n''.join(lst[3][1][2])\n", "intent": "** Given this nested list, use indexing to grab the word \"hello\" **\n"}
{"snippet": "def paper_doll(text):\n    new_text=\"\"\n    for letter in text:\n        new_text = new_text+(letter*3)\n    return new_text\n", "intent": "    paper_doll('Hello') --> 'HHHeeellllllooo'\n    paper_doll('Mississippi') --> 'MMMiiissssssiiippppppiii'\n"}
{"snippet": "class ListNode(object):\n     def __init__(self, x):\n            self.val = x\n            self.next = None\n", "intent": "Sort a linked list in $O(n log n)$ time using constant space complexity.\n"}
{"snippet": "for num in l:\n    if num % 2 == 0:\n        print(num)\n    else:\n        print('Odd number')\n", "intent": "We could have also put in else statement in there:\n"}
{"snippet": "perweek=[]\nfor j in range(1,8):\n    perweek.append(reduce (lambda x,y:int(x)+int(y),[list(filter(lambda x:x[2]=='13'and x[3]==str(j),lines))[i][4] for i in range(len(list(filter(lambda x:x[2]=='13'and x[3]==str(j),lines))))]))\nprint(perweek)\n", "intent": "With the help of __*LAMBDA,REDUCE & FILTER*__ Functions,Finding out the Sum of all members born in all years as per date and as per day\n"}
{"snippet": "MATCH (c:Class)-[:DECLARES]->(f:Field)<-[w:WRITES]-(m:Method)\nWHERE \n    EXISTS(f.static) AND NOT EXISTS(f.final)\nRETURN \n    c.name as InClass, \n    m.name as theMethod, \n    w.lineNumber as writesInLine, \n    f.name as toStaticField\n", "intent": "There are some heuristics...\n"}
{"snippet": "values = (random.rand(len(states)) * 5).astype('int')\nlgn.map(states, values, colormap='Lightning')\n", "intent": "Including our custom Lightning colormap\n"}
{"snippet": "MW_water = Q_(18.0, 'g/mol')\np_igl = (m*units.molar_gas_constant*T/(V*MW_water)).to('bar')\n", "intent": "The ideal gas EOS is\n$$pV = mRT$$\n"}
{"snippet": "eta = Wdot_net/Qdot_in\n", "intent": "The thermal efficiency is given by\n$$\\eta = \\frac{\\dot{W}_{net}/\\dot{m}}{\\dot{Q}_{in}/\\dot{m}}$$\n"}
{"snippet": "delta = dt_now - dt\ndelta\n", "intent": "Subtract two datetime fields to create a timedelta:\n"}
{"snippet": "names = survey.select('Name') \nnames\n", "intent": "1) For kicks, write a line of code that outputs a table containing only the names of the students.\n"}
{"snippet": "let rec insert x t = match t with Empty -> Node (x, Empty, Empty)\n    | Node (v, l, r) -> if x < v then Node (v, insert x l, r) \n                      else if x > v then Node (v, l, insert x r)\n                      else t\n", "intent": "4) Implement a function `insert : int -> tree -> tree` which inserts a value into the tree. If the value exists already, the tree is not modified.\n"}
{"snippet": "Twitter=pickle.load(open('./secret_twitter_credentials.pkl','rb'))\n", "intent": "Make sure to select the relative path to the `secret_twitter_credentials.pkl` file:\n"}
{"snippet": "print(\"Class 1: \")\nprint(\"\\tMean: \", raw_data[raw_data[:, -1] == 1].mean(axis=0))\nprint(\"\\tSTD: \", raw_data[raw_data[:, -1] == 1].std(axis=0))\nprint(\"\\nClass 2: \")\nprint(\"\\tMean: \", raw_data[raw_data[:, -1] == 2].mean(axis=0))\nprint(\"\\tSTD: \", raw_data[raw_data[:, -1] == 2].std(axis=0))\nprint(\"\\nClass 3: \")\nprint(\"\\tMean: \", raw_data[raw_data[:, -1] == 3].mean(axis=0))\nprint(\"\\tSTD: \", raw_data[raw_data[:, -1] == 3].std(axis=0))\n", "intent": "**2.4**: Calculate the class-wise mean and standard deviation of the each column.\n"}
{"snippet": "odd_list = []\ndef list_to_tuple(list):\n    reverse_list = list[::1]\n    for index, value in enumerate(list):\n        if index % 2 != 0:\n            odd_list.append(index)\n    return (reverse_list, odd_list)\nprint(list_to_tuple([1,2,3,4,5,6]))\n", "intent": "---\n- **A list with the items in reverse order.**  \n- **A list of the items in the original list that have an odd index.**\n"}
{"snippet": "from math import factorial\nprint factorial(9)/factorial(9-3)\n", "intent": "**Q: If there are 9 players on a baseball team, how many possibilities are there for the first 3 players in the batting lineup?**\n"}
{"snippet": "class NumArray(object):\n    def __init__(self, nums):\n        self.nums = nums\n    def sumRange(self, i, j):\n        return sum(self.nums[i:j+1])\n", "intent": "https://leetcode.com/problems/range-sum-query-immutable/\n"}
{"snippet": "k = 3\narr = np.array(x)\nk_idx = arr.argsort()[-k:][::-1]\nprint(\"Top-{0} authorities: {1}\".format(k, np.array(nodes)[k_idx]))\nprint(\"Their scores: {0}\".format(arr[k_idx]))\narr = np.array(y)\nk_idx = arr.argsort()[-k:][::-1]\nprint(\"Top-{0} hubs: {1}\".format(k, np.array(nodes)[k_idx]))\nprint(\"Their scores: {0}\".format(arr[k_idx]))\n", "intent": "**You can see that the two authority vector and hub vector are the same. So the network must be an undirected graph**\n**Interpret the result:**\n"}
{"snippet": "conn = psycopg2.connect(dbname=\"yammer_data\", user=\"postgres\")\ncur = conn.cursor()\nwith open('data/yammer_users.csv', 'r') as f:\n    next(f)\n    cur.copy_from(f, 'yammer_users', sep=',', null=\"\")\nconn.commit()\nconn.close()\n", "intent": "I copied each table from its csv file in the \"data\" folder to its corresponding table in the yammer_data database.\n"}
{"snippet": "old_file_path = 'type_util.py'\nwith open(old_file_path, 'r') as old_file:\n    for line in old_file:\n        print(line.rstrip())\n", "intent": "Open a file in read-only mode.<br\\>\nIterate over the file lines.  rstrip removes the EOL markers.<br\\>\n"}
{"snippet": "y = [x for x in range(1,51) if x%3 == 0]\nprint y\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "fit.f = lm(H ~ Q, data=data.frame(data))\nsummary(fit.f)\n", "intent": "You can also see this first stage result by doing the regression using the LM command.\n"}
{"snippet": "hist(null.mean, freq=FALSE, breaks=40,\n     main=paste(\"Null (Bootstrap) Distribution, N=1000, Resamples=\", \n                bdraws, sep=\"\"))\nabline(v=mean, lwd=3, col=\"blue\")\narrows(x0=mean, x1=0.53, y1=22, y0=22, length=0.1, col=\"blue\")\narrows(x0=mean, x1=0.53, y1=15, y0=15, length=0.1, col=\"blue\")\narrows(x0=mean, x1=0.53, y1=8, y0=8, length=0.1, col=\"blue\")\ntext(0.53, 27, \"Sample Mean\", col=\"blue\")\n", "intent": "What are we doing graphically? Getting the \"area of the histogram\" of the null distribution to the right of the sample mean.\n"}
{"snippet": "plot(x=H, y=W, pch=21, bg='red', col='red', cex=0.5)\n", "intent": "Above, we plot the first 10 observations of our simulated dataset. And below, we draw a scatter plot of all the data.\n"}
{"snippet": "for k, l in singles: pos[k][l] += vel[k][l] * next_event\n", "intent": "Further, replace the line\n"}
{"snippet": "gen = (i ** 2 for i in range(5))\nprint(type(gen)) \nprint(gen) \n", "intent": "* generator example\n"}
{"snippet": "_Question 5_\n_A:_ Name a crypto system that is unconditionally secure\n_B:_ How does it work?\n_C:_ How would you implement the _Gen_ part of the crypto system, to generate the key?\n", "intent": "_Question 4_ \nWhat is the difference between unconditionally secure and computationally secure crypto systems\n"}
{"snippet": "Enc_string(\"DKP LEA\",-22)\n", "intent": "Thus the shift is $k=-4$, or equivalently $k=22$.\n"}
{"snippet": "x = [7 1 2 5 8 9]\nRoman.(x)   \n", "intent": "We would like to display it nicely, in Roman numerals:\n"}
{"snippet": "new_file_path = 'hello_world.txt'\nwith open(new_file_path, 'w') as new_file:\n    new_file.write('hello world!')\n", "intent": "Create a new file overwriting any previous file with the same name, write text, then close the file:\n"}
{"snippet": "function rect(;width=1,height=1,fill=\"\n    for i in 1:height\n        println(fill^width)\n    end\nend\n", "intent": "Just like iterators can be splatted as positional arguments, dict-like collections and named tuples can be splatted as keyword arguments.\n"}
{"snippet": "LEN = 500\nr = rand(1:length(shake_text)-LEN)\nprintln(shake_text[r:r+LEN])\nflush(STDOUT)\n", "intent": "A random subset of the Shakespeare training data\n"}
{"snippet": "listobjA == listobjB\n", "intent": "We can also validate the *equality* of these two objects by using the operator `==` :\n"}
{"snippet": "import sqlite3\nconn = sqlite3.connect('mytestdb.sqlite')\ncursor = conn.cursor()\nsql = 'create table students(name text, username text, id integer)'\ncursor.execute(sql)\ncursor.close()\n", "intent": "Now Lets create a table using Python and SQLite:\n"}
{"snippet": "for num in range(0,11,2):\n    print (num)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "list2 = [3,4,2,5,1]\nlist2.sort()\nprint(list2)\n", "intent": "**Problem 9: Sort the list below:**\n"}
{"snippet": "divisor = 2\nfor num in range(0, 10, 2):\n    print(num/divisor) \n", "intent": "Mind that the results should be float\n"}
{"snippet": "new_dict = {\"key_1\": 10,\"key_2\": 100,\"key_3\": 1000,\"key_4\": 10000}\nprint(new_dict)\n", "intent": "    \"key_1\": 10\n    \"key_2\": 100\n    \"key_3\": 1000\n    \"key_4\": 10000\n"}
{"snippet": "generate_names('schnippschnapp', 8)\ngenerate_names(-3, 8)\ngenerate_names('male', 123456789123456789123456789123456789123456789123456789123456789123456789123456789)\n", "intent": "But did you think about weird input that some other programmer might use?\n"}
{"snippet": "strings = ['foo', 'bar,', 'baz', 'f', 'fo', 'b', 'ba']\nstrings.sort(key=lambda x: len(list(x)))\nstrings\n", "intent": "Sort a sequence of strings by the number of letters:\n"}
{"snippet": "myfile = open('myfile.txt', 'w')\nmyfile.write('hello text file\\n')\nmyfile.write('goodbye text file\\n')\nmyfile.close()\nmyfile = open('myfile.txt')\nmyfile.readline()               \n", "intent": "* File iterators are best for reading lines\n* Content is strings, not objects\n* Files are buffered and seekable\n* close is often optional\n"}
{"snippet": "import sys\nsys.argv = [\"program.py\", \"-x1\"]\nsys.argv = [\"program.py\", \"-x\", \"1\"]  \n", "intent": "A convenience package for handling command line parameters\n"}
{"snippet": "import pickle\nwith open('image_features.pkl', 'wb') as pickle_file:\n    pickle.dump(image_features, pickle_file, protocol=pickle.HIGHEST_PROTOCOL)\n", "intent": "Save the image_features to be able to access them without having to re-run the above lines\n"}
{"snippet": "s.difference(s_copy)\n", "intent": "It returns the difference of two or more sets. The syntax is:\n    set1.difference(set2)\nFor example:\n"}
{"snippet": "lst =  ['Start',0,('haha','0'),{'k1': 5}]\n", "intent": "6.) Keep track of each element of the list below using enumerate() and display the total count of index.\n"}
{"snippet": "list(range(3,40,4))\n", "intent": "Step size just means how big of a jump or step you take from the starting number to get to the next number.\n"}
{"snippet": "initial_sum = 0\nlst = [0,1,2,3,4,5,6,7,8,9,10]\nfor num in lst:\n    initial_sum += num\nprint(initial_sum)\n", "intent": "3.) Using for, sum up all the numbers from 0 to 10.\n"}
{"snippet": "result = add_num(1,2,3)\n", "intent": "1 as num1, 2 as num2 and 3 as num3 respectively gets replaced and do the expresions in *return* statement.\n"}
{"snippet": "def capitalization(name):\n    if len(name) > 2:\n        return name[:2].capitalize() + name[2:].capitalize()\n    else:\n        return 'Name is too short!'\n", "intent": "5.) Write a function that capitalizes the first and third letters of a name.\n    capitalization('drstrange') --> 'DrStrange'\n"}
{"snippet": "def make_closure(x):\n    def closure():\n        print('Secret value is: %s' % x)\n    return closure\nclosure = make_closure(7)\nclosure()\n", "intent": "Each time the following closure() is called, it generates the same output:\n"}
{"snippet": "def refresh_screen():\n    pass\n", "intent": "**Step3 : Design a function that clears the output and displays the headers and the board above you have written.**\n"}
{"snippet": "a = 1\nprint(a > 0)\nprint(a < 0)\n", "intent": "Similar, we can check whether a variable is greater or smaller than another variable or value:\n"}
{"snippet": "global_variable = 'This is global'\ndef function4(parameter):\n    print(parameter)\n    print(global_variable)\nfunction4('This is local')\n", "intent": "If we **reference** a variable which is not defined within the function's body, it is assumed to be a global variable:\n"}
{"snippet": "print(\"if dU=1 and W = 100, solve FirstLaw\")\nprint(FirstLaw(dU_in=1.,Q_in=10.,W_in=100.,solve_for_which='solve_for_Q'))\nprint(\"then Q=\",FirstLaw(dU_in=1.,Q_in=10.,W_in=100.,solve_for_which='solve_for_Q')[1],\".\") \nprint(\"Now, if dU=1 and Q = 10, solve FirstLaw\")\nprint(FirstLaw(dU_in=1.,Q_in=10.,W_in=100.,solve_for_which='solve_for_W'))\nprint(\"then W=\",FirstLaw(dU_in=1.,Q_in=10.,W_in=100.,solve_for_which='solve_for_W')[2],\".\")\nprint(\"Finally, if Q=10 and W = 100, solve FirstLaw\")\nprint(FirstLaw(dU_in=1.,Q_in=10.,W_in=100.,solve_for_which='solve_for_dU'))\nprint(\"then dU=\",FirstLaw(dU_in=1.,Q_in=10.,W_in=100.,solve_for_which='solve_for_dU')[0],\".\")\n", "intent": "Now we can call a single function named \"FirstLaw\" and ask it to do three kinds of calculations\nSee below some test usages:\n"}
{"snippet": "a = [1,2,3]\nb = [1,2,3]\nc = [a,b]\n", "intent": "When you have an iterator of iterators .. for example a list of lists .. then you can use what is known as nested loops to flatten the list.\n"}
{"snippet": "index = 0\nwhile index < len(my_list):\n    print(\"my_list[{}] : {}\".format(index, my_list[index]))\n    index += 1\n", "intent": "Just like for loop, we can traverse the list based on its index numbers (again, we'll learn about loops in next module):\nExample:\n"}
{"snippet": "list(map(lambda x: x**2, range(1, 10)))\n", "intent": "Even better, we can write the whole thing in a single line\n"}
{"snippet": "drop table if exists item_item_sim_view_cos;\ncreate table item_item_sim_view_cos as\nselect t1.item_id item_id, t2.item_id sim_item_id, sum(t1.nw * t2.nw) sim\nfrom item_nw t1\n    join item_nw t2 on t2.uid = t1.uid\nwhere t1.item_id <> t2.item_id\ngroup by t1.item_id, t2.item_id;\ncreate index idx_item_item_sim_view_cos_1 on item_item_sim_view_cos (item_id);\n", "intent": "Compute consine similarity using inner product\n"}
{"snippet": "c = [f(element) for element in b]\n", "intent": ">**Ex. 1.1.5**: Do the exact same thing using a *list comprehension*.\n"}
{"snippet": "def foo(func, arg, *args, **kwargs):\n    print('arg: %s', arg)\n    print('args: %s', args)\n    print('kwargs: %s', kwargs)\n    print('func result: %s', func(args))\nfoo(sum, \"foo\", 1, 2, 3, 4, 5)\n", "intent": "Print arguments and call the input function on *args:\n"}
{"snippet": "def countDog(text):\n    text = text.lower().split()\n    return sum(map(lambda var:var == 'dog', text))\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "def plus_one_easy(x):\n", "intent": "I love numbers, but bigger numbers are nice. So let's write a function to add one to a number.\n"}
{"snippet": "sorted(mydict.items(), key=itemgetter(0))\n", "intent": "<h4>Sorting by keys</h4>\n"}
{"snippet": "mysecondwidget = widgets.RadioButtonsWidget(values=[\"Item A\", \"Item B\", \"Item C\"], value=\"Item A\")\ndisplay(mysecondwidget)\n", "intent": "Widget values can also be set with kwargs during the construction of the widget (as seen below).\n"}
{"snippet": "def countDog(pa):\n    ct=0\n    for word in pa.lower().split():\n        if word == 'dog':\n            ct = ct + 1\n    return ct\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "variables = {}\nfor category in [\"gender\", \"age\", \"cd_tab\", \"ncd_tab\"]:\n    data = session.get(\"https://jordan.emro.info/api/variables/\" + category).json()\n    for l in data.keys():\n        print(\"Variable id:\", l, \"name:\", data[l][\"name\"])\n    variables.update(data)\n", "intent": "Here follows also a selection of codes you can use for this excersice\n"}
{"snippet": "num = int(input(\"Type in a number \"))\n", "intent": "Finish the code below to print out all the numbers from the number the user entered to 0\n"}
{"snippet": "remainder = len(message) % 3\nif remainder != 0:\n    num_x = 3 - remainder\nelse:\n    num_x = 0\nnum_x = (-len(message)) % 3\npadding = \"X\" * num_x\npadded_message = message + padding\nprint \"Message:\", padded_message\n", "intent": "<div class=\"btn-group\"><button class=\"btn\" onclick=\"IPython.canopy_exercise.toggle_solution('6')\">Solution</button></div>\n"}
{"snippet": "unique_o_words = set(o_words)\nprint unique_o_words\n", "intent": "<div class=\"btn-group\"><button class=\"btn\" onclick=\"IPython.canopy_exercise.toggle_solution('5')\">Solution</button></div>\n"}
{"snippet": "from functools import partial\nadd_five = partial(add_numbers, 5)\nadd_five(2)\n", "intent": "The built-in functools can simplify currying with partial:\n"}
{"snippet": "from __future__ import print_function\n__author__ = 'hbk'\nimport pylab as pl\nimport numpy as np\n", "intent": "Distributions, Moments, and the Cental Limit Theorem\n"}
{"snippet": "if a < 5 :\n    a = a + 1\nprint a\n", "intent": "Now that that cell is executed, let's look at the following piece of trivial code:\n"}
{"snippet": "birthday_lists = {'Carlos': [\"trains\", \"planes\", \"automobiles\"], 'Samantha': [\"mountain bike\", \"suit case\", \"plane ticket to Utah\"], 'Bryan': [\"Working response code\", \"new laptop\"]}\n", "intent": "The values stored in the dictionary can be lists. For example:\n"}
{"snippet": "print \"The name you entered was: {}\".format(my_name)\n", "intent": "We can also use our 'fancy' string formating here.\n"}
{"snippet": "print [x for x in range(0,21) if x % 2 != 0]\n", "intent": "We can use this to remove elements from a list as well. Here we will print the odd members of range(0,21).\n"}
{"snippet": "newstring = \"Here is\\na new line\"\nprint newstring\n", "intent": "We can have strings with special characters if we use the special escape character \\\n"}
{"snippet": "print \"You owe ${:.2f}.\".format(my_number)\n", "intent": "We can also insert this number into any string and have it print out nicely.\n"}
{"snippet": "ned.setposition(100,100)\n", "intent": "So all of these drawings are starting ned in the middle of the screen. What if we wanted to start somewhere else? \n"}
{"snippet": "import numpy as np\nintegrals = 0\nnpts = 100\nx_values = np.linspace(0,1,npts)\ndx = x_values[1] - x_values[0]\nz = lambda x : x**2\nfor i in range(npts):\n    integrals += z(x_values[i])\nintegrals *= dx    \nprint \"Integral of x**2 from 0 to 1 is ~ %2.4f\" % integrals\n", "intent": "The error here arises because there is no base case for the recursion. We need to add the line \"if n == 1: return 1\" to make it work.\n"}
{"snippet": "print(\"Subtraction: \\t\" + str(myarray - 2))\nprint(\"Multiplication:\\t\" + str(myarray * 10))\nprint(\"Squared: \\t\" + str(myarray ** 2))\nprint(\"Square root: \\t\" + str(np.sqrt(myarray)))\nprint(\"Exponential: \\t\" + str(np.exp(myarray)))\n", "intent": "We can do the same thing for subtraction, multiplication, etc.:\n"}
{"snippet": "if a < 5:\n    a = a + 1\n    print a\nelif a < 10:\n    a = a + 2\n    print a\nelse:\n    a = a - 10\n    print a\n", "intent": "What if we have a long list of conditions? We can use the elif statement, which is short for \"else if\"\n"}
{"snippet": "(6 == 6) or (12/3 > 2)\n", "intent": "The or operator checks to see if AT LEAST ONE of the inputs is True.\n"}
{"snippet": "bryans_age = age(1986,9,20) \njoels_age = age(1990,11,1)  \nprint \"Bryan is\", bryans_age,\"years old.\"\nprint \"Joel is\", joels_age,\"years old.\"\n", "intent": "The result looks the same, but the new structure allows us to do things like this:\n"}
{"snippet": "print window.window_height()\nprint window.window_width()\n", "intent": "There are many things we can do with this window we created.\n"}
{"snippet": "multiples = []\ni = 5\nwhile i < 100:\n    multiples.append(i)\n    i = i + 5\nprint multiples\n", "intent": "Write a cell that creates a list of all multiples of 5 less than 100.\n"}
{"snippet": "def multiples(a,b):\n    finale = 1;\n    while((a * finale ) <= b):\n        print a * finale;\n        finale+=1;\n", "intent": "Write a function that takes two numbers a and b, and prints all multiples of a that are less than b.\n"}
{"snippet": "numlist = [1,2,3,4,5,6,7,8,9,10]\n", "intent": "Now let's do the same thing using a for loop. First, let's make a list of the numbers that we want to find the squares of.\n"}
{"snippet": "a = 3          \nwhile a < 18:  \n    print a    \n    a = a + 1  \n", "intent": "Write a loop that prints the numbers 3 through 17\n"}
{"snippet": "clean_up(atom)\nclean_up(window)\n", "intent": "It works! But we quickly lost our atom. Thats because we didn't force our atom to interact with out screen, so he just floated off.\n"}
{"snippet": "import logging\nimport time\nfrom logging.handlers import TimedRotatingFileHandler\ndef create_timed_rotating_log(path):\n", "intent": "The following code snippet is taken from [here](http://www.blog.pythonlibrary.org/2014/02/11/python-how-to-create-rotating-logs/).\n"}
{"snippet": "try:\n    variable_does_not_exist\nexcept Exception as e:\n    logger.error('Please create the variable before using it')\n", "intent": "try:\n    variable_does_not_exist\nexcept Exception as e:\n    logger.error('Please create the variable before using it')\n"}
{"snippet": "x_array = py.linspace(-r, r)\ny_plus = py.sqrt(r**2 - x_array ** 2)\npy.fill_between(x_array, y_plus)\npy.axis('equal')\npy.grid(True)\n", "intent": "$$\ny = \\sqrt{r^2 - x^2}\n$$\n"}
{"snippet": "... your code here ...\n", "intent": "Set style for ligand `1UN` to sphere and color by greenCarbon color scheme.\n"}
{"snippet": "names = []\nfor key in c_count.keys():\n    names.append(key)\nsorted(names)\n", "intent": "---\nThis will be a list of the peoples' names. We are going to use this in the section below. This can be done with a for-loop.\n"}
{"snippet": "empty_list = []\nprint(empty_list, len(empty_list))\n", "intent": "lists can be also empty\n"}
{"snippet": "l = list(range(3))\nll = '3 4 5'.split(' ')\n", "intent": "+ Create two list of three elements each\n"}
{"snippet": "print(25 % 5)\nprint(12 % 5)\n", "intent": "**Important!**: When the modulus operator returns 0 means that the number is divisible! \n"}
{"snippet": "def is_odd(x):\n    if x % 2 == 0:\n        print('x is even')\n    else:\n        print('x is odd')\n", "intent": "`if` staments are also usefull for **alternative execution**, in which there are two possi-\nbilities and the condition determines which one runs.\n"}
{"snippet": "import math\nmath.isinf  \nhelp(math.isnan)\n", "intent": "---\nIt works on modules to list the available methods and variables. Take the `math` module, for example:\n"}
{"snippet": "tup = (1, 2, 3)\ntup\n", "intent": "A tuple is a one dimensional, fixed-length, immutable sequence.\nCreate a tuple:\n"}
{"snippet": "integrate(sqrt(y**2 + 3), (x,0,2*y), (y,0,1))\n", "intent": "Evaluate\n$$\\int_0^1\\int_0^{2y} \\sqrt{y^2 + 3}\\;dx\\,dy$$\n"}
{"snippet": "x =  sin(exp(atan2(1,2)))\n", "intent": "Julia has all the usual math functions.\n"}
{"snippet": "_this_is_my_idea_of_a_long_variable_name_ = \"short string\"  \n", "intent": "The initial character may also be an underscore (as can later ones):\n"}
{"snippet": "array6 = collect(linspace(0, 10, 11))\n", "intent": "To access the actuale values, we use the `collect()` function.\n"}
{"snippet": "tup2 = (1, 3, 5, 7, 9, 11, 13, 15);\n", "intent": "Tuples can also be sliced.\n"}
{"snippet": "dict5 = Dict{AbstractString,Int16}(\"a\" => 1,\"b\" =>2 ,\"c\" =>3 ,\"d\" =>4 ,\"e\" =>5 ,\"f\" =>6)\n", "intent": "A dictionary can be sorted.\n"}
{"snippet": "lastelem(x) = x[end]\n", "intent": "Each case above could basically work in Python. In fact, we can do something very like duck typing:\n"}
{"snippet": "Dual(5, 2) - Dual(3, 1)\n", "intent": "With promotion and conversion defined, we *only* need to add arithmetic for `Dual`s. Other arithmetic operations automatically promote as needed.\n"}
{"snippet": "println(v + w)\nprintln(2v)\n", "intent": "[2] Try doing vector space operations on the vectors (adding two vectors, multiplying a vector by a scalar).\n"}
{"snippet": "list_1 = [1, 2, 3]\ntype(tuple(list_1))\n", "intent": "Convert to a tuple:\n"}
{"snippet": "x = 3.5\n(x-1) * (x-2)\n", "intent": "If we give `x` a value first, then it works:\n"}
{"snippet": "n = 10\nex = :(x-1)\nfor i in 2:n\n    ex = :( $ex * (x - $i) )\nend\n", "intent": "This did not work, since once again we did not want \"the code '`i`'\", but rather the value of the variable `i`. So:\n"}
{"snippet": "macro traverse(expr)\n    traverse!(expr)\n    @show expr\n    expr\nend\n", "intent": "Now let's define a new macro `@replace` that uses our previous `replace` function:\n"}
{"snippet": "T = 30  \nN = 10  \nplot(legend=false)  \nfor i in 1:N\n    plot!(1:T, walk(T))   \nend\nhline!([0], c=:black, ls=:dash, lw=2)  \n", "intent": "Let's draw a few walks:\n"}
{"snippet": "A = rand(1000, 1000)\nB = rand(1000, 1000);\n", "intent": "Suppose we have two matrices and wish to add one to the other:\n"}
{"snippet": "struct HasData{T, S<:AbstractVector{T}} \n    data::S\nend\n", "intent": "Suppose we want to define a type that needs access to a type `T` and to a `Vector` of that type. We can write this as follows:\n"}
{"snippet": "r = cos(2*t)*N.x + sin(2*t)*N.y + t*N.z\nr.applyfunc(lambda f: integrate(f,(t,0,pi/4)))\n", "intent": "Evaluate the integral $\\int_0^{\\pi/4} \\cos(2t)\\i + \\sin(2t)\\j + t\\k\\;dt$\n"}
{"snippet": "print(flat.distinct().count())\nflat.count()\n", "intent": "Finally, use `distinct()` to count the number of different words in the RDD.\n"}
{"snippet": "bla = lines.filter(lambda x: 'peace' in get_words(x) and 'war' in get_words(x))\nprint(bla.take(7))\n", "intent": "Find all the lines that mention both war and peace **without** using `intersection()`.\n"}
{"snippet": "nested_tup = ([1, 2, 3], (4, 5))\nnested_tup\n", "intent": "Create a nested tuple:\n"}
{"snippet": "M = np.loadtxt('data/netflix_matrix.txt')\nI = M > 0\nI = I.astype(int)\n", "intent": "Start out by loading and viewing the data\n"}
{"snippet": "sns.countplot(x='sex',data=tips);\n", "intent": "This is essentially the same as barplot except the estimator is explicitly counting the number of occurrences. Which is why we only pass the x value:\n"}
{"snippet": "d = b.split(' ')\nprint (d)\n", "intent": "**split( )** function is used to convert a string back to a list. Think of it as the opposite of the **join()** function.\n"}
{"snippet": "x = 10\ny = 12\nif x > y:\n    print (\"x>y\")\nelif x < y:\n    print (\"x<y\")\nelse:\n    print (\"x=y\")\n", "intent": "if some_condition:\n    algorithm\nelif some_condition:\n    algorithm\nelse:\n    algorithm\n"}
{"snippet": "import nltk\nfrom nltk.tokenize import TreebankWordTokenizer\nfrom nltk.tokenize import WordPunctTokenizer\ntext=\" Hello everyone. I'm your automated assistant. Hope you'll find natural language processing interesting.\"\ntokenizer = TreebankWordTokenizer()\nprint(\"\\n::Treebank tokenizer::\",tokenizer.tokenize(text))\nprint(\"\\n::NLTK word tokenizer::\",nltk.word_tokenize(text))\ntokenizer=WordPunctTokenizer()\nprint(\"\\n::Word Punct Tokenizer::\", tokenizer.tokenize(text))\n", "intent": "Following are different ways to tokenize text using NLTK\n"}
{"snippet": "import math\nx = math.sin(1.2)\n", "intent": "Let us use a simple pair of Python commands:\n"}
{"snippet": "list4.append('end')\nlist4\n", "intent": "Additional entries can be appended onto the end of a list:\n"}
{"snippet": "print(divide(4.0, 0.0))\n", "intent": "But what happens if we try something *really stupid*?\n"}
{"snippet": "print(\"All prime numbers less than or equal to 20:\")\nfor p in all_primes(20):\n    print(p)\n", "intent": "To use the iterator within a loop, we code it in the same way as with the `range` function:\n"}
{"snippet": "nested_tup[0].append(4)\nnested_tup[0]\n", "intent": "Although tuples are immutable, their contents can contain mutable objects.  \nModify a tuple's contents:\n"}
{"snippet": "print np.sqrt(2*np.log(2))\n", "intent": "$\\frac{\\partial^2 A}{\\partial^2 \\theta}  = 0 \\Rightarrow \\theta=B$\n"}
{"snippet": "noisy_flux = y + noise\npl.clf() \npl.plot(x,noisy_flux,'k.')\npl.xlabel(\"Time\")\npl.ylabel(\"Flux\")\n", "intent": "`y.size` is the number of elements in y, just like `len(y)` or, in IDL, `n_elements(y)`\n"}
{"snippet": "plot(x, y, lw=2)\naxis([0, 10, 0, 140])\nfill_between(xint, 0, yint, facecolor='gray', alpha=0.4)\ntext(0.5 * (a + b), 30,r\"$\\int_a^b f(x)dx$\", horizontalalignment='center', fontsize=20);\n", "intent": "Plot both the function and the area below it in the trapezoid approximation\n"}
{"snippet": "val query=\"INSERT INTO testTable VALUES (1,'Text1') \"\nconnection.createStatement.executeUpdate(query)\n", "intent": "Lets insert some data into our _testTable_\n"}
{"snippet": "val dfCust = sqlContext.read.format(\"com.ibm.spark.discover\").load(\"/resources/data/sparklingdata/data/sampleDataDir/customers.csv\")\ndfCust.printSchema\ndfCust.show\n", "intent": "Now that we have explored our drug data, let us explore our customer data.\n"}
{"snippet": "x=stats.FiniteRV('D3',{1:1/15., 2:1/15., \n                       3:1/15., 4:1/15.,\n                       5:1/15., 6:2/3.})\n", "intent": " whereas $\\mathbb{P}(1)=\\mathbb{P}(2)=\\ldots=\\mathbb{P}(5)=1/15$.\nWe can explore this using Sympy as in the following:\n"}
{"snippet": "phat = x.mean()\nprint phat\n", "intent": " The maximum likelihood estimator of $p$ is $\\hat{p}=\\sum X_i/n$,\n"}
{"snippet": "from scipy.stats import binom\nb=binom(100,.5) \ng = lambda i:b.pmf(np.arange(-i,i)+50).sum() \nprint g(10) \n", "intent": " which we have to solve for $\\epsilon$. Fortunately, all the tools we\nneed to solve for this are already in Scipy.\n"}
{"snippet": "print('The first letter is: {2}, the second: {1}, the third: {0}'.format('a','b','c'))\n", "intent": "Each parameter is indexed. We can manipulate where the argument appears in the string by using its index.\n"}
{"snippet": "(1, 3, 2) + (4, 5, 6)\n", "intent": "Concatenate tuples by creating a new tuple and copying objects:\n"}
{"snippet": "lview = rc.load_balanced_view()\nlview\n", "intent": "This time, we create a LoadBalancedView\n"}
{"snippet": "def get_actions(parsed):\n    actions = [el.lemma_ \n                for el in parsed \n                if \n               ]\n    return actions\n", "intent": "Write a function that can take a sentence parsed by spacy and return the verbs of the sentence (preferably lemmatized).\nHint: https://spacy.io/docs\n"}
{"snippet": "class DoublyLinkedListNoe(object):\n", "intent": "In this lecture we will implement a Doubly Linked List \n"}
{"snippet": "princess = getSolution(solution)\nprint(f'Die Prinzessin ist im Zimmer Nummer {princess[11]}.')\n", "intent": "We print the solution.\n"}
{"snippet": "{ pair for pair in English2Hebrew.items() }\n", "intent": "Given a dictionary $d$, the method $d.\\texttt{items}()$ can be used to iterate over all key-value pairs stored in the dictionary $d$.\n"}
{"snippet": "def divisors(k):\n    return { t for t in range(1, k+1) if k % t == 0 }\n", "intent": "The set of divisors of a natural number $k$ can be computed as follows:\n"}
{"snippet": "f1 = parse(s1)\ncnf.normalize(f1)\n", "intent": "Next, the formulas are parsed and transformed into clauses.\n"}
{"snippet": "x = 25\ndef printer():\n    x = 50\n    return x\nprint(x) \nprint(printer()) \n", "intent": " * This Chapter is going to describe the scope\n"}
{"snippet": "def blackjack(a,b,c):\n    bj = a+b+c \n    if bj > 21 and 11 not in (a,b,c):\n        return 'BUST'\n    elif 11 in (a,b,c):\n        return bj - 10\n    else: return bj\n", "intent": "    blackjack(5,6,7) --> 18\n    blackjack(9,9,9) --> 'BUST'\n    blackjack(9,9,11) --> 19\n"}
{"snippet": "(a, b, c, d), (e, f) = nested_tup\na, b, c, d, e, f\n", "intent": "Unpack nested tuples:\n"}
{"snippet": "def factorial(n):\n    prod = 1\n    for i in range(2, n+1):\n        prod *= i  \n    return prod\nimport math\nprint math.factorial(21)\nprint factorial(21)\n", "intent": "Using a function with a loop:\n"}
{"snippet": "your_are = [None,\n     [\"Why do you think I am {0}?\",\n      \"Does it please you to think that I'm {0}?\",\n      \"Perhaps you would like me to be {0}.\",\n      \"Perhaps you're really talking about yourself?\"]],\n", "intent": ": Add a regex to handle \"You are _____\" statments. The responses have been provided.\n"}
{"snippet": "def give_me_5():\n    return 5\n", "intent": "Write a function called `give_me_5` that returns the integer 5.\n"}
{"snippet": "a = \"Complete Python Programming Course\"\nlen(a)\n", "intent": "**Q:** How can we find **the length of a string** in Pyton?\n**A:** With using len() function.\n"}
{"snippet": "list8 = [1,2,3,4,5,6]\ndel list8[2] \nlist8\n", "intent": "We can delete one or more items from a list using the **del** keyword. It can even delete the list entirely.\n"}
{"snippet": "a = 6345759\nb = str(a)\nb\n", "intent": "We can use **str()** function to convert numbers to a string value. All numbers and points are converted to a character.\n"}
{"snippet": "listOffres = [1,0,-1,3,-2,0,0,-1,-2]\nparcours = buildOffreParcour(listOffres)\n", "intent": "Un autre exemple sur une liste de 8 offres \n"}
{"snippet": "new_policy = dict((k, np.argmax(v)) for k, v in policy_alpha.items())\nplot_policy(new_policy)\n", "intent": "Finally, we visualize the policy that is estimated to be optimal.\n"}
{"snippet": "s ='hello'\ns = s[::-1]\nprint s\n", "intent": "Reverse the string 'hello' using indexing:\n"}
{"snippet": "seq = [( 1, 2, 3), (4, 5, 6), (7, 8, 9)] \nfor a, b, c in seq: \n    print(a, b, c)\n", "intent": "A common use of variable unpacking is when iterating over sequences of tuples or lists:\n"}
{"snippet": "article.count(\"Trump\")\n", "intent": "Now count the number of times that the word `Trump` appears in the article. \n"}
{"snippet": "print('Hello World 1')\nprint('Hello World 2')\nprint('Use \\n print a new line')\nprint('\\n')\nprint('See what I mean?')\n", "intent": "We can use a print statement to print a string.\n"}
{"snippet": "y = np.random.rand(6)\nprint(y)\n", "intent": "an array of random values:\n"}
{"snippet": "for row in A:\n    print(\"-----\")\n    for c in row:\n        print(c)\n", "intent": "We can iterate over the entries of `A` by iterating over the rows, and then the entry in each row:\n"}
{"snippet": "import storm_analysis.sa_utilities.track_drift_correct as trackDriftCorrect\ntrackDriftCorrect.trackDriftCorrect(\"test_01/test.hdf5\", \"dao.xml\")\n", "intent": "This will do the tracking, drift correction and z value checking steps.\n"}
{"snippet": "class Animal:\n    name = 'default_name'\n    age = 'default_age'\nmy_pet = Animal() \nmy_pet.name = 'dog'\nmy_pet.age = '7'\nmy_pet.new = 'This is my own attribute'\nprint(my_pet.new)\n", "intent": "<img src=\"https://i.imgur.com/tNNtzCX.png\" width=800 height=600 />\n"}
{"snippet": "def f(x, y, z):\n    print(x, y, z)\nargs=(1, 2, 3)\nf(*args)\nkwargs = {'x':1, 'y':2, 'z':3 }\nf(**kwargs)\n", "intent": "---\n* **Varargs unpacking:** pass arbitrarily many positional or keyword arguments\n"}
{"snippet": "class Car():\n    def shout(self):\n        print(\"I'm a Car!\")\nclass Bus(Car):\n    def child_shout(self):\n        print(\"I'm a Bus!\")\n    def parent_shout(self):\n        super().shout()\n", "intent": "- call the parent method by `super()`\n"}
{"snippet": "h2o.describe(titanic[, 'Survived'])\n", "intent": "<br>\nExplain why we need to transform\n<br>\n"}
{"snippet": "list_1 = [1, 2, 3]\nlist_1\n", "intent": "A list is a one dimensional, variable-length, mutable sequence.\nCreate a list:\n"}
{"snippet": "x = fill(1.0, (3,)) \n", "intent": "Definindo um vetor preenchido com um\n"}
{"snippet": "x = data[:,0]\ny = data[:,1]\n", "intent": "Break data into x,y\n"}
{"snippet": "i = 10\nj = 20\nk = 30\ndef f():\n", "intent": "In general, avoid the use of global variables as they are often a source of bugs. For example\n```python\ndef f():\n"}
{"snippet": "def countDog(s):\n    count=0\n    for word in s.lower().split():\n        if word=='dog':\n            count+=1\n    return count    \n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "example_list.sort()\nexample_list\n", "intent": "Ahora, ordenaremos la lista alterando el orden de los elementos en la lista original:\n"}
{"snippet": "l = [1,4.5, 6, 9.0, 10, -1]\n", "intent": "Lists are data arrays. They can contain elements of different types (integers, floats).\nAn example of a list is\n"}
{"snippet": "a = 1\nb = 4\nif a < b:\n    print('a is smaller than b')\nelif a > b:\n    print('a is larger than b')\nelse:\n    print('a is equal to b')\n", "intent": "This is probably the most used conditional structure in programming. \nHere is the syntax in *Python*\n"}
{"snippet": "print(a[0,0], a[0,1]) \n", "intent": "Each dimension has its own index\n"}
{"snippet": "example_var_1 = a    \nexample_var_2 = b\nprint(example_var_1) \nprint(example_var_2)\n", "intent": "The two variables we used, have the names 'a' and 'b'. In your code you should use more descriptive names:\n"}
{"snippet": "array_a = np.array(list_a) \narray_b = np.array(list_b) \narray_c = array_a + array_b\narray_c\n", "intent": "With NumPy arrays, we just have to add the arrays together:\n"}
{"snippet": "filenames = ['2017-03-15.csv', '2017-04-03.txt', '2017-05-01.txt']\nfile = '2017-04-03.txt'\nif file in filenames:\n    print('file {} found!'.format(file))\n", "intent": "With the knowledge we have thus far, we can already write a small program, which you might find helpful:\n"}
{"snippet": "names = ['Jana']\nnames.append('Katrin')\nnames.append('Bianca')\nnames.insert(2,'Susanne')\nnames.extend(['Sophia'])\nprint(names)\n", "intent": "<a name=\"loesung04\"></a>Solutions exercise 04\n===\n"}
{"snippet": "for i in range(10):\n    file_name = 'file_{}.txt'.format(i)\n    open(join(path, file_name), 'w')\n", "intent": "Now let's automatically create a number of files. To do this, we put the functions we used before into a loop:\n"}
{"snippet": "print('A dictionary is a {}.'.format(data_types['dictionary']))\ndata_types['dictionary'] = 'collection indexed with keys'\nprint('A dictionary is a {}.'.format(data_types['dictionary']))\n", "intent": "Woops, we made a typo.  Let's correct it:\n"}
{"snippet": "A = np.arange(16).reshape((4,4))\nprint('before:')\nprint(A)\nA = A + 2\nprint('\\nafter:')\nprint(A)\n", "intent": "Standard operations, like addition, subtraction, multiplication or division on arrays are interpreted _element wise_ on every element of the array:\n"}
{"snippet": "print filter(lambda x: x % 3 == 0, myList)\n", "intent": "Non abbiamo effettivamente bisogno di creare una funzione, possiamo utilizzare le **lambda anonymous functions**.\n"}
{"snippet": "from math import factorial\nfacts = []\nfor i in range(10):\n    facts.append(factorial(i))\nprint facts\n", "intent": "Next lets generate the factorials.\n"}
{"snippet": "l = []\nprint \"before\"\nprint l\nfor i in range(10):\n    l.append(i)\nprint \"after\"\nprint l\n", "intent": "[QUA](https://wiki.python.org/moin/Generators) maggiori informazioni.\n"}
{"snippet": "from itertools import zip_longest\ndef combine_lists(str1, str2):\n    s = []\n    for x, y in zip_longest(str1, str2):\n        if x:\n            s.append(x)\n        if y:\n            s.append(y)\n    return s\n", "intent": "2) Now write combine_lists that takes two list arguments.\n"}
{"snippet": "nested_list.append(6)\nnested_list\n", "intent": "Append an element to a list O(1):\n"}
{"snippet": "marys_bookstore = {\n    'name': \"Mary's bookstore\",\n    'books': [],\n    'authors': []\n}\njames_bookstore = {\n    'name': \"James's bookstore\",\n    'books': [],\n    'authors': []\n}\n", "intent": "We said a bookstore stores the following info: a _name_, a _list of authors_ and a _list of books_. We know we can use also a dictionary for that:\n"}
{"snippet": "class Solution(object):\n    def convertToTitle(self, n):\n        res = ''\n        while n:\n            res = chr((n-1)%26 + 65) + res\n            n = (n-1) / 26\n        return res\n", "intent": "    1 -> A\n    2 -> B\n    3 -> C\n    ...\n    26 -> Z\n    27 -> AA\n    28 -> AB \n"}
{"snippet": "def predict_output(feature_matrix, weights):\n    predictions = np.dot(feature_matrix,weights)\n    return(predictions)\n", "intent": "Also, copy and paste the `predict_output()` function to compute the predictions for an entire matrix of features given the matrix and the weights:\n"}
{"snippet": "a = range(0,10)\nprint(a)\nprint(type(a))\n", "intent": "- range() - returns a \"range\" type with numbers in a specified range\n- this can be used to run your \"for\" loop a specific number of times\n"}
{"snippet": "API_KEY = 'c_hJpWDvZzTxTbJd4uMW'\n", "intent": "After you register, you will be provided with a unique API key, that you should store:\n"}
{"snippet": "word_counts['Ann'] = 33\n", "intent": "We can also use the key to reassign that value.\n"}
{"snippet": "def ran_bool(num,low,high):\n    return num in range(low,high)\n    pass\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "s, d = sum_and_diff(10, 3)\nprint(s, d)\n", "intent": "If we call this function, we must use the same number of variables on the left side of `=`.\n"}
{"snippet": "li = [1, 2, 1, 3, 2]\nunique_elements = set(li)\nprint(unique_elements)\n", "intent": "Together with `set` we can implement efficient operations:\n"}
{"snippet": "nested_list.insert(0, 'start')\nnested_list\n", "intent": "Insert an element to a list at a specific index (note that insert is expensive as it has to shift subsequent elements O(n)):\n"}
{"snippet": "import numpy as np\nn = [1,2,3,4,5]\n", "intent": "Find the mean of the following list using base python (no numpy or scipy!)\n"}
{"snippet": "fahrenheit_temperature = raw_input(\"enter  temperature in fahrenheit\")\ncelsius_temperature = (float(fahrenheit_temperature) - 32) / 1.8\nprint \"the \"+fahrenheit_temperature+\" fahrenheit is\",celsius_temperature,\"celsius\"\n", "intent": "take temperature from the user and convert  fahrenheit -> celsius\n"}
{"snippet": "    for i in range(0,len(l)-2):\n        if l[i] == 0 and l[i+1] == 0 and l[i+2] ==7:\n            return True\n        else:\n            return False\n", "intent": "     spy_game([1,2,4,0,0,7,5]) --> True\n     spy_game([1,0,2,4,0,5,7]) --> True\n     spy_game([1,7,2,0,4,5,0]) --> False\n"}
{"snippet": "l2 = [num for num in xrange(1,51) if num % 3 == 0]\nprint l2\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "def gensquares(N):\n    for i in xrange(N):\n        yield i ** 2\n", "intent": "Create a generator that generates the squares of numbers up to some number N.\n"}
{"snippet": "condition = True\nif condition == True:\n    print(\"The code inside if block gets executed\")\nif condition == False:\n    print(\"The code inside this block will not be executed\")\n", "intent": "**Chained \"_if_\" statements**\n"}
{"snippet": "number = \"5.5\"\nprint(type(number))\nnumber = float(number)\nprint(type(number))\nprint(number)\n", "intent": "* Use the `float()` function to transform decimal numbers\n"}
{"snippet": "print(1,000,000, sep=',')\n", "intent": "* Be careful when writing big numbers, you can't write them in the way humans write them!\n"}
{"snippet": "df = pd.read_sql('SELECT * FROM Visited WHERE site = \"DR-1\" AND dated < \"1930-01-01\";', conn)\ndf\n", "intent": "We can use many other Boolean operators to filter our data. For example, we can ask for all information from the DR-1 site collected before 1930:\n"}
{"snippet": "nested_list.remove((1, 2, 3))\nnested_list\n", "intent": "Locates the first such value and remove it O(n):\n"}
{"snippet": "print(len(Numbers))\n", "intent": "How many elements are there in the Numbers list?\n"}
{"snippet": "print (max(25,65, 890, 15))\n", "intent": "Obtain the maximum number among the values 25, 65, 890, and 15.\n"}
{"snippet": "stock_index= 'SP500'\n", "intent": "Given the string:\n    stock_index = \"SP500\"\nGrab '500' from the string using indexing.\n"}
{"snippet": "np.repeat(3, 4, axis=0)\n", "intent": "Repeat elements of an array\n"}
{"snippet": "arr1 = np.arange(25).reshape(5,5)\n", "intent": "-Array with Array\n-Array with Scalars\n-Universal Array Functions\n"}
{"snippet": "def animal_crackers(text):\n    lst= text.upper().split()\n    if lst[0][0]==lst[1][0]:\n        return True\n    else:\n        return False\n", "intent": "    animal_crackers('Levelheaded Llama') --> True\n    animal_crackers('Crazy Kangaroo') --> False\n"}
{"snippet": "v = np.array([1,2,3])\nv.shape\n", "intent": "Mostly we deal with vectors and matrixes\n"}
{"snippet": "kilroy.Show('graphs','graphs0005.png',500,350)\n", "intent": "<br><br>${\\Huge \\infty}$\nDescribe the graph diagram using two sets.\n"}
{"snippet": "parents = {'Regina':'Atlanta','Michael':'Atlanta'}\nfamily.update(parents)\nprint family\n", "intent": "Note: the update function takes the dictionary you want to merge in as a variable.\n"}
{"snippet": "[1, 3, 2] + [4, 5, 6]\n", "intent": "Concatenate lists by creating a new list and copying objects:\n"}
{"snippet": "for x in range(0,10):\n    print (x)\n", "intent": "We can do this with range \nrange automatically creates a list of numbers in a range\n"}
{"snippet": "def old_macdonald(name):\n    mac = name[:3].capitalize()\n    donald = name[3:].capitalize()\n    return mac + donald\n", "intent": "    old_macdonald('macdonald') --> MacDonald\nNote: `'macdonald'.capitalize()` returns `'Macdonald'`\n"}
{"snippet": "def full_board_check(board):\n    for i in range(1,len(board)):\n        if board[i] != 'X' and board[i] != 'O':\n            return False\n    return True\n", "intent": "**Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.**\n"}
{"snippet": "findall(r'the',t, I)\n", "intent": "**findall** lists every match to the pattern, but doesn't give the position.  **I** is short for **IGNORECASE**.\n"}
{"snippet": "split(r'(?i)the', t)\n", "intent": "For split, it is better to use **(?i)** for case-insensitivity.\n"}
{"snippet": "split(r'(?x) o', t)\n", "intent": "This one splits on the letter **o**.  The **o** is consumed and lost.\n"}
{"snippet": "findall(r'(?x) [[a-z]--[aeiou]]+', t)\n", "intent": "The problem is that we get not just consonants, but spaces, digits, etc.\nThe new **regex** module allows us to do arithmetic on sets:\n"}
{"snippet": "findall(r\"(?r)..\", \"abcde\")\n", "intent": "Searches can now work backwards:\nNote: the result of a reverse search is not necessarily the reverse of a forward search:\n"}
{"snippet": "train, valid, test = data.TabularDataset.splits(\n                path = 'data',\n                train = 'train.json',\n                validation = 'valid.json',\n                test = 'test.json',\n                format = 'json',\n                fields = fields\n)\n", "intent": "If you already had a validation dataset, the location of this can be passed as the `validation` argument.\n"}
{"snippet": "nested_list.extend([7, 8, 9])\nnested_list\n", "intent": "Extend a list by appending elements (faster than concatenating lists, as it does not have to create a new list):\n"}
{"snippet": "A4 = rop(A3, 'R3*(4/3)=>R3')\nA4\n", "intent": "The next pivot is at (row 3, column 3), and is equal to $3/4$. Multiply row 3 by $4/3$ to make the pivot equal to 1:\n"}
{"snippet": "R = reduced_row_echelon_form(A)\nR\n", "intent": "We now use the function `reduced_row_echelon_form()` to find the RREF matrix equivalent to $A$:\n"}
{"snippet": "D = P**(-1) * M * P\nD\n", "intent": "The matrix of the linear transformation on the new basis is:\n"}
{"snippet": "R = reduced_row_echelon_form(A - 9*eye(2))\nR\n", "intent": "__Eigenspace associated to $\\lambda_2=9$:__\n"}
{"snippet": "B1 = A - (-2)*eye(4)\nB1\n", "intent": "The eigenvalues are $\\lambda_1=-2$, $\\lambda_2=1/2$ (multiplicity 2) and $\\lambda_3=4$\n"}
{"snippet": "superman = Superman()\nsuperman.fly()\nsuperman.stop_speeding_bullet()\n", "intent": "Now, we can make an instance of our heros...\n"}
{"snippet": "from numpy import median\nmedian([2, 1, 9])\n", "intent": "One can also load specific functions from the module\n"}
{"snippet": "case1 = [20, 20, 23]\ncase2 = [20, 20, 20]\ncase3 = [20, 21, 22]\ncase4 = [13, 84, 30]\n", "intent": "or each test case, your program will output one of the following four output possibilities:\n* Not a Triangle\n* Equilateral\n* Isosceles\n* Scalene\n"}
{"snippet": "titles = cast[['title', 'year']].drop_duplicates().reset_index(drop=True)\nt = titles\nt = t[t.title.str.startswith('C')]\nt = t.sort_values('year', ascending=False)\nt.head(10)\n", "intent": "- How many movies starts with `C`?\n"}
{"snippet": "dict_1[5] = 'bar'\ndict_1\n", "intent": "Insert or set a dict's elements by index O(1):\n"}
{"snippet": "def countDog(var):\n    count = 0\n    word = var.split()\n    for item in word: \n        if 'dog' in item:\n            count +=1\n    return count\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "def ns_solution(A):\n    sols = [float(\"-inf\")] * len(A)\n    sols[0] = A[0]\n    for i in range(1,len(A)):\n        sols[i] = max(sols[max(0,i-6):i+1])+A[i]\n    return sols[-1]\n", "intent": "https://codility.com/programmers/task/number_solitaire\n"}
{"snippet": "grocery_list.append('tea')\ngrocery_list\n", "intent": "You can add items to your list using the append method.  Try appending 'tea'.\n"}
{"snippet": "for count, item in enumerate(my_list):\n    print count, item + ' no evil'\n", "intent": "The **enumerate()** function adds a counter to the thing being iterated. For example:\n"}
{"snippet": "num_sims=1e8\nthresh=0.5\nX1=scipy.stats.uniform.rvs(size=num_sims)\nX2=scipy.stats.uniform.rvs(size=num_sims)\nY=scipy.stats.uniform.rvs(size=num_sims)*(X1*(X1>thresh)+1/thresh*X1*(X1<=thresh))\nnumpy.count_nonzero(X2<Y)/num_sims\n", "intent": "Here is a simulation to find the optimum threshold:\n(I varied thresh by hand to find the optimal)\n"}
{"snippet": "samples = np.random.normal(size=(10))\nprint(samples)\nsamples = np.random.uniform(size=(10))\nprint(samples)\nbinomial Draw samples a binomial distribution\nnormal Draw samples from a normal (Gaussian) distribution\nbeta Draw samples from a beta distribution\nchisquare Draw samples from a chi-square distribution\ngamma Draw samples from a gamma distribution\nuniform Draw samples from a uniform [0, 1) distribution\n", "intent": "<a id=\"samples\"></a>\n"}
{"snippet": "other_vect = np.array([6, 7, 8, 9])\nvect + other_vect\n", "intent": "- Matrix element-wise math (i.e. addition and subtraction) requires matching dimensions\n"}
{"snippet": "friends = ['steve', 'rachel', 'michael', 'adam', 'monica']\nfor index, friend in enumerate(friends):\n    print(index,friend)\n", "intent": "Returns a tuple containing a count for every iteration (from start which defaults to 0) and the values obtained from iterating over sequence:\n"}
{"snippet": "the_lambda=0.1\nc=3.e8\nPRF=2200\nmrmax=the_lambda*PRF/4.\nMUR=c/(2.*PRF)*1.e-3\nprint(\"At a PRF of {} Hz, the mrmax is {} m/s and the MUR is {} km\".format(PRF,mrmax,MUR))\n", "intent": "b) Answer:  first find mrmax and MUR for the two PRFs\n"}
{"snippet": "dict_2 = dict(dict_1)\ndel dict_2[5]\ndict_2\n", "intent": "Delete a value from a dict O(1):\n"}
{"snippet": "lst = [x**2 for x in range(0,11)]\nprint(lst)\n", "intent": "analogy example ..  x^2 : x in (1,2,3,....10)\n"}
{"snippet": "x = list(range(0,11,2))\nprint(x)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "from spacy.en import English\nnlp_toolkit = English()\n", "intent": "First load the NLP toolkit by specifying the language.\n"}
{"snippet": "def makeT(theta, alpha, d, a):\n    return np.array([\n        [           cos(theta),           -sin(theta),           0,             a],\n        [sin(theta)*cos(alpha), cos(theta)*cos(alpha), -sin(alpha), -d*sin(alpha)],\n        [sin(theta)*sin(alpha), cos(theta)*sin(alpha),  cos(alpha),  d*cos(alpha)],\n        [                    0,                     0,           0,             1]\n    ])\n", "intent": "1 Transform code (this is given in the lesson)\n"}
{"snippet": "img = Image.open('mm_address.jpg')\nlabel = pytesseract.image_to_string(img)\nprint(label)\nclientLocation = label.splitlines()[2] + ', ' + label.splitlines()[3]\nprint(clientLocation)\ntestLocation = '2403 Englewood Ave, Durham, NC 27705'\nprint(testLocation)\n", "intent": "On Android this can be done with Google Vision \n"}
{"snippet": "javascript_users = user_tag_count['OwnerUserId'][user_tag_count['Tag'] == 'javascript'].unique()\n", "intent": "Create a variable called `javascript_users` that contains all unique users who have used the `javascript` tag.\n"}
{"snippet": "def ran_bool(num,low,high):\n    if low <= num <= high:\n        return True\n    else:\n        return False\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "class NoneAttributes:\n    def __getattr__(self, name):\n        return None\nclass Example(BaseClass, NoneAttributes):\n    pass\ne = Example()\ne.some_attribute\n", "intent": "A mixin that returns `None` when you try to access non-existing attributes. \n"}
{"snippet": "@dataclass(frozen=True, order=True)\nclass CustomerOrder(object):\n    id: uuid.UUID = field(compare=False, default_factory=uuid.uuid4, init=False)\n    value: float = field(compare=True)\n    product: str = field(compare=False)\n", "intent": "make id non-initiatable to solve\n"}
{"snippet": "value = dict_2.pop('b')\nprint(value)\nprint(dict_2)\n", "intent": "Remove and return an element from a specified index O(1):\n"}
{"snippet": "y = expand_dims(x, axis=123456)\nshow_array(y)\n", "intent": "Any number >= 1 does the same.\n"}
{"snippet": "f = np.random.randint(3, size=9).reshape(3, -1)\nf\n", "intent": "Randomly pick a kernal and do convolution:\n"}
{"snippet": "se = np.sqrt(p1*(1-p1)/n1 + p2*(1-p2)/n2)\nse\n", "intent": "note this se is NOT the same as above\n"}
{"snippet": "sample_array.reshape(5,6)\n", "intent": "Returns an array containing the same data with a new shape.\n"}
{"snippet": "sine_exp = hnle.sin_terms(op_sum, 3) + hnle.sin_terms(op_sum, 5)\nsine_exp_list = sine_exp.m\n", "intent": "Generate the list of 3rd and 5th order terms in the expansion of $\\sin(\\hat{a}+\\hat{b}+\\hat{c}+\\hat{d}+h.c.)$.\n"}
{"snippet": "mode = 'human'\noutfile = StringIO() if mode == 'ansi' else sys.stdout\nprint(outfile)\n", "intent": "http://bluese05.tistory.com/5\n"}
{"snippet": "print_func <- function(expr) {\n    paste(\"The value of\", deparse(substitute(expr)), \"is\", expr)\n}\nx <- 3\ny <- 6\nprint_func(x + y)\n", "intent": "What this means is \n"}
{"snippet": "mat2 = mat[:, :3]\nprint(mat2)\n", "intent": "How can we produce a 3x3 matrix that gets the first 3 elements of each row from mat? Use NumPy's slice syntax to reproduce the output shown.\n"}
{"snippet": "for token in doc:\n    print(f'{token.text:{10}} {token.pos_:{7}} {token.dep_:{7}} {spacy.explain(token.dep_)}')\n", "intent": "The dependency parse shows the coarse POS tag for each token, as well as the **dependency tag** if given:\n"}
{"snippet": "print(dict_1.setdefault('b', None))\nprint(dict_1.setdefault('z', None))\n", "intent": "Return a default value if the key is not found:\n"}
{"snippet": "pd.Series(arr,labels)\n", "intent": "It works with numpy arrays as well:\n"}
{"snippet": "y = apply_to_one(lambda x: x + 4)     \ny\n", "intent": "(anonymous functions)\n"}
{"snippet": "temperature = input()\n", "intent": "We can interact with the commandline/terminal using `input()`, try it out by giving a value to the temperature on the commandline\n"}
{"snippet": "np.linspace(0,10,3)\n", "intent": "    --> here we get 50 numbers evenly distributed in 0 to 10\n"}
{"snippet": "re.search(r\"\\w\", \"datascience\").group()\n", "intent": "`\\w` matches a \"word\" character: a letter or digit or underbar [a-zA-Z0-9_]. Note it only matches a single word char, not a whole word.\n"}
{"snippet": "a = 1\nb = 1.25\nc = a + b\nprint c \nc = a / b\nprint c \n", "intent": "Intuitively, adding, subtracting and doing math operations work as expected :\n"}
{"snippet": "print s[0]\nprint s[1]\nprint s[2]\n", "intent": "Strings can be accessed much like lists in the sense that you can obtain a single character by accessing the zero-based index of that character:\n"}
{"snippet": "def f(x):\n    return x**2+3*x+5    \n", "intent": "Cette notation est plus \"rapide\" que :\n"}
{"snippet": "from math import factorial\n{len(str(factorial(x))) for x in range(20)}\n", "intent": "* {expr(item) for item in iterable}\n"}
{"snippet": "print(\"Subtraction: \\t\" + str(array_a - array_b))\nprint(\"Multiplication:\\t\" + str(array_a * array_b))\nprint(\"Exponent: \\t\" + str(array_a ** array_b))\nprint(\"Division: \\t\" + str(array_a / array_b))\n", "intent": "Just as when we are working with a single array, we can add, subtract, divide, multiply, etc. several arrays together:\n"}
{"snippet": "print(data.shape)\nn_patients, n_days = data.shape\n", "intent": "The output tells us that data currently refers to an N-dimensional array created by the NumPy library. We can see what its shape is like this:\n"}
{"snippet": "c = np.eye(3)\nprint(c)\n", "intent": "Create the identity matrix:\n"}
{"snippet": "a = np.diag([1,2,3])\nprint(a)\nprint()\nprint(a[:2,1:])\n", "intent": "Arrays support multidimensional indexing and slicing:\n"}
{"snippet": "len('Hello world!')\n", "intent": "**Determine The Length Of A String**\n"}
{"snippet": "A = True\nB = False\nprint [A and B, A and A, B and B, B and A]\n", "intent": "**Conjunction: A Logical \"AND\"**\n"}
{"snippet": "fruits = ['apple', 'bananas', 'pears', 'grapes']\nfor x in fruits:\n    print 'ORIGINAL: ' + f + ' -> NEW: ' + f.upper()\n", "intent": "As usual, easier done than said:\n"}
{"snippet": "import sys\nimport math\nmessage = input() \n", "intent": "This is the status when the puzzle starts\n"}
{"snippet": "array = np.arange(1, 100).reshape(3, 11, 3)\n", "intent": "Same rules as above, but on a 3-dimensional array. (HINT: It's possible to write a solution that works for this exercise and the previous one.)\n"}
{"snippet": "print(x.requires_grad)\nprint((x ** 2).requires_grad)\nwith torch.no_grad():\n\tprint((x ** 2).requires_grad)\n", "intent": "You can also stops autograd from tracking history on Tensors\nwith requires_grad=True by wrapping the code block in\n``with torch.no_grad():``\n"}
{"snippet": "dict_1.update({'e' : 'elephant', 'f' : 'fish'})\ndict_1\n", "intent": "Merge one dict into another:\n"}
{"snippet": "print(str(True))\nprint(str(1.234))\nprint(str(-2))\n", "intent": "**str()** function can be used to convert almost anything to a string.\n"}
{"snippet": "s = '123456789'\nprint('First charcter of',s,'is',s[0])\nprint('Last charcter of',s,'is',s[len(s)-1])\n", "intent": "Strings can be indexed with square brackets. Indexing starts from zero in Python. \n"}
{"snippet": "d2= np.array([(1,2,3),[4,5,6],[7,8,'A']])\nd2\n", "intent": "- Create a two dimensional list of numbers and pass it to np.array function\n"}
{"snippet": "print (a)\nprint (\"-\" * 30)\n(a < a.mean()).sum()\n(a < a.mean()).sum()\n", "intent": "- sum\n- any array conditional will give back an array. you can take the sum to count the values\n"}
{"snippet": "s = pd.Series(data=[1000,300,400], index =['GOOGLE', 'YAHOO', 'MS'])\ns\n", "intent": "- Perform some array operations like scalar multiplication, array filtering on a Series object\n"}
{"snippet": "s = \"Name: Sierra Johnson Foo\"\npattern = r\"(?:Name:) (\\w+ \\w+)\"\nresults = re.search(pattern, s)\nresults.group(1)\n", "intent": "This simply means any group labeled as non-capturing in the pattern will not be included in the groups.\n"}
{"snippet": "print(math.log(math.exp(0.2) * math.exp(0.7)))\nprint(0.2 + 0.7)\n", "intent": "$$\n\\log \\exp(a) = a\n$$\n$$\n\\log (\\exp(a) \\exp(b))\n= \\log(\\exp(a)) + \\log(\\exp(b))\n= a + b\n$$\n"}
{"snippet": "Image('.\\Figs\\EE0404_Lecture11_fig1.png',width=400)\n", "intent": "How can we generate a 10000 element vector from a uniform distribution between [1 to 4] ?\n"}
{"snippet": "M=1000\nn=arange(M)\nfs = 2000.0 \nx= sin(0.25*pi*n) + cos(0.1*pi*n) + .5\nt= n/fs\nplot(t,x)\nxlim([0,0.05])\nylim([-3,3])\nxlabel('Time (seconds)')\n", "intent": "- To verify via fft command:\n"}
{"snippet": "mapping = dict(zip(range(7), reversed(range(7))))\nmapping\n", "intent": "Pair up two sequences element-wise in a dict:\n"}
{"snippet": "a = \"I love having Apple Juice, and I like eat green Apple\"\nprint(a.find(\"Apple\",30,len(a)))\nprint(a.index(\"Apple\",30,len(a)))\n", "intent": "- Find Function\n- Replace\n- Count Function\n- Join Function\n- Title Function\n- Capitalize\n"}
{"snippet": "location = arcgis.geocoding.geocode(\"Marthas Basin, Montana\")[0]\n", "intent": "We can compare the natural color and false color images.\nIn the false color image the red and brownish pixels correspond to burn scars of the fire:\n"}
{"snippet": "driveAll = driveAll_features.sdf\ndriveAll.head()\n", "intent": "This implies that only 5 clinics in this county can be driven to within 5 minutes.\n"}
{"snippet": "data_rdd.map(lambda item: item.report_time).take(30)\n", "intent": "To do this properly, we'll need to parse the dates. That will require knowing their format. A quick sampling of the data will help.\n"}
{"snippet": "df1 = sqlContext.range(100)\ndf2 = sqlContext.range(100)\ndf1.join(df2, df1[\"id\"] == df2[\"id\"]).collect()\n", "intent": "By default, Spark will use a shuffle to join two datasets (unless Spark can verify that they are already co-partitioned):\n"}
{"snippet": "pagecounts_en_wikipedia_articles_only_df.count()\n", "intent": "Call the `count()` action on the DataFrame to see how many unique English articles were requested in the last hour:\n"}
{"snippet": "pageviews_df.count()\n", "intent": "Count the number of records (rows) in the DataFrame:\n"}
{"snippet": "spark.conf.set(\"spark.sql.shuffle.partitions\", \"8\")\n", "intent": "Let's start with a multiple of 1, so we'll set the number of shuffle partitions to 8.\n"}
{"snippet": "print(5 ** 3)\nprint(5 % 3)\n", "intent": "And we can compute more:\n"}
{"snippet": "set_1 = set([0, 1, 2, 3, 4, 5])\nset_1\n", "intent": "A set is an unordered sequence of unique elements.  \nCreate a set:\n"}
{"snippet": "df.withColumn('newage',df['age']).show()\n", "intent": " - make new column with origin column\n"}
{"snippet": "cs.v6<-cs %>%\n  mutate(age=year('2001-05-01') -year(ymd_hms(birth))) %>%\n  mutate(age=ifelse(age < 10 | age > 100, NA, age)) %>%\n  mutate(age=ifelse(is.na(age),round(mean(age,na.rm=T)),age)) %>%\n  mutate(agegrp=cut(age, c(0,19,29,39,49,59,69,100), labels=F)*10) %>%\n  select(custid, age, agegrp)\nhead(cs.v6)\n", "intent": "<img src=\"./photo/10.PNG\"  align=\"left\">\n"}
{"snippet": "transactionInfo(trans[size(trans) > 20])\n", "intent": " - size(trans) each transaction length\n"}
{"snippet": "filter(flights, dep_time <= 600) %>% head(2)\n", "intent": "    1.7. Departed between midnight and 6am (inclusive)\n"}
{"snippet": "print(fa3,digits = 2,sort=T)\n", "intent": "- MR : Factor Loading\n- h2 : communality\n- u2 : specific factor Var\n"}
{"snippet": "def Xmin_emb(T):\n    if abs(T) > 1:\n        return Xemb(T)\n    return 0\n", "intent": "The minimal value of the Kruskal-Szekeres coordinate $X$ on an embedded surface of constant $T$:\n"}
{"snippet": "g.christoffel_symbols_display()\n", "intent": "The (non-zero and non-redundant) Christoffel symbols in Boyer-Lindquist coordinates:\n"}
{"snippet": "g = M.lorentzian_metric('g')\nrho2 = r^2 + (a*cos(th))^2\ng[0,0] = -(1 - 2*m*r/rho2)\ng[0,1] = 2*m*r/rho2\ng[0,3] = -2*a*m*r*sin(th)^2/rho2\ng[1,1] = 1 + 2*m*r/rho2\ng[1,3] = -a*(1 + 2*m*r/rho2)*sin(th)^2\ng[2,2] = rho2\ng[3,3] = (r^2+a^2+2*m*r*(a*sin(th))^2/rho2)*sin(th)^2\ng.display()\n", "intent": "We define the metric $g$ by its components w.r.t. the 3+1 Kerr coordinates:\n"}
{"snippet": "M = Manifold(4, 'M', structure='Lorentzian')\nprint(M)\n", "intent": "We declare the spacetime manifold $M$:\n"}
{"snippet": "set_3 = {1, 2, 3}\nset_3.issubset(set_2)\n", "intent": "Subset O(len(set_3)):\n"}
{"snippet": "EE = g.ricci() - 1/2*g.ricci_scalar()*g + Lamb*g\nEE.set_name('E')\nEE.display()\n", "intent": "Let us check that Einstein equation is satisfied by the above metric:\n"}
{"snippet": "E[0,1].expr().substitute_function(a, af)\n", "intent": "We check that if we substitute $a$ by `af` in the $\\tau\\chi$ component of the Einstein equation, we get identically zero:\n"}
{"snippet": "eq1 = eq.substitute_function(a, af)\neq1\n", "intent": "As above, we substitute for $a(\\tau,\\chi)$ the value found when solving the $\\tau\\chi$ component:\n"}
{"snippet": "X_EF.<te,r,th,ph> = M_EF.chart(r'te:\\tilde{t} r:(0,+oo) th:(0,pi):\\theta ph:(0,2*pi):\\phi') \nX_EF\n", "intent": "The ingoing Eddington-Finkelstein chart:\n"}
{"snippet": "X_C.<T1,X1,th,ph> = M.chart(r'T1:(-pi,pi):\\tilde{T} X1:(-pi,pi):\\tilde{X} th:(0,pi):\\theta ph:(0,2*pi):\\varphi')\nX_C.add_restrictions([abs(T1-X1)<pi, abs(T1+X1)<pi, \n                      sinh(tan((T1-X1)/2))*sinh(tan((T1+X1)/2))<1])\nX_C\n", "intent": "The coordinates $(\\tilde T, \\tilde X, \\theta, \\varphi)$ associated with the conformal compactification of the Schwarzschild spacetime are\n"}
{"snippet": "var('v')\ningeod = M.curve({X: [-r - 2*m*ln(abs(r/(2*m)-1)) + v, r, pi/2, pi]}, (r, 0, +Infinity))\ningeod.display()\n", "intent": "The ingoing family:\n"}
{"snippet": "kappaH = kappa.expr().subs(r=2*m)\nkappaH\n", "intent": "Value of $\\kappa$ on the horizon:\n"}
{"snippet": "g.ricci_scalar().display()\n", "intent": "The Ricci scalar is vanishing:\n"}
{"snippet": "trap = line([(0,0), (2,1), (2,tmax)], color='red', thickness=2)\ngraph += trap\n", "intent": "The trapping horizon:\n"}
{"snippet": "set_2.issuperset(set_3)\n", "intent": "Superset O(len(set_3)):\n"}
{"snippet": "r_circ1 = s[0].rhs()\nr_circ2 = s[1].rhs()\nr_circ1, r_circ2\n", "intent": "Coordinate $r$ on a circular orbit of angular momentum $L$:\n"}
{"snippet": "geod.system(verbose=True)\n", "intent": "Some details about the system solved to get the geodesic:\n"}
{"snippet": "M_sol_s = G*M_sol/c^3\nM_sol_s\n", "intent": "The solar mass $M_\\odot$ in seconds:\n"}
{"snippet": "(1 < 2) and (2 < 1)\n", "intent": "We can combine logical expressions using: `and`, `or`, and `not`.\n"}
{"snippet": "for i, document in enumerate(documents):\n do_something(i, document)\n", "intent": "The Pythonic solution is enumerate, which produces tuples (index, element)\n"}
{"snippet": "def unique_list(l):\n    x = []\n    for a in l:\n        if a not in x:\n            x.append(a)\n    return x\nprint(unique_list([1,2,3,3,3,3,4,5]))\n", "intent": "Example: sample list : [1,2,3,3,3,3,4,5] $\\rightarrow$ unique list : [1, 2, 3, 4, 5]\n"}
{"snippet": "fields = cur.execute(\"SELECT sql FROM sqlite_master WHERE type='table' and name ='EmployeeBase';\").fetchall()\nprint ''.join(fields[0])\nfields = cur.execute(\"SELECT sql FROM sqlite_master WHERE type='table' and name ='MessageBase';\").fetchall()\nprint ''.join(fields[0])\nfields = cur.execute(\"SELECT sql FROM sqlite_master WHERE type='table' and name ='RecipientBase';\").fetchall()\nprint ''.join(fields[0])\n", "intent": "Query the `sqlite_master` table to retrieve the schema of the `EmployeeBase` table.\n1. What fields are there?\n1. What's the type of each of them?\n"}
{"snippet": "query =\"select max(age) from housing where bdrms=3;\"\npd.read_sql(query, con=engine)\n", "intent": "How old is the oldest 3 bedrooms apartment?\n"}
{"snippet": "ordinal = lesson_date.toordinal()\nordinal\n", "intent": "Exercise 3: What is the Gregorian ordinal representation of the date? Using this value, how many days ago was this lesson plan written?\n"}
{"snippet": "{1, 2, 3} == {3, 2, 1}\n", "intent": "Equal O(min(len(set_1), len(set_2)):\n"}
{"snippet": "min(10, 20, NA, na.rm = TRUE)\n", "intent": "**Note**: 'NA' and 'NaN' values can be disregarded by specifying an additional argument of 'na.rm=TRUE'.\n"}
{"snippet": "dividend = 22\ndivisor = 5\nwholes = 0\nremainder = dividend\nwhile (remainder > divisor) {\n    remainder = remainder - divisor\n    wholes = wholes + 1\n}\nc(wholes, remainder)\n", "intent": "while (*condition*) *expression*\n"}
{"snippet": "simp = sample(p, 1000, replace = T, prob = post)\nhist(simp, freq = F, xlim = c(0.4, 0.8), ylim = c(0, 25))\nlines(density(simp))\n", "intent": "* How can we obtain point and interval estimate of p?\n"}
{"snippet": "LOAD a R=2 C=3\n1 2 3\n1 2 3\nLOAD b R=2 C=3\n10 20 30\n10 20 30\nTMULT a b qq\nPRINT a\nPRINT b\nPRINT qq\n", "intent": "The **TMULT** command multiplies the the transpose of the  matrix in $M_1$ and the matrix in $M_2$ and places the result in $M_3$.\n"}
{"snippet": "for num in x:\n    print(num)\n", "intent": "Write a `for`-loop to print each value of `x`.\n"}
{"snippet": "def chop(L):\n    L.pop(0)\n    L.pop(len(L)-1)\n    return None\nL1 = [1,2,3,4]\nprint chop(L1)\nprint L1\n", "intent": "Write a function called `chop` that takes a list, modifies it by removing the first and last elements, and returns `None`.\n"}
{"snippet": "dic = {}\nfor i in range(26):\n    if chr(i+97) not in dic:\n        dic[chr(i+97)]=chr(122-i)\nprint dic\n", "intent": "Please create the inverse mapping dictionary: `dic`.\n"}
{"snippet": "def inverse(c):\n    pass\nprint inverse('a')\nprint inverse('z')\n", "intent": "Please implement a function called `inverse(c)` that gives you the mapping.\n"}
{"snippet": "def inverse(c):\n    n1=ord('a')\n    n2=ord('z')\n    num=ord(c)\n    result = n2-(num-n1)\n    word=chr(result)    \n    return word\nprint inverse('a')\nprint inverse('z')\nprint inverse('n')\n", "intent": "Please implement a function called `inverse(c)` that gives you the mapping.\n"}
{"snippet": "seq = 'Monty Python'\nseq[6:10]\n", "intent": "Slice 4 elements starting at index 6 and ending at index 9:\n"}
{"snippet": "r = [1,2,3,4]\nv = np.array(r)\nprint v\nprint type(v)\n", "intent": "To convert a list or a tuple to an array, we use the `array` function from numpy:\n"}
{"snippet": "x = np.arange(6)\ny = np.zeros_like(x)\nprint x\nprint y\n", "intent": "`zeros_like(a, dtype=None, order='K', subok=True)` \nReturn an array of zeros with the same shape and type as a given array.\n"}
{"snippet": "dic = {0:'a',1:'b'}\nimport copy\ndef inv_dic():\n    dict_ = copy.deepcopy(dic)\n    inv_dic = {v: k for k, v in dict_.items()}\n    return inv_dic\nprint inv_dic()\n", "intent": "Please create the inverse mapping dictionary: `dic`.\n"}
{"snippet": "def chop(t):\n    t.pop(0)\n    t.pop(-1)\n    return None\nt=[1,132,1321,123123,123]\nchop(t)\nprint t\n", "intent": "Write a function called `chop` that takes a list, modifies it by removing the first and last elements, and returns `None`.\n"}
{"snippet": "def chop(X):\n    del X[1]\n    del X[len(t)-1]\n    return\nX =[1,2,3,4,5,8]\nprint X\nchop(X)\nprint X\n", "intent": "Write a function called `chop` that takes a list, modifies it by removing the first and last elements, and returns `None`.\n"}
{"snippet": "def dic(s):\n    d = dict()\n    for c in s:\n        d[c] = ord(inverse(c))\n    return d\ndic('abc')\n", "intent": "Please create the inverse mapping dictionary: `dic`.\n"}
{"snippet": "    fruit = banana\n    length = len(fruit)\n    print fruit[1:length-1]\nchop('bigcat')\n", "intent": "Write a function called `chop` that takes a list, modifies it by removing the first and last elements, and returns `None`.\n"}
{"snippet": "dic = {}\ni=97\nwhile i<123:\n    p=chr(i)\n    q=chr(219-i)\n    dic[p]=q\n    i=i+1\nprint dic\n", "intent": "Please create the inverse mapping dictionary: `dic`.\n"}
{"snippet": "def chop(t):\n    n = len(t)\n    t.pop(n-1)\n    t.pop(0)\n    print t\nchop([1, 2, 3, 4, 5])\n", "intent": "Write a function called `chop` that takes a list, modifies it by removing the first and last elements, and returns `None`.\n"}
{"snippet": "seq = [1, 1, 2, 3, 5, 8, 13]\nseq[5:] = ['H', 'a', 'l', 'l']\nseq\n", "intent": "You can assign elements to a slice (note the slice range does not have to equal number of elements to assign):\n"}
{"snippet": "def inverse(c):\n    v=ord(c)\n    v2=97-v+122\n    return chr(v2)\nprint inverse('a')\nprint inverse('z')\n", "intent": "Please implement a function called `inverse(c)` that gives you the mapping.\n"}
{"snippet": "import random\ndef random_list(N):\n    l=[]\n    x=0\n    while x<N:\n        l.append(random.randint(0,100))\n        x+=1\n    return l\nrandom_list(5)\n", "intent": "Please write your code based on the sketch below and use the test code below to show that your function works properly.\n"}
{"snippet": "def histogram(s):\n    d = dict()\n    for c in s:\n        d[c] = inverse(c)\n    return d\ndic=histogram('qwertyuiopasdfghjklzxcvbnm')\nprint dic\n", "intent": "Please create the inverse mapping dictionary: `dic`.\n"}
{"snippet": "print 'Siggi\\'s Icelandic \"skyr\"'\n", "intent": "Print **Siggi's Icelandic \"skyr\"**\nOutput:\n```\nSiggi's Icelandic \"skyr\"\n```\n"}
{"snippet": "numbers = range(100)\nnum = filter(lambda x: x%3 and x%5, numbers)\nprint num\n", "intent": "Filters out multiples of 3 and 5\nOutput\n```\n1, 2, 4, 7, 8, 11, ...\n```\n"}
{"snippet": "import plotly\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\npy.sign_in('XiangYang', 'rvRNJPFrtESSuisdY0CI')\nx = np.random.randn(500)\ndata = [go.Histogram(x=x)]\npy.iplot(data, filename='basic histogram')\n", "intent": "https://plot.ly/python/histograms/\n"}
{"snippet": "import signal\npid = engine_info[1]['pid']\ntime.sleep(1)\nos.kill(int(pid), signal.SIGTERM) \n", "intent": "Let's kill an engine.\n"}
{"snippet": "hour = data_set['hour']\nprint hour.size\nprint hour[:48]\n", "intent": "Using the mask, let's explore how to get some data based on the hour it was recorded\n* From 0-6 and after 7pm\n* Data at noon\n"}
{"snippet": "color_list = [\"Red\",\"Green\",\"White\" ,\"Black\"]\n", "intent": "color_list = [\"Red\",\"Green\",\"White\" ,\"Black\"]\n"}
{"snippet": "seq = [1, 1, 2, 3, 5, 8, 13]\nseq[5] = ['H', 'a', 'l', 'l']\nseq\n", "intent": "Compare the output of assigning into a slice (above) versus the output of assigning into an index (below):\n"}
{"snippet": "class Animal():\n    def __init__(self):\n        print(\"Animal Created\")\n", "intent": "Inheritance: Way to form new classes using classes that have been defined.\n"}
{"snippet": "num15 <- 1:15\nmatrix(num15, nrow = 3) \n", "intent": "R has special functionality for matrices, making them more than just glorified 2-D arrays.\n"}
{"snippet": "source(\"examplesource.R\")\n", "intent": "You can define variables and functions in a \\*.R source file, and then include them in later sessions.\n"}
{"snippet": "1-pbinom(4, 9, 0.9)\n", "intent": "Therefore,\n$\nP(Z>4|X=0)=1-P(Z \\leq 4|X=0) = \\texttt{1-pbinom(4, 9, 0.9)}= \n$\n"}
{"snippet": "my_beta <- function (x) { dbeta(x, 2, 5) }\nsamples <- replicate(10000, my_sampler( my_beta, 2.5, 0, 1))\nxs <- seq(0, 1, 0.01)\nys <- my_beta(xs)\nhist(samples, probability = T, main = \"Empirical distribution of samples\")\nlines(xs, ys, col = \"red\")\n", "intent": "Another example, sampling Beta distribution (https://en.wikipedia.org/wiki/Beta_distribution):\n"}
{"snippet": "set.seed(111)\nx = rnorm(50, 11, 4)\nx\n", "intent": "Generate a random sample of 50 observations:\n"}
{"snippet": "def Num_dog(text):\n    n=0\n    for word in text.lower().split():\n        if word == 'dog':\n            n=n+1\n    return n\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "start= time.time()\nsynspec80_deconvolved= apogee.spec.lsf.deconvolve(synspec80[0],numpy.ones_like(synspec80[0])*0.01,lsf=lsf150,\n                                                   eps=100.)\nprint \"Deconvolution took {0:.2f} seconds\".format(time.time()-start)\n", "intent": "We deconvolve the synthetic spectrum that was convolved with the LSF from fiber 80 (using very small uncertainties)\n"}
{"snippet": "mean_pdfsamples_abc= Mean_ABC()\n", "intent": "Now we sample the PDF using ABC:\n"}
{"snippet": "myarray = np.array(mylist)\nnp.sum(myarray)\n", "intent": "Using NumPy arrays, we can just use the `np.sum` function:\n"}
{"snippet": "for row in conn.execute(\"SELECT * FROM moz_bookmarks\"):\n    print(row)\n", "intent": "Dokumentation zur places.sqlite: http://kb.mozillazine.org/Places.sqlite\n"}
{"snippet": "calendar.isleap(2018)\n", "intent": "Try typing `calendar.` and then press `Tab`\n"}
{"snippet": "import yaml\ncredentials = yaml.load(open('/Users/alessandro.gagliardi/api_cred.yml'))\n", "intent": "First we will load our credentials which we keep in a [YAML](http://www.yaml.org/) file for safe keeping.\n"}
{"snippet": "def reducer(k2, k2_vals):\n    yield k2, sum(k2_vals)\n", "intent": "Finally, the reducer receives all values for a given key and aggregates (in this case, sums) the results\n"}
{"snippet": "[27*i for i in range(50) if i==27 for z in range(1,11)]\n", "intent": "Let me add one more loop to make you understand better, \n"}
{"snippet": "sc.cassandraTable[(String,String,java.util.UUID)](\"killr_video\", \"videos_by_two_actors\").select(\n                         \"actor1\", \"actor2\", \"video_id\").as(\n                         (actor1 : String, actor2 : String, id : java.util.UUID) => \n                         ((actor1, actor2), id)).groupByKey.take(3).foreach(println)\n", "intent": "Of the following two queries, which can be optimized using spanByKey so that Cassandra performs the grouping instead of Spark?\n"}
{"snippet": "val maxDF = sqlContext.sql(\n    \"SELECT actor_name, MAX(release_year) as max_year \" + \n    \"FROM killr_video.videos_by_actor \" +\n    \"WHERE actor_name = 'Johnny Depp' \" + \n    \"GROUP BY actor_name\")\nmaxDF.show\n", "intent": "A useful tool is the `registerTempTable` method. We will begin by creating a dataframe.\n"}
{"snippet": "import org.apache.spark.sql.functions._\nval familyDF = movieDF.filter(col(\"genres\").contains(\"Family\"))\nfamilyDF.show\n", "intent": "Next we will filter the dataframe data using the `col` method.\n"}
{"snippet": "my_list = [1,2,3,4,5,6,7]\nnew_list = list()\nfor num in my_list:\n    num = num**2\n    new_list.append(num)\nprint(new_list)\n", "intent": "2.You are given a list of integers,2,3,4,5,6. Square them, make a new list, print it out\n"}
{"snippet": "seq = [1, 2, 2, 3, 5, 13]\nbisect.bisect(seq, 8)\n", "intent": "Find the location where an element should be inserted to keep the list sorted:\n"}
{"snippet": "prop.trend.test(as.matrix(df2[2,]), colSums(df2))\n", "intent": "Using number of deaths.\n"}
{"snippet": "targets = {}\nfor _file in files:\n    pdf = PdfFileReader(open(os.path.join('PDF', _file), 'rb'))\n    try:\n        if 'Adobe' in pdf.getDocumentInfo()['/Creator']:\n            targets[_file] = pdf.getDocumentInfo()['/Creator']\n    except:\n        pass\nprint(targets)\n", "intent": "**Task 7.** Print the list of files which were generated using **Adobe** products.\n"}
{"snippet": "12 in [sum(randint(1, 6 + 1, 2)) for _ in range(24)]\n", "intent": "Can we get a double six on 24 rolls of a pair of dice?\n"}
{"snippet": "one12in24 = [12 in [sum(randint(1, 6 + 1, 2)) for _ in range(24)] for _ in range(2000)]\nplot(cumsum(one12in24)/(list(range(1, 2001))))\nylim(0, 1)\nmean(one12in24)\n", "intent": "Now let's simulate 2000 trials:\n"}
{"snippet": "def sample_stats(n):\n    rolls = sum(np.asarray([np.random.randint(1, 7, size=n)]), np.asarray([np.random.randint(1, 7, size=n)]))\n    mean = rolls.mean()\n    var = rolls.var()\n    return mean, var\nprint(\"Sample of 20\", sample_stats(20))\nprint(\"Sample of 2000\", sample_stats(2000))\n", "intent": "4) Do the same as in (2) but with two dice as in (3). Again, check to see how $N$, the number of samples, affects your result.\n"}
{"snippet": "def tag_words(words, tag):\n    default_tagger = DefaultTagger(tag)\n    tags = default_tagger.tag(words)\n    return tags\n", "intent": "- Use `DefaultTagger` to associate a tag of our choosing (the `tag` parameter) with words.\n"}
{"snippet": "binom.pmf(8, 10, 0.7)\n", "intent": "$X \\sim Binomial(10, 0.7)$, \n$$ P(X = 8) = \\binom{10}{8} (0.7)^8 (1 - 0.7)^{10 - 8} = 0.233 $$\n"}
{"snippet": "binom.pmf(8, 10, 0.8)\n", "intent": "$X \\sim Binomial(10, 0.8)$, \n$$ P(X = 8) = \\binom{10}{8} (0.8)^8 (1 - 0.8)^{10 - 8} = 0.302 $$\n"}
{"snippet": "binom.pmf(8, 10, 0.81)\n", "intent": "$X \\sim Binomial(10, 0.81)$, \n$$ P(X = 8) = \\binom{10}{8} (0.81)^8 (1 - 0.81)^{10 - 8} = 0.301 $$\n"}
{"snippet": "bisect.insort(seq, 8)\nseq\n", "intent": "Insert an element into a location to keep the list sorted:\n"}
{"snippet": "m1 = (sum((x1 - 0)**1))/m   \nm2 = (sum((x1 - m1)**2))/m  \nm3 = (sum((x1 - m1)**3))/m  \nm3/m2**1.5  \n", "intent": "<TABLE><TR><TD><img src=\"ZeroSkew.png\"></TD><TD><img src=\"PosSkew.png\"></TD></TR></TABLE>\n"}
{"snippet": "sample1 = dist.rvs(size=5)\nprint(sample1)\n", "intent": "Those are true/population values, calculated using the whole distribution.  \nWhat about samples?\n"}
{"snippet": "sample2 = dist.rvs(size=5)\nprint(sample2)\n", "intent": "Let's take another sample\n"}
{"snippet": "def sample_means(num_samples = 10, size = 5, dist = stats.uniform(0,1)):\n    means = []\n    for i in range(num_samples):\n        means.append(dist.rvs(size=size).mean())\n    return means   \n", "intent": "Now let's try sampling multiple times:\n"}
{"snippet": "dist.rvs(size=100).mean()\n", "intent": "What happens as we increase number of samples?\n"}
{"snippet": "def tag_pos(words):\n    pos_tags = pos_tag(words)\n    return pos_tags\n", "intent": "- Use a PerceptronTagger to create Part of Speech (PoS) tags.\n"}
{"snippet": "1 - stats.norm(80, 1).cdf(81.25)\n", "intent": "$$ \\bar{X} \\dot{\\sim} N(80, 1) $$ \n$P(X_1 + X_2 + \\dots + X_{16} > 1300)$ = $P(\\bar{X} > \\frac{1300}{16})$\nWhat is $P(\\bar{X} > 81.25)$?\n"}
{"snippet": "from scipy.stats import norm\nimport numpy as np\nnorm(1.5, 1 / np.sqrt(88)).cdf(1.36)\n", "intent": "Then  \n$$ P(\\bar{X} < 1.36) = 0.095 $$\n"}
{"snippet": "X = Binomial('X', 3, S(2)/3)\ndensity(X).dict\n", "intent": "If he plays three times, according to $H_0$, he should win:\n"}
{"snippet": "seq = [1, 5, 3, 9, 7, 6]\nseq.sort()\nseq\n", "intent": "Sort in-place O(n log n)\n"}
{"snippet": "X = Binomial('X', 12, S(2)/3)\nP(X <= 6)\n", "intent": "What are the chances of losing 6 out of 12 games, given: $$ H_0: P(win) = \\frac{2}{3} $$\n"}
{"snippet": "for t in range(12,53,2):\n    print(\"{} trials: p-value = {:.3}\".format(t, binom(t, 2/3).cdf(t/2)))\n", "intent": "How many games do we need to play before we can conclude, from losing half the time, that $p(win) < \\frac{2}{3}$\n"}
{"snippet": "(173 - 170)/(65 / 400**0.5)\n", "intent": "$$t_{stat} = \\frac{\\bar{x} - \\mu_0}{s/ \\sqrt{n}} = \\frac{173 - 170}{65/ \\sqrt{400}} = 0.92$$\n"}
{"snippet": "stats.t(399).sf(0.92)\n", "intent": "$$\\text{p-value} = P(t > 0.92) = 0.18 \\Rightarrow \\text{ fail to reject } H_0  $$\n"}
{"snippet": "percentile5 = stats.t(35).ppf(0.05)\nprint(percentile5)\n", "intent": "p-value = $P(t_{35} < t_{stat}) = P(t_{35} < \\frac{\\bar{x} - \\mu_0}{s/ \\sqrt{n}}) < 0.05$\n"}
{"snippet": "def tag_penn(words):\n    pt_tagger = UnigramTagger(treebank.tagged_sents())\n    tags = pt_tagger.tag(words)\n    return tags\n", "intent": "- Tokenize and tag unigrams in `text` by using `UnigramTagger` and a Penn Treebank tagged sentence and word tokenizer.\n"}
{"snippet": "sp.stats.t(399).sf(0.92)\n", "intent": "$$\\text{p-value} = P(t > 0.92) = 0.18 \\Rightarrow \\text{ fail to reject } H_0  $$\n"}
{"snippet": "1 - stats.norm.cdf(5.18)\n", "intent": "$$ \\text{p-value} = P(Z > 5.18) = 1.1 \\times 10^{-7} < 0.05 $$\n"}
{"snippet": "for num in range(11):\n    if num%2==0:\n        print(num)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "seq = ['the', 'quick', 'brown', 'fox', 'jumps', 'over']\nseq.sort(key=len)\nseq\n", "intent": "Sort by the secondary key of str length:\n"}
{"snippet": "def lesser_of_two_evens(a,b):\n    if a%2==0 and sum((a,b))%2==0:\n        return min(a,b)\n    else:\n        return max(a,b)\n", "intent": "    lesser_of_two_evens(2,4) --> 2\n    lesser_of_two_evens(2,5) --> 5\n"}
{"snippet": "def animal_crackers(text):\n    words=text.split()\n    print(words)\n    if words[0][0].lower()==words[1][0].lower():\n        return True\n    else:\n        return False\n", "intent": "    animal_crackers('Levelheaded Llama') --> True\n    animal_crackers('Crazy Kangaroo') --> False\n"}
{"snippet": "def makes_twenty(n1,n2):\n    if 20 in (n1,n2) or sum((n1,n2))==20:\n        return True\n    else:\n        return False\n", "intent": "    makes_twenty(20,10) --> True\n    makes_twenty(12,8) --> True\n    makes_twenty(2,3) --> False\n"}
{"snippet": "def old_macdonald(name):\n    return name[0].upper()+name[1:3]+name[3].upper()+name[4:]\n    pass\n", "intent": "    old_macdonald('macdonald') --> MacDonald\nNote: `'macdonald'.capitalize()` returns `'Macdonald'`\n"}
{"snippet": "def paper_doll(text):\n    st=''\n    for letter in text:\n        st+=letter*3\n    return st\n    pass\n", "intent": "    paper_doll('Hello') --> 'HHHeeellllllooo'\n    paper_doll('Mississippi') --> 'MMMiiissssssiiippppppiii'\n"}
{"snippet": "def tag_linked(words, default_tag='INFO'):\n    pt_tagger = UnigramTagger(treebank.tagged_sents())\n    default_tagger = DefaultTagger(default_tag)\n    pt_tagger._taggers = [pt_tagger, default_tagger]\n    tags = pt_tagger.tag(words)\n    return tags\n", "intent": "- Link the Penn Treebank Corpus tagger with our earlier Default tagger.\n"}
{"snippet": "for i in range (2,4):\n    if i%2==0:\n        continue\n    else:\n        print (i,'yes')\n", "intent": "    count_primes(100) --> 25\nBy convention, 0 and 1 are not prime.\n"}
{"snippet": "def ran_check(num,low,high):\n    if low<=num<=high:\n        print(f'{num} is between {low} and {high}')\n    pass\n", "intent": "___\n**Write a function that checks whether a number is in a given range (inclusive of high and low)**\n"}
{"snippet": "def ran_bool(num,low,high):\n    return low<=num<=high\n    pass\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "sorted([2, 5, 1, 8, 7, 9])\n", "intent": "Return a new sorted list from the elements of a sequence O(n log n):\n"}
{"snippet": "def full_board_check(board):\n    for i in range(1,10):\n        if space_check(board,i):\n            return False\n    return True \n    pass\n", "intent": "**Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.**\n"}
{"snippet": "def replay():\n    replay=''\n    while(replay not in ['yes','no']):\n        replay=(input('Do you want to play again? yes/no \\n')).lower()\n    if replay=='yes':\n        return True\n    else:\n        return False\n    pass\n", "intent": "**Step 9: Write a function that asks the player if they want to play again and returns a boolean True if they do want to play again.**\n"}
{"snippet": "class Line:\n    def __init__(self,coor1,coor2):\n        self.coor1=coor1\n        self.coor2=coor2\n    def distance(self):\n        return ((self.coor1[0]-self.coor2[0])**2+(self.coor1[1]-self.coor2[1])**2)**(0.5)\n    def slope(self):\n        return ((self.coor1[1]-self.coor2[1])/(self.coor1[0]-self.coor2[0]))\n", "intent": "Fill in the Line class methods to accept coordinates as a pair of tuples and return the slope and distance of the line.\n"}
{"snippet": "for i in ['a','b','c']:\n    try:\n        print(i**2)\n    except:\n        print('this is not a number')\n", "intent": "Handle the exception thrown by the code below by using <code>try</code> and <code>except</code> blocks.\n"}
{"snippet": "test_deck = Deck(suits, ranks)\nprint(test_deck)\n", "intent": "TESTING: Just to see that everything works so far, let's see what our Deck looks like!\n"}
{"snippet": "from IPython.display import display, Image\nfrom IPython.display import (\n    display_pretty, display_html, display_jpeg,\n    display_png, display_json, display_latex, display_svg\n)\n", "intent": "Put any needed imports needed to display rich output the following cell:\n"}
{"snippet": "s = 'hello'\niter_s=iter(s)\nnext(iter_s)\n", "intent": "Use the iter() function to convert the string below into an iterator:\n"}
{"snippet": "names.update({'ali':'pisano'})\nprint(names)\n", "intent": "Note: the update function takes the dictionary you want to merge in as a variable.\n"}
{"snippet": "sales_data2 = {}\nfor num in range(0, len(data[0])): \n    header_name = header[num]\n    sales_data2[header_name] = [] \n    for row in data: \n        sales_data2[header_name].append(row[num])\n", "intent": "added alternative solution without the enumerate in the loop:\n"}
{"snippet": "seq = [2, 5, 1, 8, 7, 9, 9, 2, 5, 1, (4, 2), (1, 2), (1, 2)]\nsorted(set(seq))\n", "intent": "It's common to get a sorted list of unique elements by combining sorted and set:\n"}
{"snippet": "import numpy as np\nx = np.array([1.2, 2.2, 1.7]) * u.pc / u.year\nx\n", "intent": "We can also generate a ``Quantity`` array:\n"}
{"snippet": "q1 = 3. * u.m / u.s\nq1\n", "intent": "Quantities can also be combined using Python numeric operators:\n"}
{"snippet": "q1 = 3 * u.m\nq1 + (5 * u.m)\n", "intent": "Addition and subtraction require compatible unit types:\n"}
{"snippet": "q = 3. * u.cm * u.pc / u.g / u.year**2\nq\n", "intent": "The units of a quantity can be decomposed into a set of base units using the\n``decompose()`` method. By default, units will be decomposed to S.I.:\n"}
{"snippet": "q.decompose(u.cgs.bases)\n", "intent": "To decompose into c.g.s. bases:\n"}
{"snippet": "assert number_to_words(14) == 'fourteen'\nassert number_to_words(458) == 'fourhundredandfiftyeight'  \n", "intent": "Now write a set of `assert` tests for your `number_to_words` function that verifies that it is working as expected.\n"}
{"snippet": "(7. * u.cm).to(u.GHz)\n", "intent": "Equivalencies can be used to convert quantities that are not strictly the same physical type.\n"}
{"snippet": "q = (1e-18 * u.erg / u.s / u.cm**2 / u.AA)\nq\n", "intent": "For spectral density equivalencies, it is necessary to supply the location in the spectrum where the conversion is done:\n"}
{"snippet": "np.sin(30 * u.degree)\n", "intent": "Most of the [Numpy](http://www.numpy.org) functions understand `Quantity` objects:\n"}
{"snippet": "list(reversed(seq))\n", "intent": "Iterate over the sequence elements in reverse order:\n"}
{"snippet": "h100 = u.def_unit(['h100', 'littleh'])\nh70 = u.def_unit('h70', h100 * 100./70)\n", "intent": "We use the name 'h100' to differentiate from \"h\" as in \"hours\".\n"}
{"snippet": "int fun (int n) { \n   return n+1;\n}\n", "intent": "First let us wrap a simple function.\n"}
{"snippet": "x = 1\nfor i in range(5):\n    x = x + i\n    print \"i = \", i\n    print \"x = \", x\nprint \"That's it!\"\n", "intent": "Simple loops / indentation\n-------------------------\n"}
{"snippet": "for i in range(0, 10, 2):\n    if i == 4:\n        print \"i is 4\"\n    elif i == 6:\n        print \"i is 6\"\n    else:\n        print \"i is different\"\n", "intent": "If statements\n-------------\n"}
{"snippet": "def fnct(x):\n    y = x**2 - 5.0\n    return y\nprint fnct(3.)\n", "intent": "Defining a function\n-------------------\n"}
{"snippet": "assert count_letters(342) == 23 \nassert count_letters(115) == 20 \n", "intent": "Now write a set of `assert` tests for your `count_letters` function that verifies that it is working as expected.\n"}
{"snippet": "from pytriqs.gf import *\ng = GfReFreq(indices=[0], window=[-2,2], name='GF')\ng << SemiCircular(1.0)\nwith HDFArchive(\"my_archive.h5\",'w') as A:\n    A['number'] = 12\n    A['GF'] = g\n", "intent": "Writing in an archive\n---------------------\nWe initialize a Green function and write it to file together with a number\n"}
{"snippet": "print n('up',0) - c_dag('up',0)*c('up',0)\n", "intent": "Operations with operators\n-------------------------\nOperators can be manipulated and anti-commutation relations will be used to simplify\nexpressions\n"}
{"snippet": "s = \"Hi there Sam!\"\nmy_list = s.split()\n", "intent": "** Split this string:**\n    s = \"Hi there Sam!\"\n**into a list. **\n"}
{"snippet": "strings = ['foo', 'bar', 'baz']\nfor i, string in enumerate(strings):\n    print(i, string)\n", "intent": "Get the index of a collection and the value:\n"}
{"snippet": "from IPython.display import Image\nImage(filename='circle_in_square.png')\n", "intent": "Consider a circle perfectly inscribed within a square. One side of this square is then equal to $2*r$, where $r$ is the radius of the circle. \n"}
{"snippet": "from decimal import Decimal,getcontext\na = Decimal(6)\none = Decimal(1)\ngetcontext().prec = 6 \nprint one/a\ngetcontext().prec = 50 \nprint one/a\n", "intent": "<b>Bonus!</b> There are python libraries that allow you calculate numbers to higher precision. \n"}
{"snippet": "a = 9.81 \nt = 4 \nx = (1/2)*a*(t**2)\nx\n", "intent": "What is the mistake in the following code? Isn't it the same as what you just did?\n"}
{"snippet": "run_sql(\"SELECT Name, Milliseconds / 1000 AS Seconds FROM Track LIMIT 10\")\n", "intent": "- Can perform operations and rename in the statement\n"}
{"snippet": "table_information('Track')\n", "intent": "- SELECT FROM TableA INNER JOIN TableB ON TableA.Column == TableB.Column\n"}
{"snippet": "n = 0\nx = 0\nwhile n < 1000:\n    n = n + 1\n    x = x + count_letters(n)\nprint(x)\n", "intent": "Finally used your `count_letters` function to solve the original question.\n"}
{"snippet": "def poly(x, coef):\n    out = 0\n    for i, ai in enumerate(coef):\n        out += ai * x**i\n    return out\nprint(poly(x, coef))\n", "intent": "Use loops with ``enumerate()`` function.\n"}
{"snippet": "def poly(x, coef):\n    return np.cumsum(coef * x**np.arange(len(coef)))[-1]\nprint(poly(x, coef))\n", "intent": "Vectorize the code with the help of ``np.cumsum()``.\n"}
{"snippet": "def poly(x, coef):\n    return np.poly1d(coef[::-1])(x)\nprint(poly(x, coef))\n", "intent": "Use ``np.poly1d()``.\n"}
{"snippet": "seq_1 = [1, 2, 3]\nseq_2 = ['foo', 'bar', 'baz']\nzip(seq_1, seq_2)\n", "intent": "Pair up the elements of sequences to create a list of tuples:\n"}
{"snippet": "data = downloaded.copy()\ndata.rename(columns=ind, inplace=True)\nprint(data.head())\n", "intent": "- Rename columns to give them some meaningful names. Print first five rows of the dataset.\n"}
{"snippet": "data['date'] = pd.to_datetime(data.index.get_level_values('year'), infer_datetime_format=True)\ndata.set_index('date', append=True, inplace=True)\ndata.reset_index('year', inplace=True, drop=True)\ndata.sort_index(inplace=True)\nprint(data.head())\nprint(data.index.get_level_values('date')[:3])\n", "intent": "Note that the index level 'year' is a `string`.\n- Convert it to `DatetimeIntex` and name it 'date'. Show the first three values.\n"}
{"snippet": "aggregated = data.groupby(level=['country']).mean()[['Inflation', 'GDP per capita']].dropna()\naggregated.sort_index(by='Inflation', inplace=True)\nprint(aggregated.head())\n", "intent": "- Compute average inflation and GDP per capita over time for each country. Drop missing values. Sort index by inflation. Print the first five rows.\n"}
{"snippet": "table = pd.concat([aggregated.head(5), aggregated.tail(5)])[['Inflation']]\nprint(table)\n", "intent": "- Create a `DataFrame` which contains only five highest and five lowest inflation values and country index. Print it.\n"}
{"snippet": "table = data.copy()\ndef growth(series):\n    return 100 * (np.log(series) - np.log(series.shift()))\ntable['GDP growth'] = table.groupby(level='country')['GDP per capita'].apply(growth)\nprint(table.head())\n", "intent": "- Compute log percentage growth rate of GDP per capita. Print first five rows.\n"}
{"snippet": "va.set_block_size(10)\nva.enable_notebook()\nc = checkerboard(20)\nc\n", "intent": "Use `vizarray` to visualize a checkerboard of `size=20` with a block size of `10px`.\n"}
{"snippet": "print(factorial(10))\n", "intent": "Write a program which can compute the factorial of a given number. Loops are not allowed.\n"}
{"snippet": "class Student(object):\n    def __init__(self, name):\n        self.name = name\n    def set_age(self, age):\n        self.age = age\n    def set_major(self, major):\n        self.major = major\n", "intent": "The very basic class definition:\n"}
{"snippet": "print(anna)\nprint(type(anna))\n", "intent": "First thing to do to understand what we are dealing with is try to print it and find out its type.\n"}
{"snippet": "arr = np.arange(32).reshape((8, 4))\narr\n", "intent": "We can also create arrays and then reshape them into any shape, provided the new array has the same size as the old array:\n"}
{"snippet": "ivan = Student('Ivan')\nivan.set_age(23)\nivan.set_major('economics')\nprint(ivan.name, ivan.age, ivan.major, sep=', ')\n", "intent": "Similarly, we can create another instance of the same class and explore its attributes.\n"}
{"snippet": "def calculate_gpa(obj):\n    gpa = 0\n    for record in obj.transcript:\n        gpa += record[1] / len(obj.transcript)\n    return 'GPA = %s' % gpa\nStudent.calculate_gpa = calculate_gpa\n", "intent": "Next useful addition to the class is GPA calculation.\n"}
{"snippet": "anna = Student('Anna')\nanna.set_age(21)\nanna.set_major('physics')\nanna.add_grade('statistics', 4.7)\nanna.add_grade('game theory', 5.3)\nanna.add_grades([('econometrics', 3.7), ('macroeconomics', 4)])\nprint(anna.calculate_gpa())\n", "intent": "Here we defined class method outside of its definition.\nNow let's see the result.\n"}
{"snippet": "quote = {\n    'Ron': 'Wingardium Leviosa! Wingardium Leviosa!',\n    'Hermione': \"It's Wingardium Levi-OH-sa, not Wingardium Levios-AH\"\n}\nwitch = 'Hermione'\nprint (witch, 'says: ',quote[witch])\n", "intent": "Python is designed to be human readable!\nLet's Try...\nhttps://www.youtube.com/watch?v=fx2zLgdkJpk\n"}
{"snippet": "'string1'\n'string2'\n", "intent": "So far we've been delcaring strings, but what if we use more than one of them? We'd use a ```print()``` statement\n"}
{"snippet": "va.set_block_size(5)\nd = checkerboard(27)\nd\n", "intent": "Use `vizarray` to visualize a checkerboard of `size=27` with a block size of `5px`.\n"}
{"snippet": "weekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday']\n", "intent": "Lists can hold any type of object, not just intergers like we had above\n"}
{"snippet": "listy = [1,1,1,1,1,1,1,1]\n", "intent": "Values in our lists don't need to be unique either.\n"}
{"snippet": "my_list = ['one', 'two', 3, 4, 'five']\n", "intent": "It works the same way as strings!\n"}
{"snippet": "for i, (a, b) in enumerate(zip(seq_1, seq_2)):\n    print('%d: %s, %s' % (i, a, b))\n", "intent": "It is common to use zip for simultaneously iterating over multiple sequences combined with enumerate:\n"}
{"snippet": "next_item = groceries.pop()\n", "intent": "You can think of the **pop** method as the opposite of append. It will take the last item in the list, and take it out.\n"}
{"snippet": "letters = ['a','q','d','r','m','p','b']\n", "intent": "Another two methods that we can use on lists are **sort** and **reverse** to change our lists\n"}
{"snippet": "string = 'This is great! Show us more!'\nl = string.split()\nl2 = string.split('!')\nprint(l)\nprint(l2)\n", "intent": "makeing lists from strings\n"}
{"snippet": "years_list.append(2016)\n", "intent": "Now append this year 2016 to the years_list.\n"}
{"snippet": "things = [\"mozzarella\", \"cinderella\", \"salmonella\"]\n", "intent": "Make a list called things with these three strings as elements: \"mozzarella\", \"cinderella\", \"salmonella\".\n"}
{"snippet": "def get_lyric_urls():\n    index = requests.get(\"http://www.metrolyrics.com/system-of-a-down-lyrics.html\") \n    soup = BeautifulSoup(index.text, 'html.parser')\n    lyric_paths = [link.get('href') for link in  \n                   soup.find_all('tbody')[0].find_all('a')]\n    return lyric_paths\n", "intent": "First get the page that has an index of all the lyrics and create a list of the URLs of those pages:\n"}
{"snippet": "surprise = [\"Groucho\", \"Chico\", \"Harpo\"]\n", "intent": "Create a list called surprise with the elements \"Groucho\", \"Chico\", and \"Harpo\"\n"}
{"snippet": "surprise[-1][::-1].upper()\n", "intent": "Lowercase the last element of the surprise list, reverse it, and then capitalize it.\n"}
{"snippet": "my_dict = {'key1':123,'key2':[12,23,33],'key3':['item0','item1','item2']}\n", "intent": "Now we've seen dictionaries hold strings, but it's important to note that dictionaries can hold any python object, like lists.\n"}
{"snippet": "numbers = [(1, 'one'), (2, 'two'), (3, 'three')]\na, b = zip(*numbers)\na\n", "intent": "Zip can unzip a zipped sequence, which you can think of as converting a list of rows into a list of columns:\n"}
{"snippet": "d = {'key1':{'nestkey':{'subnestkey':'value'}}}\n", "intent": "Remember that we \"nested\" lists in lists? The same can be done for dictionaries, and is used often!\n"}
{"snippet": "employees = {'Joe':{'age': 31, 'id number':3, 'title':'sales associate'},\n             'Bob':{'age':29, 'id nubmer':4, 'title':'manager'}\n            }\n", "intent": "When would you use this? Keeping track of records is a good place to start.\n"}
{"snippet": "employees['Joe']['wage'] = '$15/hour'\nemployees['Bob']['Salary'] = '$50,000'\n", "intent": "It's important to note that we can hold different values for different entries.\n"}
{"snippet": "others = { 'Marx': 'Groucho', 'Howard': 'Moe' }\n", "intent": "you can update the values of a dictionary by mergeing two dictionaries together.\n"}
{"snippet": "pythons.get('Cleese', 'not a python')\n", "intent": "If an entry is in the dictionary, it will return the value, but if it isn't, it'll return a value if you specify one.\n"}
{"snippet": "def get_lyric(url):\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, 'html.parser')\n    html_lyrics = soup.find_all('div', class_='lyrics-body')[0].find_all('p')\n    html_lyrics = [l.getText() for l in html_lyrics]\n    return '\\n'.join(html_lyrics)\n", "intent": "Here is a function that takes the URL of a single lyric page and scrapes the actual lyric as text:\n"}
{"snippet": "letters = tuple('Thisisalongstring')\nprint(letters)\n", "intent": "Very simmilar to lists\n"}
{"snippet": "blah_tuple = ('this',1,3.892,'that','that','that','that')\nblah_list = ['this',1,3.892,'that','that','that','that']\n", "intent": "you can't change the entries of a tuple like you can a list.\n"}
{"snippet": "marxes = ['Groucho', 'Chico', 'Harpo']\npythons = ['Chapman', 'Cleese', 'Gilliam', 'Jones', 'Palin']\nstooges = ['Moe', 'Curly', 'Larry']\n", "intent": "Now that we understand the basic structures, we can start to mix them to make larger more complex data structures\n"}
{"snippet": "strings = ['foo', 'bar', 'baz', 'f', 'fo', 'b', 'ba']\n[x.upper() for x in strings if x[0] == 'b']\n", "intent": "Convert to upper case all strings that start with a 'b':\n"}
{"snippet": "location = 'Centrl Office'\nif location == 'home':\n    print('Welcome Home!')\nelif location == 'Centrl Office' or 'OMSI':\n    print('Welcome to Class')\nelif location == 'Work':\n    print('Someone has a case of the Mondays')\nelse:\n    print('Uh Oh... Where are you???')\n", "intent": "Let's see our full repitoire of if, elif, and else\n"}
{"snippet": "lst = [number**2 for number in range(1,11)]\nlst\n", "intent": "I want a list of all the square numbers from 1 to 100\n"}
{"snippet": "celsius = [0,10,20.1,34.5]\nfahrenheit = [((9/5)*temp + 32) for temp in celsius ]\nfahrenheit\n", "intent": "Let's try something a little more complicated. We'll do more math, with a similar statement\nLet's convert a list of celcius temperatures to farenheit\n"}
{"snippet": "lst = [ x + 3 for x in [x**2 for x in range(11)]]\nlst\n", "intent": "You can also nest comprehensions, although, I don't run into them very often.\n"}
{"snippet": "{i+65 : chr(65+i) for i in range(4)}\n", "intent": "lets map the first few letters of the alphabet to their chr values\n"}
{"snippet": "with open('all_soad_lyrics.txt', 'w') as f:\n    for lyric in lyrics:\n        f.write(lyric.replace('\\r\\n', '\\n'))\n        f.write('\\n')\n", "intent": "Now save all the lyrics to a text file:\n"}
{"snippet": "st = 'Print only the words that start with s in this sentence'\n", "intent": "use for, split(), and if to create a statement that will print out letterst that start with 's':\n"}
{"snippet": "list(range(0,11,2))\n", "intent": "Use range() to print all the even numbers from 0 to 10. Hint use a the list() function\n"}
{"snippet": "[x for x in range(1,51) if x % 3 == 0]\n", "intent": "Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.\n"}
{"snippet": "list_of_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n[x for tup in list_of_tuples for x in tup]\n", "intent": "List comprehensions can be nested:\n"}
{"snippet": "st = 'Never gonna give you up, never gonna let you down. Never gonna run around and desert you'\n", "intent": "Use List Comprehension to create a list of the first letters of every word in the string below:\n"}
{"snippet": "x = 0\nwhile x < 5:\n    print('x is {}'.format(x))\n    print('we will add 1 to x')\n    x += 1\n    if x ==3 :\n        print('breaking cuz 3')\n        break\n", "intent": "Notice that we print 'x == 3' rather than continuing?\n"}
{"snippet": "def greeting(name):\n    print('Hello {}'.format(name))\n", "intent": "Let's write a function that greets people by their name!\n"}
{"snippet": "def add_num(num1,num2):\n    return num1 + num2\n", "intent": "return allows your function to return a result that can be stored as a varialbe or used as an object in code.\n"}
{"snippet": "def multiply(lst):\n    total = 1\n    for item in lst:\n        total *= item\n    return total\nmultiply([1, 2, 3, -4])\n", "intent": "**Write a Python function called multiply that multiplies all the numbers in a list.**\n```\nSample List : [1, 2, 3, -4]\nExpected Output : -24\n```\n"}
{"snippet": "ans = \nif ans != num1 + num2:\n    raise ValueError(\"Your answer is incorrect\")\nreturn num1 + num2\n", "intent": "The sum of {{num1}} and {{num2}} is\n"}
{"snippet": "X = np.array([[1,2,3], [4,5,6]], np.int32); X\nzeros = np.zeros_like(X); zeros\n", "intent": "Let X = np.array([1,2,3], [4,5,6], np.int32). \nCreate a new array with the same shape and type as X.\n"}
{"snippet": "x = np.zeros((3, 3, 3))\nnp.fill_diagonal(x, 1); x\n", "intent": "Create a 3-D array with ones on the diagonal and zeros elsewhere.\n"}
{"snippet": "np.ones((3, 2), dtype=np.float)\n", "intent": "Create a new array of 3*2 float numbers, filled with ones.\n"}
{"snippet": "{len(x) for x in strings if x[0] == 'b'}\n", "intent": "A set comprehension is similar to a list comprehension but returns a set.\nGet the unique lengths of strings that start with a 'b':\n"}
{"snippet": "np.zeros((3, 2), dtype=np.float)\n", "intent": "Create a new array of 3*2 float numbers, filled with zeros.\n"}
{"snippet": "x = np.arange(4, dtype=np.int64); x\n", "intent": "Let x = np.arange(4, dtype=np.int64). Create an array of zeros with the same shape and type as X.\n"}
{"snippet": "np.full((2, 5), 6, dtype=np.uint32)\n", "intent": "Create a new array of 2*5 uints, filled with 6.\n"}
{"snippet": "x = np.arange(4, dtype=np.int64)\nnp.full_like(x, 6)\n", "intent": "Let x = np.arange(4, dtype=np.int64). Create an array of 6's with the same shape and type as X.\n"}
{"snippet": "np.array([1, 2, 3])\n", "intent": "Create an array of [1, 2, 3].\n"}
{"snippet": "myarray[0] = \"hello\"\n", "intent": "We get an error if we try to assign a value of the wrong type to an element in a numpy array:\n"}
{"snippet": "X = np.array([[1, 2], [3, 4]])\nnp.asmatrix(X)\n", "intent": "Let X = np.array([[1, 2], [3, 4]]). Convert it into a matrix.\n"}
{"snippet": "x = [1, 2]\nnp.asarray(x, dtype=np.float)\n", "intent": "Let x = [1, 2]. Conver it into an array of `float`.\n"}
{"snippet": "x = np.array([30])\nnp.asscalar(x)\n", "intent": "Let x = np.array([30]). Convert it into scalar of its single element, i.e. 30.\n"}
{"snippet": "h2o.shutdown(prompt=False)\n", "intent": "Shut down the cluster now that we are done using it.\n"}
{"snippet": "np.arange(2, 101, 2)\n", "intent": "Create an array of 2, 4, 6, 8, ..., 100.\n"}
{"snippet": "np.linspace(3, 10, 50)\n", "intent": "Create a 1-D array of 50 evenly spaced elements between 3. and 10., inclusive.\n"}
{"snippet": "np.logspace(3, 10, 50)\n", "intent": "Create a 1-D array of 50 element spaced evenly on a log scale between 3. and 10., exclusive.\n"}
{"snippet": "x = np.zeros((4, 4), dtype=np.uint8)\nnp.fill_diagonal(x, np.arange(1, 5))\nx\n", "intent": "Create a 2-D array whose diagonal equals [1, 2, 3, 4] and 0's elsewhere.\n"}
{"snippet": "x = np.ones((3, 5))\nnp.tril(x, -1)\n", "intent": "Create an array which looks like below.\narray([[ 0.,  0.,  0.,  0.,  0.],\n       [ 1.,  0.,  0.,  0.,  0.],\n       [ 1.,  1.,  0.,  0.,  0.]])\n"}
{"snippet": "M = np.array([1, 2, 3, 4], dtype=complex)\nM\n", "intent": "If we want, we can explicitly define the type of the array data when we create it, using the `dtype` keyword argument: \n"}
{"snippet": "x = np.arange(1, 13).reshape(4, 3)\nnp.triu(x, -1)\n", "intent": "Create an array which looks like below. array([[ 1,  2,  3],\n       [ 4,  5,  6],\n       [ 0,  8,  9],\n       [ 0,  0, 12]])\n"}
{"snippet": "x1 = np.array(['Hello', 'Say'], dtype=np.str)\nx2 = np.array([' world', ' something'], dtype=np.str)\nnp.char.add(x1, x2)\n", "intent": "Q1. Concatenate x1 and x2.\n"}
{"snippet": "x = np.array(['Hello ', 'Say '], dtype=np.str)\nnp.char.multiply(x, 3)\n", "intent": "Q2. Repeat x three time element-wise.\n"}
{"snippet": "def extract_int_bedrooms(bedrooms):\n    if not bedrooms == '':\n        return int(float(bedrooms))\n    else:\n        return None\n", "intent": "first create a couple of functions to do the cleaning\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\nencoded = np.char.encode(x, \"cp500\")\ndecoded = np.char.decode(encoded, encoding=\"cp500\")\nprint(\"encoded =\", encoded)\nprint(\"decoded =\", decoded)\n", "intent": "Q5. Encode x in cp500 and decode it again.\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\nnp.char.join(' ', x)\n", "intent": "Q6. Insert a space between characters of x.\n"}
{"snippet": "x = np.array(['Hello my name is John'], dtype=np.str)\nnp.char.split(x, ' ')\n", "intent": "Q8. Split the element of x with spaces.\n"}
{"snippet": "x = np.array(['Hello\\nmy name is John'], dtype=np.str)\nnp.char.split(x, '\\n')\n", "intent": "Q9. Split the element of x to multiple lines.\n"}
{"snippet": "x = np.array(['34'], dtype=np.str)\nnp.char.rjust(x, 4, '0')\n", "intent": "Q10. Make x a numeric string of 4 digits with zeros on its left.\n"}
{"snippet": "print(\"myarray:\", myarray)\n", "intent": "First, let's quickly look at what is in our array (defined above), for reference:\n"}
{"snippet": "x1 = np.array(['Hello', 'my', 'name', 'is', 'John'], dtype=np.str)\nx2 = np.array(['Hello', 'my', 'name', 'is', 'Jim'], dtype=np.str)\nnp.char.equal(x1, x2)\n", "intent": "Q12. Return x1 == x2, element-wise.\n"}
{"snippet": "x = np.array(['Hello', 'my', 'name', 'is', 'Lily'], dtype=np.str)\nnp.char.count(x, 'l')\n", "intent": "Q14. Count the number of \"l\" in x, element-wise.\n"}
{"snippet": "x = np.array(['Hello', 'my', 'name', 'is', 'Lily'], dtype=np.str)\nnp.char.find(x, 'l')\n", "intent": "Q15. Count the lowest index of \"l\" in x, element-wise.\n"}
{"snippet": "round(3.14159265359, 5)\n", "intent": "Use rain.csv to calculate mean and maximum values in a column\n"}
{"snippet": "np.lookfor(\"linear algebra\")\n", "intent": "Q1. Search for docstrings of the numpy functions on linear algebra.\n"}
{"snippet": "print(np.unravel_index(100,(6,7,8)))\n", "intent": "20. Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element?\n"}
{"snippet": "x = np.arange(10)\nnp.save(\"temp.npy\", x)\nimport os\nif os.path.exists('temp.npy'):\n    x2 = np.load(\"temp.npy\")\n    print(np.array_equal(x, x2))\n", "intent": "Q1. Save x into `temp.npy` and load it.\n"}
{"snippet": "x = np.arange(10)\ny = np.arange(11, 20)\nnp.savez(\"temp.npz\", x=x, y=y)\nwith np.load(\"temp.npz\") as data:\n    x2 = data['x']\n    y2 = data['y']\n    print(np.array_equal(x, x2))\n    print(np.array_equal(y, y2))\n??np.savez\n", "intent": "Q2. Save x and y into a single file 'temp.npz' and load it.\n"}
{"snippet": "x = np.arange(10).reshape(2, 5)\nheader = 'num1 num2 num3 num4 num5'\nnp.savetxt(\"tmp.txt\", x, header=header, fmt='%d')\nnp.loadtxt(\"tmp.txt\", dtype=str)\n", "intent": "Q3. Save x to 'temp.txt' in string format and load it.\n"}
{"snippet": "A = np.array([[n+m*10 for n in range(5)] for m in range(5)])\nA\n", "intent": "Index slicing works exactly the same way for multidimensional \"Matrix\" arrays:\n"}
{"snippet": "x = np.array([1, 2, 3, 4])\nx_bytes = x.tobytes()\nx2 = np.frombuffer(x_bytes, dtype=int)\nprint(np.array_equal(x, x2))\n", "intent": "Q5. Convert `x` into bytes, and load it as array.\n"}
{"snippet": "a = [[1, 2], [3, 4]]\nx = np.array(a)\na2 = x.tolist()\nprint(a == a2)\n", "intent": "Q6. Convert `a` into an ndarray and then convert it into a list again.\n"}
{"snippet": "x = np.random.uniform(size=[10,100])\n??np.set_printoptions(precision=1, suppress=True)\nprint(x)\n", "intent": "Q8. Print `x` such that all elements are displayed with precision=1, no suppress.\n"}
{"snippet": "import csv\nfirePath = './FireData-Part1.csv'\nclimatePath = './ClimateData-Part1.csv'\n", "intent": "Write a python program that will read the data from Fire data-Part1 and Climate data - Part1 and load them to the new database created in Task B2.\n"}
{"snippet": "x = np.array([1,2,3])\nx = np.array([1,0,3])\n", "intent": "Q1. Let x be an arbitrary array. Return True if none of the elements of x is zero. Remind that 0 evaluates to False in python.\n"}
{"snippet": "x = np.array([1,0,0])\nx = np.array([0,0,0])\n", "intent": "Q2. Let x be an arbitrary array. Return True if any of the elements of x is non-zero.\n"}
{"snippet": "x = np.array([1, 0, np.nan, np.inf])\n", "intent": "Q3. Predict the result of the following code.\n"}
{"snippet": "x = np.array([1, 0, np.nan, np.inf])\n", "intent": "Q4. Predict the result of the following code.\n"}
{"snippet": "x = np.array([1, 0, np.nan, np.inf])\n", "intent": "Q5. Predict the result of the following code.\n"}
{"snippet": "def Theta(x):\n    return 1 * (x >= 0)\n", "intent": "We can also implement the function to accept a vector input from the beginning (requires more effort but might give better performance):\n"}
{"snippet": "x = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])\n", "intent": "Q7. Predict the result of the following code.\n"}
{"snippet": "x = np.array([4, 5])\ny = np.array([2, 5])\n", "intent": "Q11. Write numpy comparison functions such that they return the results as you see.\n"}
{"snippet": "x = np.array([0., 1., 30, 90])\n", "intent": "Q1. Calculate sine, cosine, and tangent of x, element-wise.\n"}
{"snippet": "for i in range(10):\n    print(how_close())\n", "intent": "You can try running this function a few times and seeing what it produces:\n"}
{"snippet": "x = np.array([-np.pi, -np.pi/2, np.pi/2, np.pi])\n", "intent": "Q3. Convert angles from radians to degrees.\n"}
{"snippet": "x = np.array([-180.,  -90.,   90.,  180.])\n", "intent": "Q4. Convert angles from degrees to radians.\n"}
{"snippet": "x = np.array([-1., 0, 1.])\n", "intent": "Q5. Calculate hyperbolic sine, hyperbolic cosine, and hyperbolic tangent of x, element-wise.\n"}
{"snippet": "x = np.array([2.1, 1.5, 2.5, 2.9, -2.1, -2.5, -2.9])\nout1 = np.around(x)\nout2 = np.floor(x)\nout3 = np.ceil(x)\nout4 = np.trunc(x)\nout5 = [round(elem) for elem in x]\n", "intent": "Q6. Predict the results of these, paying attention to the difference among the family functions.\n"}
{"snippet": "x = np.array([1, 2, 4, 7, 0])\n", "intent": "Q9. Calculate the difference between neighboring elements, element-wise.\n"}
{"snippet": "v = np.matrix([1,2,3,4,5,6]).T\n", "intent": "If we try to add, subtract or multiply objects with incomplatible shapes we get an error:\n"}
{"snippet": "x = np.array([1, 2, 3])\ny = np.array([4, 5, 6])\n", "intent": "Q11. Return the cross product of x and y.\n"}
{"snippet": "x = np.array([1., 2., 3.], np.float32)\n", "intent": "Q12. Compute $e^x$, element-wise.\n"}
{"snippet": "x = np.array([1., 2., 3.], np.float32)\n", "intent": "Q13. Calculate exp(x) - 1 for all elements in x.\n"}
{"snippet": "cursor = Climate.find({})\nclimateCollection = []\nfor file in cursor:\n    climateCollection.append(file)\n", "intent": "We choose to implement A2 in parallized way\n"}
{"snippet": "x = np.array([1, np.e, np.e**2])\n", "intent": "Q15. Compute natural, base 10, and base 2 logarithms of x element-wise.\n"}
{"snippet": "x = np.array([1e-99, 1e-100])\n", "intent": "Q16. Compute the natural logarithm of one plus each element in x in floating-point accuracy.\n"}
{"snippet": "x = np.array([-3, -2, -1, 0, 1, 2, 3])\n", "intent": "Q17. Return element-wise True where signbit is set.\n"}
{"snippet": "x = np.array([-1, 0, 1])\ny = -1.1\n", "intent": "Q18. Change the sign of x to that of y, element-wise.\n"}
{"snippet": "x = np.array([1, 2, 3])\ny = np.array([-1, -2, -3])\n", "intent": "Q19. Add x and y element-wise.\n"}
{"snippet": "C = np.matrix([[1j, 2j], [3j, 4j]])\nC\n", "intent": "There are loads of liner algebra matrix computations in NumPy. Most are under the `np.linalg` sub-module\n"}
{"snippet": "x = np.array([3, 4, 5])\ny = np.array([1, 0, -1])\n", "intent": "Q21. Multiply x by y element-wise.\n"}
{"snippet": "x = np.array([3., 4., 5.])\ny = np.array([1., 2., 3.])\n", "intent": "Q22. Divide x by y element-wise in two different ways.\n"}
{"snippet": "x = np.array([1, -1])\n", "intent": "Q23. Compute numerical negative value of x, element-wise.\n"}
{"snippet": "from pprint import pprint\nimport csv\nfirePath = './FireData-Part1.csv'\nclimatePath = './ClimateData-Part1.csv'\n", "intent": "Write a python program that will read the data from Fire data-Part1 and Climate data - Part1 and load them to the new database created in Task B2.\n"}
{"snippet": "x = np.array([[1, 2], [3, 4]])\ny = np.array([[1, 2], [1, 2]])\n", "intent": "Q25. Compute $x^y$, element-wise.\n"}
{"snippet": "x = np.array([-3, -2, -1, 1, 2, 3])\ny = 2\n", "intent": "Q26. Compute the remainder of x / y element-wise in two different ways.\n"}
{"snippet": "x = np.array([1, 2, -1])\n", "intent": "Q28. Compute the square of x, element-wise.\n"}
{"snippet": "x = np.array([1., 4., 9.])\n", "intent": "Q29. Compute square root of x element-wise.\n"}
{"snippet": "x = np.array([[1, -1], [3, -3]])\n", "intent": "Q30. Compute the absolute value of x.\n"}
{"snippet": "def printme(a,b):\n    print(\"a is \", a, \", b is \", b)\nprintme(b = 1, a = 2)\n", "intent": "- Specify the parameter name when you call the function, .\n- Arguments can be <b>out of order</b>.\n<b>Example:</b>\n"}
{"snippet": "x = [b'3 out of 10', b'5 out of 10', b'2 out of 10']\n", "intent": "Q4. Extract 1 elements from x randomly such that each of them would be associated with probabilities .3, .5, .2. Then print the result 10 times.\n"}
{"snippet": "x = np.array([1, 2, 6, 4, 2, 3, 2])\n", "intent": "Q1. Get unique elements and reconstruction indices from x. And reconstruct x.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1])\n", "intent": "Q2. Create a boolean array of the same shape as x. If each element of x is present in y, the result will be True, otherwise False.\n"}
{"snippet": "t = json.dumps(next(a))\n", "intent": "- String willbe the easiest to encode and decode\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\n", "intent": "Q4. Find the unique elements of x that are not present in y.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nout1 = np.setxor1d(x, y)\nout2 = np.sort(np.concatenate((np.setdiff1d(x, y), np.setdiff1d(y, x))))\nassert np.allclose(out1, out2)\n", "intent": "Q5. Find the xor elements of x and y.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nout1 = np.union1d(x, y)\nout2 = np.sort(np.unique(np.concatenate((x, y))))\nassert np.allclose(out1, out2)\n", "intent": "Q6. Find the union of x and y.\n"}
{"snippet": "x = np.array([[1,4],[3,1]])\n", "intent": "Q1. Sort x along the second axis.\n"}
{"snippet": "surnames =    ('Hertz',    'Galilei', 'Hertz')\nfirst_names = ('Heinrich', 'Galileo', 'Gustav')\n", "intent": "Q2. Sort pairs of surnames and first names and return their indices. (first by surname, then by name).\n"}
{"snippet": "def test(x, y):\n    a = x + y\n    b = x - y\n    return (a,b)\n(x, y) = test(2, 1)\nprint(x, y)\n", "intent": "A function can return only one value as you have played. In Python, returning multiple values can be done using a tuple.\n"}
{"snippet": "x = np.random.permutation(10)\nprint \"x =\", x\n", "intent": "Q4. Create an array such that its fifth element would be the same as the element of sorted x, and it divide other elements by their value.\n"}
{"snippet": "x = np.random.permutation(10).reshape(2, 5)\nprint \"x =\", x\n", "intent": "Q6. Get the maximum and minimum values and their indices of x along the second axis.\n"}
{"snippet": "x = np.array([[np.nan, 4], [3, 2]])\n", "intent": "Q7. Get the maximum and minimum values and their indices of x along the second axis, ignoring NaNs.\n"}
{"snippet": "def local_groupby(dataset):\n    dict = {}\n    for index, record in enumerate(dataset):\n        key = record[0]\n        val = record[1]\n        if key not in dict:\n            dict[key] = 0\n        dict[key] += val\n    return dict\n", "intent": "**Exercise**: Understand and run the fist phase of the parallel merge-all GroupBy method\n"}
{"snippet": "x = np.array([[1, 2, 3], [1, 3, 5]])\n", "intent": "Q9. Get the indices of the elements that are bigger than 2 in the flattend x.\n"}
{"snippet": "x = np.arange(-5, 4).reshape(3, 3)\n", "intent": "Q10. Check the elements of x and return 0 if it is less than 0, otherwise the element itself.\n"}
{"snippet": "x = [1, 3, 5, 7, 9]\ny = [0, 4, 2, 6]\n", "intent": "Q11. Get the indices where elements of y should be inserted to x to maintain order.\n"}
{"snippet": "x = [[0,1,7,0,0],[3,0,0,2,19]]\n", "intent": "Q12. Get the number of nonzero elements in x.\n"}
{"snippet": "x = np.array([1,2,3])\nprint np.all(x)\nx = np.array([1,0,3])\nprint np.all(x)\n", "intent": "Q1. Let x be an arbitrary array. Return True if none of the elements of x is zero. Remind that 0 evaluates to False in python.\n"}
{"snippet": "def decimal2Bin(inDecimal):\n    if inDecimal == 0 or inDecimal == 1:\n        return inDecimal\n    return str(decimal2Bin(int(inDecimal / 2))) + str(inDecimal % 2)\n", "intent": "**Task 3:**\n- Define a function ```decimal2Bin``` to return a string, which is the binary form(str type) for a natural number.\n"}
{"snippet": "x = np.array([4, 5])\ny = np.array([2, 5])\nprint np.greater(x, y)\nprint np.greater_equal(x, y)\nprint np.less(x, y)\nprint np.less_equal(x, y)\n", "intent": "Q11. Write numpy comparison functions such that they return the results as you see.\n"}
{"snippet": "np.random.rand(3, 2) \n", "intent": "Q1. Create an array of shape (3, 2) and populate it with random samples from a uniform distribution over [0, 1).\n"}
{"snippet": "np.random.randint(0, 4, (3, 2))\n", "intent": "Q3. Create an array of shape (3, 2) and populate it with random integers ranging from 0 to 3 (inclusive) from a discrete uniform distribution.\n"}
{"snippet": "tokenizer = nltk.tokenize.RegexpTokenizer(\"\\w+(?:[-']\\w+)?\")\n", "intent": "We initialize a regex tokenizer object from the ntlk package\n"}
{"snippet": "x = np.arange(10)\nnp.random.shuffle(x)\nprint x\n", "intent": "Q6. Shuffle numbers between 0 and 9 (inclusive).\n"}
{"snippet": "x = np.array([1, 2, 6, 4, 2, 3, 2])\nout, indices = np.unique(x, return_inverse=True)\nprint \"unique elements =\", out\nprint \"reconstruction indices =\", indices\nprint \"reconstructed =\", out[indices]\n", "intent": "Q1. Get unique elements and reconstruction indices from x. And reconstruct x.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1])\nprint np.in1d(x, y)\n", "intent": "Q2. Create a boolean array of the same shape as x. If each element of x is present in y, the result will be True, otherwise False.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nprint np.intersect1d(x, y)\n", "intent": "Q3. Find the unique intersection of x and y.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nprint np.setdiff1d(x, y)\n", "intent": "Q4. Find the unique elements of x that are not present in y.\n"}
{"snippet": "L = list(accumulate([5, 3, -4, 20, 2, 9, 0, -1]))\nprint(L)\nprint(\"\\n(Passed!)\")\n", "intent": "**Exercise 0** (1 point). Run the following code cell. (Yes, that's it -- one free point with no coding required!)\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nout1 = np.union1d(x, y)\nout2 = np.sort(np.unique(np.concatenate((x, y))))\nassert np.allclose(out1, out2)\nprint np.union1d(x, y)\n", "intent": "Q6. Find the union of x and y.\n"}
{"snippet": "x = np.array([[1,4],[3,1]])\nout = np.sort(x, axis=1)\nx.sort(axis=1)\nassert np.array_equal(out, x)\nprint out\n", "intent": "Q1. Sort x along the second axis.\n"}
{"snippet": "surnames =    ('Hertz',    'Galilei', 'Hertz')\nfirst_names = ('Heinrich', 'Galileo', 'Gustav')\nprint np.lexsort((first_names, surnames))\n", "intent": "Q2. Sort pairs of surnames and first names and return their indices. (first by surname, then by name).\n"}
{"snippet": "final_vocabs = []\nfor vocab in vocabs:\n    if  vocabs[vocab] <= 132:\n        final_vocabs.append(vocab)\nfinal_vocabs = enumerate(sorted(final_vocabs))\nwith open('./vocab.txt','w') as f:\n    for i,e in final_vocabs:\n        f.write(e + ':' + str(i) + '\\n')\n", "intent": "Then we can write the vocabularies into the txt file in the required format:\n"}
{"snippet": "x = np.random.permutation(10)\nprint \"x =\", x\nprint \"\\nCheck the fifth element of this new array is 5, the first four elements are all smaller than 5, and 6th through the end are bigger than 5\\n\", \nout = np.partition(x, 5)\nx.partition(5) \nassert np.array_equal(x, out)\nprint out\n", "intent": "Q4. Create an array such that its fifth element would be the same as the element of sorted x, and it divide other elements by their value.\n"}
{"snippet": "x = np.random.permutation(10).reshape(2, 5)\nprint \"x =\", x\nprint \"maximum values =\", np.max(x, 1)\nprint \"max indices =\", np.argmax(x, 1)\nprint \"minimum values =\", np.min(x, 1)\nprint \"min indices =\", np.argmin(x, 1)\n", "intent": "Q6. Get the maximum and minimum values and their indices of x along the second axis.\n"}
{"snippet": "x = np.array([[np.nan, 4], [3, 2]])\nprint \"maximum values ignoring NaNs =\", np.nanmax(x, 1)\nprint \"max indices =\", np.nanargmax(x, 1)\nprint \"minimum values ignoring NaNs =\", np.nanmin(x, 1)\nprint \"min indices =\", np.nanargmin(x, 1)\n", "intent": "Q7. Get the maximum and minimum values and their indices of x along the second axis, ignoring NaNs.\n"}
{"snippet": "x = np.array([[1, 2, 3], [1, 3, 5]])\nprint \"Values bigger than 2 =\", x[x>2]\nprint \"Their indices are \", np.nonzero(x > 2)\nassert np.array_equiv(x[x>2], x[np.nonzero(x > 2)])\nassert np.array_equiv(x[x>2], np.extract(x > 2, x))\n", "intent": "Q8. Get the values and indices of the elements that are bigger than 2 in x.\n"}
{"snippet": "x = np.array([[1, 2, 3], [1, 3, 5]])\nprint np.flatnonzero(x)\nassert np.array_equiv(np.flatnonzero(x), x.ravel().nonzero())\n", "intent": "Q9. Get the indices of the elements that are bigger than 2 in the flattend x.\n"}
{"snippet": "def min_scan(X):\n    return list(accumulate(X, min))\nprint('min_scan({}) == {}'.format(L, min_scan(L)))\nprint(\"\\n(Passed!)\")\n", "intent": "**Exercise 1** (1 point). Run the following cell and make sure its output makes sense to you. (Yes, that's it -- no coding required.)\n"}
{"snippet": "x = [1, 3, 5, 7, 9]\ny = [0, 4, 2, 6]\nnp.searchsorted(x, y)\n", "intent": "Q11. Get the indices where elements of y should be inserted to x to maintain order.\n"}
{"snippet": "x = [[0,1,7,0,0],[3,0,0,2,19]]\nprint np.count_nonzero(x)\nassert np.count_nonzero(x) == len(x[x!=0])\n", "intent": "Q12. Get the number of nonzero elements in x.\n"}
{"snippet": "result=[]\nfor x in range(1,51):\n    if x%3==0 and x%5==0:\n      result.append(x)\n    elif x%3==0:\n        result.append(\"Fizz\")\n    elif x%5==0:\n        result.append(\"Buzz\")\nprint result\n", "intent": "fizzbuzz \n1 \n2 \nfizz \n4 \nbuzz \n"}
{"snippet": "vocab_index = {}\nwith open('./vocab.txt','r') as f:\n    for line in f:\n        word,index = line.split(':')[0], line.split(':')[1][:-1]\n        vocab_index[word] = index\n", "intent": "first we need to load the vocabulary list into the memory:\n"}
{"snippet": "dictd={}\ndic1={1:10, 2:20} \ndic2={3:30, 4:40} \ndic3={5:50,6:60} \ndictd.update(dic1)\ndictd.update(dic2)\ndictd.update(dic3)\ndictd\n", "intent": "dic1={1:10, 2:20} \ndic2={3:30, 4:40} \ndic3={5:50,6:60} \nExpected Result : {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60} \n"}
{"snippet": "class inputOutput:\n    def __init__(self):\n        self.input=\"\"\n    def takeInput(self):\n        self.input=raw_input()\n    def printOutput(self):\n        return self.input.upper()\nins=inputOutput()\nins.takeInput()\nins.printOutput()\n", "intent": "getString: to get a string from console input\nprintString: to print the string in upper case.\n"}
{"snippet": "class reversewords:\n    def __init__(self):\n        self.news=\"\"\n    def reverseword(self,word):\n        for x in range(len(word)-1,-1,-1):\n            self.news+=word[x]\n        return self.news\nr=reversewords()\nr.reverseword(\"Kaushik\")\n", "intent": "11) Write a Python class to reverse a string word by word\n"}
{"snippet": "def add_numbers(x, y):\n    return x + y\nadd_numbers(1, 2)\n", "intent": "<br>\n`add_numbers` is a function that takes two numbers and adds them together.\n"}
{"snippet": "def add_numbers(x,y,z=None):\n    if (z==None):\n        return x+y\n    else:\n        return x+y+z\nprint(add_numbers(1, 2))\nprint(add_numbers(1, 2, 3))\n", "intent": "<br>\n`add_numbers` updated to take an optional 3rd parameter. Using `print` allows printing of multiple expressions within a single cell.\n"}
{"snippet": "def add_numbers(x,y):\n    return x+y\na = add_numbers\na(1,2)\n", "intent": "<br>\nAssign function `add_numbers` to variable `a`.\n"}
{"snippet": "type('This is a string')\n", "intent": "<br>\nUse `type` to return the object's type.\n"}
{"snippet": "x = (1, 'a', 2, 'b')\ntype(x)\n", "intent": "<br>\nTuples are an immutable data structure (cannot be altered).\n"}
{"snippet": "topic_files = listdir('./topics/')\np_pattern = r'\ns_pattern = r'\ntwo_pattern = r'\none_pattern = r'\nno_pattern = '\\w+\\.\\w\\.\\w+?(\\d+)'\nname_space = {'nite':'http://nite.sourceforge.net/'}\nwords_pattern = '(.+?)words'\ntopic_pattern = '\\w+\\.?'\n", "intent": "below are the regexs needed for the parsing process:\n"}
{"snippet": "x.append(3.3)\nprint(x)\n", "intent": "<br>\nUse `append` to append an object to a list.\n"}
{"snippet": "for item in x:\n    print(item)\n", "intent": "<br>\nThis is an example of how to loop through each item in the list.\n"}
{"snippet": "i=0\nwhile( i != len(x) ):\n    print(x[i])\n    i = i + 1\n", "intent": "<br>\nOr using the indexing operator:\n"}
{"snippet": "x = 'This is a string'\nprint(x[0]) \nprint(x[0:1]) \nprint(x[0:2]) \n", "intent": "<br>\nNow let's look at strings. Use bracket notation to slice a string.\n"}
{"snippet": "firstname = 'Christopher Arthur Hansen Brooks'.split(' ')[0] \nlastname = 'Christopher Arthur Hansen Brooks'.split(' ')[-1] \nprint(firstname)\nprint(lastname)\n", "intent": "<br>\n`split` returns a list of all the words in a string, or a list split on a specific character.\n"}
{"snippet": "np.random.seed(3)\nx = np.random.randint(0, 20, 15) \nprint(x)\n", "intent": "Two other common ways to index a Numpy array are to use a boolean mask or to use a set of integer indices.\n"}
{"snippet": "for name in x:\n    print(x[name])\n", "intent": "<br>\nIterate over all of the keys:\n"}
{"snippet": "for email in x.values():\n    print(email)\n", "intent": "<br>\nIterate over all of the values:\n"}
{"snippet": "for name, email in x.items():\n    print(name)\n    print(email)\n", "intent": "<br>\nIterate over all of the items in the list:\n"}
{"snippet": "from nltk.stem import WordNetLemmatizer\nlemmatizer = WordNetLemmatizer()\nfinal_tokens =[]\n", "intent": "Now writing your lemmatization code:\n"}
{"snippet": "x = ('Christopher', 'Brooks', 'brooksch@umich.edu', 'Ann Arbor')\nfname, lname, email = x\n", "intent": "<br>\nMake sure the number of values you are unpacking matches the number of variables being assigned.\n"}
{"snippet": "sales_record = {\n'price': 3.24,\n'num_items': 4,\n'person': 'Chris'}\nsales_statement = '{} bought {} item(s) at a price of {} each for a total of {}'\nprint(sales_statement.format(sales_record['person'],\n                             sales_record['num_items'],\n                             sales_record['price'],\n                             sales_record['num_items']*sales_record['price']))\n", "intent": "<br>\nPython has a built in method for convenient string formatting.\n"}
{"snippet": "sum(float(d['cty']) for d in mpg) / len(mpg)\n", "intent": "<br>\nThis is how to find the average cty fuel economy across all cars. All values in the dictionaries are strings, so we need to convert to float.\n"}
{"snippet": "sum(float(d['hwy']) for d in mpg) / len(mpg)\n", "intent": "<br>\nSimilarly this is how to find the average hwy fuel economy across all cars.\n"}
{"snippet": "cylinders = set(d['cyl'] for d in mpg)\ncylinders\n", "intent": "<br>\nUse `set` to return the unique values for the number of cylinders the cars in our dataset have.\n"}
{"snippet": "def intersect_keys(d1, d2):\n    assert type(d1) is dict or type(d1) is defaultdict\n    assert type(d2) is dict or type(d2) is defaultdict\n    return (set(d1) & set(d2))\n", "intent": "**Exercise 9** (`intersect_keys_test`: 2 points). Write a function that, given two dictionaries, finds the intersection of their keys.\n"}
{"snippet": "dtnow = dt.datetime.fromtimestamp(tm.time())\ndtnow\n", "intent": "<br>\nConvert the timestamp to datetime.\n"}
{"snippet": "dtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second \n", "intent": "<br>\nHandy datetime attributes:\n"}
{"snippet": "delta = dt.timedelta(days = 100) \ndelta\n", "intent": "<br>\n`timedelta` is a duration expressing the difference between two dates.\n"}
{"snippet": "def tic():\n    raise NotImplementedError()\n", "intent": "<div class=\"alert alert-success\">\nEdit the function <code>tic</code> to generate <b>random</b> sentences from the grammar defined in Part A.\n</div>\n"}
{"snippet": "class Person:\n    department = 'School of Information' \n    def set_name(self, new_name): \n        self.name = new_name\n    def set_location(self, new_location):\n        self.location = new_location\n", "intent": "<br>\nAn example of a class in python:\n"}
{"snippet": "store1 = [10.00, 11.00, 12.34, 2.34]\nstore2 = [9.00, 11.10, 12.34, 2.01]\ncheapest = map(min, store1, store2)\ncheapest\n", "intent": "<br>\nHere's an example of mapping the `min` function between two lists.\n"}
{"snippet": "for item in cheapest:\n    print(item)\n", "intent": "<br>\nNow let's iterate through the map object to see the values.\n"}
{"snippet": "my_function = lambda a, b, c : a + b\n", "intent": "<br>\nHere's an example of lambda that takes in three parameters and adds the first two.\n"}
{"snippet": "my_list = []\nfor number in range(0, 1000):\n    if number % 2 == 0:\n        my_list.append(number)\nmy_list\n", "intent": "<br>\nLet's iterate from 0 to 999 and return the even numbers.\n"}
{"snippet": "assert (number_to_words(29)== 'twenty-nine')\nassert (number_to_words(342) == 'three hundred and forty-two')\nassert (number_to_words(115) == 'one hundred and fifteen')\n", "intent": "Now write a set of `assert` tests for your `number_to_words` function that verifies that it is working as expected.\n"}
{"snippet": "mylist = [1, 2, 3]\nx = np.array(mylist)\nx\n", "intent": "Create a list and convert it to a numpy array\n"}
{"snippet": "y = np.array([4, 5, 6])\ny\n", "intent": "<br>\nOr just pass in a list directly\n"}
{"snippet": "m = np.array([[7, 8, 9], [10, 11, 12]])\nm\n", "intent": "<br>\nPass in a list of lists to create a multidimensional array.\n"}
{"snippet": "from nltk.stem import WordNetLemmatizer\nlemmatizer = WordNetLemmatizer()\nfinal_tokens =[]\nfor tagged_set in tagged_sents:\n    final_tokens = final_tokens + [lemmatizer.lemmatize(w[0], get_wordnet_pos(w[1])) for w in tagged_set ]\n", "intent": "Now writing your lemmatization code:\n"}
{"snippet": "n = n.reshape(3, 5) \nn\n", "intent": "<br>\n`reshape` returns an array with the same data with a new shape.\n"}
{"snippet": "o = np.linspace(0, 4, 9) \no\n", "intent": "<br>\n`linspace` returns evenly spaced numbers over a specified interval.\n"}
{"snippet": "np.array([1, 2, 3] * 3)\n", "intent": "<br>\nCreate an array using repeating list (or see `np.tile`)\n"}
{"snippet": "np.repeat([1, 2, 3], 3)\n", "intent": "<br>\nRepeat elements of an array using `repeat`.\n"}
{"snippet": "np.vstack([p, 2*p])\n", "intent": "<br>\nUse `vstack` to stack arrays in sequence vertically (row wise).\n"}
{"snippet": "assert (count_letters(29) == 10)\nassert (count_letters(342) == 23)\nassert (count_letters(115) == 20)\n", "intent": "Now write a set of `assert` tests for your `count_letters` function that verifies that it is working as expected.\n"}
{"snippet": "print(x + y) \nprint(x - y) \n", "intent": "Use `+`, `-`, `*`, `/` and `**` to perform element wise addition, subtraction, multiplication, division and power.\n"}
{"snippet": "z = np.array([y, y**2])\nz\n", "intent": "<br>\nLet's look at transposing arrays. Transposing permutes the dimensions of the array.\n"}
{"snippet": "z = z.astype('f')\nz.dtype\n", "intent": "<br>\nUse `.astype` to cast to a specific type.\n"}
{"snippet": "year(r\"^\\d{4}$\", \"2016\")\n", "intent": "For the four-digit year, the regular expression is \n```python\n    r\"^\\d{4}$\"\n```\n"}
{"snippet": "r = np.arange(36)\nr.resize((6, 6))\nr\n", "intent": "<br>\nLet's look at a multidimensional array.\n"}
{"snippet": "r_copy = r.copy()\nr_copy\n", "intent": "<br>\nTo avoid this, use `r.copy` to create a copy that will not affect the original array\n"}
{"snippet": "r_copy[:] = 10\nprint(r_copy, '\\n')\nprint(r)\n", "intent": "<br>\nNow when r_copy is modified, r will not be changed.\n"}
{"snippet": "test = np.random.randint(0, 10, (4,3))\ntest\n", "intent": "Let's create a new 4 by 3 array of random numbers 0-9.\n"}
{"snippet": "for row in test:\n    print(row)\n", "intent": "<br>\nIterate by row:\n"}
{"snippet": "total = 0\nfor i in range(1, 1001):\n    total += count_letters(i)\nprint(total)\n", "intent": "Finally use your `count_letters` function to solve the original question.\n"}
{"snippet": "for i, row in enumerate(test):\n    print('row', i, 'is', row)\n", "intent": "<br>\nIterate by row and index:\n"}
{"snippet": "test2 = test**2\ntest2\n", "intent": "<br>\nUse `zip` to iterate over multiple iterables.\n"}
{"snippet": "p = sum(students)/len(students)\n", "intent": "`1.` Find the proportion of students who drink coffee in the above array. Store this value in a variable **p**.\n"}
{"snippet": "year(r\"^\\d{2}$\", \"16\")\n", "intent": "For the two-digit year, the regular expression is \n```python\n    r\"^\\d{2}$\"\n```\n"}
{"snippet": "sample_props = []\nfor i in range(int(1e4)):\n", "intent": "`3.` Repeat the above to obtain 10,000 additional proportions, where each sample was of size 5.  Store these in a variable called `sample_props`.\n"}
{"snippet": "print(\"Let's print some text!\")\n", "intent": "Printing a string is possible with the _print( )_ function.\n"}
{"snippet": "count = 450\nwords = \"Welcome to Python. It wont't bite!\"\nprint(count)\nprint(words)\n", "intent": "In Python types of variables don't need to be set. Let's create two different type of variables and print them.\n"}
{"snippet": "taper.greedy_tape(gaps, threshold=0.001, add_edges=True)\n", "intent": "These look OK; node2 is always greater than node1...\n"}
{"snippet": "import sys\nsys.version\n", "intent": "Determine the version of python that's currently powering your notebook.\n"}
{"snippet": "def L1(x):\n    total = 0.0\n    for a in x:\n        total = total + a\n    return total\n", "intent": "Implement a function that computes the $L_1$ norm of a vector `x`:\n"}
{"snippet": "my_string = \"the cow jumped over the moon\"\nwords = my_string.split()\nprint (words)\n", "intent": "Using .split() split my string into separate words in a variable named words\n"}
{"snippet": "total = [len(x) for x in words]\nprint (total)\n", "intent": "Use a list comprehension to find the length of each word.\n"}
{"snippet": "d = {'a':10, 'b':20, 'c':30}\ntype(d)\n", "intent": "What type of object is created by this code?\n> `d = {'a':10, 'b':20, 'c':30}`\n"}
{"snippet": "month(r\"^\\d{2}$\", \"9\")\n", "intent": "Firstly, assume they all have two digits, which means we have leading zeros for months from January to September.\n"}
{"snippet": "people = {'Alice': ['Washington', 'DC'], 'Brandon': ['Arlington', 'VA']}\nprint(people['Brandon'][1])\n", "intent": "From the `people` object, return Brandon's state only.\n> `people = {'Alice': ['Washington', 'DC'], 'Brandon': ['Arlington', 'VA']}`\n"}
{"snippet": "def calc(x,y):\n    z = x + y\n    return z\n", "intent": "Define a function `calc` that takes two variables, `a` and `b`, and returns their sum.\n"}
{"snippet": "import os\nimport numpy as np\nimport pandas as pd\nimport re\npd.set_option('display.max_rows', 10)\npd.set_option('display.notebook_repr_html', True)\npd.set_option('display.max_columns', 10)\n", "intent": "Pandas cheat sheet: https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf\n"}
{"snippet": "class M(object):\n    def public(self):\n        print 'Use Tab to see me!'  \n    def _private(self):\n        print \"You won't be able to Tab to see me!\"\n", "intent": "**A quick note on public vs private methods, we can use an underscore _ before the method name to keep it non-public. For example:**\n"}
{"snippet": "L = [1, 3]\nL2 = L[:]\nprint L\nprint L2\n", "intent": "Then, you will need to make a new luggage with the exact same content. \n"}
{"snippet": "def L2(x):\n    total = 0.0\n    for a in x:\n        total = total + math.pow(a, 2)\n    return math.sqrt(total)\n", "intent": "Implement a function that computes the $L_2$ norm of a vector `x`:\n"}
{"snippet": "import math\nclass Circle(object):\n    def __init__(self, x, y, radius=1):\n        self.x = x\n        self.y = y\n        self.radius = radius\n    def area(self):\n", "intent": "Say we want to make a program to process geometric shapes. Let's create a `Circle` class\n"}
{"snippet": "class Square(Rect):\n    def __init__(self, x, y, length):\n        super(Square, self).__init__(x, y, length, length)\n    def __str__(self):\n", "intent": "`__str__()` is used to convert an object to a string. Useful for quicking printing a summary of a complex object.\n"}
{"snippet": "fname = 'test_file.txt'\nf = open(fname, 'w')\nf.write('hello')\nf.close()\n", "intent": "http://docs.quantifiedcode.com/python-anti-patterns/correctness/exit_must_accept_three_arguments.html\nThe following code writes one line to a file.\n"}
{"snippet": "month(r\"^\\d?\\d$\", \"9\")\n", "intent": "Now, assume that we allow the leading zeros to be omitted. \n"}
{"snippet": "from math import *\nprint e, pi\n", "intent": "But if you don't what to use the `math.` prefix, then you could do\n"}
{"snippet": "a_string = '123'\nan_integer = int(a_string)\nanother_string = str(an_integer)\nprint an_integer\nprint another_string\na_string[0] = '2'\n", "intent": "A string is a (immutable) sequence of characters.\n"}
{"snippet": "s1 = 'The Great'\ns2 = ' Gatsby'\ns3 = s1 + s2\nprint s3\n", "intent": "string concatenation is very simple in Python\n"}
{"snippet": "print 'this is a long pi ', math.pi\nprint 'this is a short pi %10.3f' % math.pi\n", "intent": "Usually, it would be useful to include data into your string so that it is more readable\n"}
{"snippet": "a_nested_list = [1,[1,2,3],2,3]\nprint a_nested_list[1][2]\n", "intent": "Can have a nested list\n"}
{"snippet": "alt.Chart(flights).mark_bar().encode(\n    alt.X('date:T', timeUnit = 'day'),\n    alt.Y('average(delay)')\n)\n", "intent": "Create a visualization that explores the following question:\n> How do average flight delays vary with the day of the week in this dataset?\n"}
{"snippet": "a_tuple = [1,'2',3.0]\nprint a_tuple\n", "intent": "Tuples and lists does not have to contain data of the same type\n"}
{"snippet": "a,b = 1,2\nprint a, b\na, b = b, a\nprint a,b\n", "intent": "Tuples can be used to make multiple assignment at the same time\n"}
{"snippet": "counter = 0\nwhile counter < 5:\n    counter += 1\n    print counter\n", "intent": "Examples of the `while` loop\n"}
{"snippet": "month(r\"^\\d?\\d$\", \"13\")\n", "intent": "<font color='red', size = '5'>What is the problem of this regular expression?</font>\n</br>\n"}
{"snippet": "x = 2\nprint id(x), id(y), id(z)\nx = 1\nprint id(x), id(y), id(z)\n", "intent": "But when you give a reference back the same value, it will then be pointing to the original object.\n"}
{"snippet": "def times2(a):\n    return a*2.0\nprint times2(2)\n", "intent": "We are going to introduce two types of functions: standard function and lambda functions (inline)\n"}
{"snippet": "def left_right(a):\n    return a-1, a+1\nleft, right = left_right(2)\nprint left, right\nprint left_right(2)[0]\nleft, _ = left_right(2)\nprint left\n", "intent": "We can also define functions with more than one outputs\n"}
{"snippet": "with open(\"animals.txt\", \"r\") as infile:\n    for line in infile:\n        print(line.rstrip())\n", "intent": "It is very easy to forget to close a file, so use the following way to open a file.\n"}
{"snippet": "alltutors = [\"Joe\", \"Fabian\", 'Lea', \"Peter\", \"Chris\", \"Dimitris\"]\nfor name in alltutors:\n    if name in tutors:\n        print \"is indeed a tutor\"\n", "intent": "comparison operators: <, >, ==, <=, >=\n"}
{"snippet": "alt.Chart(movies).mark_tick().encode(\n    alt.X('Rotten_Tomatoes_Rating',bin = alt.Bin(maxbins = 50)),\n    alt.Y('Major_Genre'),\n)\n", "intent": "Explore the previous question with a different visualization using:\n* Tick mark\n* X -> Rotten Tomatoes rating\n* Y -> genre\n"}
{"snippet": "def arrow(before, after):\n    return str(before)+\" -> \"+str(after)\nprint arrow(1, 3)\nx = [1, -1]\nprint arrow(*x)\n", "intent": "If a vector is supplied to a function with a '*', its elements are used to fill each of a function's arguments.\n"}
{"snippet": "def doubler(*sequence):\n    print type(sequence)\n    return [x*2 for x in sequence]\nprint doubler(1,2,3)\nprint doubler(3, '4', [1,2])\n", "intent": "Similiarly, if a * is used in the definition of a function, multiple arguments are absorbed into a tuple inside the function:\n"}
{"snippet": "def arrowify(**args):\n    print type(args)\n    print args\n    for key, value in args.items():\n        print key+\" -> \"+value\narrowify(neutron=\"n\",proton=\"p\",electron=\"e\")\n", "intent": "If two asterisks are used in the function definition, named arguments are supplied inside the function as a dictionary:\n"}
{"snippet": "month(r\"^(0?[1-9]|1[0-2])$\", \"10\")\n", "intent": "```\n    01, 02, 03, 04, 05, 06, 07, 08, 09 \n    10, 11, 12 \n```\nAs shown above, the first digit can be 0, 1\n```python\n    r\"(0?[1-9]|1[0-2])\"\n```\n"}
{"snippet": "[2**x for x in range(10)]\n", "intent": "If you write a for loop inside a pair of square brackets for a list, you magic up a list as defined. \n"}
{"snippet": "[x**2 for x in range(10) if x%3 ==0 ]\n", "intent": "You can write an if statement in comprehensions too:\n"}
{"snippet": "[x - y for x in range(4) for y in range(4)]\n", "intent": "If you write two for statements in a comprehension, you get a single array generated over all the pairs:\n"}
{"snippet": "[x - y for x in range(4) for y in range(4) if x>=y]\n", "intent": "You can select on either, or on some combination:\n"}
{"snippet": "[[x - y for x in range(4)] for y in range(4)]\n", "intent": "If you want something more like a matrix, you need to do two nested comprehensions!\n"}
{"snippet": "def modify(session):\n    temp = retrieve_data(session, direction='WSW')\n    for i in temp:\n        result = session.execute(ud_stmt, {'id': i['id']})\n    return result\n", "intent": "- Change the `wspdi` value to 1.0 for all rows where the `wdire` attribute is equal to `\"WSW\"`.\n"}
{"snippet": "{ (str(x))*3: x for x in range(3) }\n", "intent": "You can automatically build dictionaries, by using a list comprehension syntax, but with curly brackets and a colon:\n"}
{"snippet": "print any([True, False, True])\nprint all([True, False, True])\nprint max([1, 2, 3])\nprint sum([1, 2, 3])\n", "intent": "There are lots of built-in methods that provide actions on lists as a whole:\n"}
{"snippet": "map(str, range(10))\n", "intent": "you can apply a function to all elements of a list with **map**:\n"}
{"snippet": "isCreditCard(r\"^4\\d{12}(?:\\d{3})?$\", \"4123456789012\")\n", "intent": "Now, we need to write one regular expression for validating visa card numbers.\n```python\n    4\\d{12}(?:\\d{3})?\n```\n"}
{"snippet": "x = 5\nif x < 0:\n    print x, \" is negative\"\n", "intent": "** Indentation!!!!!**\n"}
{"snippet": "mytext = \"Hello\"\nif mytext:\n    print \"Mytext is not empty\"\n", "intent": "Various other things automatically count as true or false, which can make life easier when coding:\n"}
{"snippet": "x=3.2\nif not (x>0 and type(x)==int):\n    print x,\"is not a positive integer\"\n", "intent": "Logical not and logical and can be used to combine true and false:\n"}
{"snippet": "not not \"Who's there!\" \n", "intent": "not also understands magic conversion from false-like things to True or False.\n"}
{"snippet": "for i in range(3):\n    print 'the current element is ', i\n", "intent": "for ... in to \"iterate\" over lists. It can also be used to iterate over tuples, strings or dictionaries. \n"}
{"snippet": "def delete(session):\n    temp = retrieve_data(session, direction='WSW')\n    for i in temp:\n        result = session.execute(del_stmt, {'id': i['id']})\n    return result\n", "intent": "- Delete all rows where the `wdire` attribute is equal to `\"WSW\"`.\n"}
{"snippet": "for university, foundation_year in founded.items():\n    print university, ' was founded ', current_year - foundation_year, ' years ago'\n", "intent": "Unpacking can be combined with iteration:\n"}
{"snippet": "for n in range(50):\n    if n==20: \n        break\n    if n % 2 == 0:\n        continue\n    print n\n", "intent": "Break, Continue\n* Continue skips to the next turn of a loop\n* Break stops the loop early\n"}
{"snippet": "a, b, c = [1,2,3]\nprint 'a=', a,'b=', b, 'c= ',c\n", "intent": "Lists can be unpacked (multiple values from list get assigned to different variables, like dealing decks of cards):\n"}
{"snippet": "isCreditCard(r\"^5[1-5]\\d{14}$\", \"5123456789012345\")\n", "intent": "the regular expression looks like\n```python\n5[1-5]\\d{14}\n```\n"}
{"snippet": "l= [1,2,3]\nprint l\nl[2] = -10\nprint l\n", "intent": "Lists are mutable types, which means I can change what's in them in an elementwise fashion:\n"}
{"snippet": "t = (1,2,'banana')\nprint type(t)\nprint 't[0]=', t[0]\n", "intent": "This is different from tuples, which are like lists, but cannot be changed. They are defined with round brackets:\n"}
{"snippet": "fish = 'Haddock'\nfish[0] = 'R'\n", "intent": "Strings are also immutable:\n"}
{"snippet": "print  2 in [1,2,3]\nprint 4 in [1,2,3]\nprint 'a'  in 'Elena'\nprint 2 in (2,3)\nprint 2 in set((2,3))\nprint 'key1' in {'key1':1, 'key2': 'passport'}\nprint 'passport' in {'key1':1, 'key2': 'passport'}\n", "intent": "You can test for containment in a list (or any other container type, such as tuple, set, or dictionary):\n"}
{"snippet": "print \"Hello\" == \"Hello\"\nprint \"Hello\" is \"Hello\"\n", "intent": "But for immutables python might actually use the same copy!!\n"}
{"snippet": "def most_common(words, num_top_words):\n    counts = nltk.FreqDist(words)\n    top_words = counts.most_common(num_top_words)\n    return top_words\n", "intent": "Now that we have tokens, we can find the most common words used in each list of strings found with `tokenize`.\n"}
{"snippet": "good_match = {\n    (\"Lamb\", \"Mint\"): True, \n    (\"Bacon\", \"Chocolate\"): False\n   }\n", "intent": "But, since tuples are immutable, this works:\n"}
{"snippet": "my_dict = {'0': 0, '1':1, '2': 2, '3': 3, '4': 4}\nprint my_dict\nprint my_dict.values()\n", "intent": "Another consequence of the way dictionaries work is that there's no guaranteed order among the elements:\n"}
{"snippet": "x = set(\"Hello\")\ny = set(\"Goodbye\")\nprint 'intersection ',x & y \nprint 'union ',x | y \nprint 'set diff ',y - x \n", "intent": "* A set has no particular order, but is really useful for checking or storing unique values.\n* Set operations work as in mathematics:\n"}
{"snippet": "for i in range(10):\n    print(tic())\n", "intent": "Make sure to test your function to make sure it produces sentences which conform to the grammar above:\n"}
{"snippet": "print 2*this_is_a_variable\n", "intent": "Variables can be used anywhere where a raw number would be used:\n"}
{"snippet": "this_is_a_variable = 'this is now something else'\nprint this_is_a_variable\n", "intent": "A variable is a label put on a box that contains the result we want to be able to access later.  \nWe can do this (reassign):\n"}
{"snippet": "nom = \"Doe\"\nprint name \nprint nom\n", "intent": "We can now reassign one of the labels:\n"}
{"snippet": "print 'the type of 5 is ',type(5)\nprint 'the type of 0.5 is', type(0.5)\nprint \"the type of 'this is a string' is \", type('this is a string')\n", "intent": "Types \n* int\n* float\n* string\n* ....\nOperators do different things depending on the type of objects they are applied to:\n"}
{"snippet": "two_float = float(2)\nprint type(two_float)\n", "intent": "Types can be changed:\n"}
{"snippet": "def hapax(words):\n    counts = nltk.FreqDist(words)\n    hapax = counts.hapaxes()\n    return hapax\n", "intent": "Now, we find the hapaxes from the list of strings we made with `tokenize`.\n"}
{"snippet": "radius = 5.\ncircle_perimeter = 0 \ncircle_area = 0 \nprint 'A circle of radius ' + str(radius) + ' has a perimeter of ' +\n   str(circle_perimeter) + ' and an area of ' + str(circle_area)\n", "intent": ">**(a)** The perimeter and area of a circle.\n"}
{"snippet": "golden_ratio = 0 \nprint 'The golden ratio is equal to ' + str(golden_ratio)\n", "intent": ">**(b)** The golden ratio.\n"}
{"snippet": "side_length = 2.\npyramid_height = 0 \npyramid_area = 0 \npyramid_volume = 0 \nprint 'A regular pentagonal pyramid of side length ' + str(side_length) + ' has a height of ' + str(pyramid_height) + ', an area of ' + str(pyramid_area) + ' and a volume of ' + str(pyramid_volume) + '. Interesting, I suppose.'\n", "intent": ">**(c)** The height, volume and area of a **regular** pentagonal pyramid.\n"}
{"snippet": "from top_pages import TopPages\nimport csv\ncount = 0\nmr_job = TopPages(args=['anonymous-msweb.data'])\nwith mr_job.make_runner() as runner:\n    runner.run()\n    for line in runner.stream_output():\n        print mr_job.parse_output_line(line)\n        count +=1 \nprint count\n", "intent": "Driver code is ready\n"}
{"snippet": "both = uc + lc\nname = \"Jeremy Bentham\"\nfor i in range(len(both)):\n    if both[i] in name:\n        both[i] = '*'\nprint both        \n", "intent": ">**(b)** Blank your full name from both lists, using a ```for``` loop (it's easiest to first concatenate them):\n"}
{"snippet": "def pre_order(root):\n", "intent": "- Problem:\n    - based on the idea above, implement pre-order traversal\n- Logic: see the idea above\n"}
{"snippet": "def in_order(root):\n", "intent": "- Problem:\n    - based on the idea above, implement in-order traversal\n- Logic: see the idea above\n"}
{"snippet": "def post_order(root):\n", "intent": "- Problem:\n    - based on the idea above, implement post-order traversal\n- Logic: see the idea above\n"}
{"snippet": "li = [1,2,3,4,5,6,7,8,9,10]\n", "intent": "Hint : You can use lambda function\n"}
{"snippet": "def long_words(words, length=10):\n    long_words = [word for word in words if len(word) > length]\n    return long_words\n", "intent": "Finally, we find the words within the output of `tokenize` longer than a given length.\n"}
{"snippet": "integer_index = pd.Index([100, 200, 300, 400, 500])\ninteger_index\n", "intent": "Pretty much any [hashable type](https://docs.python.org/3.7/glossary.html). In other words, you can use things like ...\n"}
{"snippet": "original_series.loc[intersect]\n", "intent": "    series.loc[new_index]\n"}
{"snippet": "babies_rdd = sc.textFile(\"./data/Baby_Names__Beginning_2007.csv\")\\\n    .map(lambda line: line.split(\",\"))\\\n    .filter(lambda line: len(line)>1)\\\n    .map(lambda line: (line[0],line[1],line[2],line[3],int(line[4])))\n", "intent": "(https://www.healthdata.gov/dataset/baby-names-beginning-2007)\n"}
{"snippet": "from top_pages import TopPages\nimport csv\nmr_job = TopPages(args=['anonymous-msweb.data'])\nwith mr_job.make_runner() as runner:\n    runner.run()\n    for line in runner.stream_output():\n        print mr_job.parse_output_line(line)\n", "intent": "Driver code is ready\n"}
{"snippet": "print(\"Status of diejob1: %s\" % diejob1.status)\ndiejob1.traceback()  \n", "intent": "You can get the traceback of any dead job.  Run the line\nbelow again interactively until it prints a traceback (check the status\nof the job):\n"}
{"snippet": "j = jobs.new(sleepfunc, 2)\nj.join?\n", "intent": "Jobs have a `.join` method that lets you wait on their thread for completion:\n"}
{"snippet": "name = input(\"What is your name? \")\nname\n", "intent": "The Notebook supports the standard Python `input()` function.\n"}
{"snippet": "def div(x, y):\n    return x/y\ndiv(1,0)\n", "intent": "This also allows us to use a very basic debugger inside the notebook. Let's trigger an error:\n"}
{"snippet": "app = QtCore.QCoreApplication.instance()\nif app is None:\n    app = QtGui.QApplication([])\nsw = SimpleWindow()\nsw.show()\nfrom IPython.lib.guisupport import start_event_loop_qt4\nstart_event_loop_qt4(app)\n", "intent": "And now we can instantiate it:\n"}
{"snippet": "def query(collection):\n    result = []\n    for i in collection.find({\"visi\": {'$eq': '10.0'}}).sort('conds'):\n        result.append(i['conds'])\n    return result\n", "intent": "- Find all documents with `visi` equal to `\"10.0\"` and sort the documents by `conds`.\n- Return a list of `conds` as a validation of the process.\n"}
{"snippet": "ipython nbconvert  --to=latex 'Index.ipynb'\n", "intent": "You can also convert to latex, which will extract the embeded images.  If the embeded images are SVGs, inkscape is used to convert them to pdf:\n"}
{"snippet": "pyfile = !ipython nbconvert --to python 'Index.ipynb' --stdout\nfor l in pyfile[20:40]:\n    print(l)\n", "intent": "Look at the first 20 lines of the `python` exporter\n"}
{"snippet": "IPython.keyboard_manager.command_shortcuts.remove_shortcut('r');\n", "intent": "Likewise, to remove a shortcut, use `remove_shortcut`:\n"}
{"snippet": "from pyspark.mllib.clustering import KMeans, KMeansModel\nfrom numpy import array\nfrom math import sqrt\ndata = sc.textFile(\"data.csv\")\nparsedData = data.map(lambda line: array([float(x) for x in line.split(',')]))\nclusters = KMeans.train(parsedData, 3, maxIterations=20,\n        runs=10, initializationMode=\"random\")\nfor centroid in clusters.centers:\n    print centroid\n", "intent": "http://spark.apache.org/docs/latest/mllib-clustering.html\n"}
{"snippet": "interact(f, x=(0.01,10.0,0.01));\n", "intent": "The step size can be changed by passing a 3rd element in the tuple.\n"}
{"snippet": "def f(a, b):\n    print(a + b)\n", "intent": "Here is a function that prints the sum of its two arguments.\n"}
{"snippet": "print(type(w))\nprint(type(w).__bases__)\n", "intent": "The widget is a `Box`, which is a container for other widgets.\n"}
{"snippet": "from IPython.display import display\nw = IntSlider(min=0, max=10)\ndisplay(w)\n", "intent": "You can also explicitly display the widget using `display(...)`.\n"}
{"snippet": "w = IntSlider(min=0, max=10)\ndisplay(w)\n", "intent": "All of the IPython widgets **share a similar naming scheme**.  To read the value of a widget, you can query its `value` property.\n"}
{"snippet": "from math import log2\ndef entropy(s):\n    unique = set(s)\n    entropy = 0\n    for elem in unique:\n        p = s.count(elem)/len(s)\n        entropy += p*log2(p)\n    return -entropy\n", "intent": "$$\\operatorname{Entropy}(S) = - \\sum_{i=1...c} p_i log_2 p_i$$\n"}
{"snippet": "w = widgets.SelectMultiple(\n    description=\"Fruits\",\n    options=['Apples', 'Oranges', 'Pears']\n)\ndisplay(w)\n", "intent": "Multiple values can be selected with <kbd>shift</kbd> and <kbd>ctrl</kbd> pressed and mouse clicks or arrow keys.\n"}
{"snippet": "widgets.Button(description='Click me')\n", "intent": "A simple button. Unlike most of the widgets, this one doesn't have a value. Instead, you can register a callback with its `on_click` method.\n"}
{"snippet": "<style>\n.example-container { background: \n.example-container.sm { min-height: 50px; }\n.example-box { background: \n.example-box.med { width: 65px; height: 65px; }   \n.example-box.lrg { width: 80px; height: 80px; }   \n</style>\n", "intent": "[Index](Index.ipynb) - [Back](Widget Events.ipynb) - [Next](Custom Widget - Hello World.ipynb)\n"}
{"snippet": "import numpy as np\nnp.log(3)\n", "intent": "Job 1: create inverted index (assume just two objects) <P>\nJob 2: calculate the similarity of each pair of objects \n"}
{"snippet": "display(widgets.Text(description=\"a:\"))\ndisplay(widgets.Text(description=\"aa:\"))\ndisplay(widgets.Text(description=\"aaa:\"))\ndisplay(widgets.Text(description=\"aaaaaaaaaaaaaaaaaa:\"))\n", "intent": "If a **label is longer** than the minimum width, the **widget is shifted to the right**:\n"}
{"snippet": "display(widgets.Text(description=\"a:\"))\ndisplay(widgets.Text(description=\"aa:\"))\ndisplay(widgets.Text(description=\"aaa:\"))\ndisplay(widgets.Text())\n", "intent": "If a `description` is **not set** for the widget, the **label is not displayed**:\n"}
{"snippet": "container = widgets.HBox(children=buttons)\ndisplay(container)\n", "intent": "To make widgets display horizontally, you need to **child them to a `HBox` widget**.\n"}
{"snippet": "container.width = '100%'\ncontainer.pack = 'center'\n", "intent": "By setting the width of the container to 100% and its `pack` to `center`, you can center the buttons.\n"}
{"snippet": "i = data.coffee()\nio.Image(i)\n", "intent": "Scikit-image provides some pre-loaded example data, let's load the nice espresso cup:\n"}
{"snippet": "def gain(targets, attr_values):\n    unique = set(attr_values)\n    reduction = 0\n    for elem in unique:\n        indices = [index for index,value in enumerate(attr_values) if value == elem]\n        s_v = [targets[index] for index in indices]\n        reduction += attr_values.count(elem)/len(attr_values)*entropy(s_v)\n    return entropy(targets) - reduction\n", "intent": "$$\\operatorname{Gain}(S,A) = \\operatorname{Entropy}(S) - \\sum_{v \\in \\operatorname{Values}(A)} \\frac{|S_v|}{|S|} \\operatorname{Entropy}(S_v)$$\n"}
{"snippet": "i = data.coffee()\nio.imshow(i)\n", "intent": "Scikit-image provides some pre-loaded example data, let's load the nice espresso cup:\n"}
{"snippet": "def print_sum(a, b):\n", "intent": "Write a `print_sum` function that `prints` the sum of its arguments `a` and `b`.\n"}
{"snippet": "def print_string(s, length=False):\n", "intent": "Write a function named `print_string` that prints a string and additionally prints the length of that string if a boolean parameter is `True`.\n"}
{"snippet": "BUCKET = 'cloud-training-demos-ml'\nPROJECT = 'cloud-training-demos'\nREGION = 'us-central1'\n", "intent": "<h1> Deploying and predicting with model </h1>\nThis notebook illustrates:\n<ol>\n<li> Deploying model\n<li> Predicting with model\n</ol>\n"}
{"snippet": "import os, socket\nprint(os.getpid())\nprint(socket.gethostname())\n", "intent": "And a preview of parallel magics:\n"}
{"snippet": "lview.block = True\nserial_result   =       map(lambda x:x**10, range(32))\nparallel_result = lview.map(lambda x:x**10, range(32))\nserial_result==parallel_result\n", "intent": "The LoadBalancedView also has a load-balanced version of the builtin `map()`\n"}
{"snippet": "amr = lview.map_async(lambda x:x**10, range(32))\namr.msg_ids\n", "intent": "Just like `apply()`, you can use non-blocking map with `block=False` or `map_async`\n"}
{"snippet": "p_areas = ar.get()\np_areas\n", "intent": "Validate the result:\n"}
{"snippet": "from ecc import FieldElement\nclass FieldElement(FieldElement):\n    def __mul__(self, other):\n        if self.prime != other.prime:\n            raise RuntimeError('Primes must be the same')\n        pass\n    def __pow__(self, n):\n        pass\n", "intent": "Create the `__mul__` and `__pow__` methods for your library:\n"}
{"snippet": "from math import log2\ndef entropy(s):\n    categories = set(s)\n    entropies = []\n    for category in categories:\n        p_i = s.count(category)/len(s)\n        entropies.append(p_i * log2(p_i))\n    return -sum(entropies)\n", "intent": "$$\\operatorname{Entropy}(S) = - \\sum_{i=1...c} p_i log_2 p_i$$\n"}
{"snippet": "for x in range(20):\n    if(x%2 is 0):\n        print(x, end=(\" \"))\n", "intent": "Write some code that creates a list of integers, loops through each element of the list, and only prints out even numbers!\n"}
{"snippet": "API_KEY = 'your_key_here'\n", "intent": "After you register, you will be provided with a unique API key, that you should store:\n"}
{"snippet": "def countDog(var):\n    a = var.count('dog')\n    return a\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "gsutil ls gs://${BUCKET}/babyweight/trained_model/export/exporter/\n", "intent": "<h2> Deploy trained model </h2>\n<p>\nDeploying the trained model to act as a REST web service is a simple gcloud call.\n"}
{"snippet": "EmployeeBasedf = pd.read_sql(\"select * from EmployeeBase;\", con=conn)\nMessageBasedf = pd.read_sql(\"select * from MessageBase;\", con=conn)\nRecipientBasedf = pd.read_sql(\"select * from RecipientBase;\", con=conn)\n", "intent": "Import each of the 3 tables to a Pandas Dataframes\n"}
{"snippet": "cursor = db.restaurants.find()\nfor document in cursor:\n    print(document)\n", "intent": "Find all the restuarants in the database\n"}
{"snippet": "cursor = db.restaurants.find({\"borough\": \"Manhattan\"})\nfor document in cursor:\n    print(document)\n", "intent": "Find all the restarants where \"borough\" = \"brooklyn\" \n"}
{"snippet": "cursor = db.restaurants.find({\"grades.score\": {\"$lt\": 15}})\nfor document in cursor:\n    print(document)\n", "intent": "Find all the resturants where the score is less than 15\n"}
{"snippet": "import pymongo\ncursor = db.restaurants.find().sort([\n    (\"grade\", pymongo.ASCENDING),\n    (\"score\", pymongo.ASCENDING)\n])\nfor document in cursor:\n    print(document)\n", "intent": "Sort restuarts  first by the grade field in ascending order and then to the ascending order of score within each borough \n"}
{"snippet": "def gain(targets, attr_values):\n    entropy_s = entropy(targets)\n    summands = []\n    for value in set(attr_values):\n        factor = attr_values.count(value)/len(attr_values)\n        entropy_sv = entropy([targets[i] for i in range(len(attr_values)) if attr_values[i] == value])\n        summands.append(factor*entropy_sv)\n    return entropy_s - sum(summands)\n", "intent": "$$\\operatorname{Gain}(S,A) = \\operatorname{Entropy}(S) - \\sum_{v \\in \\operatorname{Values}(A)} \\frac{|S_v|}{|S|} \\operatorname{Entropy}(S_v)$$\n"}
{"snippet": "cursor = db.restuarants.aggregate(\n    [\n        {\"$group\": {\"_id\": \"$borough\", \"count\": {\"$sum\": 1}}}\n    ]\n)\nfor document in cursor:\n    print(document)\n", "intent": "Count all the resturants in each borough\n"}
{"snippet": "cursor = db.restaurants.aggregate(\n    [\n        {\"$match\": {\"grades.grade\": \"A\", \"cuisine\": \"Italian\"}},\n        {\"$group\": {\"_id\": \"$address.zipcode\", \"count\": {\"$sum\": 1}}}\n    ]\n)\nfor document in cursor:\n    print(document)\n", "intent": "Count all the grade A resturants that serve Italian cuisine in each zipcode\n"}
{"snippet": "collection = db.restaurants\n", "intent": "Insert a new document into a collection named restuarants\n"}
{"snippet": "gcloud ml-engine local train \\\n --module-name=tutorial.task \\\n --package-path=tutorial \\\n --job-dir=\"checkpoints\" \\\n -- \\\n --data-dir=\"gs://good-temperatures-public\"\n", "intent": "Warning: this will use the \"python\" command to run (usually mapped to python 2 on mac, same as ML-Engine)\n"}
{"snippet": "collection.find({'borough': 'Brooklyn'}).count()\n", "intent": "Find all the restarants where \"borough\" = \"brooklyn\" \n"}
{"snippet": "collection.find({'grades.score' : {'$lt' : 15}}).count()\n", "intent": "Find all the resturants where the score is less than 15\n"}
{"snippet": "for x in collection.find({'name': {'$exists':True}}).sort('cuisine')\n    print x.name\n", "intent": "Sort restuarnts  first by the cuisine in ascending order and then to the ascending order of score within each borough \n"}
{"snippet": "import foursquare\nimport json\nimport pandas as pd\nimport unicodedata\nCLIENT_ID = 'XUHWF1ZUWABMOAHGLO2QNNWED1XCL3NH1PT0IIUODMJL43EY'\nCLIENT_SECRET = '3TJWM15OHXWDHRI0XZ3QZEV31TXFCQK3FPXZC0UGZ4NQPPMK'\nclient = foursquare.Foursquare(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)\n", "intent": "Setup your access token to foursquare\n"}
{"snippet": "def day_of_week(date):\n    days = {1: 'monday', 2: 'tuesday', 3: 'wednesday', 4: '', 5: '', 6: '', 7: ''}\nday_of_week(lesson_date)\n", "intent": "Exercise 1: Write a function to print the day of the week the lesson plan was written.\n"}
{"snippet": "from math import log2\ndef entropy(s):\n", "intent": "$$\\operatorname{Entropy}(S) = - \\sum_{i=1...c} p_i log_2 p_i$$\n"}
{"snippet": "one_mill = list(one_mill)\n", "intent": "Compare speed: numpy vs. regular python list\n"}
{"snippet": "all_samples = []\nfor i in range(1, 5500):\n    all_samples.append(df_b.sample(1000).mean())\n", "intent": "If we sample the data and calculate the mean over the new samples, we can see that CLT applys.\n"}
{"snippet": "dw = 1\ndy = 0 * dw\ndz = 1 * dw\ndx = 3 * dz\ndx, dz, dy, dw\n", "intent": "and the backward pass is computed as\n"}
{"snippet": "sampleline = u'There are places I remember, all my life though some have changed.'\nresults = SentimentAnalysis(sampleline)\nprint(\"\\n\",\"This is the Python object that is returned; a dictionary.\")\nprint(\"\\n\")\nprint(\"Function returns :\",type(results))\nprint(results)\nimport json\nprint(\"\\n\",\"This is the JSON formatted version of the object\")\nprint(json.dumps(results, sort_keys=True, indent=4))\n", "intent": "<h2> Test the Sentiment Analysis </h2>\n+ Use a simple string to test the function and verify all the API elements are working.\n"}
{"snippet": "import numpy as np\nfrom checking import estimate_gradients\nrecurrent =  Recurrent_Layer()\nfor input_len in np.random.randint(low=1, high=10, size=10):\n    wx, x, wh, h = np.random.randn(4) \n    estimated_grads = estimate_gradients(recurrent.forward, \n                                         wrt=['wx', 'wh', 'h'],\n                                         at={'wx': wx, 'x': x, 'wh': wh, 'h': h})\n    exact_grads = recurrent.backward(1)\n    print(exact_grads)\n", "intent": "- Gradient check your recurrent cell\n- Run the following code to gradient check your `RecurrentCell` backpropagation code\n"}
{"snippet": "from IPython.display import YouTubeVideo\nYouTubeVideo(\"UXurvvDY93o\")\n", "intent": "Reinforcement Learning Overview\n-----\n<center><img src=\"images/rl_overview.png\" height=\"500\"/></center>\n"}
{"snippet": "YouTubeVideo(\"0yI2wJ6F8r0\")\n", "intent": "Montezuma's Revenge\n----\n"}
{"snippet": "i = 10\nwhile i > 1:\n    print(i)\n    i = i - 1  \n", "intent": "In addition to for loops, **while loops** can also be used for iteration\n"}
{"snippet": "foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]\nfoo3 = [x for x in foo if x % 3 == 0]\nprint(foo3)\n", "intent": "or you can use a one-line loop like this:\n"}
{"snippet": "def gain(targets, attr_values):\n", "intent": "$$\\operatorname{Gain}(S,A) = \\operatorname{Entropy}(S) - \\sum_{v \\in \\operatorname{Values}(A)} \\frac{|S_v|}{|S|} \\operatorname{Entropy}(S_v)$$\n"}
{"snippet": "pairs = ((2, 5), (4, 2), (9, 8), (12, 10))\nsum([x % 2 == 0 and y % 2 == 0 for x, y in pairs])\n", "intent": "**Solution: Part 3**\n"}
{"snippet": "def f(seq_a, seq_b):\n    return set(seq_a).issubset(set(seq_b))\n", "intent": "Of course if we use the sets data type then the solution is easier\n"}
{"snippet": "l1=[1,3,5,2,1,6,8,0,3]\nidx_l1 = list(range(len(l1)))\nidx_evens = [idx for idx, x in zip(idx_l1, l1) if x % 2 == 0]\nidx_evens\n", "intent": "**Solution: Part 2**\n"}
{"snippet": "lines = sc.textFile(\"/sampledata/road-not-taken.txt\")\nsentiment = lines.map(SentimentAnalysis)\nprint (type(sentiment))\noutput = sentiment.collect()\nprint(type(output))\nprint(\"\\n\")\nfor line in output:\n  print(line)\n", "intent": "<h2>Use the Dataproc cluster to run a Spark job that uses the Machine Learning API </h2>\n"}
{"snippet": "from sympy import *\nx = Symbol('x')\ny = Symbol('y')\n", "intent": "In contrast to other Computer Algebra Systems, in SymPy you have to declare symbolic variables explicitly:\n"}
{"snippet": "((x+y)**2).subs(x, 1)\n", "intent": "And substitute them for other symbols or numbers using subs(var, substitution):\n"}
{"snippet": "from sympy import *\nx = Symbol('x')\ndiff(sin(x), x)\n", "intent": "You can differentiate any SymPy expression using diff(func, var). Examples:\n"}
{"snippet": "limit((tan(x+y)-tan(x))/y, y, 0)\n", "intent": "You can check, that it is correct by:\n"}
{"snippet": "diff(sin(2*x), x, 1)\n", "intent": "Higher derivatives can be calculated using the diff(func, var, n) method:\n"}
{"snippet": "SumOfSquares = sum(i**2 for i in range(1,101))\nSquareOfSum = (sum(i for i in range(1,101)))**2\nprint(\"Answer: \" + str(SquareOfSum - SumOfSquares))\n", "intent": "I used list comprehension to create the necessary lists, then subtracted those lists to find the answer.\n"}
{"snippet": "integrate(6*x**5, x)\n", "intent": "You can integrate elementary functions:\n"}
{"snippet": "integrate(x**3, (x, -1, 1))\n", "intent": "It is possible to compute definite integral:\n"}
{"snippet": "integrate(exp(-x), (x, 0, oo))\n", "intent": "Also improper integrals are supported as well:\n"}
{"snippet": "def abncdn(n):\n    raise NotImplementedError()\n", "intent": "<div class=\"alert alert-success\">\nEdit the function <code>abncdn</code> to generate sentences of the form $(ab)^{n}(cd)^{n}$.\n</div>\n"}
{"snippet": "class FunctionalWrapper(object):\n    def __init__(self, data):\n        self.data = data\n    def map(self, function):\n        return reduce(function, self.data)\n    def filter(self, function):\n", "intent": "TODO: REVISAR EL WRAPPER\n"}
{"snippet": "X = np.array([[1,2,3], [4,5,6]], np.int32)\nY = np.array(X)\nY\n", "intent": "Let X = np.array([1,2,3], [4,5,6], np.int32). \nCreate a new array with the same shape and type as X.\n"}
{"snippet": "np.ones((3, 2), dtype=float)\n", "intent": "Create a new array of 3*2 float numbers, filled with ones.\n"}
{"snippet": "x = np.arange(4, dtype=np.int64)\nnp.ones(x.shape)\n", "intent": "Let x = np.arange(4, dtype=np.int64). Create an array of ones with the same shape and type as X.\n"}
{"snippet": "np.zeros((3, 2), dtype=float)\n", "intent": "Create a new array of 3*2 float numbers, filled with zeros.\n"}
{"snippet": "myint = 0\nfor b in range(1,200000):\n    if same_digits(b, 2*b) and same_digits(b, 3*b) and same_digits(b, 4*b) and same_digits(b, 5*b) and same_digits(b, 6*b)  :\n        myint = b\n        break\nmyint\n", "intent": "Searching for the smallest. So I will look from the bottom and the first one I find is the smallest\n"}
{"snippet": "np.ones((2, 5), dtype=np.int64) * 6\n", "intent": "Create a new array of 2*5 uints, filled with 6.\n"}
{"snippet": "x = np.arange(4, dtype=np.int64)\nnp.ones(x.shape, dtype=np.int64) * 6\n", "intent": "Let x = np.arange(4, dtype=np.int64). Create an array of 6's with the same shape and type as X.\n"}
{"snippet": "np.arange(3, dtype=np.int64) + np.ones(3, dtype=np.int64)\n", "intent": "Create an array of [1, 2, 3].\n"}
{"snippet": "personalized_model = graphlab.item_similarity_recommender.create(train_data,\n                                                                user_id='user_id',\n                                                                item_id='song')\n", "intent": "We now create a model that allows us to make personalized recommendations to each user. \n"}
{"snippet": "X = np.array([[1, 2], [3, 4]])\na = X * X\nprint a\nb = np.matrix(X)\nb = b * b\nprint b\n", "intent": "Let X = np.array([[1, 2], [3, 4]]). Convert it into a matrix.\n"}
{"snippet": "x = [1, 2]\nnp.array(x, dtype=float)\n", "intent": "Let x = [1, 2]. Conver it into an array of `float`.\n"}
{"snippet": "x = np.array([1, 2, 3])\nnp.array(x, copy=True)  \n", "intent": "Let x = np.array([1, 2, 3]). Create a array copy of x, which has a different id from x.\n"}
{"snippet": "np.arange(2, 102, 2)\n", "intent": "Create an array of 2, 4, 6, 8, ..., 100.\n"}
{"snippet": "np.linspace(3.0, 10.0, num=50)\n", "intent": "Create a 1-D array of 50 evenly spaced elements between 3. and 10., inclusive.\n"}
{"snippet": "assert len(number_to_words(5))==5\nassert len(number_to_words(900))==900\nassert number_to_words(50)[-1]=='fifty'\n", "intent": "Now write a set of `assert` tests for your `number_to_words` function that verifies that it is working as expected.\n"}
{"snippet": "a = np.arange(1, 5)\nnp.diag(a)\n", "intent": "Create a 2-D array whose diagonal equals [1, 2, 3, 4] and 0's elsewhere.\n"}
{"snippet": "a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nprint a\nnp.triu(a, 0)\n", "intent": "Create an array which looks like below. array([[ 1,  2,  3],\n       [ 4,  5,  6],\n       [ 0,  8,  9],\n       [ 0,  0, 12]])\n"}
{"snippet": "x = np.array([[1, 2, 3], [4, 5, 6]])\nx = np.reshape(x, -1)[4]\nx\n", "intent": "Q3. Let x be array [[1, 2, 3], [4, 5, 6]]. Get the 5th element.\n"}
{"snippet": "personalized_model.recommend(users=[users[0]])\n", "intent": "As you can see, different users get different recommendations now.\n"}
{"snippet": "x = np.random.rand(3, 4, 1)\nx = np.squeeze(x)\nx.shape\n", "intent": "Q6. Let x be an arbitrary 3-D array of shape (3, 4, 1). Remove a single-dimensional entries such that the new shape will be (3, 4).\n"}
{"snippet": "x = np.array([1, 2, 3])\ny = np.array([4, 5, 6])\nx = x[:,np.newaxis]\ny = y[:,np.newaxis]\nz = np.concatenate([x, y], axis=1)\nprint z\n", "intent": "Q8. Let x be an array [1 2 3] and y be [4 5 6]. Convert it to [[1, 4], [2, 5], [3, 6]].\n"}
{"snippet": "x = np.arange(1, 10)\nx = np.split(x, [4, 6])\nx\n", "intent": "Q10. Let x be an array [1, 2, 3, ..., 9]. Split x into 3 arrays, each of which has 4, 2, and 3 elements in the original order.\n"}
{"snippet": "x = np.array([0, 1, 2])\nx = np.concatenate([x, x])[np.newaxis,:]\nx = np.concatenate([x, x])\nx\n", "intent": "Q14. Let x be an array [0, 1, 2]. Convert it to <br/>\n[[0, 1, 2, 0, 1, 2],<br/>\n [0, 1, 2, 0, 1, 2]].\n"}
{"snippet": "x = np.arange(0, 3)[np.newaxis,:]\nx = np.concatenate([x, x])\nx = np.reshape(x.T, -1)\nx\n", "intent": "Q15. Let x be an array [0, 1, 2]. Convert it to <br/>\n[0, 0, 1, 1, 2, 2].\n"}
{"snippet": "assert count_letters(1) == [3]\nassert len(count_letters(342)) == 342\nassert count_letters(5) == [3,3,5,4,4]\n", "intent": "Now write a set of `assert` tests for your `count_letters` function that verifies that it is working as expected.\n"}
{"snippet": "x = np.array([2, 2, 1, 5, 4, 5, 1, 2, 3])\ncount = np.bincount(x)\ncount\n", "intent": "Q17. Let x be an array [2, 2, 1, 5, 4, 5, 1, 2, 3]. Get two arrays of unique elements and their counts.\n"}
{"snippet": "x = np.reshape(np.arange(1, 5), (2, 2))\nx = np.flip(x, axis=1)\nx\n", "intent": "Q18. Lex x be an array <br/>\n[[ 1 2]<br/>\n [ 3 4].<br/>\nFlip x along the second axis.\n"}
{"snippet": "x = np.reshape(np.arange(1, 5), (2, 2))\nx = np.flip(x, axis=0)\nx\n", "intent": "Q19. Lex x be an array <br/>\n[[ 1 2]<br/>\n [ 3 4].<br/>\nFlip x along the first axis.\n"}
{"snippet": "if graphlab.version[:3] >= \"1.6\":\n    model_performance = graphlab.compare(test_data, [popularity_model, personalized_model], user_sample=0.05)\n    graphlab.show_comparison(model_performance,[popularity_model, personalized_model])\nelse:\n    %matplotlib inline\n    model_performance = graphlab.recommender.util.compare_models(test_data, [popularity_model, personalized_model], user_sample=.05)\n", "intent": "We now formally compare the popularity and the personalized models using precision-recall curves. \n"}
{"snippet": "x = np.arange(10)\ny = np.arange(11, 20)\nnp.savez('temp.npz', x=x, y=y)\nwith np.load('temp.npz') as data:\n    x2 = data['x']\n    y2 = data['y']\n    print(np.array_equal(x, x2))\n    print(np.array_equal(y, y2))\n", "intent": "Q2. Save x and y into a single file 'temp.npz' and load it.\n"}
{"snippet": "x = np.arange(10).reshape(2, 5)\nheader = 'num1 num2 num3 num4 num5'\nnp.savetxt('temp.txt', x, header=header)\nx_loaded = np.loadtxt('temp.txt')\nx_loaded\n", "intent": "Q3. Save x to 'temp.txt' in string format and load it.\n"}
{"snippet": "x = np.arange(10)\ny = np.arange(11, 21)\nz = np.arange(22, 32)\n...\n...\n", "intent": "Q4. Save `x`, `y`, and `z` to 'temp.txt' in string format line by line, then load it.\n"}
{"snippet": "x = np.array([1, 2, 3, 4])\nx_bytes = ...\nx2 = ...\nprint(np.array_equal(x, x2))\n", "intent": "Q5. Convert `x` into bytes, and load it as array.\n"}
{"snippet": "a = [[1, 2], [3, 4]]\nx = ...\na2 = ...\nprint(a == a2)\n", "intent": "Q6. Convert `a` into an ndarray and then convert it into a list again.\n"}
{"snippet": "print(sum(count_letters(1000)))\n", "intent": "Finally used your `count_letters` function to solve the original question.\n"}
{"snippet": "x = np.random.uniform(size=[10,100])\nnp.set_printoptions(...)\nprint(x)\n", "intent": "Q8. Print `x` such that all elements are displayed with precision=1, no suppress.\n"}
{"snippet": "x = np.arange(10)\nnp.save('temp.npy', x) \nimport os\nif os.path.exists('temp.npy'):\n    x2 = np.load('temp.npy')\n    print(np.array_equal(x, x2))\n", "intent": "Q1. Save x into `temp.npy` and load it.\n"}
{"snippet": "x = np.arange(10).reshape(2, 5)\nheader = 'num1 num2 num3 num4 num5'\nnp.savetxt('temp.txt', x, fmt=\"%d\", header=header) \nnp.loadtxt('temp.txt')\n", "intent": "Q3. Save x to 'temp.txt' in string format and load it.\n"}
{"snippet": "len(song_data[song_data[\"artist\"] == \"Kanye West\"][\"user_id\"].unique())\n", "intent": "The curve shows that the personalized model provides much better performance. \n"}
{"snippet": "x = np.array([1, 2, 3, 4])\nx_bytes = x.tostring() \nx2 = np.fromstring(x_bytes, dtype=x.dtype) \nprint(np.array_equal(x, x2))\n", "intent": "Q5. Convert `x` into bytes, and load it as array.\n"}
{"snippet": "x = np.arange(10).reshape(2,5)\nx_str = np.array_str(x)\nprint(x_str, \"\\n\", type(x_str))\nx_str = x_str.replace(\"[\", \"\") \nx_str = x_str.replace(\"]\", \"\")\nx2 = np.fromstring(x_str, dtype=x.dtype, sep=\" \").reshape(x.shape)\nassert np.array_equal(x, x2)\n", "intent": "Q7. Convert `x` to a string, and revert it.\n"}
{"snippet": "x = np.random.uniform(size=[10,100])\nnp.set_printoptions(precision=1, threshold=np.nan, suppress=True)\nprint(x)\n", "intent": "Q8. Print `x` such that all elements are displayed with precision=1, no suppress.\n"}
{"snippet": "out1 = np.binary_repr(12)\nout2 = np.base_repr(12, base=2)\nassert out1 == out2 \nprint(out1)\n", "intent": "Q9. Convert 12 into a binary number in string format.\n"}
{"snippet": "np.base_repr(1100, base=16)\n", "intent": "Q10. Convert 12 into a hexadecimal number in string format.\n"}
{"snippet": "def get_string(x,y):\n    return str(x) + str(y)\n", "intent": "Complete the function to output a string which is the concatenation of the inputs to the function\n"}
{"snippet": "x1 = np.array(['Hello', 'Say'], dtype=np.str)\nx2 = np.array([' world', ' something'], dtype=np.str)\n", "intent": "Q1. Concatenate x1 and x2.\n"}
{"snippet": "x = np.array(['Hello ', 'Say '], dtype=np.str)\n", "intent": "Q2. Repeat x three time element-wise.\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\ncentered = ...\nleft = ...\nright = ...\nprint(\"centered =\", centered)\nprint(\"left =\", left)\nprint(\"right =\", right)\n", "intent": "Q4. Make the length of each element 20 and the string centered / left-justified / right-justified with paddings of `_`.\n"}
{"snippet": "mylist = [1., 2., 3., 4.]\nmynparray = np.array(mylist)\nmynparray\n", "intent": "New arrays can be made in several ways. We can take an existing list and convert it to a numpy array:\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\n", "intent": "Q6. Insert a space between characters of x.\n"}
{"snippet": "x = np.array(['Hello my name is John'], dtype=np.str)\n", "intent": "Q8. Split the element of x with spaces.\n"}
{"snippet": "x = np.array(['Hello\\nmy name is John'], dtype=np.str)\n", "intent": "Q9. Split the element of x to multiple lines.\n"}
{"snippet": "x = np.array(['34'], dtype=np.str)\n", "intent": "Q10. Make x a numeric string of 4 digits with zeros on its left.\n"}
{"snippet": "x = np.array(['Hello nmy name is John'], dtype=np.str)\n", "intent": "Q11. Replace \"John\" with \"Jim\" in x.\n"}
{"snippet": "select count(*) from departments natural join dept_emp where dept_name = 'Research' and now() > to_date;\n", "intent": "the answer should be a single row and column.\n"}
{"snippet": "x1 = np.array(['Hello', 'my', 'name', 'is', 'John'], dtype=np.str)\nx2 = np.array(['Hello', 'my', 'name', 'is', 'Jim'], dtype=np.str)\n", "intent": "Q13. Return x1 != x2, element-wise.\n"}
{"snippet": "x = np.array(['Hello', 'my', 'name', 'is', 'Lily'], dtype=np.str)\n", "intent": "Q14. Count the number of \"l\" in x, element-wise.\n"}
{"snippet": "x = np.array(['Hello', 'my', 'name', 'is', 'Lily'], dtype=np.str)\n", "intent": "Q15. Count the lowest index of \"l\" in x, element-wise.\n"}
{"snippet": "one_vector = np.ones(4)\none_vector \n", "intent": "You can initialize an array (of any dimension) of all ones or all zeroes with the ones() and zeros() functions:\n"}
{"snippet": "x = np.array(['Hello ', 'Say '], dtype=np.str)\nout = np.char.multiply(x, 3)\nprint(out)\n", "intent": "Q2. Repeat x three time element-wise.\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\ncentered = np.char.center(x, 20, fillchar='_')\nleft = np.char.ljust(x, 20, fillchar='_')\nright = np.char.rjust(x, 20, fillchar='_')\nprint(\"centered =\", centered)\nprint(\"left =\", left)\nprint(\"right =\", right)\n", "intent": "Q4. Make the length of each element 20 and the string centered / left-justified / right-justified with paddings of `_`.\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\nencoded = np.char.encode(x, 'cp500')\ndecoded = np.char.decode(encoded,'cp500')\nprint(\"encoded =\", encoded)\nprint(\"decoded =\", decoded)\n", "intent": "Q5. Encode x in cp500 and decode it again.\n"}
{"snippet": "x = np.array(['hello world', 'say something'], dtype=np.str)\nout = np.char.join(\" \", x)\nprint(out)\n", "intent": "Q6. Insert a space between characters of x.\n"}
{"snippet": "x = np.array(['Hello my name is John'], dtype=np.str)\nout = np.char.split(x)\nprint(out)\n", "intent": "Q8. Split the element of x with spaces.\n"}
{"snippet": "select dept_name, gender, count(*)\nfrom departments natural join dept_emp natural join employees\ngroup by dept_name, gender\norder by gender\n", "intent": "the department names should be sorted and the count of females should be listed before the count of males for each department.\n"}
{"snippet": "x = np.array(['34'], dtype=np.str)\nout = np.char.zfill(x, 4)\nprint(out)\n", "intent": "Q10. Make x a numeric string of 4 digits with zeros on its left.\n"}
{"snippet": "x = np.array(['Hello nmy name is John'], dtype=np.str)\nout = np.char.replace(x, \"John\", \"Jim\")\nprint(out)\n", "intent": "Q11. Replace \"John\" with \"Jim\" in x.\n"}
{"snippet": "x1 = np.array(['Hello', 'my', 'name', 'is', 'John'], dtype=np.str)\nx2 = np.array(['Hello', 'my', 'name', 'is', 'Jim'], dtype=np.str)\nout = np.char.equal(x1, x2)\nprint(out)\n", "intent": "Q12. Return x1 == x2, element-wise.\n"}
{"snippet": "my_matrix = np.array([[1, 2, 3], [4, 5, 6]])\nmy_matrix\n", "intent": "2D arrays are accessed similarly by referring to the row and column index separated by a comma:\n"}
{"snippet": "x = np.array(['Hello', 'my', 'name', 'is', 'Lily'], dtype=np.str)\nout = np.char.count(x, \"l\")\nprint(out)\n", "intent": "Q14. Count the number of \"l\" in x, element-wise.\n"}
{"snippet": "x = np.array(['Hello', 'my', 'name', 'is', 'Lily'], dtype=np.str)\nout = np.char.find(x, \"l\")\nprint(out)\n", "intent": "Q15. Count the lowest index of \"l\" in x, element-wise.\n"}
{"snippet": "x = np.array(['he', 'his', 'him', 'his'], dtype=np.str)\nout = np.char.startswith(x, \"hi\")\nprint(out)\n", "intent": "Q17. Check if each element of x starts with \"hi\".\n"}
{"snippet": "x = np.arange(10)\n.\nimport os\nif os.path.exists('temp.npy'):\n    x2 = ...\n    print(np.array_equal(x, x2))\n", "intent": "Q1. Save x into `temp.npy` and load it.\n"}
{"snippet": "x = np.arange(10)\ny = np.arange(11, 20)\n...\nwith ... as data:\n    x2 = data['x']\n    y2 = data['y']\n    print(np.array_equal(x, x2))\n    print(np.array_equal(y, y2))\n", "intent": "Q2. Save x and y into a single file 'temp.npz' and load it.\n"}
{"snippet": "most_common_words = None\nraise NotImplementedError()\n", "intent": "It also has a `most_common()` method to access the words with the higher count:\n"}
{"snippet": "text = 'The quick brown fox born on 1/23/2013 jumped over the lazy dog born on 10/6/10.'\nprint(re.match('The', text))\nprint(re.match('the', text))\n", "intent": "This method looks for the regular expression at the beginning of the string only.\n"}
{"snippet": "text = 'The quick brown fox born on 1/23/2013 jumped over the lazy dog born on 10/6/10.'\nprint(re.search('The', text))\nprint(re.search('the', text))\nprint(re.search('on', text))\n", "intent": "This method looks for the regular expression anywhere in the string.\n"}
{"snippet": "example_text = 'Jessica is 15 years old, and DANIEL is 27 years old. Edward is 97 years old, and his grandfather, Oscar, is 102.'\nages = re.findall('\\d{1,3}',example_text)\nnames = re.findall('[A-Z][a-z]+|[A-Z]+',example_text)\nprint(ages)\nprint(names)\n", "intent": "This function returns a list of all of the matches to the regular expression in the string.\n"}
{"snippet": "fib_indices = np.array([1, 1, 2, 3])\nrandom_vector = np.random.random(10) \nrandom_vector\n", "intent": "You can also pass a list of indices. \n"}
{"snippet": "a = [1,2,3,4,5]\na[-1]\n", "intent": "Fill out your solution below:\n"}
{"snippet": "def insertion_sort(arr):\n    for n in range(1,len(arr)):\n        curren_element = arr[n]  \n        current_position = n\n        while current_position > 0 and arr[current_position - 1] > curren_element:\n            arr[current_position] = arr[current_position - 1]\n            current_position -= 1\n            print(arr)\n        arr[current_position] = curren_element\n        print(\"After {} iteration completes: {} \".format(n,arr))\n", "intent": "For every iteration, check if elements prior to it have greater value. Sorting the list at every position in the iteration.\n"}
{"snippet": "import csv \nwith open('../data/Dalziel2015_data.csv', 'r') as f: \n    my_csv = csv.DictReader(f) \n    for line in my_csv: \n        print(line)\n        break \n", "intent": "Now we open the file for reading. We use the `with` statement that takes care of closing the file:\n"}
{"snippet": "citycount = {} \nimport csv \nwith open('../data/Dalziel2015_data.csv', 'r') as f: \n    my_csv = csv.DictReader(f)\n    for line in my_csv:\n        mycity = line['loc']\n        citycount[mycity] = citycount.get(mycity, 0)\n        citycount[mycity] = citycount[mycity] + 1\n", "intent": "With this at hand, we can write our program:\n"}
{"snippet": "for city in ['CHICAGO', 'LOS ANGELES', 'NEW YORK']:\n    print(city, citycount[city])\n", "intent": "That's it. Let's print the counts for a few cities:\n"}
{"snippet": "training_accuracy = None\nraise NotImplementedError()\n", "intent": "Let's check the accuracy on the training and on the test sets, make sure to turn those into a percent value\n"}
{"snippet": "for city in ['CHICAGO', 'LOS ANGELES', 'NEW YORK']:\n    print(city, round(citypop[city][0],1))\n", "intent": "If we want to skip some of the decimals, we can use `round`:\n"}
{"snippet": "years = list(cityyear['CHICAGO'].keys())\nyears.sort() \nfor year in years:\n    print(year, round(cityyear['CHICAGO'][year][0]))\n", "intent": "Let's look at the results for Chicago: you can see that the population grew by more than 50% in the period covered by the data!\n"}
{"snippet": "def get_mean_r(names, values, target_taxon = 'Fish'):\n    n = len(names)\n    mean_r = 0.0\n    sample_size = 0\n    for i in range(n):\n        if names[i] == target_taxon:\n            mean_r = mean_r + values[i]\n            sample_size = sample_size + 1\n    return mean_r / sample_size\n", "intent": "Now we write a function that, given a list of taxa names and corresponding r values, calculates the mean r for a given category of taxa:\n"}
{"snippet": "my_vector = np.array([1, 2, 3, 4])\nselect_index = np.array([True, False, True, False])\nmy_vector[select_index]\n", "intent": "You can also use true/false values to select values\n"}
{"snippet": "def get_taxa_list(names):\n    return(set(names))\n", "intent": "Let's try to run this on all taxa. We can write a separate function that returns the set of unique taxa in the database:\n"}
{"snippet": "for t in get_taxa_list(taxa):\n    print(t, get_mean_r(taxa, r_values, target_taxon = t))\n", "intent": "Calculate the mean r for each taxon:\n"}
{"snippet": "get_p_value_for_mean_r(taxa, r_values, 'Fish', 50000)\n", "intent": "Let's try the function on `Fish`:\n"}
{"snippet": "def get_all_genera():\n    with open('../data/Lahti2014/HITChip.tab') as f:\n        header = f.readline().strip()\n    genera = header.split('\\t')[1:]\n    return genera\n", "intent": "A function to extract all the genera in the database:\n"}
{"snippet": "for g in get_all_genera()[:5]:\n    get_abundance_by_BMI({'Time': '0'}, g)\n", "intent": "Now use this function to print the results for all genera at `Time = 0`:\n"}
{"snippet": "num_wheels >= 1024 and num_wheels < 2456\n", "intent": "Which of the values below return True when used in the following statement?\n"}
{"snippet": "with open(\"../data/Lahti2014/HITChip.tab\", \"r\") as HIT:\n    csvr = csv.DictReader(HIT, delimiter = \"\\t\")\n    header = csvr.fieldnames\n    print(header)\n    for i, row in enumerate(csvr):\n        print(row)\n        if i > 2:\n            break\n", "intent": "Before moving on, let's have a look at the `HITChip` file:\n"}
{"snippet": "for line in my_data:\n    print('Line', line, 'Average Recombination Rate:')\n    my_subset = my_data[line]\n    for status in ['W', 'I']:\n        print(status, ':', end = '') \n        my_mean = sum(my_subset[status])\n        my_num_elements = len(my_subset[status])\n        my_mean = my_mean / my_num_elements\n        print(' ', round(my_mean, 3))\n    print('') \n", "intent": "Time to calculate the means and print the results:\n"}
{"snippet": "with open('../data/bee_list.txt') as f:\n    csvr = csv.DictReader(f, delimiter = '\\t')\n    species = []\n    authors = []\n    for r in csvr:\n        species.append(r['Scientific Name'])\n        authors.append(r['Taxon Author'])\n", "intent": "Then, we read the file, and store the columns `Scientific Name` and `Taxon Author` in two lists:\n"}
{"snippet": "for i in range(1, 10):\n    print(abncdn(i))\n", "intent": "Test your function on a few different inputs to make sure it produces the expected output:\n"}
{"snippet": "def extract_list_au_year(au):\n    tmp = re.match(my_reg, au)\n    authorlist = tmp.group(1)\n    year = tmp.group(2)\n    authorlist = re.split(', | \\& ', authorlist)\n    return [authorlist, year]\n", "intent": "Now we write a function that uses the regular expression to extract an author list (useful when there are multiple authors), and the year\n"}
{"snippet": "extract_list_au_year(au)\n", "intent": "Let's see the output of this function:\n"}
{"snippet": "max_value_year = max(dict_years.values())\nwhich_index = list(dict_years.values()).index(max_value_year)\nlist(dict_years.keys())[which_index]\n", "intent": "We use the same strategy to find that the golden year of bee publication is:\n"}
{"snippet": "response = requests.get('https://api.spotify.com/v1/search?query=Lil&type=artist&limit=50&market=US')\nLil_data = response.json()\n", "intent": "These are the search queries for the [Spotify Web API](https://developer.spotify.com/web-api/search-item/)\n"}
{"snippet": "Lil_artists = Lil_data['artists']['items']\nfor artist in Lil_artists:\n    print(artist['name'], artist['popularity'])\n    if len(artist['genres']) == 0:\n        print(\"No genres listed\")\n    else:\n        genres = \", \".join(artist['genres'])\n        print(\"Genres: \", genres)\n", "intent": "Finding all the genres and combining into one list.\n"}
{"snippet": "name = \"Computational Thinking\"\ncode = \"CM6111\"\ncredits = 20\nprint(credits)\n", "intent": "Create 3 variables to describe this module:\n1. the name (called `name`)\n2. the code (called `code`)\n3. the number of credits (called `credits`)\n"}
{"snippet": "sorted(Genre_list, key = lambda x: int(x[1]), reverse=True)\nSorted_by_occurences_Genre_list = sorted(Genre_list, key = lambda x: int(x[1]), reverse=True)\nprint(\"The most frequent genre of the musicians called Lil is\", Sorted_by_occurences_Genre_list[0])\n", "intent": "Sorting the genres by occurences.\n"}
{"snippet": "for artist in Lil_artists: \n    if artist['popularity'] >= 72 and artist['name'] != 'Lil Wayne':\n            print(artist['name'])\n", "intent": "**3 a) Use a for loop to determine who BESIDES Lil Wayne has the highest popularity rating.**\n"}
{"snippet": "type(artist['followers'])\n", "intent": "**3 b) Is it the same artist who has the largest number of followers?**\n"}
{"snippet": "my_array = np.array([1., 2., 3., 4.])\nprint my_array*my_array\n", "intent": "You can use the operations '\\*', '\\*\\*', '\\\\', '+' and '-' on numpy arrays and they operate elementwise.\n"}
{"snippet": "List_of_Followers.sort(reverse=True)\nprint(List_of_Followers)\n", "intent": "Deciding which one is highest:\n"}
{"snippet": "for artist in Lil_artists: \n    if artist['name'] == \"Lil' Kim\":\n        print(artist['popularity'])\n", "intent": "Establishing how high Lil' Kim's popularity is. **Would this be possible in one go?**\n"}
{"snippet": "Lil_artists_popularity = Lil_data['artists']['items']\npopularity_total = 0\nfor popularity in Lil_artists_popularity:\n    popularity_total = popularity_total + popularity['popularity']\nprint(\"The average rating for the top 50 artists called Lil is:\", round(popularity_total / 50))\n", "intent": "**8) Out of the top 50 \"Lil\"s and the top 50 \"Biggie\"s, who is more popular on average?**\n"}
{"snippet": "for artist in artists:\n    if artist['name'] == \"Lil' Kim\":\n        print(\"Found Lil Kim\")\n        print(artist['popularity'])\n    else:\n        pass\n", "intent": "4) Print a list of Lil's that are more popular than Lil' Kim.\n"}
{"snippet": "print(\"Longitude:\", weather_data['longitude'], \"Latitude\", weather_data['latitude'])\n", "intent": "The time zone of Trogen is correct! This is where I live.\n"}
{"snippet": "my_string = \"'Who's been eating my porridge?' said Papa Bear\";\nprint(my_string)\n", "intent": "Look at the code below and fix the string in order to ensure it can be printed.\n"}
{"snippet": "type(weather_data['daily'])\n", "intent": "3) The first daily forecast is the forecast for today. For the place you decided on up above, how much of the moon is currently visible?\n"}
{"snippet": "print(weather_data['currently'])\n", "intent": "4) What's the difference between the high and low temperatures for today?\n"}
{"snippet": "response = requests.get(\"https://api.forecast.io/forecast/e554f37a8164ce189acd210d00a452e0/40.781750,-73.966641,346593600\")\nweather_data = response.json()\nweather_data.keys()\n", "intent": "7) What was the temperature in Central Park on Christmas Day, 1980? How about 1990? 2000?\n"}
{"snippet": "print np.sum(my_array)\n", "intent": "You can compute the sum with np.sum() and the average with np.average()\n"}
{"snippet": "page.data['image'][0]\n", "intent": "Access the first image in the images attribute, which is a JSON array.\n"}
{"snippet": "page.data['infobox']['director']\n", "intent": "Access the director key of the infobox attribute, which is a JSON object.\n"}
{"snippet": "def rec(n):\n    if n==1:\n        return 1\n    return n*rec(n-1)\n", "intent": "step by step\nhttp://www.pythontutor.com/visualize.html\n"}
{"snippet": "from IPython.display import Image\ndef show(id, w=7):\n    return Image('./pics/class2/{}.jpg'.format(id), width=w*100)\n", "intent": "https://www.youtube.com/watch?v=mlaLLQofmR8\n"}
{"snippet": "python tofile.py --shape-predictor shape_predictor_68_face_landmarks.dat --image testPics/607856_ios20160128214824448.jpg\n", "intent": "python tofile.py --shape-predictor shape_predictor_68_face_landmarks.dat --image testPics/607850_ios20160309095310467.jpg\n"}
{"snippet": "to_print = \"Me, but 400 more times\"\nprint(to_print) \n", "intent": "Using operators, change the string below to print it 400 times.\n"}
{"snippet": "from IPython.display import Image\ndef show(id, w=7):\n    return Image('../pics/class3/{}.jpg'.format(id), width=w*100)\n", "intent": "http://karpathy.github.io/2015/05/21/rnn-effectiveness/\n"}
{"snippet": "def cycle_check(node):\n    ini=node\n    def ck(n):\n        if n.nextnode==ini:\n            return True\n        elif n.nextnode:\n            return ck(n.nextnode)\n        else:\n            return False\n    return ck(node)\n", "intent": "Fill out your solution:\n"}
{"snippet": "'AAAAABBBBCCCC'.count('A')\n", "intent": "Fill out your solution below:\n"}
{"snippet": "my_matrix = my_features\nmy_array = np.array([0.3, 0.4, 0.5, 0.6])\n", "intent": "Similarly if you have a vector with the same number of elements as the matrix has *rows* you can left multiply them.\n"}
{"snippet": "s = 'aabaabcdeda'\nxs = map(lambda x: [x, 1], s)\nxs\n", "intent": "https://people.duke.edu/~ccc14/sta-663/DistributedComputing.html\n"}
{"snippet": "from sympy import init_printing\nfrom sympy import *\n init_printing()\n", "intent": "First we import SymPy and initialize printing:\n"}
{"snippet": "x,y,z = symbols('x y z')\n", "intent": "Create a few symbols:\n"}
{"snippet": "e = x**2 + 2.0*y + sin(z); e\n", "intent": "Here is a basic expression:\n"}
{"snippet": "a = np.random.uniform(size=(100,100))\n", "intent": "Now we show some very basic examples of how they can be used.\n"}
{"snippet": "print(True + 3 * 100)\nprint((True + 3) * 100)\n", "intent": "Why is the code below valid? \nFrom your GCSE Maths knowledge, why are the 2 answers different? \nWhat is the output of `int(false)`?\n"}
{"snippet": "from IPython.display import Image\ndef show(id, w=7):\n    return Image('./images/low_level_array/{}.jpg'.format(id), width=w*100)\n", "intent": "http://bigocheatsheet.com/\n"}
{"snippet": "import os\nimport pandas as pd\nimport math\nimport findspark\nfindspark.init('/usr/hdp/2.6.0.3-8/spark')\n", "intent": "https://www.codementor.io/jadianes/building-a-recommender-with-apache-spark-python-example-app-part1-du1083qbw\n"}
{"snippet": "import os\nimport pandas as pd\nimport math\nimport findspark\nfindspark.init('/usr/hdp/2.6.0.3-8/spark2')\n", "intent": "streaming new data\nhttps://stackoverflow.com/questions/40809876/apache-spark-als-how-to-perform-live-recommendations-fold-in-anonym-user\n"}
{"snippet": "tmp1 = [(1, u'alpha'), (2, u'alpha'), (2, u'beta'), (3, u'alpha'), (1, u'epsilon'), (1, u'delta')]\ntmp2 = [(1, u'delta'), (2, u'alpha'), (2, u'beta'), (3, u'alpha'), (1, u'epsilon'), (1, u'alpha')]\noneRDD = sc.parallelize(tmp1)\ntwoRDD = sc.parallelize(tmp2)\noneSorted = oneRDD.sortByKey(True).collect()\ntwoSorted = twoRDD.sortByKey(True).collect()\nprint(oneSorted)\nprint(twoSorted)\n", "intent": "[sortbykey]: https://spark.apache.org/docs/latest/api/python/pyspark.html\n"}
{"snippet": "a = '10'\nb = 'beabeefeab'\n", "intent": "3 Two Characters\nhttps://www.hackerrank.com/challenges/two-characters/problem\n"}
{"snippet": "a, b = '5', '2 4 6 8 3'\n", "intent": "4 Insertion Sort - Part 1  \nhttps://www.hackerrank.com/challenges/insertionsort1/problem\n"}
{"snippet": "a='10 1'\nb = '363374326 364147530 61825163 1073065718 1281246024 1399469912 428047635 491595254 879792181 1069262793'\n", "intent": "8 pairs\nhttps://www.hackerrank.com/challenges/pairs/problem\n"}
{"snippet": "def stockmax(p):\n    e=0\n    m=0\n    while len(p)>0:\n        m=max(p)\n        while len(p)>0 and p[0]<m:\n            e+=m-p[0]\n            p.pop(0)\n        p.pop(0)\n    return e\n", "intent": "https://www.hackerrank.com/challenges/stockmax/problem\n7 Stock Maximize\n"}
{"snippet": "c = requests.get('http://www.soyoung.com/dpg6713991')\nfrom scrapy.http import TextResponse\nresponse = TextResponse(c.url, body=c.text, encoding='utf-8')\nresponse\n", "intent": "http://www.soyoung.com/dpg6713991\n"}
{"snippet": "initial_var = 358645317684531432678\n", "intent": "Convert the below variable to a string and assign to `string_var`. Assign the length of that string to: `len_var`\n"}
{"snippet": "import os\nimport pandas as pd\nimport math\nimport findspark\nfindspark.init('/home/soyoung/standaloneSpark/spark-2.2.1-bin-hadoop2.7')\n", "intent": "streaming new data\nhttps://stackoverflow.com/questions/40809876/apache-spark-als-how-to-perform-live-recommendations-fold-in-anonym-user\n"}
{"snippet": "class Node(object):\n    def __init__(self, value):\n        self.value=value\n        self.nextnode=None\n        self.prevnode=None\n", "intent": "For this interview problem, implement a node class and show how it can be used to create a doubly linked list.\n"}
{"snippet": "class Node(object):\n    def __init__(self, value):\n        self.value=value\n        self.nextnode=None\n", "intent": "For this interview problem, create a node class and show how it can be used to create a Singly Linked List\n"}
{"snippet": "def sortFunction(tuple):\n    key = str('%.3f' % tuple[0])\n    value = tuple[1]\n    return (key + ' ' + value)\nprint(oneRDD.sortBy(sortFunction, True).collect())\nprint(twoRDD.sortBy(sortFunction, True).collect())\n", "intent": "[sortby]: https://spark.apache.org/docs/latest/api/python/pyspark.html\n"}
{"snippet": "def fib_rec(n):\n    if n<=1:\n        return n\n    return fib_rec(n-1)+fib_rec(n-2)\n", "intent": "Solve the problem using simple recursion.\n"}
{"snippet": "def fib_iter(n):\n    s=[0,1]\n    for i in range(n-1):\n        s+=[s[-2]+s[-1]]\n    return s[-1]\n", "intent": "Implement the solution with simple iteration.\n"}
{"snippet": "s= \"Hi There Ankit\"\ns.split()\n", "intent": "** Split this string:**\n    s = \"Hi there Sam!\"\n**into a list. **\n"}
{"snippet": "def countDog(str):\n    count=0\n    for dog in str.split():\n        if dog=='dog':\n            count+=1\n    return count\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "d = {\"key1\":\"value\",\"key2\":123}\n", "intent": "<h1>Dictionaries</h1>\n"}
{"snippet": "name = \"Oi, you there\"\ndef update_name():\n    name = \"what?\"\nprint(name)\nupdate_name()\nprint(name)\n", "intent": "What will the output of the code below be? Highlight the line numbers where the scope changes.\n"}
{"snippet": "def func(param1):\n    print(param1)\n", "intent": "<h1>Functions in Python</h1>\n"}
{"snippet": "def times2(var):\n    return var*2\n", "intent": "<h1>MAP and FILTER FUNCTION</h1>\n"}
{"snippet": "t = lambda var:var*2\n", "intent": "<h1>LAMDA EXPRESSION</h1>\n"}
{"snippet": "oneSorted1 = oneRDD.takeOrdered(oneRDD.count(),key=sortFunction)\ntwoSorted1 = twoRDD.takeOrdered(twoRDD.count(),key=sortFunction)\nprint('one is %s' % oneSorted1)\nprint('two is %s' % twoSorted1)\n", "intent": "[takeordered]: https://spark.apache.org/docs/latest/api/python/pyspark.html\n"}
{"snippet": "x = [(1,2),(3,4),(5,6)]\n", "intent": "<h1>Tuple Unpacking</h1>\n"}
{"snippet": "arr= np.random.randn(3,4,2); arr\n", "intent": "http://studymake.tistory.com/405\n"}
{"snippet": "tupList= list(zip(beers, chicks)); print(tupList)\ndic1= dict(zip(beers, chicks)); print(dic1)\n", "intent": "list(zip(,)), dict(zip(,))\n"}
{"snippet": "i_n= 3; j_n= 4; \n[[j+1 for j in range(j_n)] for i in range(i_n)]\n", "intent": "f = open(r\"temp.txt\"); \n[[c for c in line] for line in f]\n"}
{"snippet": "c= \"Snake is goint to the left wall of monitor\"\n", "intent": ".startswith(), .endswith(), .find()\n"}
{"snippet": "a = 2\nfor k in [5,3,1]:\n    if k == 3:\n        a=0\n    a = a + k\nprint(a)\n", "intent": "Do the same for the following snippet. What changes, if you indent/de-indent the fourth/fifth line by one level?\n"}
{"snippet": "pluralLambdaRDD = wordsRDD.map(lambda word: word + 's')\nprint pluralLambdaRDD.collect()\n", "intent": "** (1d) Pass a `lambda` function to `map` **\nLet's create the same RDD using a `lambda` function.\n"}
{"snippet": "shakeWordsRDD = shakespeareWordsRDD.filter(lambda x: x!='')\nshakeWordCount = shakeWordsRDD.count()\nprint shakeWordCount\n", "intent": "** (4e) Remove empty elements **\nThe next step is to filter out the empty elements.  Remove all entries where the word is `''`.\n"}
{"snippet": "pluralLambdaRDD = wordsRDD.map(lambda x: makePlural(x))\nprint pluralLambdaRDD.collect()\n", "intent": "** (1d) Pass a `lambda` function to `map` **\nLet's create the same RDD using a `lambda` function.\n"}
{"snippet": "xx = seq(-1, 2, by=.1)\n", "intent": "Consider the system of equations:\n$$y = 3x - 2$$\n$$y = -5x + 6$$\n"}
{"snippet": "numeros + [5, 6, 7, 8]\n", "intent": "Concatenando listas:\n"}
{"snippet": "lista = [1, 2, 3, 4, 5]\nlista.reverse()  \nlista\n", "intent": "`lista.reverse()` - reverte a ordem da lista in-place.\n"}
{"snippet": "numeros = [1, 2, 3, 4, 5, 6, 7]\nquadrados = [numero ** 2 for numero in numeros]  \nquadrados\n", "intent": "Usando list comprehensions fica assim:\n"}
{"snippet": "aprovados = [nota for nota in notas if nota >= 5]\naprovados\n", "intent": "Agora vamos separar as notas em duas listas, uma de aprovados (nota >= 5) e outra de reprovados\n"}
{"snippet": "for nome, pais, coordenadas in cidades:\n    print(pais)\n", "intent": "Usando o empacotamento de tuplas:\n"}
{"snippet": "mylist = []\nfor k in range(10):\n    if not (k % 2 == 0 or k % 3 == 0):\n        mylist.append(k)\nprint(mylist)\n", "intent": "The following uses *Boolean* operations. What do you think, the following snippets are doing? Check by executing. \n"}
{"snippet": "from django.views.generic import RedirectView\nRedirectView.__mro__\n", "intent": "Agora verificaremos o `RedirectView.__mro__`:\n"}
{"snippet": "from random import randint\nlista_vetores = [Vetor(x=randint(-10, 10), y=randint(-10, 10)) for _ in range(5)]\nlista_vetores\n", "intent": "O desempacotamento facilita ainda mais nossa vida se tivessemos uma lista de vetores:\n"}
{"snippet": "v += Vetor(2, 3)\nv, id(v)\n", "intent": "Se realizarmos uma soma acumulada com outro vetor:\n"}
{"snippet": "a = np.array((-1,2))\nb = np.array((3,5))\nc = a + b\nc\n", "intent": "which means that these three vectors are elements of $\\mathbb{R}^2$.\n"}
{"snippet": "conn = sqlite3.connect('data/survey.db')\ndf2 = pd.read_sql('SELECT name FROM Site', con=conn)\nconn.close()\n", "intent": "1. Write a query that select only the `name` column from the `Site` table.\n"}
{"snippet": "import pandas as pd\nconn = sqlite3.connect('data/survey.db')\ndf = pd.read_sql('SELECT name FROM Site', con=conn)\n", "intent": "1. Write a query that select only the `name` column from the `Site` table.\n"}
{"snippet": "def lev_distance(source='', target=''):\n", "intent": "The levenshtein distance calculates the number of steps (insertions, deletions or substitutions) required to go from source string to target string.\n"}
{"snippet": "edit_distance(\"apple\", \"appel\", transpositions=False, )\n", "intent": "The Damerau-Levenshtein distance allows transpositions (swap of two letters which are adjacent to each other) as well.\n"}
{"snippet": "def get_soundex(token):\n", "intent": "Let's create a function which calculates the soundex of any given string \n"}
{"snippet": "mylist = []\nfor k in range(10):\n    if (k % 2) and (k % 3):\n        mylist.append(k)\nprint(mylist)\n", "intent": "What changes, if you replace `5` by `0`?\n"}
{"snippet": "print(get_soundex(\"Aggrawal\"))\nprint(get_soundex(\"Agrawal\"))\nprint(get_soundex(\"Aggarwal\"))\nprint(get_soundex(\"Agarwal\"))\n", "intent": "Let's see soundex of 'Aggrawal', 'Agrawal', 'Aggarwal' and 'Agarwal'\n"}
{"snippet": "xrdcp root://cmseos.fnal.gov//store/user/hats/2018/JEC/JECNtuple_MiniAOD.root .\nxrdcp root://cmseos.fnal.gov//store/user/hats/2018/JEC/JECNtuple_MiniAOD_JESUncertaintyUp.root .\nxrdcp root://cmseos.fnal.gov//store/user/hats/2018/JEC/JECNtuple_MiniAOD_JESUncertaintyDown.root .\nxrdcp root://cmseos.fnal.gov//store/user/hats/2018/JEC/JECNtuple_MiniAOD_JER.root .\nxrdcp root://cmseos.fnal.gov//store/user/hats/2018/JEC/JECNtuple_MiniAOD_JERUncertaintyUp.root .\nxrdcp root://cmseos.fnal.gov//store/user/hats/2018/JEC/JECNtuple_MiniAOD_JERUncertaintyDown.root .\n", "intent": "Instead, please run these commands to copy a set of ntuples stored on FNAL EOS to your local area.\n"}
{"snippet": "d = {'clef_simple':'bonjour'}\nd['clef_simple']\n", "intent": "Au moyen de clefs et d'index, extraire 'bonjour' du dictionnaire ci dessous :\n"}
{"snippet": "f = np.array((-1,1))\ng = np.array((2,-1))\nh = 2*f + 3*g\n", "intent": "A linear combination is the vector result of a vector addition and scalar multiplication of vectors. \n"}
{"snippet": "if True:\n    print (\"C'est True !\")\n", "intent": "Regardons un exemple simple :\n"}
{"snippet": "for num in range(10):\n    print (num*2**0.2)\n", "intent": "Magnifique, dernier exemple avec une boucle for :\n"}
{"snippet": "def multiplie(liste):  \n    m = 1\n    for n in liste :\n        m *= n\n    return m\n", "intent": "____\n**Ecrire une fonction Python qui multiplie tous les nombres de la liste.**\n    Exemple de liste : [1, 2, 3, -4]\n    Sortie attendue : -24\n"}
{"snippet": "a = 1\nb = 2\nc = 3\nd = 4\ndeterminant = a*d - b*c\nif determinant != 0:\n    print('The matrix is invertible.')\nelse:\n    print('The matrix is not invertible.')\n", "intent": "**Exercise 2.** Write an `if/elif/else` statement which tests if a $2 \\times 2$ matrix $\\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}$ is invertible.\n"}
{"snippet": "print(my_list[0])\nprint(my_list[1])\nprint(my_list[2])\n", "intent": "We can access the elements in a list by its index. **But notice that the first element has index 0.**\n"}
{"snippet": "divisible_by_3(132)\n", "intent": "Check that your function works, by modifiying the following cell:\n"}
{"snippet": "my_name = 'Patrick Walls'\nprint(my_name)\n", "intent": "A string `str` is any sequence of characters and we use either single quotes `' ... '` or double quotes `\" ... \"` to construct strings.\n"}
{"snippet": "print(my_name[0])\nprint(my_name[8])\n", "intent": "We can access the characters in a string just like a list.\n"}
{"snippet": "my_first_name = 'Patrick'\nmy_full_name = 'Patrick Walls'\nprint(my_first_name in my_full_name)\n", "intent": "Finally, we can test to see if a string is contained in another string using the operator `in`.\n"}
{"snippet": "turing_machine(list(\"aaa\"), ak_program, verbose=True)\n", "intent": "We can verify that this program does the right thing with a few test cases:\n"}
{"snippet": "name = 'Patrick Walls'\nprint(name[4])\nprint(name[-1])\nprint(name[2:7])\nprint(name[2:10:2])\n", "intent": "And the same indexing and slicing works for strings:\n"}
{"snippet": "len([0,1,2,3,4,5,6,7,8,9])\n", "intent": "The `len` function simply returns the length of a list or string!\n"}
{"snippet": "squares = [1,4,9,16,25,36,49]\nprint(squares)\nsquares[1] = 'four'\nprint(squares)\n", "intent": "We can reassign an item in a list:\n"}
{"snippet": "squares.append(64)\nprint(squares)\n", "intent": "We can also append an item to a list using the **append method**:\n"}
{"snippet": "word = 'mathematics'\nprint(word)\n", "intent": "Notice what happens when we try to change a character in a string:\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Write a function `print_factors(n)` which prints out a list of all factors of a number.\n"}
{"snippet": "n = 121\nN = int(n**0.5)\nfor m in range(1,N+1):\n    if (n % m == 0):\n        print(n,'is divisible by',m)\n    else:\n        print(n,'is not divisible by',m)\n", "intent": "**Exercise 1.** Write a `for` loop which tests if an integer $n$ is divisible by any integer $m \\leq \\sqrt{n}$.\n"}
{"snippet": "'a' in ['a','b','c']\n", "intent": "**Exercise 3.** Given a string `s`, write a `for` loop which counts the number of vowels in `s`. Use the operator `in`. For example:\n"}
{"snippet": "def squared(x):\n    return x ** 2\n", "intent": "For example, let's define a function which takes one numerical input $x$ and return the value $x^2$.\n"}
{"snippet": "a = as_col_vectors_df.a\n", "intent": "Let's bring in `a` from before. \n"}
{"snippet": "def mean(x,y):\n    return (x+y)/2\n", "intent": "Now let's define a function which takes two numeical inputs $x$ and $y$ and returns the mean $(x+y)/2$.\n"}
{"snippet": "def last(word):\n    return word[-1]\n", "intent": "Let's define a function which takes a string (or a list) and returns the last letter in the string (or the last item in the list).\n"}
{"snippet": "x_n = 1\nn = 0\nwhile x_n <= 1.6:\n    print('n =',n,', x_n =',x_n)\n    x_n = (1 + x_n) ** 0.5\n    n = n + 1\nprint('n =',n,', x_n =',x_n)\n", "intent": "Use a `while` loop to find the smallest $n$ such that $x_n > 1.6$:\n"}
{"snippet": "N = 10\nfib_list = [1,1]\nfor n in range(2,N+1):\n    next_fib = fib_list[n-1] + fib_list[n-2]\n    fib_list.append( next_fib )\nprint(fib_list)\n", "intent": "**Example.** Construct the list of Fibonacci numbers (up to $x_{10}$ where $x_0 = 1$ and $x_1 = 1$ and $x_n = x_{n-1} + x_{n-2}$).\n"}
{"snippet": "def factorial(n):\n    \"Compute the factorial n! of a positive integer.\"\n    product = 1\n    if n == 0 or n == 1:\n        return product\n    else:\n        for d in range(2,n+1):\n            product = product * d\n        return product\nprint(factorial(5))\n", "intent": "**Example.** Write a function which takes an integer $n$ and returns the factorial $n!$\n"}
{"snippet": "print_factors(28)\nprint_factors(496)\nprint_factors(8128)\nprint_factors(13)\nprint_factors(127)\nprint_factors((2**19-1))\n", "intent": "Test with the following lines. (Does this fulfill your expectations?)\n"}
{"snippet": "len(pythagorean(500))\n", "intent": "We can use the function `len` to find the number of Pythagorean triples $[a,b,c]$ with $c \\leq 500$.\n"}
{"snippet": "for triple in pythagorean(85):\n    if triple[2] == 85:\n        print(triple)\n", "intent": "We can loop over the list of triples $[a,b,c]$ with $c \\leq 85$ to find the triples where $c = 85$\n"}
{"snippet": "pythagorean(85)[-10:]\n", "intent": "Or we could just look at the last 10 triples in the list `pythagorean(85)` and pick out the ones with $c = 85$\n"}
{"snippet": "np.linalg.norm(a) == np.linalg.norm(h)\n", "intent": "`a` and `h` do not have the same magnitude. \n"}
{"snippet": "squares_list = []\nfor n in range(1,11):\n    squares_list.append( n ** 2 )\nprint(squares_list)\n", "intent": "We can create a list of squares $n^2$ for $1 \\leq n \\leq 10$ using a for loop and the append method:\n"}
{"snippet": "squares = [ i ** 2 for i in range(1,11) ]\nprint(squares)\n", "intent": "Python has a built-in syntax called a **list comprehension** which does the same thing in one beautifully succinct line:\n"}
{"snippet": "def is_prime(n):\n    \"Determine if the positive integer n is a prime.\"\n    if n <= 1:\n        return False\n    for d in range(2,round( n** 0.5 ) + 1):\n        if n % d == 0:\n            return False\n    return True\n", "intent": "**Example.** Construct the list of primes from $1$ to $100$ using a list comprehension (and a function `is_prime` which tests if a number is prime).\n"}
{"snippet": "def selection_sort(L):\n    for i in range(0,len(L)):\n        minimum = min(L[i:])\n        if L[i] != minimum:\n            min_index = L[i:].index(minimum) + i\n            L[min_index] = L[i]\n            L[i] = minimum\n    return L\n", "intent": "Write a function called `selection_sort` which takes a list of integers and returns the sorted list using the selection sort algorithm.\n"}
{"snippet": "[ n**2 for n in range(1,11) ]\n", "intent": "A list comprehension is Python's simple syntax for creating lists. For example, we can easily construct a list of squares:\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Modify this function to also calculate the sum of its factors (exclude the number itself from the list of factors)\n"}
{"snippet": "[ [a,b,c] for a in range(1,4) for b in range(1,4) for c in range(1,4) if (a != b and b != c and a != c) ]\n", "intent": "We can use more than one `for` loop in a list comprehension. For example, let's create the list of all permutations of $\\{ 1,2,3 \\}$:\n"}
{"snippet": "[ [ divisor for divisor in range(1,n+1) if n % divisor == 0 ] for n in range(1,21) ]\n", "intent": "We can write nested list comprehensions. For example, let's create the list of lists of divisors for integers $n \\leq 20$:\n"}
{"snippet": "a = np.array([1,2,3])\nprint(a)\n", "intent": "Use the function `np.array` to create a NumPy array from a Python list of numbers:\n"}
{"snippet": "initialize_2d_plot(-2,3,-2,3)\ndraw_vector(a)\ndraw_vector((-1,0))\ndraw_vector((0,2),tail=(-1,0))\n", "intent": "The magnitude of a 2-d vector is something you have certainly seen before.\nCreate component vectors along the $x$ and $y$ axes.\n"}
{"snippet": "A = np.array([[[1,2],[3,4]],[[5,6],[7,8]],[[9,10],[11,12]]])\nprint(A)\n", "intent": "We can make $n$-dimensional arrays from nested Python lists. For example, the following is a $3$-dimensional array:\n"}
{"snippet": "a2 = np.zeros(7)\nprint(a2)\n", "intent": "The functions `np.zeros` and `np.ones` generate arrays filled with 0's and 1's respectively. We can specify the size of the array by the argument.\n"}
{"snippet": "Id = np.eye(4)\nprint(Id)\n", "intent": "The function `np.eye` generates an identity matrix and the argument is the size of the matrix.\n"}
{"snippet": "arr = np.array([ [ i+j for j in range(0,20) ] for i in range(0,10) ])\nprint(arr)\n", "intent": "**Exercise.** Create a $10 \\times 20$ NumPy array where the $(i,j)$ entry is the Python list $[i,j]$. (Remember, the indices $i$ and $j$ start at 0.)\n"}
{"snippet": "for _ in range(0,10):\n    print(np.random.randn())\n", "intent": "The function `numpy.random.randn` works the same way and generates a NumPy array with entries sampled from a standard normal distribution.\n"}
{"snippet": "def is_prime(number):\n    i = 0 \n    if i % 2 == 0: \n        return 'prime' + str(number)\n    else:\n        return 'not prime' + str(number)\n    raise NotImplementedError()\n    return answer\n", "intent": "**Please make sure that your outputs are the correct spelling and case as described in the question.**\n"}
{"snippet": "print( b1 * b2 )\nprint( b1 / b2 )\n", "intent": "In the same way, multiplication and division of arrays is calculated element by element:\n"}
{"snippet": "print( b1 ** 2)\nprint( b2 ** 0.5 )\nprint( b1 ** b2 )\n", "intent": "And exponents are applied elementwise as well:\n"}
{"snippet": "vol_para([1,1,0],[0,1,1],[1,0,1])\n", "intent": "Note that the function is written in a way that it will accept Python lists of length 3 and compute the corresponding volume.\n"}
{"snippet": "length(a) == length(h)\n", "intent": "`a` and `h` have the same length. \n"}
{"snippet": "np.dot( X[0,:] , X[1,:] )\n", "intent": "Let's check if $\\mathbf{x}_1$ and $\\mathbf{x}_2$ are perpendicular:\n"}
{"snippet": "X[2,:] = V[2,:] - proj(V[2,:],X[0,:]) - proj(V[2,:],X[1,:])\nX[3,:] = V[3,:] - proj(V[3,:],X[0,:]) - proj(V[3,:],X[1,:]) - proj(V[3,:],X[2,:])\nprint(X)\n", "intent": "Success! Let's proceed with the next two steps:\n"}
{"snippet": "for i in [0,1,2,3]:\n    X[i,:] = X[i,:] / la.norm(X[i,:])\nprint(X)\n", "intent": "Finally, let's normalize the vectors $\\mathbf{x}_i$ to obtain an orthonormal basis:\n"}
{"snippet": "Q = np.matrix(X)\nI = Q * Q.T\nprint(I)\n", "intent": "To check our work, we turn the NumPy array $X$ into a NumPy matrix $Q$ and compute $Q Q^T$. If the rest is the identity, then we have succeeded!\n"}
{"snippet": "dta.select_dtypes(['category']).describe()\n", "intent": "We could do the same for the categorical types.\n"}
{"snippet": "def prime_palindromes(number):\n    number_list = []\n    for i in range(10**(number-1), 10**number):\n            return True \n", "intent": "**Please make sure that your function is returning a list of these values.** \n**Make sure the list is in ascending order**\n"}
{"snippet": "result = grouper.dba_name.value_counts()\n", "intent": "You can access the variables on this object, the same as a DataFrame, and any code called will execute within the groups.\n"}
{"snippet": "with pd.option_context('max.rows', 15):\n    print(result[\"Pass\"].sort_values(ascending=False))\n", "intent": "Take a closer look above. Looks like we have some more data cleaning to do.\n"}
{"snippet": "dta.loc[(dta.risk == \"Risk 1 (High)\") | (dta.risk == \"Risk 1 (Medium)\")].head()\n", "intent": "Always using indexing can be verbose, however. You may need compound statements, for example.\n"}
{"snippet": "norm(a, type=\"2\") == norm(h, type=\"2\") \n", "intent": "`a` and `h` do not have the same magnitude. \n"}
{"snippet": "np.sort(\n    dta.violations\n        .str.extract(\"(\\d+)(?=\\.)\", expand=False)\n        .astype(int)\n        .unique()\n).shape\n", "intent": "So how many unique violations do we have?\n"}
{"snippet": "group_key = list(grouper.groups.keys())[0]\n", "intent": "Ok, we might ask, \"now what?\" Remember the trick to pull out groups? Let's use it to work with something we can think about.\n"}
{"snippet": "(group.shift(1).results == 'Fail').cumsum()\n", "intent": "If we take the cumulative sum of this, we'll have an accurate picture of previous failures.\n"}
{"snippet": "n = len(names)\nfor i in range(n):\n    print (names[i])\n", "intent": "Write a `for`-loop that prints each name:\n1. Using indexing\n1. Using iteration on the list\n"}
{"snippet": "for i, color in enumerate(colors):\n    ratio = ratios[i]\n    percentage = ratio*100\n    print(\"{}% {}\".format(percentage, color))\n", "intent": "Write a `for`-loop that prints\n    percentage color \ne.g.\n    20.0% red\n1. Using `enumerate`\n2. Using `zip`\n"}
{"snippet": "def coded_message(message):\n    codedMessage = ''\n", "intent": "Write a function to take a message as a string and encode it using the method explained above.\n"}
{"snippet": "my_favs_doubled = [2*number for number in my_favorite_numbers]\nmy_favs_doubled\n", "intent": "Write a list comprehension to create a list called `my_favs_doubled` that doubles each number in `my_favorite_numbers`.\n"}
{"snippet": "numbers = list(range(1,11))\nnumbers\n", "intent": "Write a list comprehension that creates a list of tuples of a number and its square e.g. `(1,1)`, `(2,4)` for the numbers from 1 to 10.\n"}
{"snippet": "COLORS = [color.upper() for color in colors]\nCOLORS\n", "intent": "Write a list comprehension called `COLORS` that converts the list `colors` to uppercase strings.\n"}
{"snippet": "a_x = a[1]\na_y = a[2]\nx = c(a_x, 0)\ny = c(0, a_y)\n", "intent": "The magnitude of a 2-d vector is something you have certainly seen before.\nCreate component vectors along the $x$ and $y$ axes.\n"}
{"snippet": "type(x), type(y), type(z)\n", "intent": "Display the types of `x`, `y`, and `z`.\n"}
{"snippet": "next(counter),next(counter),next(counter)\n", "intent": "What are the `next` three values of `counter`?\n"}
{"snippet": "fib = Fib()\nlist(islice(fib, 0, 10))\n", "intent": "Use `islice` to generate a list of the first ten Fibonacci numbers.\n"}
{"snippet": "abstract AbstractStudent <: AbstractPerson\n", "intent": "You can define type heirarchies on abstract types. See the beautiful explanation at: http://docs.julialang.org/en/release-0.5/manual/types/\n"}
{"snippet": "using DifferentialEquations\nconst a = 1.0; const b = 2.0\nconst c = 1.5; const d = 1.25\nf = function (t,u,du) \n    du[1] = a*u[1] - b*u[1]*u[2]\n    du[2] = -c*u[2]+ d*u[1]*u[2]\nend\nu0 = [1.0;1.0]; tspan = [0.0;10.0]\nprob = ODEProblem(f,u0)\n", "intent": "$$\\begin{align}\nx' &= ax - bxy\\\\\ny' &= -cy + dxy\n\\end{align}$$\n"}
{"snippet": "coded_message('WELL DONE THIS IS CORRECT') \n", "intent": "'TIC.AHSOMGI.DEESAES...DS.'\n"}
{"snippet": "for key,val in dt.items():\n    print(key,val)\nfor key,val in movie_counter.items():\n    print(key,val)\n", "intent": "Once all lines are read, we want to print the dictionary, which can be done by iterating its key: value pairs.\n"}
{"snippet": "movie_counter[1980] += 5\nmovie_counter[2015] += 1\nmovie_counter.keys()\n", "intent": "You can get the keys (the years) by using `.keys()` function. \n"}
{"snippet": "alist = [23,3,5,4,2,1,1,0,1000]\nprint(min(alist))\nprint(max(alist))\n", "intent": "and you have convenient functions like [`min()`](https://docs.python.org/2/library/functions.html\n"}
{"snippet": "np.linalg.solve(np.array([[3]]), np.array([6]))\n", "intent": "We can solve systems of linear equations in Python using the `numpy.linalg.solve` function.\nWhat does the Python function `numpy.linalg.solve` do?\n"}
{"snippet": "decade_to_r = {}\ndecade = '1980s'\nif decade not in decade_to_r:\n    decade_to_r[decade] = []\ndecade_to_r[decade].append(7.5)\nprint(decade_to_r)\n", "intent": "We then use a dictionary to store rating information:\n- key: decade\n- value: a list of ratings of movies released in the decade\n"}
{"snippet": "from collections import defaultdict\ndec_to_r = defaultdict(list)\ndec_to_r['1980s'].append(7.5)\ndec_to_r['1980s'].append(9.1)\nprint(dec_to_r)\nprint(dec_to_r['1970s'])\n", "intent": "Python automates the job above by using [defaultdict](https://docs.python.org/2/library/collections.html\n"}
{"snippet": "a = np.arange(6)                         \nprint(a)\n", "intent": "From https://docs.scipy.org/doc/numpy/user/quickstart.html\n"}
{"snippet": "a = np.array([[1,3],[5,7]])\nprint a\nb = np.array([[2,4],[6,8]])\nprint b\na + b\n", "intent": "Element-wise Matrix Operations\n"}
{"snippet": "create_fractal(-2.0, -1.7, -0.1, 0.1, image, 20) \nimshow(image)\nshow()\n", "intent": "You can play with the coordinates to zoom in on different regions in the fractal.\n"}
{"snippet": "suits = [\"clubs\", \"diamonds\", \"hearts\", \"spades\"]\n", "intent": "A deck of playing cards typically has a **`suit`** and a **`rank`**.\nThe possible values for `suit`s are:\n"}
{"snippet": "twitter_samples.fileids()\n", "intent": "First let's check the common `fileids` method of `nltk` corpora:\n"}
{"snippet": "useless_words = nltk.corpus.stopwords.words(\"english\") + list(string.punctuation)\n", "intent": "First step we define a list of words that we want to filter out of our dataset:\n"}
{"snippet": "words = []\nfor dataset in [\"positive_tweets.json\", \"negative_tweets.json\"]:\n    for tweet in twitter_samples.tokenized(dataset):\n        words.extend(tweet)\n", "intent": "Before performing sentiment analysis, let's first inspect the dataset a little bit more by creating a list of all words.\n"}
{"snippet": "X <- rbind(c(1,-3.1),c(1,-2.1),c(1,1.8),c(1,0.5),c(1,-1.1))\ny <- c(4.2,2.4,-2.5,-1.3,1.9)\n", "intent": "We will solve it exactly as previously. \n"}
{"snippet": "most_common_words = None\n", "intent": "It also has a `most_common()` method to access the words with the higher count:\n"}
{"snippet": "split = int(len(positive_features) * 0.8)\n", "intent": "Let's use 80% of the data for training, the rest for validation:\n"}
{"snippet": "training_accuracy = None\n", "intent": "Let's check the accuracy on the training and on the test sets, make sure to turn those into a percent value\n"}
{"snippet": "Twitter=pickle.load(open('../../secret_twitter_credentials.pkl','rb'))\n", "intent": "Make sure to select the relative path to the `secret_twitter_credentials.pkl` file:\n"}
{"snippet": "local_trends = twitter_api.trends.place(_id=LOCAL_WOE_ID)\n", "intent": "Let's use the twitter API to retrieve trends\n"}
{"snippet": "ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"jack\", \"queen\", \"king\", \"ace\"]\n", "intent": "And the possible values for `rank`s (in **order of their strength**) are:\n"}
{"snippet": "popular_tweets = None\n", "intent": "Use the `sorted` function to sort retweets and get the 10 more popular, we'd like to have the more popular tweet first.\n"}
{"snippet": "most_common_words = None\nmost_common_words = counter.most_common()[:10]\n", "intent": "It also has a `most_common()` method to access the words with the higher count:\n"}
{"snippet": "training_accuracy = None\ntraining_accuracy = nltk.classify.util.accuracy(classifier, positive_features[:split]+negative_features[:split])*100\n", "intent": "Let's check the accuracy on the training and on the test sets, make sure to turn those into a percent value\n"}
{"snippet": "f <- c(-1,1)\ng <- c(2,-1)\nh <- 2*f + 3*g\nh\n", "intent": "A linear combination is the vector result of a vector addition and scalar multiplication of vectors.\n"}
{"snippet": "popular_tweets = None\npopular_tweets = sorted(retweets, reverse=True)[:10]\n", "intent": "Use the `sorted` function to sort retweets and get the 10 more popular, we'd like to have the more popular tweet first.\n"}
{"snippet": "- [ ] The maximum salaried employee.\n", "intent": "- [x] The maximum salaried employee.\n"}
{"snippet": "import numpy as np\nimport math\ndef entropy(p_seq):\n    return -sum(p*np.log2(p) for p in p_seq if p>0)\nentropy([1/4,1/2,1/8,1/8])\n", "intent": "$H(x)=-\\sum{p(x_i)log(p(x_i))}$\n"}
{"snippet": "def cross_entropy(p_seq, q_seq):\n    return -sum(p*np.log2(q) for (p,q) in zip(p_seq, q_seq) if q>0)\np_seq=[1/4,1/8,1/2,1/8]\nq_seq=[1/4,1/4,1/4,1/4]\ncross_entropy(p_seq, q_seq)    \n", "intent": "$H(p,q)=-\\sum_ip_i\\text{log}q_i$\n"}
{"snippet": "def relative_entropy(p_seq, q_seq):\n    return sum(p*np.log(p/q) for (p,q) in zip(p_seq, q_seq) if q>0)\np_seq=[1/4,1/8,1/2,1/8]\nq_seq=[1/4,1/4,1/4,1/4]\nrelative_entropy(p_seq, q_seq)    \n", "intent": "$D(p||q)=-\\sum{p(x_i)log({p(x_i)/q(x_i)})}$\n"}
{"snippet": "queen_of_h = Card(rank = 12, suit = 2)\nstr(queen_of_h) == 'queen of hearts'\n", "intent": "***\n<a id='tests_q1'></a>\n***TESTS***: <br>\nMake sure that the following tests all give a `True` result:\n"}
{"snippet": "def cross_entropy(p_seq, q_seq):\n    return -sum(q* math.log(p)/math.log(2) for (p,q) in zip(p_seq,q_seq) if p>0)\np_seq=[1/4,1/8,1/2,1/8]\nq_seq=[1/4,1/4,1/4,1/4]\nprint('cross entropy of q with respect to p:',cross_entropy(p_seq,q_seq))\nprint('cross entropy of p with respect to q:',cross_entropy(q_seq,p_seq))\n", "intent": "$H(p,q)=-\\sum_ip_i\\text{log}q_i$\n"}
{"snippet": "print(\"dtype:\", x3.dtype)\n", "intent": "Another useful attribute is the ``dtype``, the data type of the array :\n"}
{"snippet": "L2 = [str(c) for c in L]\nL2\n", "intent": "Or, similarly, a list of strings:\n"}
{"snippet": "turing_machine([\"b\", \"a\"], akbm_program)\n", "intent": "You can use the provided `turing_machine` function to see what your program halts on for a given input. For example:\n"}
{"snippet": "np.array([1, 4, 2, 5, 3])\n", "intent": "First, we can use ``np.array`` to create arrays from Python lists:\n"}
{"snippet": "np.array([1, 2, 3, 4], dtype='float32')\n", "intent": "If we want to explicitly set the data type of the resulting array, we can use the ``dtype`` keyword:\n"}
{"snippet": "np.zeros(10, dtype=int)\n", "intent": "Especially for larger arrays, it is more efficient to create arrays from scratch using routines built into NumPy.\nHere are several examples:\n"}
{"snippet": "x = np.array([1,2,3])\nprint(np.all(x)) \nx = np.array([1,0,3])\nprint(np.all(x))\n", "intent": "Q1. Let x be an arbitrary array. Return True if none of the elements of x is zero. Remind that 0 evaluates to False in python.\n"}
{"snippet": "x = np.array([1,0,0])\nprint (np.any(x))\nx = np.array([0,0,0])\nprint (np.any(x))\n", "intent": "Q2. Let x be an arbitrary array. Return True if any of the elements of x is non-zero.\n"}
{"snippet": "deck = [Card(r, s) for r in range(13) for s in range(4)]\n", "intent": "***\nNow lets create an `array` representing an entire deck of **`card`**s:\n"}
{"snippet": "x = np.array([1, 0, np.nan, np.inf])\nprint (np.isinf(x))\n", "intent": "Q4. Predict the result of the following code.\n"}
{"snippet": "x = np.array([1, 0, np.nan, np.inf])\nprint (np.isnan(x))\n", "intent": "Q5. Predict the result of the following code.\n"}
{"snippet": "x = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])\nprint (np.iscomplex(x))\n", "intent": "Q6. Predict the result of the following code.\n"}
{"snippet": "sqrt(a[1]**2 + a[2]**2)\n", "intent": "This computation has a fancy name, the $\\ell_2$-norm. \nWe just saw this above with the function `norm` with the argument `type=\"2\"`.\n"}
{"snippet": "print (np.isscalar(3))\nprint (np.isscalar([3]))\nprint (np.isscalar(True))\n", "intent": "Q8. Predict the result of the following code.\n"}
{"snippet": "print (np.logical_and([True, False], [False, False]))\nprint (np.logical_or([True, False, True], [True, False, False]))\nprint (np.logical_xor([True, False, True], [True, False, False]))\nprint (np.logical_not([True, False, 0, 1]))\n", "intent": "Q9. Predict the result of the following code.\n"}
{"snippet": "print (np.allclose([3], [2.999999]))\nprint (np.array_equal([3], [2.999999]))\n", "intent": "Q10. Predict the result of the following code.\n"}
{"snippet": "x = np.array([4, 5])\ny = np.array([2, 5])\nprint (np.greater(x, y))\nprint (np.greater_equal(x, y))\nprint (np.less(x, y))\nprint (np.less_equal(x, y))\n", "intent": "Q11. Write numpy comparison functions such that they return the results as you see.\n"}
{"snippet": "print (np.equal([1, 2], [1, 2.000001]))\nprint (np.isclose([1, 2], [1, 2.000001]))\n", "intent": "Q12. Predict the result of the following code.\n"}
{"snippet": "import random\nrandom.shuffle(deck)\n", "intent": "Let's shuffle the cards a bit:\n"}
{"snippet": "print(np.random.seed(10))\n", "intent": "Q7. Assign number 10 to the seed of the random generator so that you can get the same value next time.\n"}
{"snippet": "x = np.array([1, 2, 6, 4, 2, 3, 2])\nout, indices = np.unique(x, return_inverse=True)\nprint (\"unique elements =\", out)\nprint (\"reconstruction indices =\", indices)\nprint (\"reconstructed =\", out[indices])\n", "intent": "Q1. Get unique elements and reconstruction indices from x. And reconstruct x.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1])\nprint (np.in1d(x, y))\n", "intent": "Q2. Create a boolean array of the same shape as x. If each element of x is present in y, the result will be True, otherwise False.\n"}
{"snippet": "A = matrix(c(-3,5,1,1),ncol = 2)\nb = c(-2,6)\n", "intent": "And we can define these in R in the following way:\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nprint (np.setdiff1d(x, y))\n", "intent": "Q4. Find the unique elements of x that are not present in y.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nout1 = np.setxor1d(x, y)\nout2 = np.sort(np.concatenate((np.setdiff1d(x, y), np.setdiff1d(y, x))))\nprint (out1)\nprint (out2)\n", "intent": "Q5. Find the xor elements of x and y.\n"}
{"snippet": "x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\nout1 = np.union1d(x, y)\nout2 = np.sort(np.unique(np.concatenate((x, y))))\nprint (out1)\nprint (out2)\n", "intent": "Q6. Find the union of x and y.\n"}
{"snippet": "x = np.array([[1,4],[3,1]])\nout = np.sort(x, axis=1)\nprint (out)\n", "intent": "Q1. Sort x along the second axis.\n"}
{"snippet": "surnames = ('Hertz',    'Galilei', 'Hertz')\nfirst_names = ('Heinrich', 'Galileo', 'Gustav')\nprint (np.lexsort((first_names, surnames)))\n", "intent": "Q2. Sort pairs of surnames and first names and return their indices. (first by surname, then by name).\n"}
{"snippet": "[print(card) for card in deck];\n", "intent": "Let's take a peek at our deck of cards:\n"}
{"snippet": "x = np.random.permutation(10)\nprint (x)\nout = np.partition(x, 5)\nprint (out)\n", "intent": "Q4. Create an array such that its fifth element would be the same as the element of sorted x, and it divide other elements by their value.\n"}
{"snippet": "x = np.random.permutation(10).reshape(2, 5)\nprint (\"x =\", x)\nprint (\"maximum values =\", np.max(x, 1))\nprint (\"max indices =\", np.argmax(x, 1))\nprint (\"minimum values =\", np.min(x, 1))\nprint (\"min indices =\", np.argmin(x, 1))\n", "intent": "Q6. Get the maximum and minimum values and their indices of x along the second axis.\n"}
{"snippet": "x = np.array([[np.nan, 4], [3, 2]])\nprint (\"maximum values ignoring NaNs =\", np.nanmax(x, 1))\nprint (\"max indices =\", np.nanargmax(x, 1))\nprint (\"minimum values ignoring NaNs =\", np.nanmin(x, 1))\nprint (\"min indices =\", np.nanargmin(x, 1))\n", "intent": "Q7. Get the maximum and minimum values and their indices of x along the second axis, ignoring NaNs.\n"}
{"snippet": "XTX <- t(X)%*%X\nXTy <- t(X)%*%y\nbeta <- solve(XTX, XTy)\n", "intent": "<img src=\"https://pics.me.me/life-finds-a-way-22332197.png\" width=300px>\n"}
{"snippet": "x = np.array([[1, 2, 3], [1, 3, 5]])\nprint (np.flatnonzero(x))\nprint(x.ravel().nonzero())\n", "intent": "Q9. Get the indices of the elements that are bigger than 2 in the flattend x.\n"}
{"snippet": "x = np.arange(-5, 4).reshape(3, 3)\nprint (np.where(x <0, 0, x))\n", "intent": "Q10. Check the elements of x and return 0 if it is less than 0, otherwise the element itself.\n"}
{"snippet": "x = [[0,1,7,0,0],[3,0,0,2,19]]\nprint (np.count_nonzero(x))\nprint(len(x[x!=0]))\n", "intent": "Q12. Get the number of nonzero elements in x.\n"}
{"snippet": "try:\n    for i in ['a','b','c']:\n        print i**2\nexcept:\n    print 'Something went wrong!'\n", "intent": "Handle the exception thrown by the code below by using try and except blocks.\n"}
{"snippet": "x = 5\ny = 0\ntry:\n    z = x/y\nexcept:\n    print 'Something went wrong'\nfinally:\n    print 'All Done!'\n", "intent": "Handle the exception thrown by the code below by using **try** and **except** blocks. Then use a **finally** block to print 'All Done.'\n"}
{"snippet": "myHand = Hand()\nfirst_card = Card(rank = 11, suit = 3)\nsecond_card = Card(rank = 12, suit = 2)\nthird_card = Card(rank = 9, suit = 1)\nfourth_card = Card(rank = 3, suit = 0)\nmyHand.deal(first_card) \nmyHand.deal(second_card) \nmyHand.deal(third_card) \nmyHand.deal(fourth_card) \nstr(myHand.cards[0]) == \"jack of spades\"\n", "intent": "***\n***TESTS***: <br>\nMake sure to check your code using the following tests (don't change the code in these cells):\n"}
{"snippet": "def ran_check(num,low,high):\n    for num in range(2,num):\n        print 'Number is in range'\nran_check(10,2,10)\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "def ran_bool(num,low,high):\n    for num in range(2,num):\n        print 'True'\nran_bool(10,0,100)\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "for x in range(0,11):\n    if x % 2 ==0:\n        print x\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "titanic = read.csv(\"train.csv\")\n", "intent": "Make sure you assign it to the variable `titanic`.\n"}
{"snippet": "class Line(object):\n    def __init__(self,coor1,coor2):\n        self.coor1 = coor1\n        self.coor2 = coor2\n    def distance(self):\n        pass\n    def slope(self):\n        return (((self.coor2[1]) - (self.coor1[1]))/ ((self.coor2[0]) - (self.coor1[0])))\n", "intent": "Fill in the Line class methods to accept coordinate as a pair of tuples and return the slope and distance of the line.\n"}
{"snippet": "s=\"Hi there Sam!\"\nlist = s.split()\nprint(list)\n", "intent": "** Split this string:**\n    s = \"Hi there Sam!\"\n**into a list. **\n"}
{"snippet": "lst = [1,2,[3,4],[5,[100,200,['hello']],23,11],1,7]\nlst[3][1][2][0]\n", "intent": "** Given this nested list, use indexing to grab the word \"hello\" **\n"}
{"snippet": "d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}\nd['k1'][3]['tricky'][3]['target'][3]\n", "intent": "** Given this nested dictionary grab the word \"hello\". Be prepared, this will be annoying/tricky **\n"}
{"snippet": "l = [1,2,3,4]\nl[2] = \"NEW\"\nprint(l)\n", "intent": "** What is the main difference between a tuple and a list? **\n"}
{"snippet": "card1 = Card(13, 3)\ncard2 = Card(5, 3)\ncard3 = Card(9, 3)\ncard4 = Card(12, 3)\ncard5 = Card(8, 3)\nis_flush([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that your code passes the following tests:\n"}
{"snippet": "def add2(x):\n    y = x + 2\n    return y\n", "intent": "Again, we don't use {}, but just indent the lines that are part of the function.\n"}
{"snippet": "square = lambda x: x*x\n", "intent": "We can also define simple functions with lambdas:\n"}
{"snippet": "figure()\nx = linspace(1, 6, 100)\nplot(x, [gamma(x_) for x_ in x], label='$\\Gamma(x)$', color='blue')\nscatter(range(1, 7), [factorial(x_-1) for x_ in range(1,7)], color='green', label='$(x-1)!$')\nvlines(range(1, 7), 0, [factorial(x_-1) for x_ in range(1,7)], color='green')\nlegend();\n", "intent": "Below, I compare the _Gamma_ function to the _factorial_ function\n"}
{"snippet": "stop('Not implemented.')\n", "intent": "1. Assign the Passenger IDs to be the `rownames` of the dataframe.\n2. Drop `PassengerID` and `Name`\n"}
{"snippet": "using DifferentialEquations\np = (1.0,2.0,1.5,1.25) \nf = function (du,u,p,t) \n    a,b,c,d = p\n    du[1] = a*u[1] - b*u[1]*u[2]\n    du[2] = -c*u[2]+ d*u[1]*u[2]\nend\nu0 = [1.0;1.0]; tspan = (0.0,10.0)\nprob = ODEProblem(f,u0,tspan,p);\n", "intent": "$$\\begin{align}\nx' &= ax - bxy\\\\\ny' &= -cy + dxy\n\\end{align}$$\n"}
{"snippet": "g = function (du,u,p,t)\n    du[1] = .5*u[1] \n    du[2] = .1*u[2]\nend\nprob = SDEProblem(f,g,u0,tspan,p)\nsol = solve(prob,dt=1/2^4)\nplot(sol)\n", "intent": "Also included are problems for stochastic differential equations\n"}
{"snippet": "prime = 19\nprint(99 % prime)\nprint(456*444 % prime)\nprint(9**77 % prime)\n", "intent": "Find the modulo 19 of these numbers:\n* 99\n* \\\\(456 \\cdot 444\\\\)\n* \\\\(9^{77}\\\\)\n(note python uses ** to do exponentiation)\n"}
{"snippet": "print (totalPurchases)\n", "intent": "Next we will compute P(E|F) for some age group, let's pick 30 year olds again:\n"}
{"snippet": "def countDog(s):\n    f=s.split()\n    i=0\n    for x in s.lower().split():\n        if 'dog' == x:\n            i+=1\n    return i\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "card1 = Card(8, 3)\ncard2 = Card(9, 3)\ncard3 = Card(10, 3)\ncard4 = Card(11, 3)\ncard5 = Card(12, 3)\nis_straight([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that the following tests all give a `True` result:\n"}
{"snippet": "print(glm_perf1.auc())\nprint(glm_perf2.auc())\n", "intent": "Instead of printing the entire model performance metrics object, it is probably easier to print just the metric that you are interested in comparing.\n"}
{"snippet": "a, result = 10, \"\"\nif a % 2 == 0:\n    result = \"odd\"\nelse:\n    result = \"even\"\nresult\n", "intent": ">- syntx (True) if (condition) else (False)\n"}
{"snippet": "def sum_func(x, y):\n    return x + y\n", "intent": "- anonymous function\n"}
{"snippet": "table(titanic$Survived)\n", "intent": "The target class, `Survived`, is unevenly distributed.\n"}
{"snippet": "from ecc import G\nfrom helper import double_sha256, encode_base58, hash160\ncomponents = (\n    (True, 888**3),\n    (False, 321),\n    (False, 4242424242),\n)\n", "intent": "```\ncompressed, 888**3\nuncompressed, 321\nuncompressed, 4242424242\n```\n"}
{"snippet": "_ = ok.grade('q01')\n", "intent": "Be sure to name your results `q01.csv`.\n"}
{"snippet": "_ = ok.grade('q09')\n", "intent": "Be sure to name your results `q09.csv`.\n"}
{"snippet": "_ = ok.grade('q10')\n", "intent": "Be sure to name your results `q10.csv`.\n"}
{"snippet": "def isUnique(string):\n    return len(set(string)) == len(string)\n", "intent": "`HashTable`\n`bitVector`\n`nLogn`\n"}
{"snippet": "card1 = Card(8, 3)\ncard2 = Card(9, 3)\ncard3 = Card(10, 3)\ncard4 = Card(11, 3)\ncard5 = Card(12, 3)\nfour_of_a_kind([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that your code passes the following tests:\n"}
{"snippet": "def rotated(matrix):\n    N = len(matrix)\n    nLayers = int(N / 2)\n    for i in range(nLayers):\n        for j in range(i, N - 1 -i):\n            matrix[i][j], matrix[j][N - i - 1], matrix[N - i - 1][N - j - 1], matrix[N - j - 1][i] = matrix[N - j - 1][i], matrix[i][j], matrix[j][N - i - 1], matrix[N - i - 1][N - j - 1]\n    return matrix\n", "intent": "Supposing clockwise\n"}
{"snippet": "var twoSum =(numbers, target) => {\n    let [i, j] = [0, numbers.length - 1]\n    while (i < j) {\n        const sum = numbers[i] + numbers[j]\n        if (sum < target) i++\n        else if (sum > target) j--\n        else return [i+1, j+1]\n    }\n}\n", "intent": "O(n) runtime, O(1) space\nTwo pointers\n"}
{"snippet": "print(dir(test_string))\n", "intent": "There are far too many methods to remember for all the python objects that you will encounter. To get all the methods use the **dir** function.\n"}
{"snippet": "stop('Not implemented.')\n", "intent": "Create a vector called `no_survivors` that is a list of predictions that no one survived.\n"}
{"snippet": "replace_string = 'replace each letter a in this string with A'\nreplace_string.replace('a',\"A\")\n", "intent": "<span style=\"color:green\">Find and use the string method that will replace each letter 'a' with 'A'. </span>\n"}
{"snippet": "'abcde' + 'fghijk' + 'lmnop'\n", "intent": "Since we saw `__add__`, we know that the **+** operator will do something with strings. Using the plus sign is how you concatenate strings in python\n"}
{"snippet": "test_string = 'or is this precourse too difficult?'\ntest_string[5::4]\n", "intent": "<span style=\"color:green\">Slice this string from index 5 to the end by every 4th element</span>\n"}
{"snippet": "test_string = 'or is this precourse too difficult?'\ntest_string[-1::-3]\n", "intent": "<span style=\"color:green\">Get every third element starting from the end to the beginning </span>\n"}
{"snippet": "your_string = 'What do you mean, an African or European Swallow?'\nyour_string.lower().replace('african','AFRICAN').replace('european','EUROPEAN').rstrip(' swallow?')\n", "intent": "<span style=\"color:green\">Use four chained operators on a string of your choice. Look at the methods in the docs or above </span>\n"}
{"snippet": "card1 = Card(8, 3)\ncard2 = Card(9, 3)\ncard3 = Card(10, 3)\ncard4 = Card(11, 3)\ncard5 = Card(12, 3)\nfull_house([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that your code passes the following tests:\n"}
{"snippet": "a = 'string 1 '\nb = 'string 2'\nprint(a + b)\nprint(a)\nprint(b)\n", "intent": "In some of the above examples strings were concatenated together to form a new string but the original strings were never changed.\n"}
{"snippet": "foo = \"executing a string assignment\"\n", "intent": "Instead of using the \n"}
{"snippet": "list_2[0] = 42\nlist_2, list_1\nlist_1 == list_2\n", "intent": "<span style=\"color:green\">Mutate `list_2` and print out both lists. Does mutating list_2 still change list_1? </span> \n"}
{"snippet": "verify_length <- function (v1, v2 ){\n    if (length(v1) != length(v2)) {\n        stop('length of vectors do not match') \n    }\n}\naccuracy <- function (actual, predicted) {\n    verify_length(actual, predicted)\n    return(sum(actual == predicted)/length(actual))\n}\n", "intent": "As this is an beginning exercise, we will use the accuracy.\n"}
{"snippet": "var = 'some variable'\ndel var\n", "intent": "In Python it's possible to delete variables and completely remove them from the program.\n"}
{"snippet": "magic_word = ['', 'b', 'r', 'c', 'd', 'b', 'r', '!']\n'a'.join(magic_word)\n", "intent": "<span style=\"color:green\">Use the character 'a' to separate and join the following list to reveal the magic word </span>\n"}
{"snippet": "list_1 = [1,2,3]\nlist_2 = [4, 5, 6]\nlist_1 + list_2\n", "intent": "Lists are concatenated in the same way strings are - with the plus (+) operator\n"}
{"snippet": "list_1 = list(range(5))\nlist_2 = [0, 1, 2, 3, 4]\nlist_1 == list_2\n", "intent": "Two equal signs can be used to test equality of lists. Lists must have all elements in the same exact order.\n"}
{"snippet": "test_list = list(range(20))\ntest_list.extend([42,42])\ntest_list\n", "intent": "<span style=\"color:green\">Create a list then use the `extend` method to add elements to it</span>\n"}
{"snippet": "card1 = Card(8, 3)\ncard2 = Card(9, 3)\ncard3 = Card(10, 3)\ncard4 = Card(11, 3)\ncard5 = Card(12, 3)\nthree_of_a_kind([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that your code passes the following tests:\n"}
{"snippet": "print('keyword', 'argument', sep = 'a', 'not at end')\n", "intent": "Keyword arguments must follow positional arguments or an error will be raised. Keyword arguments themselves can appear in any order.\n"}
{"snippet": "import math\ndef area_circle(radius=0):\n    return math.pi*radius**2\nprint(area_circle(10))\n", "intent": "<span style=\"color:green\">Define a function that finds the area of a circle and defaults the value of the radius to 0 if it's not given.</span>\n"}
{"snippet": "import math\narea_circle = lambda r: math.pi*r**2\narea_circle(10)\n", "intent": "<span style=\"color:green\">Create an anonymous function that calculates the area of a circle. Store it to a variable and check that it works.</span>\n"}
{"snippet": "titanic <- read.table('train.csv', sep=\",\", header = T)\nrownames(titanic) <- titanic$PassengerId\ntitanic$PassengerId <- NULL\ntitanic$Name <- NULL\n", "intent": "To solve this problem, we will generate a vector of integers using filtering and masking.\n"}
{"snippet": "my_list = [5, 8, -9, 0, 3]\n[2 * x for x in my_list]\n", "intent": "The `map` function is doing the same thing that list comprehensions do\n"}
{"snippet": "import random\ndef two_dice():\n    return (random.randint(1,6),random.randint(1,6))\ntwo_dice()\n", "intent": "<span style=\"color:green\">Write a function that returns the roll of two dice. Use the random.randint function to generate the rolls.</span>\n"}
{"snippet": "test_tuple = 1, 'a', 3\nprint([method for method in dir(test_tuple) if method[0] != '_'])\n", "intent": "<span style=\"color:green\">Find all the public tuple methods. There was a similar example done in the lists notebook if you forgot.</span>\n"}
{"snippet": "a = {1, 2, 3, 4}\nb = {3, 4, 5, 6}\n", "intent": "See examples below on basic operations of sets - adding, removing, union, intersection\n"}
{"snippet": "p2_set = {10, 1, 2, 3, 4, 4}\nlen(p2_set)\n", "intent": "<span style=\"color:green\">Define a set and use a builtin function that will output the number of elements in that set.</span>\n"}
{"snippet": "card1 = Card(8, 3)\ncard2 = Card(9, 3)\ncard3 = Card(10, 3)\ncard4 = Card(11, 3)\ncard5 = Card(12, 3)\ntwo_pair([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that your code passes the following tests:\n"}
{"snippet": "some_list = []\nsome_set = {}\nlist_methods_set = set(dir(some_list))\nset_methods_set = set(dir(some_set))\ntuple_unique = tuple_methods_set.difference(set_methods_set)\n[method for method in tuple_unique if method[0] != '_']\n", "intent": "<span style=\"color:green\">Find all the public tuple methods that are not in common with set methods.</span>\n"}
{"snippet": "city_coord_dict = {[29, 95]:'Houston', [29, 90]:'New Orleans'}\n", "intent": "If you try and use a mutable object as a key to a dictionary you will get an error.\n"}
{"snippet": "d1 = {'a': 1, 'b': 2, 'c': 3} \nd2 = dict(a = 1, b = 2, c = 3) \nd3 = dict([['a', 1], ['b', 2], ['c', 3]]) \n", "intent": "The `dict` function allows for a different method of constructing a dictionary and can convert lists of lists to dictionaries.\n"}
{"snippet": "turing_machine([\"a\", \"b\"], akbm_program, verbose=True)\n", "intent": "You may find it useful to try out various inputs using the `verbose` flag, to see what the state of the Turing machine is at each step:\n"}
{"snippet": "students = {'Sally': [87, 76, 65], 'Jane' : [45, 98, 77], 'Adeline' : [65, 22, 10]}\n", "intent": "Dictionaries are mutable and new key:value pairs can be added, deleted, and updated at any time after creation.\n"}
{"snippet": "students = {'Sally': [87, 76, 65], 'Jane' : [45, 98, 77], 'Adeline' : [65, 22, 10]}\nfor student, scores in students.items():\n    avg_score = sum(scores) / len(scores)\n    print(\"{}'s average score is {}\".format(student, avg_score))\n{student: sum(scores)/len(scores) for student, scores in students.items()}\n", "intent": "<span style=\"color:green\">Create a dictionary through a dictionary comp that gets the average score for each student</span>\n"}
{"snippet": "students = {'Sally': [87, 76, 65], 'Jane' : [45, 98, 77], 'Adeline' : [65, 22, 10]}\nfor key in students.keys():\n    print(students[key])\nprint(\"\\n\")\nfor student, scores in students.items():\n    scores[scores.index(min(scores))] = 100\nfor key in students.keys():\n    print(students[key])\n", "intent": "<span style=\"color:green\">Iterate through each student and drop their lowest test grade. Replace it with 100.</span>\n"}
{"snippet": "60 * 60 * 24 * 365.25 * 100\n", "intent": "<span style=\"color:green\">How many seconds are there in a century?</span>\n"}
{"snippet": "replace_string = 'replace each letter a in this string with A'\nreplace_string.replace('a', 'A')\n", "intent": "<span style=\"color:green\">Find and use the string method that will replace all each letter a with A. </span>\n"}
{"snippet": "card1 = Card(8, 3)\ncard2 = Card(9, 3)\ncard3 = Card(10, 3)\ncard4 = Card(11, 3)\ncard5 = Card(12, 3)\none_pair([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that your code passes the following tests:\n"}
{"snippet": "list_1 = [1, 5, 10]\nlist_2 = list_1\nlist_2[0] = 'changed'\nprint(list_1) \nprint(list_2) \n", "intent": "<span style=\"color:green\">Mutate `list_2` and print out both lists. Does mutating list_2 still change list_1? </span> \n"}
{"snippet": "test_list = list('abcdefghijkl')\ntest_list.extend(['more', 'elements'])\ntest_list\n", "intent": "<span style=\"color:green\">Create a list then use the `extend` method to add elements to it</span>\n"}
{"snippet": "print(test_list * 5)\n", "intent": "Enter you answer (double click here to edit cell):  \n`my_list * 5` will concatenate itself to itself 5 times.\n"}
{"snippet": "prop.table(table(titanic$Sex, titanic$Survived), 1)\n", "intent": "This represents the proportion of survival by gender.\n"}
{"snippet": "test_string = 'asdfjhweroiu' \nif test_string.count('a') > 4:\n    print(\"There are more than 4 a's in your string\")\nelif test_string.find('k') > 10:\n    print(\"The first k occurs after the 11th element\")\nelse:\n    print(\"My super intelligent responses did not find any info on your string. Please change it\")\n", "intent": "<span style=\"color:green\">Create a different string that will trigger the third print statement from above. </span> \n"}
{"snippet": "x = 40\n(x > 10) or (x % 7 == 0)\n", "intent": "<span style=\"color:green\">Write an expression that returns true if an integer is either greater than 10 or divisible by 7.</span> \n"}
{"snippet": "test_string = 'asfdaskfjsafl'\ntest_string[-1] != 's'\n", "intent": "<span style=\"color:green\">Write an expression that returns true if the last character of a string is not 's'</span> \n"}
{"snippet": "for i in range(1,11):\n    print(i ** 2)\n", "intent": "<span style=\"color:green\">Use a for loop to iterate over the first 10 positive integers, printing out their squared value</span>\n"}
{"snippet": "x = 20\ntotal = 0\nwhile x > 0:\n    total += x\n    x -= 1\nprint('Total is {}'.format(total))\n", "intent": "<span style=\"color:green\">Use a while loop to find the sum of all integers between a given postive integer and 0. Print out result.</span>\n"}
{"snippet": "card1 = Card(13, 3)\ncard2 = Card(11, 3)\ncard3 = Card(9, 3)\ncard4 = Card(12, 3)\ncard5 = Card(10, 3)\nstraight_flush([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that your code passes the following tests:\n"}
{"snippet": "long_string = 'apiunkwqenasvasdoiureh'\n[letter for letter in long_string if letter in ['a', 'e', 'i', 'o', 'u']]\n", "intent": "<span style=\"color:green\">Create a long string. Use a list comprehension to create a list of only the vowels in that string.</span>\n"}
{"snippet": "x = 19\nresult = x ** 2 if x % 2 == 0 else x ** 3\nresult\n", "intent": "<span style=\"color:green\">Use the ternary syntax to square a number if its even and raise it to the third power if its odd </span>\n"}
{"snippet": "def area_circle(radius=0):\n    return 3.14 * radius ** 2\narea_circle()\n", "intent": "<span style=\"color:green\">Create a function that finds the area of a circle and defaults the value of the radius to 0 if it's not given.</span>\n"}
{"snippet": "prop.table(table(titanic$Sex, titanic$Survived), 2)\n", "intent": "This represents the proportion of gender by survival.\n"}
{"snippet": "int_list = [109, 50, 434, 123131]\nsorted(int_list, key = lambda x: x % 10)\n", "intent": "<span style=\"color:green\">Create a list of integers and sort them by their last digit. Use an anonymous function passed to the key argument.</span>\n"}
{"snippet": "my_list = [9, 5, 1, 99]\nlist(map(lambda x: x ** 2, my_list))\n", "intent": "<span style=\"color:green\">Use the map function to square each number in a list. Do the same with a list comprehension</span>\n"}
{"snippet": "import random\ndef dice_roll():\n    return random.randint(1, 6), random.randint(1, 6)\ndice_roll()\n", "intent": "<span style=\"color:green\">Write a function that returns the roll of two dice. Use the random.randint function</span>\n"}
{"snippet": "[method for method in dir(tuple()) if method[0] != '_']\n", "intent": "<span style=\"color:green\">Find all the public tuple methods. There was a similar example done in the lists notebook if you forgot.</span>\n"}
{"snippet": "a_set = {4, 5, 10}\nlen(a_set)\n", "intent": "<span style=\"color:green\">Define a set and think of a function that will output the number of elements in that set.</span>\n"}
{"snippet": "card1 = Card(8, 3)\ncard2 = Card(9, 3)\ncard3 = Card(10, 3)\ncard4 = Card(11, 3)\ncard5 = Card(12, 3)\nhighest_single_card([card1, card2, card3, card4, card5])\n", "intent": "***\n***TESTS***: <br>\nMake sure that your code passes the following tests:\n"}
{"snippet": "students = {'Sally': [87, 76, 65], 'Jane' : [45, 98, 77], 'Adeline' : [65, 22, 10]}\navg = {student : sum(scores) / len(scores) for student, scores in students.items()}\navg\n", "intent": "<span style=\"color:green\">Create a new dictionary through a dictionary comp that gets the average score for each student</span>\n"}
{"snippet": "for student, scores in students.items():\n    scores[scores.index(min(scores))] = 100\n", "intent": "<span style=\"color:green\">Iterate through each student and drop their lowest test grade. Replace it with 100.</span>\n"}
{"snippet": "replace_string = 'replace each letter a in this string with A'\n", "intent": "<span style=\"color:green\">Find and use the string method that will replace each letter 'a' with 'A'. </span>\n"}
{"snippet": "library(caret)\nset.seed(10)\n", "intent": "The command library(caret) loads the caret library. \nset.seed(10) sets the number 10 as the starting point of our random sequence. \n"}
{"snippet": "magic_word = ['', 'b', 'r', 'c', 'd', 'b', 'r', '!']\n", "intent": "<span style=\"color:green\">Use the character 'a' to separate and join the following list to reveal the magic word </span>\n"}
{"snippet": "use myspace;\ndrop table data;\ncreate table data (id int primary key, year int, value int) ;\ncopy data (id, year, value) from 'data/data.csv' ;\n", "intent": "Creamos una tabla e importamos los datos\n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener el registro con id=147\n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener el registro con year=2000 \n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener todos los registros con id>147\n"}
{"snippet": "deck = [Card(r, s) for r in range(13) for s in range(4)]\nrandom.shuffle(deck)\n", "intent": "First create a deck and shuffle it:\n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener el registro con year=2000\n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener todos los registros con year>200\n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener todos los registros con year=2000 e id>120\n"}
{"snippet": "colSums(is.na(car))\n", "intent": "The column values of car. \n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener todos los registros con year=2000 y value=1728\n"}
{"snippet": "use myspace;\n<TU CODIGO AQUI>;\n", "intent": "- obtener todos los registros con value>1728\n"}
{"snippet": "from collections import Counter \ndef ransom_note(magazine, ransom):\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "intent": "```\n6 4\ngive me one grand today night\ngive one grand today\n```\n```\nYes\n```\n```\n6 5\ntwo times three is not four\ntwo times two is four\n```\n```\nNo\n```\n"}
{"snippet": "n = int(input())\nstudent_marks = {}\nfor _ in range(n):\n    name, *line = input().split()\n    scores = list(map(float, line))\n    student_marks[name] = scores\nquery_name = input()\n", "intent": "Sample Input\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nSample Output\n56.00\n"}
{"snippet": "s = [[int(i) for i in input().split()] for _ in range(list(map(int, input().split()))[0])]\nprint(np.mean(s, axis = 1))\nprint(np.var(s, axis = 0))\nprint(np.std(s, axis = None ))\n", "intent": "[ 1.5  3.5]  \n[ 1.  1.]  \n1.11803398875\n"}
{"snippet": "hand1 = Hand()\nhand2 = Hand()\nfor i in range(10):\n    card = deck[i]\n    if i % 2 == 0:\n        hand1.deal(card)\n    else:\n        hand2.deal(card)\n", "intent": "Now create two hands, and deal out 5 cards to each:\n"}
{"snippet": "n = int(input())\nfor _ in range(n) :\n    try : \n        matter = list(map(int, input().split()))\n        print(int(matter[0]//matter[1]))\n    except BaseException as e:\n        print(\"Error Code : \", e)\n", "intent": "Error Code: integer division or modulo by zero  \nError Code: invalid literal for int() with base 10: '$'  \n3  \n"}
{"snippet": "from collections import namedtuple\nn = int(input())\ntotal = 0\nreport_card = namedtuple(\"report_card\", input())\nfor _ in range(n) : \n    full_info = input().split()\n    student = report_card(full_info[0], full_info[1], full_info[2], full_info[3])\n    total += int(student.MARKS)\nprint(round(total / n, 2))\n", "intent": "TESTCASE 01\n78.00\nTESTCASE 02\n81.00\n"}
{"snippet": "import re\nfor _ in range(int(input())):\n    ans = True\n    try:\n        reg = re.compile(input())\n    except re.error:\n        ans = False\n    print(ans)\n", "intent": "**.*\\+** : Valid regex.   \n**.*+** : Has the error multiple repeat. Hence, it is invalid.\n"}
{"snippet": "stop('Not implemented.')\n", "intent": "Interpret these results. How should these results impact our work?\n"}
{"snippet": "n1, n2 = map(int, input().split())\nfor _ in n1 :\n    list(map(float, input().split()))\n", "intent": "90.0   \n91.0   \n82.0   \n90.0   \n85.5   \n"}
{"snippet": "from collections import Counter\ndef sockMerchant(n, ar):\n    counter_ar = Counter(ar)\n    ans = 0\n    for key, value in counter_ar.items() : \n        ans += value//2\n    return ans\n", "intent": "https://www.hackerrank.com/challenges/sock-merchant/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup\n"}
{"snippet": "N = int(input())\nL = input().split()\nK = int(input())\nC = list(combinations(L, K))\nF = list(filter(lambda c: 'a' in c, C))\nprint(\"{0:.3}\".format(len(F)/len(C)))\n", "intent": "Best answers i think in discussion\n"}
{"snippet": "X = np.array([[1,2,3], [4,5,6]], np.int32)\n", "intent": "Let X = np.array([1,2,3], [4,5,6], np.int32). \nCreate a new array with the same shape and type as X.\n"}
{"snippet": "x = np.arange(4, dtype=np.int64)\n", "intent": "Let x = np.arange(4, dtype=np.int64). Create an array of ones with the same shape and type as X.\n"}
{"snippet": "who_wins(hand1, hand2)\n", "intent": "Now we can see who has the winning hand:\n"}
{"snippet": "x = np.arange(4, dtype=np.int64)\n", "intent": "Let x = np.arange(4, dtype=np.int64). Create an array of 6's with the same shape and type as X.\n"}
{"snippet": "X = np.array([[1, 2], [3, 4]])\n", "intent": "Let X = np.array([[1, 2], [3, 4]]). Convert it into a matrix.\n"}
{"snippet": "x = np.array([1, 2, 3])\n", "intent": "Let x = np.array([1, 2, 3]). Create a array copy of x, which has a different id from x.\n"}
{"snippet": "stop('Not implemented.')\n", "intent": "Which two features will be the strongest indicator of unacceptability? Why?\n"}
{"snippet": "[num for num in range(1,51) if num % 3 == 0]\n", "intent": "___\n**Use a List Comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "def lesser_of_two_evens(a,b):\n    if a%2 == 0 and b%2 == 0:\n        return min((a,b))\n    else:\n        return max((a,b))\n", "intent": "    lesser_of_two_evens(2,4) --> 2\n    lesser_of_two_evens(2,5) --> 5\n"}
{"snippet": "def animal_crackers(text):\n    words = text.split()\n    return words[0][0] == words[1][0]\n", "intent": "    animal_crackers('Levelheaded Llama') --> True\n    animal_crackers('Crazy Kangaroo') --> False\n"}
{"snippet": "def makes_twenty(n1,n2):\n    return n1 == 20 or n2 == 20 or n1+n2==20\n", "intent": "    makes_twenty(20,10) --> True\n    makes_twenty(12,8) --> True\n    makes_twenty(2,3) --> False\n"}
{"snippet": "def old_macdonald(name):\n    new_name = ''\n    for i,l in enumerate(name):\n        if i==0 or i==3:\n            new_name+=l.upper()\n        else:\n            new_name+=l\n    return new_name\n", "intent": "    old_macdonald('macdonald') --> MacDonald\nNote: `'macdonald'.capitalize()` returns `'Macdonald'`\n"}
{"snippet": "straight_flushes = [c for c in combs if straight_flush(c)]\n", "intent": "Next, let's only keep the combinations that are **straight flushes**:\n"}
{"snippet": "def blackjack(a,b,c):\n    total = sum((a,b,c))\n    if total>21:\n        if a==11 or b==11 or c==11:\n            total-=10\n            if total>21:\n                return 'BUST'\n        else:\n            return 'BUST'\n    return total\n", "intent": "    blackjack(5,6,7) --> 18\n    blackjack(9,9,9) --> 'BUST'\n    blackjack(9,9,11) --> 19\n"}
{"snippet": "def spy_game(nums):\n    r = ''.join([str(i) for i in nums if i==0 or i==7])\n    if len(r)<3:\n        return False\n    else:\n        for i in range(len(r)-2):\n            if r[i:i+3]=='007':\n                return True\n        return False\n", "intent": "     spy_game([1,2,4,0,0,7,5]) --> True\n     spy_game([1,0,2,4,0,5,7]) --> True\n     spy_game([1,7,2,0,4,5,0]) --> False\n"}
{"snippet": "def ran_check(num,low,high):\n    if low<num and num<high:\n        print(f'{num} is in the range between {low} and {high}')\n", "intent": "___\n**Write a function that checks whether a number is in a given range (inclusive of high and low)**\n"}
{"snippet": "I am not there yet. Sorry. \n", "intent": "Prepare a vectorized model for acceptability.\n"}
{"snippet": "def multiply(numbers):  \n    r = 1\n    for i in numbers:\n        r*=i\n    return r\n", "intent": "____\n**Write a Python function to multiply all the numbers in a list.**\n    Sample List : [1, 2, 3, -4]\n    Expected Output : -24\n"}
{"snippet": "def animal_crackers(text):\n    words = text.split()\n    return words[0][0] == words[1][0]:\n", "intent": "    animal_crackers('Levelheaded Llama') --> True\n    animal_crackers('Crazy Kangaroo') --> False\n"}
{"snippet": "def makes_twenty(n1,n2):\n    if (n1 == 20 or n2 == 20) or (n1+n2==20):\n        return True\n    else:\n        return False\n", "intent": "    makes_twenty(20,10) --> True\n    makes_twenty(12,8) --> True\n    makes_twenty(2,3) --> False\n"}
{"snippet": "def space_check(board, position):\n    return board[position]==''\n", "intent": "**Step 6: Write a function that returns a boolean indicating whether a space on the board is freely available.**\n"}
{"snippet": "def full_board_check(board):\n    for i in board:\n        if i=='':\n            return False\n    return True\n", "intent": "**Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.**\n"}
{"snippet": "len(straight_flushes)\n", "intent": "Count how many there are:\n"}
{"snippet": "pluralLambdaRDD = wordsRDD.map(lambda a: a+'s')\nprint pluralLambdaRDD.collect()\n", "intent": "Let's create the same RDD using a `lambda` function.\n"}
{"snippet": "wordCountsCollected = (wordsRDD.map(lambda x: (x,1)).reduceByKey(add)\n                       .collect())\nprint wordCountsCollected\n", "intent": "The expert version of the code performs the `map()` to pair RDD, `reduceByKey()` transformation, and `collect` in one statement.\n"}
{"snippet": "shakeWordsRDD = shakespeareWordsRDD.filter(lambda a: a != '')\nshakeWordCount = shakeWordsRDD.count()\nprint shakeWordCount\n", "intent": "The next step is to filter out the empty elements.  Remove all entries where the word is `''`.\n"}
{"snippet": "sample_1pct_1 = customer_features.sample(5)\n", "intent": "Let's start by looking at 1% of the data. \n"}
{"snippet": "arr = np.arange(1,11)\n", "intent": "conditional selection\n"}
{"snippet": "pd.Series(data=[sum,print,len])\n", "intent": "Can hold functions too\n"}
{"snippet": "def countDog(phrase):\n    count = 0\n    phrase.lower()\n    for word in phrase.split():\n        if word == 'dog':\n            count += 1\n    return count        \n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "set([1,1,1,11,2,2,2,2,5,5,5,5])\n", "intent": "Only unique elements\n"}
{"snippet": "data_black.describe().call\n", "intent": "IS there a difference between the likelyhood black \n"}
{"snippet": "len(combs)/len(straight_flushes)\n", "intent": "Put differently, you'll - on average - need to deal $\\ 72\\  193\\ $ 5-card hands before ever seeing a single straight flush!\n"}
{"snippet": "print('Under construction ...')\n", "intent": "FIGURE 7.1 illustrates the important issue in assessing the ability of a learning method to generalize.\n"}
{"snippet": "LongNum=1.0002312325310934384902321\n", "intent": "- lets take a Long Number and do manipulate it\n"}
{"snippet": "round(1.1, 2) + round(1.1, 2) + round(1.1, 2) == 3.3 \n", "intent": "> 1.1 + 1.1 + 1.1  == 3.3\n>False\n- can you think of a way to fix this \n- hint using round() in various ways and check the output\n"}
{"snippet": "(sample_1pct_1.mean() - stats['mean'])/stats['mean']\n", "intent": "Let's think about this in terms of percent error.\n"}
{"snippet": "x=int(input(\"please enter an integer \"))\nwhile x >-1:\n    print ('T-minus')\n    print (x, \"\")\n    x=x-1\nprint ('blast off!')\n", "intent": "> T-Minus\n> 5\n> T-Minus\n> 4\n> T-Minus\n> 3\n> T-Minus\n> 2\n> T-Minus\n> 1\n> T-Minus\n> 0\n> Blast Off!\n"}
{"snippet": "X = list('butter')\nX\n", "intent": "Below, you can see how to turn a string into a list of characters.\n"}
{"snippet": "A = ['a']\nB = [A]\nB.extend(A)\nA[0] = 'e'\nprint(B)\n", "intent": "Predict what the following cell with print.  Try drawing a diagram on paper showing all references.\n"}
{"snippet": "A = ['a']\nB = [A]\nB.append(A)\nA[0] = 'e'\nprint(B)\n", "intent": "Predict what the following cell will print.\n"}
{"snippet": "A = ['nah']\nB = [A,A]\nC = B\nD = [B,C]\nB[0] = 'nee'\nB[1] = 'ner'\nprint(D)\n", "intent": "Predict what the following cell will print\n"}
{"snippet": "donuts(5) == 'Number of donuts: 5'\ndonuts(3) == 'Number of donuts: 3'\n", "intent": "Your code will be tested against the list of assertions below.  Make sure that it passes them.\n"}
{"snippet": "a,b,c = 1,2,3\na,b,c = b,c,a\na,b,c = b,c,a\na,b,c = b,c,a\nprint(a,b,c)\n", "intent": "Predict what the following cell with print.\n"}
{"snippet": "parity = {1: 'odd', 2: 'even', 3 : 'odd', 4 : 'even'}\nparity\n", "intent": "Create a dictionary named `parity` that maps the integers 1,2,3, and 4 to 'even' or 'odd', appropriately.\n"}
{"snippet": "sentence = \"E x  ce ll  ent !\"\n", "intent": "4.3.2 Code a $for$ loop that loops through the following string (named sentence) and removes the spaces.\n"}
{"snippet": "def hello_bot(user_input):\n    return \"Hello.\"\n", "intent": "Here is a simple bot that says hi.\n"}
{"snippet": "length = 4\nwidth = 5\n", "intent": "4.3.7 Code two $for$ loops that makes a rectangle of '\n```\nlength = 3\nwidth = 2\nAnswer:\n```\n"}
{"snippet": "file_contents = ['\n                 '\n                 '5-20-2018 1045 -', '\n                 '5-20-2018 1130 12', '5-20-2018 1145 18', '\n                 '5-21-2018 1200 12', '5-21-2018 1215 15',]\n", "intent": "4.4.1 Using a loop skip any lines that are comments in the file_contents list below.  Comment lines are denoted by the '\n"}
{"snippet": "cap_list = ['I', 'REALLY', 'ENJOY', 'THESE', \"LIST\", 'COMPREHENSIONS']\n", "intent": "4.9.3 Code a list comprehension that goes through the following list and lower-cases each word.\n"}
{"snippet": "dict1 = {'a':2, 'b':5, 'c':1}\ndict2 = {'x':1, 'y':3, 'z':8}\n", "intent": "4.9.5 Write a dictionary comprehension that merges the two dictionaries below.\n"}
{"snippet": "for i in range(1,11):\n    print(i)\n", "intent": "4.3.1 Code a $for$ loop that counts all numbers from 1 to 10.\n"}
{"snippet": "both_ends('spring') == 'spng'\nboth_ends('s') == ''\nboth_ends('hel') == 'heel'\nboth_ends('tomorrow') == 'toow'\n", "intent": "Your code will be tested against the list of assertions below.  Make sure that it passes them.\n"}
{"snippet": "small_list = ['The', 'number', 1, 'of', True, 'guesses', 'is', 10.0]\nfor item in small_list:\n    if type(item) in (float,int):\n        print(item)\nprint('\\nIncorrect:')\nfor item in small_list:\n    if isinstance(item, float) or isinstance(item, int):\n        print(item)\n", "intent": "4.3.4 Code a $for$ loop that loops through the following list (named small_list) and only prints out the numbers.\n"}
{"snippet": "fact_num = 5\ntotal_fact = 1\nfor i in range(5,1,-1):\n    total_fact = total_fact * i\nprint('The factorial of', fact_num, 'is:', total_fact)\n", "intent": "4.3.5 Code a $for$ loop that finds the factorial of a number given below \n"}
{"snippet": "list_of_lists = [['E', 'n', 'c', 'h', 'a', 'n', 't', 'i', 'n', 'g', ' '], ['p', 'r', 'o', 'c', 'e', 's', 's', ',', '\\n'], \n                 ['I', 'n', 'v', 'i', 't', 'i', 'n', 'g', ' '], ['w', 'a', 'r', 'm', ' '], ['s', 'c', 'e', 'n', 'e', 'r', 'y', ',', '\\n'],\n                 ['B', 'e', 'a', 'u', 't', 'i', 'f', 'u', 'l', ' '], ['w', 'i', 's', 'd', 'o', 'm', '.']\n                ]\nfor sm_list in list_of_lists:\n    for item in sm_list:\n        print(item, end='')\n", "intent": "4.3.6 Code $for$ loops that loops through the list of lists below and prints out each character.\n"}
{"snippet": "sample_10pct_1 = customer_features.sample(44)\n(sample_10pct_1.mean() - stats['mean'])/stats['mean']\n", "intent": "Totally different. Which makes sense ... we're only taking 1% of the data!\nWhat if we take a sample of 10% of the data?\n"}
{"snippet": "tf_dict = {}\ntotal_words = 0.0\nfor word in wc_dict.keys():\n    total_words += wc_dict[word]\nfor word in wc_dict.keys():\n    tf_dict[word] = round(wc_dict[word] / total_words, 4)\nprint(\"The TF for this passage is:\\n\", tf_dict)\n", "intent": "4.3.9 Loop through the dictionary you made above of {word: \n"}
{"snippet": "import operator\nprint('Sorted by TF descending', sorted(tf_dict.items(), key=operator.itemgetter(1), reverse=True))\n", "intent": "Extra challenge: Sort the output by the TF in descending order.\n"}
{"snippet": "todo_list = []\nwhile True:\n    item = input('Please enter your next to-do item (type q to quit): ')\n    if item == 'q' or item == 'Q':\n        break\n    todo_list.append(item)\nprint(\"\\nYour to-do list is: \\n\")\nfor item in todo_list:\n    print(item)\n", "intent": "4.4.2 Using a while loop keep adding items to a to-do list that a user inputs until the user types 'q'. At the end, print out that list.\n"}
{"snippet": "[round(i**0.5,3) for i in range(1,11)]\n", "intent": "4.9.1 Code a list comprehension that finds the square root of all numbers 1-10.\n"}
{"snippet": "[i for i in range(1,21) if i % 3 == 0]\n", "intent": "4.9.2 Code a list comprehension that includes all numbers 1-20 that can be divisible by 3.\n"}
{"snippet": "fix_start('babble') == 'ba**le'\nfix_start('turtle') == 'tur*le'\nfix_start('kdswueknvnvmkloskk') == 'kdswue*nvnvm*los**'\nfix_start('mmmmm') == 'm****'\n", "intent": "Your code will be tested against the list of assertions below.  Make sure that it passes them.\n"}
{"snippet": "dict1 = {'a':2, 'b':5, 'c':1}\ndict2 = {'x':1, 'y':3, 'z':8}\n{key: val for d in (dict1, dict2) for key, val in d.items()}\n", "intent": "4.9.5 Write a dictionary comprehension that merges the two dictionaries below.\n"}
{"snippet": "my_list = [1, 2, 3, 4, \"apple\", ['sub','list'], {'dictionary':'too', 'why':'whynot?'}, 3, 4]\nfor item in my_list:\n    item = item * 2\n    print(item)\n", "intent": "5.15.1 Use a simple \"try\" / \"except\" block to prvent the code below from breaking.  Do not modify \"my_list\".\n"}
{"snippet": "def hello():\n    print(\"Hello World!\")\nhello()\n", "intent": "5.5.1 Write a function named \"hello\" that prints \"Hello World!\" whenever it is run. Run the function.\n"}
{"snippet": "housing_df = merge(zoning_df, listing_df, by=\"Id\")\nhousing_df = merge(housing_df, sale_df, by=\"Id\")\n", "intent": "Here, we join the three datasets using the `merge` command using the column `Id` as reference.\n"}
{"snippet": "def linearSearch(sortedList, target):\n\tfor i in range(len(sortedList)):\n\t\tif (sortedList[i] == target):\n\t\t\treturn i\n\t\treturn -1\nlinearSearch([1,3,9,22], 22)\n", "intent": "Often this is the bound when we have nested loops.\n"}
{"snippet": "def OlogN(input):\n    def search(length, count):\n        count += 1\n        length /= 2\n        if length == 1 or length == 0:\n            return 1 + count\n        else:\n            return 1 + search(length, count)\n        return 1 + search(len(input), 1)\n", "intent": "This example is O(n^3) or cubic.  Often we have to manipulate matrices.  This can grow in size awfully fast ... \n"}
{"snippet": "import datetime\ntoday = datetime.datetime.now()\nprint(today)\n", "intent": "To use the datetime, we need to import the datetime library. This example is the most basic calling of the library.\nWhat happens here?\n"}
{"snippet": "import datetime\nx = datetime.datetime.now()\nprint(x.strftime(\"%B\"))\n", "intent": "Run this example, exchanging %B with %A, %Y, %Z, %c, and %x and see the differences.\n"}
{"snippet": "import datetime\nprint(humanDate)\n", "intent": "Now create a script of your own that -imports- the datetime.py.  Have your script print the variable \"humanDate\".\n"}
{"snippet": "mix_up('dog', 'dinner') == 'dig donner'\nmix_up('max', 'min') == 'mix man'\nmix_up('today', 'tomorrow') == 'today tomorrow'\nmix_up('somerandom', 'string') == 'stmerandom soring'\nmix_up('hdjjsdfsd', 'klertpop') == 'kljjsdfsd hdertpop'\nmix_up('ab', 'ba') == 'ba ab'\n", "intent": "Your code will be tested against the list of assertions below.  Make sure that it passes them.\n"}
{"snippet": "def search(length, count=0):\n    count += 1\n    length /= 2\n    if length == 1 or length == 0:\n        return 1 + count\n    else:\n        return 1 + search(length, count)\n", "intent": "This example is O(n^3) or cubic.  Often we have to manipulate matrices.  This can grow in size awfully fast ... \n"}
{"snippet": "table_list = ['word', 'word count', '\n              'the', 10000, 827, 12.09789842,\n              'a', 9876, 826, 11.95641646,\n              'glue', 1234, 40, 30.85,\n              'Mississippi', 1, 1, 1 ]\n", "intent": "9.6.1. Format the following list into a nice table, with the float numbers having an accuracy to 2 decimals places. Use the ```%``` method.\n"}
{"snippet": "text = \"\\u0050\\u0079\\u0074\\u0068\\u006f\\u006e\"\nprint(text.encode('ascii'))\n", "intent": "9.5.2. Convert the following unicode characters to ascii: \"\\u0050\\u0079\\u0074\\u0068\\u006f\\u006e\"\n"}
{"snippet": "mean(housing_df$LotFrontage, na.rm=T)\n", "intent": "This can be by passing the argument `na.rm=T` to the `mean()` function.\n"}
{"snippet": "comp = re.compile('I ')\nresult = comp.findall(text)\nprint(len(result))\n", "intent": "9.7.2. Using the text from 9.7.1 above find how many times the word 'I' is used.\n"}
{"snippet": "total = 0\nnumber_pattern = re.compile(r'\\d{3}.\\d{2}')\nfor item in pay_list:\n    digits = number_pattern.findall(item)\n    num = float(digits[0])\n    total += num\nprint(\"The total is: {:.2f}\".format(total))\n", "intent": "9.7.4. Using regular expressions and the pay_list from above, find the total amount of money that was paid. \n"}
{"snippet": "import sys\nprint(sys.version)\n", "intent": "First let's import the system library into a script and determine the version we're using.  What do you see?\n"}
{"snippet": "import numpy as np\nprint(np.__version__)\n", "intent": "<font color='red'>Import</font> numpy as np and confirm the version.\n"}
{"snippet": "import numpy as np\na = np.arange(10)\nprint(a)\n", "intent": "Create an array using NumPy.  Assign the output to a var, called a, and print\n"}
{"snippet": "verbing('dfjgkj') == 'dfjgkjing'\nverbing('interestingly') == 'interestinglying'\n", "intent": "Your code will be tested against the list of assertions below.  Make sure that it passes them.\n"}
{"snippet": "print(type(demoNp))\nprint(demoNp.dtype)\nnpa = np.arange(25)\nnp.float64(25)\n", "intent": "<h4>Get to know your np int types ... </h4><blockquote>See https://en.wikipedia.org/wiki/Integer_(computer_science) for more</blockquote>\n"}
{"snippet": "ar1 = np.random.randint(7, size=(5, 3))\nar2 = np.random.randint(7, size=(5, 3))\nprint((\"-\"*60),\"\\n\", ar1)\nprint((\"-\"*60),\"\\n\", ar2)\nprint((\"-\"*60),\"\\nHorizontal Stack:\\n\", np.hstack([ar1, ar2]))\n", "intent": "If we can stack <i>vertically</i> perhaps horizontally, too?\n"}
{"snippet": "ar3 = np.dstack((ar1,ar1))\nar3\n", "intent": "This practice splits arrays.  Using <code>a1</code> let&rsquo;s dstack and split ... \n"}
{"snippet": "mean_LotFrontage <- mean(housing_df$LotFrontage, na.rm=T)\nmean_MasVnrArea <- mean(housing_df$MasVnrArea, na.rm=T)\nmean_GarageYrBlt <- mean(housing_df$GarageYrBlt, na.rm=T)\n", "intent": "Here we assign these mean values to variables.\n"}
{"snippet": "score = [5, 4, 3, 5, 2, 4, 5]\ncuisine = ['Thai', 'Mexican', 'American', 'Mexican', 'American', 'Indian', 'Thai']\ntakeout = [False, False, False, True, False, True, False]\n", "intent": "The following lists represent data on restaurants in the San Francisco area.  Typecast them into `Series`.\n"}
{"snippet": "score_by_cuisine = score.groupby(cuisine)\n", "intent": "Group scores by cuisine, then pull out a sample group to look at.\n"}
{"snippet": "score_by_cuisine.min()\n", "intent": "Find the minimum score for each type of cuisine.\n"}
{"snippet": "score.groupby(takeout).mean()\n", "intent": "Using a new groupby, find the mean score for takeout orders and non-takeout orders.\n"}
{"snippet": "score.groupby([cuisine, takeout]).mean().unstack()\n", "intent": "Create a table of mean scores, grouped by both cuisine (vertical axis) and takeout (horizontal axis)\n"}
{"snippet": "def not_bad(s):\n    notV = s.find('not')\n    badV = s.find('bad')\n    if badV > notV:\n        return s[:notV] + 'good' + s[(badV + 3):]\n    return s\n", "intent": "So 'This dinner is not that bad!' yields:\n`This dinner is good!`\n"}
{"snippet": "def findDog(string):\n    s = list(string.split())\n    wordcount = 0\n    for word in s:\n        if(word == 'dog'):\n            wordcount += 1\n    return wordcount\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "arr = np.arange(1,26).reshape(5,5)\narr\n", "intent": "Now you will be given a few matrices, and be asked to replicate the resulting matrix outputs:\n"}
{"snippet": "print(\"Hello World!\")\n", "intent": "This will be a sample of hello world\n"}
{"snippet": "housing_df$LotFrontage[is.na(housing_df$LotFrontage)] <- mean_LotFrontage\nhousing_df$MasVnrArea[is.na(housing_df$MasVnrArea)] <- mean_MasVnrArea\nhousing_df$GarageYrBlt[is.na(housing_df$GarageYrBlt)] <- mean_GarageYrBlt\n", "intent": "Next, we use the `is.na` function to create a mask for the missing values. We then assign to the missing values the calculated mean value.\n"}
{"snippet": "_ = tests.grade('q411')\n", "intent": "Be sure to run the next cell to test your code.\n"}
{"snippet": "time = 1.2 \nestimated_distance_m = 1.13 \n", "intent": "**Question 3.3.1.** Complete the code in the next cell to fill in the *data* from the experiment.\n"}
{"snippet": "from pyspark.sql import Window\nwindowval = Window.partitionBy('user_id').orderBy('order_number').rangeBetween(Window.unboundedPreceding, 0)\nall_orders = all_orders.withColumn('dspo_cum_sum', F.sum('days_since_prior_order').over(windowval))\nall_orders.show(10)\n", "intent": "The idea here was to have a feature that count how many days has passed since the user first order.\n"}
{"snippet": "for i in range(10):\n    print(i)\n", "intent": "If you change what you print inside of the cell, what Python executes when you run the cell will change:\n"}
{"snippet": "print(type(5.))       \n", "intent": " In general, if you add a period after a number (without trailing digits), `Python` interprets it as a `float`:\n"}
{"snippet": "spend(1000, 500) == 500\n", "intent": "<a id='spend_tests'></a>\n"}
{"snippet": "dude = \"True\"                        \nprint(\"dude is:\",dude,type(dude))     \ndude = bool(dude)                    \nprint(\"now dude is:\",dude,type(dude)) \ndude = int(dude)                 \nprint(\"now dude is:\",dude,type(dude)) \n", "intent": "Here we converted `y` from a `string` to a `float`.\nNow let's try another conversion:\n"}
{"snippet": "float_string = \"47.486\"\nfloat_string = int(float_string)\n", "intent": "You also can't convert a `string` directly into an `int` if it should be converted into a `float` first:\n"}
{"snippet": "float_string = float(float_string)\nprint(\"float_string is:\",float_string,type(float_string))\nfloat_string = int(float_string)\nprint(\"float_string is:\",float_string,type(float_string)) \n", "intent": "So you have to cast it to a `float` and then an `int`:\n"}
{"snippet": "colnames(Filter(is.numeric, housing_df))\n", "intent": "Next we plot histograms with KDE plots for some of the other numerical features in our dataset.\n"}
{"snippet": "print(len(nums))             \nprint(nums[0])               \nnums[0] = 6                 \nprint(nums)                  \n", "intent": "Lists have lots of useful properties, like length (the number of elements in the list), and the ability to modify its contents:\n"}
{"snippet": "sorted(nums, reverse=True)  \n", "intent": "You can also sort the list in reverse order by passing an **optional** argument to the `sorted` function:\n"}
{"snippet": "a = [10, \"hello\", 304,3.631,True]     \n", "intent": "Lists have other interesting properties that allow you to select only **parts** of them.\nLet's create the list `a`: \n"}
{"snippet": "print(a[0], type(a[0]))        \nprint(a[1:3], type(a[1:3]))    \nprint(a[-1], type(a[-1]))      \n", "intent": "You can select individual elements in the list. This is called **slicing**:\n"}
{"snippet": "print(\"a before appending:\", a)\na.append(6)                   \nprint(\"a after appending:\", a)\na = a + [7]                   \nprint(\"a after appending [7]:\", a)\na = [\"dude\"]+ a\nprint(\"a after prepending [dude]:\", a)\n", "intent": "You can also add to the back or (`append`) to the front of (`prepend`) lists:\n"}
{"snippet": "balance(0) == 'R0 remaining'\n", "intent": "<a id='balance_tests'></a>\n"}
{"snippet": "my_string = 'awesome'\nprint(my_string)\nprint(my_string[1:4])\nprint(my_string[0])\nprint(my_string[-1])\n", "intent": "There are actually a lot of similarities between `strings` and `lists` in `Python`.\n`Strings` can be indexed (and sliced) just like lists:\n"}
{"snippet": "print(my_string)\nmy_string = \"dude\" + my_string\nprint(my_string)\n", "intent": "And combined like `lists`:\n"}
{"snippet": "print(len(my_string))\n", "intent": "You can even check their `length`, just like `lists`:\n"}
{"snippet": "library(repr)\noptions(repr.plot.width=20, repr.plot.height=4)\n", "intent": "We make use of a special function called `multiplot` that is included in the file `src/multiplot.r`.\n"}
{"snippet": "print(my_string + ' there') \n", "intent": "And, remember that you always have to think about types when trying to combine `strings` with other objects:\n"}
{"snippet": "print(dir(a_string))\n", "intent": "You can do other stuff with `strings` that you can't do with `lists`:\n"}
{"snippet": "nyc['queens'] = 'baller status'                    \nnyc['best borough'] = 'queens'                     \ndel nyc['manhattan']                               \nnyc['other boroughs'] = ['bronx', 'staten island'] \nprint(nyc)\n", "intent": "However, you can modify dictionaries in a similar way to how you can modify lists:\n"}
{"snippet": "print(nyc['best borough'])\n", "intent": "* print the name of the best borough (in the dictionary).\n* create a new key-value pair for `SF` (give it any value you like)\n"}
{"snippet": "print(give_me_one())\n", "intent": "This is a really dumb function. It simply returns the `int` 1. Lets look at how it would work:\n"}
{"snippet": "track(10000, [1000,50.50,9750,75])\nprint()\nprint('You spent R1000. R9000 remaining\\nYou spent R50.5. R8949.5 remaining\\nYou spent R9750. Overdrawn by R800.5\\nYou spent R75. Overdrawn by R875.5\\n')\n", "intent": "<a id='track_output'></a>\n"}
{"snippet": "another_dude = give_me_one\nprint(another_dude)\nprint( \"Now we are going to instantiate another dude:\")\nanother_dude()\n", "intent": "You can also assign an uninstantiated function to a variable, and then instantiate that:\n"}
{"snippet": "def calc(x, y, op):         \n    if op == 'add':         \n        return x + y\n    elif op == 'subtract':\n        return x - y\n    else:\n        print('Valid operations: add, subtract')\n", "intent": "Here's another function. It's a bit more complicated, and has parameters that you pass into it:\n"}
{"snippet": "print(calc(5, 3, 'add'))\nprint(calc(5, 3, 'subtract'))\nprint(calc(5, 3, 'multiply'))\ncalc(5, 3)\n", "intent": "Let's test it on some input:\n"}
{"snippet": "hist_with_kde_numerical_by_category(SalePrice, BldgType)\n", "intent": "We can begin by looking at the distribution of `SalePrice` disaggregated by any one of these categorical features.\n"}
{"snippet": "better_squares = [num*num for num in range(1,11)] \nprint(\"List comprehension result:\", better_squares)\n", "intent": "And here's the equivalent list comprehension:\n"}
{"snippet": "import csv\nimport requests\nwith open('../data/vertebral_column_2_categories.dat', 'r') as f:\n    vertebral_data = [row for row in csv.reader(f)]\nfor line in vertebral_data:\n    print(line)\n", "intent": "The data you work with as a data scientist needs to come from somewhere.\nHere's a simple way to get some data from a file:\n"}
{"snippet": "r = requests.get('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data') \niris_data = [row.decode() for row in r.iter_lines()]\nfor line in iris_data:\n    print(line)\n", "intent": "And heres a way to get data from the internet:\n"}
{"snippet": "print(sorted(nums))          \nprint(nums)                  \n", "intent": "Lists can also be `sorted`:\n"}
{"snippet": "print(a_string.upper())\nprint(a_string.lower())\nprint(a_string.capitalize())\n", "intent": "You can do other stuff with `strings` that you can't do with `lists`:\n"}
{"snippet": "track(5000, [10500,5000,5,5])\nprint()\nprint('You spent R10500. Overdrawn by R5500\\nYou do not have enough credit.\\nYou spent R5. Overdrawn by R5505\\nYou spent R5. Overdrawn by R5510\\n')\n", "intent": "<a id='track_output'></a>\n"}
{"snippet": "s=\"Hi there Sam!\"\ns.split()\n", "intent": "** Split this string:**\n    s = \"Hi there Sam!\"\n**into a list. **\n"}
{"snippet": "def countDog(string):\n    return len(list(filter(lambda word: word=='dog',string.split())))\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "sp = (P_0 * n_0 + P_1 * n_1) / (n_1 + n_0)\nprint (sp)\n", "intent": "must define the sample standard deviation (standard error)\n"}
{"snippet": "hist_with_kde_numerical_by_category(SalePrice, as.factor(YrSold))\n", "intent": "It may even make sense to treat one of the numerical features as a categorical feature, for example, `YrSold`.\n"}
{"snippet": "zscore = lambda p0, p1, s : (p0 - p1) / s\nz_2y = zscore(P_1, P_0, se(p(P_0, P_1, n_0, n_1), n_0, n_1))\nprint (z_2y)\n", "intent": "** z score: how many standard deviation away from the population parameter is my statistic? **\n $z=\\frac{P_1-P_0}{\\sigma}$\n"}
{"snippet": "test_string = '510-654-1220'\nis_phone_number(test_string)\n", "intent": "Let's use our new function on a test string.\n"}
{"snippet": "arr = np.arange(10)\nprint(arr)\n", "intent": "- Desired output:\n> `[0 1 2 3 4 5 6 7 8 9]`\n"}
{"snippet": "a = np.arange(5)\nprint(a)\nprint(a2)\nprint(a2)\n", "intent": "- Desired output:\n> `[0 1 2 3 4]\n[ 0  1  4  9 16]\n[[ 0]\n [ 1]\n [ 4]\n [ 9]\n [16]]`\n"}
{"snippet": "x = np.arange(1,6).reshape(-1,1)\nprint(x)\ny = np.arange(2,5)\nprint(y)\nprint(z)\n", "intent": "- Desired output:\n> `[[ 3  4  5]\n [ 6  7  8]\n [11 12 13]\n [18 19 20]\n [27 28 29]]`\n"}
{"snippet": "print square_of(2)\nprint square_of(3)\nprint square_of(4)\n", "intent": "Test your code by running it on a few examples.\n"}
{"snippet": "arr = arr.reshape(2,-1)\nprint(arr)\n", "intent": "- Desired output:\n> `[[0 1 2 3 4]\n [5 6 7 8 9]]`\n"}
{"snippet": "a = np.arange(5)\nprint(a)\na2 = a**2\nprint(a2)\na2 = a2.reshape(-1,1)\nprint(a2)\n", "intent": "- Desired output:\n> `[0 1 2 3 4]\n[ 0  1  4  9 16]\n[[ 0]\n [ 1]\n [ 4]\n [ 9]\n [16]]`\n"}
{"snippet": "x = np.arange(1,6).reshape(-1,1)\nprint(x)\ny = np.arange(2,5)\nprint(y)\nz = x**2 + y\nprint(z)\n", "intent": "- Desired output:\n> `[[ 3  4  5]\n [ 6  7  8]\n [11 12 13]\n [18 19 20]\n [27 28 29]]`\n"}
{"snippet": "def bot(user_input):\n    raise NotImplementedError()\n", "intent": "<div class=\"alert alert-success\">\nEdit the function `bot`, implementing a chat bot with at least 10 production rules.\n</div>\n"}
{"snippet": "l.append(4)\nl.append(444)\nl\n", "intent": "You will have definitely have use this method by now, which merely appends an element to the end of a list:\n"}
{"snippet": "half_sun = Star(mass=0.5, radius=0.5, name='Demisol')\nprint(half_sun)\n", "intent": "Output should be:\n    Sol: 1.00 M_sun, 1.00 R_sun\n"}
{"snippet": "earth = Planet(365, 1.0, mass=1.0, name='Earth')\nprint(earth)\nvenus = Planet(226, 0.92, name='Venus') \nprint(venus)\nvenus.mass = 0.81 \nprint venus.density\n", "intent": "Output should be:\n    Demisol: 0.50 M_sun, 0.50 R_sun\n"}
{"snippet": "ss2 = System(half_sun)\nss2.add_planet(Planet(44, 0.19))\nss2.add_planet(Planet(182, 0.5))\nss2.add_planet(Planet(113, 0.46))\nprint(ss2)\n", "intent": "Output should be:\n    Earth: 365 days, 1.00 R_earth, 1.00 M_earth, density = 5.5 g/cc\n"}
{"snippet": "def newtons_method2(f, df, x0, tol=1E-6, maxiter=100000):\n    x_n = x0    \n    for _ in range(maxiter):\n        x_n = x_n - f(x_n)/df(x_n)\n        if abs(f(x_n)) < tol:\n            return x_n\n    raise RuntimeError(\"Failed to find a minimum within {} iterations \".format(maxiter))\n", "intent": "With a little more defensive programming we can make sure that the function will terminate after a given number of iterations:\n"}
{"snippet": "i = 0\nwhile i < 10:\n    i = i+1\n    print i\n", "intent": "***\nOne of the most important concepts in programming is a \"loop\". A loop executes a section of code repeatedly. Run the code below for an example.\n"}
{"snippet": "print ('Dictionaries are equal? ')\nd1 = {}\nd1['a'] = 'A'\nd1['b'] = 'B'\nd2 = {}\nd2['b'] = 'B'\nd2['a'] = 'A'\nprint( d1 == d2)\n", "intent": "A regular dict looks at its contents when testing for equality. An OrderedDict also considers the order the items were added.\nA normal Dictionary:\n"}
{"snippet": "print( 'Dictionaries are equal? ')\nd1 = OrderedDict()\nd1['a'] = 'A'\nd1['b'] = 'B'\nd2 = OrderedDict()\nd2['b'] = 'B'\nd2['a'] = 'A'\nprint (d1 == d2)\n", "intent": "An Ordered Dictionary:\n"}
{"snippet": "print ('Earliest  :', datetime.date.min)\nprint ('Latest    :', datetime.date.max)\nprint ('Resolution:', datetime.date.resolution)\n", "intent": "As with time, the range of date values supported can be determined using the min and max attributes.\n"}
{"snippet": "by(SalePrice, ExterQual, FUN=meansd)\n", "intent": "Consider the null hypothesis:\n$$H_0: \\text{the mean responses is equal for all groups}$$\n"}
{"snippet": "def hello(name='Jose'):\n    print( 'The hello() function has been executed')\n    def greet():\n        return '\\t This is inside the greet() function'\n    def welcome():\n        return \"\\t This is inside the welcome() function\"\n    print (greet())\n    print (welcome())\n    print (\"Now we are back inside the hello() function\")\n", "intent": "Great! So we've seen how we can treat functions as objects, now lets see how we can define functions inside of other functions:\n"}
{"snippet": "def hello():\n    return 'Hi Jose!'\ndef other(func):\n    print ('Other code would go hereddd')\n    print (func())\n", "intent": "Now lets see how we can pass functions as arguments into other functions:\n"}
{"snippet": "for k,v in d.iteritems():\n    print (k)\n    print (v)  \n", "intent": "Calling the items() method returns a list of tuples. Now we can iterate through them just as we did in the previous examples.\n"}
{"snippet": "def ran_check(num,low,high):\n    if num in range(low,high+1):  \n        print (\" %s is in the range\" %str(num)  )\n    else :  \n        print (\"The number is outside the range.\")\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "s = 'STRING'\nprint('Place another string with a mod and s: %s' % (s))\n", "intent": "You can use the %s to format strings into your print statements.\n"}
{"snippet": "g1 = titanic.groupby(['sex']).aggregate({'age': pd.DataFrame.mean})\n", "intent": "Compute the mean of the `age` column grouped by `sex`:\n"}
{"snippet": "mysize = (2000 / (np.array(range(1, 100)))).astype(int)\nprint (mysize, mysize.shape)\n", "intent": "we want distributions of different sizes (all integers between 10 and 2000)\n"}
{"snippet": "import os\nimport sys\nimport numpy as np\nimport pylab as pl\nimport json\nimport os\ns = json.load( open(os.getenv(\"PUI2015\")+\"/fbb_matplotlibrc.json\") )\npl.rcParams.update(s)\nfrom IPython.display import Image\nImage(filename='../plotsforclasses/NYCReentryprogram_title.png')\n", "intent": "http://www.mdrc.org/sites/default/files/What%20Strategies%20Work%20for%20the%20Hard%20FR.pdf \n"}
{"snippet": "q = QuantumRegister(5, 'q')\nc = ClassicalRegister(5, 'c')\nshor = QuantumCircuit(q, c)\ncircuit_aperiod15(shor,q,c,7)\nshor.draw(output='mpl')\n", "intent": "Let's build and run a circuit for $a = 7$, and plot the the circuit and results:\n"}
{"snippet": "def display_outliers(dataframe, col, param=1.5):\n    Q1 = np.percentile(dataframe[col], 25)\n    Q3 = np.percentile(dataframe[col], 75)\n    tukey_window = param*(Q3-Q1)\n    less_than_Q1 = dataframe[col] < Q1 - tukey_window\n    greater_than_Q3 = dataframe[col] > Q3 + tukey_window\n    tukey_mask = (less_than_Q1 | greater_than_Q3)\n    return dataframe[tukey_mask]\n", "intent": "Next, we will work with the numeric features to identify outliers. As before, we will use the Tukey Method.\n"}
{"snippet": "feature_dim = 2  \nsample_Total, training_input, test_input, class_labels = Wine(training_size=20,\n                                                              test_size=10, n=feature_dim, PLOT_DATA=True)\ntemp = [test_input[k] for k in test_input]\ntotal_array = np.concatenate(temp)\n", "intent": "Here we choose the `Wine` dataset which has 3 classes.\n"}
{"snippet": "var_dag.properties()\n", "intent": "This randomly-chosen realization of the variational form has the same circuit properties as the circuit we instantiated in Step 3.\n"}
{"snippet": "tk_pass_manager = PassManager()\ntk_pass = TketPass(aer_backend)\ntk_pass_manager.append(tk_pass)\n", "intent": "Now, we set up a transpiler using Terra and the `TketPass` from `pytket`.\n"}
{"snippet": "var_dag_transpiled.properties()\n", "intent": "Let's check the properties of this circuit to see how the transpiled circuit differs from the original one.\n"}
{"snippet": "real_backend = IBMQ.get_backend('ibmq_16_melbourne')\n", "intent": "We'll use the `ibmq_16_melbourne` backend.\n"}
{"snippet": "Chart(titanic).mark_bar().encode(\n    Y('age', aggregate='mean', title='Mean age'),\n    X('sex:O', title='Sex')\n)\n", "intent": "Create an Altair visualization that shows the same information as this groupby:\n"}
{"snippet": "transpile_dag(var_dag, coupling_map=real_backend.configuration().coupling_map).properties()\n", "intent": "We can compare these results to Qiskit's own default transpilation by passing in the backend's `coupling_map` to the `transpile_dag` function.\n"}
{"snippet": "import os\nos.environ['KMP_DUPLICATE_LIB_OK']='True'\n", "intent": "First, we'll use VQE to estimate the ground state and its energy.\n"}
{"snippet": "exact_eigensolver = ExactEigensolver(qubit_op, k=1)\nresult_ee = exact_eigensolver.run()\nreference_energy = result_ee['energy']\nprint('The exact ground state energy is: {}'.format(result_ee['energy']))\n", "intent": "Using a classical exact eigenvalue solver, we can establish the reference groundtruth value of the ground state energy:\n"}
{"snippet": "print(len(multiple_outliers(numeric_log_std_sc_df, count=4)), len(multiple_outliers(numeric_log_gel_sc_df, count=4)))\nprint(len(multiple_outliers(numeric_log_std_sc_df, count=4))/numeric_log_std_sc_df.shape[0])\n", "intent": "We set the multiple feature count higher and reassess.\n"}
{"snippet": "for line in result['printable']:\n    print(line)\n", "intent": "There is also a 'printable' field containing a complete ready to print readable result\n"}
{"snippet": "qiskit_chemistry_dict['algorithm']['name'] = 'VQE'\nqiskit_chemistry_dict['optimizer'] = {'name': 'COBYLA', 'maxiter': 25000}\nqiskit_chemistry_dict['variational_form'] = {'name': 'UCCSD'}\nqiskit_chemistry_dict['initial_state'] = {'name': 'HartreeFock'}\nsolver = QiskitChemistry()\nresult = solver.run(qiskit_chemistry_dict)\nprint('Ground state energy: {}'.format(result['energy']))\nfor line in result['printable']:\n    print(line)\n", "intent": "We update the dictionary, for VQE with UCCSD, and run the computation again.\n"}
{"snippet": "backend = LegacySimulators.get_backend('statevector_simulator')\nquantum_instance = QuantumInstance(backend, pass_manager=PassManager())\nret = eoh.run(quantum_instance)\nprint('The result is\\n{}'.format(ret))\n", "intent": "We can then configure the quantum backend and execute our `EOH` instance:\n"}
{"snippet": "ret = run_algorithm(params, algo_input, backend=backend)\nprint('The result is\\n{}'.format(ret))\n", "intent": "With all the necessary pieces prepared, we can then proceed to run the algorithm and examine the result.\n"}
{"snippet": "state_in_vec = state_in.construct_circuit('vector')\ngroundtruth = expm(-1.j * h1 * evo_time) @ state_in_vec\nprint('The directly computed groundtruth evolution result state is\\n{}.'.format(groundtruth))\n", "intent": "With the operator and the initial state, we can easily compute the groundtruth evolution result as follows.\n"}
{"snippet": "Chart(titanic).mark_point(filled=True, fillOpacity=0.75).encode(\n    X('age'),\n    Y('sex'),\n    Color('alive')\n)\n", "intent": "Create an Altair visualization that shows the same information as this groupby:\n"}
{"snippet": "pauli_dict = {\n    'paulis': [{\"coeff\": {\"imag\": 0.0, \"real\": -1.052373245772859}, \"label\": \"II\"},\n              {\"coeff\": {\"imag\": 0.0, \"real\": 0.39793742484318045}, \"label\": \"ZI\"},\n              {\"coeff\": {\"imag\": 0.0, \"real\": -0.39793742484318045}, \"label\": \"IZ\"},\n              {\"coeff\": {\"imag\": 0.0, \"real\": -0.01128010425623538}, \"label\": \"ZZ\"},\n              {\"coeff\": {\"imag\": 0.0, \"real\": 0.18093119978423156}, \"label\": \"XX\"}\n              ]\n}\nqubitOp = Operator.load_from_dict(pauli_dict)\n", "intent": "Here an Operator instance is created for our Hamiltonian. In this case the paulis are from a previously computed Hamiltonian for simplicity\n"}
{"snippet": "if True:\n    np.random.seed(8123179)\n    number_list = partition.random_number_list(5, weight_range=25)\n    qubitOp, offset = partition.get_partition_qubitops(number_list)\n    algo_input.qubit_op = qubitOp\n    print(number_list)\n", "intent": "We also offer a function to generate a set of numbers as a input.\n"}
{"snippet": "if Prob_win > qProb_win :\n    print(\"The classical strategy gave Alice and Bob higher chances of winning\")\nelse:\n    print(\"The quantum strategy gave Alice and Bob higher chances of winning\")\n", "intent": "So, according to the strategies chosen how did you fare?\n"}
{"snippet": "W <- wilcox.test(SalePrice,\n                 mu = 1.62e5, \n                 conf.level = 0.90,\n                 conf.int = TRUE)\n", "intent": "https://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test\n"}
{"snippet": "eve_table = []\nfor index in range(len(qr)): \n    if 0.5 < np.random.random(): \n        eve.h(qr[index])        \n        eve_table.append('X')\n    else:\n        eve_table.append('Z')\n", "intent": "Just like Bob, Eve doesn't know which basis to use and she picks them randomly while recording her choice in a (table) list\n"}
{"snippet": "for index in range(len(qr)): \n    eve.measure(qr[index], cr[index])\nbackend = Aer.get_backend('qasm_simulator')    \nresult = execute(eve, backend=backend, shots=1).result()\neve_key = list(result.get_counts(eve))[0]\neve_key = eve_key[::-1]\n", "intent": "She measures according to her basis choice and she generates her candidate key\n"}
{"snippet": "numberOfSinglets = 500\n", "intent": "Supose Alice and Bob want to generate a secret key using $N$ singlet states prepared by Charlie. \n"}
{"snippet": "circuits = [] \nfor i in range(numberOfSinglets):\n    circuitName = str(i) + ':A' + str(aliceMeasurementChoices[i]) + '_B' + str(bobMeasurementChoices[i])\n    circuitName = singlet + aliceMeasurements[aliceMeasurementChoices[i]-1] + bobMeasurements[bobMeasurementChoices[i]-1] \n    circuits.append(circuitName)\n", "intent": "Now we combine Charlie's device and Alice's and Bob's detectors into one circuit (singlet + Alice's measurement + Bob's measurement).\n"}
{"snippet": "print(circuits[0].name)\n", "intent": "Let us look at the name of one of the prepared circuits.\n"}
{"snippet": "titanic['survived'] = titanic.alive.map({'yes': 1, 'no': 0})\n", "intent": "Create an Altair visualization that shows the same information as this groupby:\n"}
{"snippet": "result.get_counts(circuits[0])\n", "intent": "Look at the output of the execution of the first circuit.\n"}
{"snippet": "corr = chsh_corr(result) \nprint('CHSH correlation value: ' + str(round(corr, 3)))\nprint('Length of the key: ' + str(keyLength))\nprint('Number of mismatching bits: ' + str(abKeyMismatches) + '\\n')\n", "intent": "Now let us print all the interesting values.\n"}
{"snippet": "circuits = [] \nfor j in range(numberOfSinglets):\n    circuitName = str(j) + ':A' + str(aliceMeasurementChoices[j]) + '_B' + str(bobMeasurementChoices[j] + 2) + '_E' + str(eveMeasurementChoices[j][0]) + str(eveMeasurementChoices[j][1] - 1)\n    circuitName = singlet + eveMeasurements[eveMeasurementChoices[j][0]-1] + eveMeasurements[eveMeasurementChoices[j][1]-1] + aliceMeasurements[aliceMeasurementChoices[j]-1] +  bobMeasurements[bobMeasurementChoices[j]-1]\n    circuits.append(circuitName)\n", "intent": "Like we did before, now we create the circuits with singlet states and detectors of Eve, Alice and Bob. \n"}
{"snippet": "qqnorm(SalePrice)\nqqline(SalePrice)\n", "intent": "The quantiles of a given data set are plotted against the quantiles of a reference distribution, typically the standard normal distribution.\n"}
{"snippet": "print(str(circuits[0].name) + '\\t' + str(result.get_counts(circuits[0])))\n", "intent": "Let us look at the name of the first circuit and the output after it is executed.\n"}
{"snippet": "aliceKey = [] \nbobKey = [] \neveKeys = [] \nfor j in range(numberOfSinglets):\n    if (aliceMeasurementChoices[j] == 2 and bobMeasurementChoices[j] == 1) or (aliceMeasurementChoices[j] == 3 and bobMeasurementChoices[j] == 2):  \n        aliceKey.append(aliceResults[j]) \n        bobKey.append(-bobResults[j]) \n        eveKeys.append([eveResults[j][0], -eveResults[j][1]]) \nkeyLength = len(aliceKey) \n", "intent": "As before, Alice, Bob and Eve create the secret keys using the results obtained after measuring the observables $W \\otimes W$ and $Z \\otimes Z$.\n"}
{"snippet": "abKeyMismatches = 0 \neaKeyMismatches = 0 \nebKeyMismatches = 0 \nfor j in range(keyLength):\n    if aliceKey[j] != bobKey[j]: \n        abKeyMismatches += 1\n    if eveKeys[j][0] != aliceKey[j]:\n        eaKeyMismatches += 1\n    if eveKeys[j][1] != bobKey[j]:\n        ebKeyMismatches += 1\n", "intent": "To find out the number of mismatching bits in the keys of Alice, Bob and Eve we compare the lists *aliceKey*, *bobKey* and *eveKeys*.\n"}
{"snippet": "eaKnowledge = (keyLength - eaKeyMismatches)/keyLength \nebKnowledge = (keyLength - ebKeyMismatches)/keyLength \n", "intent": "It is also good to know what percentage of the keys is known to Eve.\n"}
{"snippet": "corr = chsh_corr(result)\n", "intent": "Using the *chsh_corr* function defined above we calculate the CSHS correlation value.\n"}
{"snippet": "stat_column_names = [\"HP\",\"Attack\",\"Defense\",\"Sp. Atk\",\"Sp. Def\",\"Speed\"]\ntype_column_names = ['Type 1', 'Type 2']\ncolumn_names = ['Name', 'Type 1', 'Type 2',\"HP\",\"Attack\",\"Defense\",\"Sp. Atk\",\"Sp. Def\",\"Speed\"]\nstat_subset = data.loc[:, column_names]\nstat_subset = stat_subset.rename(index=str, columns={\"Type 1\": \"Type_1\", \"Type 2\": \"Type_2\", \"Sp. Atk\": \"Sp._Atk\", \"Sp. Def\": \"Sp._Def\"})\n", "intent": "What kind of correlation exists between Type 1 various Stats (Attack, Defense, Sp. Attak, etc.) and Type 2 and various Stats?\n"}
{"snippet": "Image(filename=\"error_correction_files/error_correction_27_0.png\", width=250, height=300)   \n", "intent": "We started by the following codes in Qasm:\n"}
{"snippet": "Image(filename=\"error_correction_files/error_correction_39_0.png\", width=900, height=600)\n", "intent": "A sample code of the Grover's algorithm with the marked state 000 is shown below, where we simulated the process and got satisfacting results.\n"}
{"snippet": "if hist:\n    plot_histogram(result.get_counts(qc))\nelse:    \n    data_ampl = result.get_data(qc)\n    state_walk = data_ampl['statevector']\n    rho_walk = np.outer(state_walk,state_walk.conj())\n    plot_state(rho_walk,'qsphere')\n", "intent": "The result of simulation represented below as histogram if `hist=True` \n(or as Quantum Sphere if `hist=False`)\n"}
{"snippet": "wrd1 = input(\"Adjective: \")\n", "intent": "**Hello** I am Markdown.\n"}
{"snippet": "for backend in IBMQ.backends():\n    print(backend)\n", "intent": "A backend is either an online Quantum simulator or a Quantum Computer.\nThis is how you can list them by name:\n"}
{"snippet": "backend_0 = IBMQ.backends()[0] \nprint(backend_0.configuration())\n", "intent": "Additionally, you can get all of their configurations, like so:\n"}
{"snippet": "def input_state(circ, q, n):\n    for j in range(n):\n        for k in range(j):\n            circ.cu1(math.pi/float(2**(j-k)), q[j], q[k])\n        circ.h(q[j])\n", "intent": "First let's define the QFT function, as well as a function that creates a state from which a QFT will return 1:\n"}
{"snippet": "q = QuantumRegister(3)\nc = ClassicalRegister(3)\nqft3 = QuantumCircuit(q, c)\ninput_state(qft3, q, 3)\nqft(qft3, q, 3)\nfor i in range(3):\n    qft3.measure(q[i], c[i])\nprint(qft3.qasm())\n", "intent": "Let's now implement a QFT on a prepared three qubit input state that should return $001$:\n"}
{"snippet": "q = QuantumRegister(5, 'q')\nc = ClassicalRegister(5, 'c')\nshor = QuantumCircuit(q, c)\ncircuit_aperiod15(shor,q,c,7)\nbackend = Aer.get_backend('qasm_simulator')\nsim_job = execute([shor], backend)\nsim_result = sim_job.result()\nsim_data = sim_result.get_counts(shor) \nplot_histogram(sim_data)\n", "intent": "Let's build and run a circuit for $a = 7$, and plot the results:\n"}
{"snippet": "Chart(stat_subset).mark_bar().encode(\n    X('HP', bin=Bin(max=30)),\n    Y('*', aggregate='count')\n)\n", "intent": "What are the distributions of the various statistics?\n"}
{"snippet": "for step in [5,10,20,40]:\n    new_state = [1,0,0] \n    for i in range(step):\n        new_state = evolve(A,new_state)\n    print(new_state)\n", "intent": "<b> The system converges to a fixed probabilistic state </b>.\nMoreover, the converged probabilistic state is an equal distribution.\n"}
{"snippet": "from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, execute, Aer\nfrom qiskit.tools.visualization import matplotlib_circuit_drawer as drawer\nqreg3 =  QuantumRegister(1)\ncreg3 = ClassicalRegister(1)\nmycircuit3 = QuantumCircuit(qreg3,creg3)\nmycircuit3.x(qreg3[0])\nmycircuit3.h(qreg3[0])\nmycircuit3.measure(qreg3,creg3)\nprint(\"Everything looks fine, let's continue ...\")\n", "intent": "<h3>Solution</h3>\n<h4>Experiment 1: x-gate, h-gate, and measurement </h4>\n"}
{"snippet": "from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, execute, Aer\nfrom qiskit.tools.visualization import matplotlib_circuit_drawer as drawer\nqreg4 =  QuantumRegister(1)\ncreg4 = ClassicalRegister(1)\nmycircuit4 = QuantumCircuit(qreg4,creg4)\nmycircuit4.x(qreg4[0])\nmycircuit4.h(qreg4[0])\nmycircuit4.h(qreg4[0])\nmycircuit4.measure(qreg4,creg4)\nprint(\"Everyhing looks fine, let's continue ...\")\n", "intent": "<h4>Experiment 2: x-gate, h-gate, h-gate, and measurement </h4>\n"}
{"snippet": "pH = (1/3) * (pHD1 + pHD2 + pHD3)\n", "intent": "**Part C**: Use your results from **Part B** and the Law of Total Probability to compute $P(H)$\n"}
{"snippet": "from qiskit.tools.visualization import matplotlib_circuit_drawer as drawer\ndrawer(circuit)\n", "intent": "<h4>Draw the circuit</h4>\nWe can draw our circuit.  \nIf the circuit does not appear in the first run, please re-run the cell.\n"}
{"snippet": "IBMQ.stored_accounts()\n", "intent": "<h4> See the stored account(s) </h4>\n"}
{"snippet": "IBMQ.load_accounts()\n", "intent": "<h4> Load our account(s) </h4>\n"}
{"snippet": "IBMQ.active_accounts()\n", "intent": "<h4> See the active account(s) </h4>\n"}
{"snippet": "IBMQ.backends(operational=True, simulator=False)\n", "intent": "<h4> See the currently operational real quantum computer(s)</h4>\n"}
{"snippet": "index = requests.get(\"http://www.lyricsfreak.com/s/sara+bareilles/\")\nsoup = BeautifulSoup(index.text, 'html.parser')\nstuff = [link.get('href') for link in soup.find_all('tbody')[0].find_all('a')]\nprint (stuff)\n", "intent": "First get the page that has an index of all the lyrics and create a list of the URLs of those pages:\n"}
{"snippet": "backend = least_busy(IBMQ.backends(simulator=True))\nbackend.name()\n", "intent": "<h4> Use the simulator as backend </h4>\n"}
{"snippet": "from qiskit import compile\nqobj = compile(circuit, backend=backend, shots=1024)\n", "intent": "<h4> Create a job for the backend </h4>\n"}
{"snippet": "job = backend.run(qobj)\n", "intent": "<h4> Execute this job on the simulator </h4>\n"}
{"snippet": "posterior1 = (pHD1 * 1/3) / pH\nposterior2 = (pHD2 * 1/3) / pH\nprint(\"P(D1 | H): {}\".format(posterior1))\nprint(\"P(D2 | H): {}\".format(posterior2))\n", "intent": "**Part D**: Now, use Bayes' Rule to compute $P(D_i \\mid H)$ for $i=1$ and $2$ (because these are the doors we care about). \n"}
{"snippet": "backend_real = least_busy(IBMQ.backends(simulator=False))\nbackend_real.name()\nbackend_real.status()\n", "intent": "<h4> Use the least busy real machine as backend </h4>\n"}
{"snippet": "result_real = job_real.result()\ncounts_real = result_real.get_counts()\nprint(counts_real)\n", "intent": "<h4> Check the result </h4>\n"}
{"snippet": "number = 5 \nreal = -3.4 \nname = 'Asja' \nsurname = \"Sarkana\" \nboolean1 = True \nboolean1 = False \n", "intent": "<a id=\"Variables\"></a>\n<h3> Variables </h3>\n"}
{"snippet": "a = 13\nb = 5\nprint(\"a =\",a)\nprint(\"b =\",b)\nprint()\nprint(\"a + b =\",a+b)\nprint(\"a - b =\",a-b)\nprint(\"a * b =\",a*b)\nprint(\"a / b =\",a/b)\n", "intent": "<h4> Basic operators </h4>\n"}
{"snippet": "a = 13\nb = 5\nprint(\"a =\",a)\nprint(\"b =\",b)\nprint()\nprint(\"a//b =\",a//b)\nprint(\"a mod b =\",a % b)\n", "intent": "<h4> Integer division and modulus operators </h4>\n"}
{"snippet": "r = requests.get('http://www.lyricsfreak.com/s/sara+bareilles/1000+times_21062308.html')\nsoup = BeautifulSoup(r.text, 'html.parser')\nhtml_lyrics = soup.find_all('div', id='content_h')\nhtml_lyrics = [l.getText() for l in html_lyrics]\nprint (html_lyrics)\nprint ('\\n'.join(html_lyrics))\n", "intent": "Here is a function that takes the URL of a single lyric page and scrapes the actual lyric as text:\n"}
{"snippet": "mydictionary = {\n    'name' : \"Asja\",\n    'surname':'Sarkane',\n    'age': 23\n}\nprint(mydictionary)\nprint(mydictionary['surname'])\n", "intent": "<h4> Dictionary </h4>\n"}
{"snippet": "list_of_other_objects =[\n    mylist,\n    mytuple,\n    3,\n    \"Asja\",\n    mydictionary\n]\nprint(list_of_other_objects)\n", "intent": "<h4>List of the other objects or variables </h4>\n"}
{"snippet": "print(len(\"Asja Sarkane\"))\nprint(len([1,2,3,4]))\nmydictionary = { 'name' : \"Asja\", 'surname':'Sarkane', 'age': 23}\nprint(len(mydictionary))\n", "intent": "<a id=\"Size_of_an_object\"></a>\n<h3> Size of an object </h3>\nWe use the method \"len()\" that takes an object as the input.\n"}
{"snippet": "print(b'hello world'.hex())\nprint(bytes.fromhex('68656c6c6f20776f726c64'))\n", "intent": "Here is how we convert binary to/from hex:\n"}
{"snippet": "for i in range(10): \n    print(i)\n", "intent": "<h4> For-loop </h4>\n"}
{"snippet": "for a in range(4,7):\n    if a<5: \n        print(a,\"is less than 5\")\n    elif a==5: \n        print(a,\"is equal to 5\")\n    else:\n        print(a,\"is greater than 5\")\n", "intent": "<a id=\"Conditionals\"></a>\n<h3>Conditionals </h3>\n"}
{"snippet": "i = -3\nj = 4\nif i<0 and j > 0:  \n    print(i,\"is negative AND\",j,\"is positive\")\n", "intent": "<h4> Logical operator \"and\"</h4>\n"}
{"snippet": "i = -2\nj = 2\nif i==2 or j == 2:  \n    print(\"i OR j is 2: (\",i,\",\",j,\")\")\n", "intent": "<h4>Logical operator \"or\"</h4>\n"}
{"snippet": "i = 3\nif not (i==2):\n    print(i,\"is NOT equal to 2\")\n", "intent": "<h4>Logical operator \"not\" </h4>\n"}
{"snippet": "def reverse(string):\n    return string[::-1]\n", "intent": "Define a function reverse() that computes the reversal of a string. For example, \n    \"gnitset ma I\"\n"}
{"snippet": "i = 4\nif i != 3:\n    print(i,\"is NOT EQUAL TO 3\")\n", "intent": "<h4> Operator \"not equal to\" </h4>\n"}
{"snippet": "i = 2\nif i <= 5:\n    print(i,\"is LESS THAN OR EQUAL TO 5\")\n", "intent": "<h4> Operator \"less than or equal to\" </h4>\n"}
{"snippet": "i = 5\nif i >= 1:\n    print(i,\"is GREATER THAN OR EQUAL TO 3\")\n", "intent": "<h4> Operator \"greater than or equal to\" </h4>\n"}
{"snippet": "for i in range(10):\n    print(generate_example({1, 2, 3, 4, 5}))\n", "intent": "Test that your function doesn't always return the same output:\n"}
{"snippet": "list1 = [1,2,3]\nlist2 = [4,5,6]\nlist3 = list1 + list2\nprint(list3)\nlist4 = list2 + list1\nprint(list4)\n", "intent": "<h4> Concatenation of two lists </h4>\n"}
{"snippet": "list = [0,1,2]\nlist.append(3)\nprint(list)\nlist = list + [4]\nprint(list)\n", "intent": "<h4> Appending a new element </h4>\n"}
{"snippet": "def summation_of_integers(n):\n    summation = 0\n    for integer in range(n+1):\n        summation = summation + integer\n    return summation\nprint(summation_of_integers(10))\nprint(summation_of_integers(20))\n", "intent": "<a id=\"Functions\"></a>\n<h3>Functions</h3>\n"}
{"snippet": "from random import randrange\nprint(randrange(10),\"is picked randomly between 0 and 9\")\nprint(randrange(-9,10),\"is picked randomly between -9 and 9\")\nprint(randrange(0,20,3),\"is picked randomly from the list [0,3,6,9,12,15,18]\")\n", "intent": "<a id=\"Random_number\"></a>\n<h3>Random number</h3>\nWe can use method \"randrange()\".\n"}
{"snippet": "for i in range(10): print(i)\n", "intent": "<h3> For-loop </h3>\n"}
{"snippet": "def vector_manipulation():\n    z=np.zeros(10)\n    z[4]=1\n    return z\n", "intent": "Return a vector of zeros of size 10 but with the fifth value as 1. Function takes no inputs.\n"}
{"snippet": "from random import randrange\nr = randrange(10)\nif r > 5: print(r) \n", "intent": "<h2> Basics of Python: Conditionals </h2>\nWe review using conditionals in python here. \nPlease run each cell and check the results.\n"}
{"snippet": "ASJA = ['Asja','Sarkane',34,'musician',180,65.5,[],['Eleni','Fyodor'],\"October 24, 2018\"]\nprint(ASJA)\n", "intent": "<h3> Lists of different objects </h3>\nA list can have any type of values.\n"}
{"snippet": "v = [-4,3]\nu = [-3,-4]\nresult = 0;\nfor i in range(2):\n    result = result + v[i]*u[i]\nprint(\"the inner product of u and v is\",result)\n", "intent": "Now, let's check the inner product of the following two vectors:\n<img src=\"../images/length_v_u.jpg\" width=\"40%\">\n"}
{"snippet": "def little_endian_to_int(b):\n    pass\ndef int_to_little_endian(n, length):\n    pass\n", "intent": "Add `little_endian_to_int()` and `int_to_little_endian()` methods to your library.\n"}
{"snippet": "job = execute(mycircuit2,Aer.get_backend('qasm_simulator'),shots=500)\ncounts = job.result().get_counts(mycircuit2)\nprint(counts)\n", "intent": "<h3> Task 2 </h3>\nGuess the outcome by checking the circuit.\nThen, compare your guess with the result obtained after executing our circuit 500 times.\n"}
{"snippet": "def print_outcomes(counts): \n    for outcome in counts: \n        reverse_outcome = ''\n        for i in outcome: \n            reverse_outcome = i + reverse_outcome \n        print(reverse_outcome,\"is observed\",counts[outcome],\"times\")\njob = execute(mycircuit2,Aer.get_backend('qasm_simulator'),shots=1024)\ncounts = job.result().get_counts(mycircuit2) \nprint_outcomes(counts)\n", "intent": "<h3> Reverse the output </h3>\nLet's write a method to print the reverse the outcomes as we expected.\nYou may use this method later.\n"}
{"snippet": "from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, execute, Aer\nfrom qiskit.tools.visualization import matplotlib_circuit_drawer as drawer\nqreg1 =  QuantumRegister(1)\ncreg1 = ClassicalRegister(1)\nmycircuit1 = QuantumCircuit(qreg1,creg1)\nmycircuit1.h(qreg1[0])\nmycircuit1.measure(qreg1,creg1)\nprint(\"Everything looks fine, let's continue ...\")\n", "intent": "<h4> The circuit with a single Hadamard </h4>\nLet's desing a circuit with one qubit, and apply quantum coin-flipping once.\n"}
{"snippet": "job = execute(mycircuit1,Aer.get_backend('qasm_simulator'),shots=10000)\ncounts1 = job.result().get_counts(mycircuit1)\nprint(counts1) \n", "intent": "<img src=\"../images/photon1.jpg\" width=\"40%\">\n"}
{"snippet": "from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, execute, Aer\nfrom qiskit.tools.visualization import matplotlib_circuit_drawer as drawer\nqreg2 =  QuantumRegister(1)\ncreg2 = ClassicalRegister(1)\nmycircuit2 = QuantumCircuit(qreg2,creg2)\nmycircuit2.h(qreg2[0])\nmycircuit2.h(qreg2[0])\nmycircuit2.measure(qreg2,creg2)\nprint(\"Everyhing looks fine, let's continue ...\")\n", "intent": "<h4> The circuit with two Hadamards </h4>\nWe design a circuit with one qubit, and apply quantum coin-flipping twice.\n"}
{"snippet": "def vector_range():\n    return np.arange(10,50)\n", "intent": "Return a vector with values ranging from 10 to 49, inclusive. Do not write out each element in the array.\n"}
{"snippet": "result = my_algorithm.Q_program.execute(my_algorithm.circ_name, backend=my_algorithm.backend, shots= my_algorithm.shots)\ncounts = result.get_counts(my_algorithm.circ_name) \nprint('\\nThe measured outcomes of the circuits are:',counts)\n", "intent": "Now that everything is ready, the user can run the quantum algorithm soecified by the steps above. \n"}
{"snippet": "job = execute(circuit, backend, shots=100)\nresult = job.result()\nresult.get_counts(circuit)\n", "intent": "We execute this circuit on the simulator and observe the statistics:\n"}
{"snippet": "from qiskit.tools.visualization import circuit_drawer\nq = QuantumRegister(1)\nc = ClassicalRegister(1)\ncircuit = QuantumCircuit(q, c)\ncircuit.measure(q[0], c[0])\ncircuit_drawer(circuit)\n", "intent": "There are three handy ways of visualizing what we are doing. The first one is drawing the circuit:\n"}
{"snippet": "def little_endian_to_int(b):\n    return int.from_bytes(b, 'little')\ndef int_to_little_endian(n, length):\n    return n.to_bytes(length, 'little')\n", "intent": "Add `little_endian_to_int()` and `int_to_little_endian()` methods to your library.\n"}
{"snippet": "one_ket = np.array([[0], [1]])\nzero_ket.T.conj().dot(one_ket)\n", "intent": "Similarly, orthogonal vectors always give 0. E.g. $\\langle 0|1\\rangle$:\n"}
{"snippet": "zero_ket.dot(zero_ket.T.conj())\n", "intent": "What about a ket and a bra? That is going to be a matrix: essentially the outer product of the two vectors. Here's $|0\\rangle\\langle 0|$:\n"}
{"snippet": "q = QuantumRegister(2)\nc = ClassicalRegister(2)\ncircuit = QuantumCircuit(q, c)\ncircuit.h(q[0])\ncircuit.cx(q[0], q[1])\ncircuit.measure(q, c)\njob = execute(circuit, backend, shots=100)\nplot_histogram(job.result().get_counts(circuit))\n", "intent": "What happens if we make measurements on an entangled state? Let's look at the statistics again on the $|\\phi^+\\rangle$ state:\n"}
{"snippet": "backend = BasicAer.get_backend('qasm_simulator')\njob = execute(circuit, backend, shots=100)\nplot_histogram(job.result().get_counts(circuit))\n", "intent": "Finally, we can plot the statistics:\n"}
{"snippet": "J = np.array([[0,1],[0,0]])\nHc = reduce(lambda x,y:x+y,\n        [product_pauli_z(i,j, -J[i,j])\n         for i,j in itertools.product(range(n_qubits), repeat=2)])\nHc.to_matrix()\n", "intent": "Then we define the cost Hamiltonian:\n"}
{"snippet": "def reverse(vec):\n    return vec[::-1]\n", "intent": "Write a function, `reverse(x)` which reverses a vector, so that the first element becomes the last element.\n"}
{"snippet": "init_state_vect = [1 for i in range(2**n_qubits)]\ninit_state = Custom(n_qubits, state_vector=init_state_vect)\n", "intent": "The initial state is a uniform superposition of all the states $|q_1,...,q_n\\rangle$\n"}
{"snippet": "qr = QuantumRegister(n_qubits)\ncircuit_init = init_state.construct_circuit('circuit', qr)\n", "intent": "The initial circuit prepares the initial state\n"}
{"snippet": "def evolve(hamiltonian, angle, quantum_registers):\n    return hamiltonian.evolve(None, angle, 'circuit', 1,\n                              quantum_registers=quantum_registers,\n                              expansion_mode='suzuki',\n                              expansion_order=3)\n", "intent": "We define a function `evolve` that takes a Hamiltonian $H$ and an angle $t$ and returns a circuit component made of the unitary matrix $e^{j H t}$\n"}
{"snippet": "def countDog(input):\n    inputList = input.split()\n    i=0\n    for item in inputList:\n        if item=='dog':\n            i=i+1\n    print(i)\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "result = minimize(evaluate, np.concatenate([gamma, beta]), method='L-BFGS-B')\nresult\n", "intent": "Finally, we optimize the angles:\n"}
{"snippet": "circuit = create_circuit(qr, result['x'][:p], result['x'][p:], p)\n", "intent": "We create a circuit using the optimal parameters found.\n"}
{"snippet": "backend = BasicAer.get_backend('statevector_simulator')\njob = execute(circuit, backend)\nstate = np.asarray(job.result().get_statevector(circuit))\nprint(np.absolute(state))\nprint(np.angle(state))\n", "intent": "We use the `statevector_simulator` backend in order to display the state created by the circuit.\n"}
{"snippet": "Z0 = pauli_z(0, 1)\nZ1 = pauli_z(1, 1)\n", "intent": "Let's now try to evaluate the operators $\\sigma^Z_1$ and $\\sigma^Z_2$ independently:\n"}
{"snippet": "from qiskit.tools.visualization import circuit_drawer\ncircuit_drawer(qft)\n", "intent": "We can plot it to make the qubit dependencies more apparent:\n"}
{"snippet": "def random_array():\n    a=np.random.normal(0,1,(10,30,3))\n    return a\n", "intent": "Return a 10x30x3 array with normally distributed ($\\mu=0,~\\sigma=1)$ random values.\n"}
{"snippet": "backend = BasicAer.get_backend('qasm_simulator')\njob = execute(hhl, backend, shots=100)\nresult = job.result()\ncounts = result.get_counts(hhl)\nprint(get_psuccess(counts))\n", "intent": "Finally we run the circuit on the simulator:\n"}
{"snippet": "initialize = [['x', '0']]\nsuccess_condition = {'ZI': 1.0, 'IZ': -1.0}\nallowed_gates = {'0': {'CNOT': 0}, '1': {'CNOT': 0}, 'both': {}}\nvi = [[], False, False]\nqubit_names = {'0':'the bit on the left', '1':'the bit on the right'}\npuzzle = hello_quantum.run_game(initialize, success_condition, allowed_gates, vi, qubit_names)\n", "intent": "* Now let's make it so you need a couple of `CNOT`s.\n*  Use some CNOTs to turn the left bit off and the right bit on.\n"}
{"snippet": "initialize = []\nsuccess_condition = {'ZI': -1.0}\nallowed_gates = {'0': {'z': 0, 'h': 0}, '1': {}, 'both': {}}\nvi = [[1], True, True]\nqubit_names = {'0':'qubit 0', '1':'qubit 1'}\npuzzle = hello_quantum.run_game(initialize, success_condition, allowed_gates, vi, qubit_names)\n", "intent": "* The `z`, when combined with `h`, can be used to do the job of an `x`\n*  Turn on the bottom circle without using the `x` command\n"}
{"snippet": "import nltk\nnltk.download()\n", "intent": "If not, you need to get them.\n"}
{"snippet": "initialize = [['x', '1'], ['x','0']]\nsuccess_condition = {'XI':1, 'IX':1}\nallowed_gates = {'0': {'z': 0, 'h': 0}, '1': {'z': 0, 'h': 0}, 'both': {}}\nvi = [[], True, True]\nqubit_names = {'0':'qubit 0', '1':'qubit 1'}\npuzzle = hello_quantum.run_game(initialize, success_condition, allowed_gates, vi, qubit_names)\n", "intent": "* The `z` commands affect the top columns in a similar way.\n* The `h` command swaps the bottom and top columns.\n*  Turn off the top cirlces.\n"}
{"snippet": "initialize = [['x','1']]\nsuccess_condition = {'IZ':1.0,'ZI':-1.0}\nallowed_gates = {'0': {'h':0}, '1': {'h':0}, 'both': {'cz':0}}\nvi = [[], True, True]\nqubit_names = {'0':'qubit 0', '1':'qubit 1'}\npuzzle = hello_quantum.run_game(initialize, success_condition, allowed_gates, vi, qubit_names,shots=2000)\n", "intent": "* Another puzzle based on the `swap`.\n* Swap the two qubits:\n    * Turn off the bottom circle for qubit 0.\n    * Turn on the bottom circle qubit 1.\n"}
{"snippet": "initialize = [['h','0'],['h','1']]\nsuccess_condition = {'ZI': -1.0,'IZ': -1.0}\nallowed_gates = {'0': {'bloch':0, 'ry(pi/4)': 0, 'ry(-pi/4)': 0}, '1': {'bloch':0, 'ry(pi/4)': 0, 'ry(-pi/4)': 0}, 'both': {'unbloch':0}}\nvi = [[], True, True]\nqubit_names = {'0':'qubit 0', '1':'qubit 1'}\npuzzle = hello_quantum.run_game(initialize, success_condition, allowed_gates, vi, qubit_names, mode='line')\n", "intent": "* Now let's use these commands on the other qubit too.\n* Turn the bottom lines fully on.\n"}
{"snippet": "P = calculate_P()\nprint(P)\n", "intent": "Now let's actually calculate these values for the method we have chosen to set up and hash the variables.\n"}
{"snippet": "import numpy as np\ndef setup_variables ( A, B, qc ):\n    for line in puzzle.program:\n        eval(line)\n", "intent": "Now the program as written above will be used to set up the quantum variables.\n"}
{"snippet": "def sorted_array():\n    a=np.random.rand(10)\n    return np.sort(a)\n", "intent": "In `sorted_array()`, create, sort, and return a vector of size 10 filled with random numbers. It should be sorted in increasing order.\n"}
{"snippet": "fraction = [[],[],[]]\nfor j in range(3):\n    for qubit in range(n):\n        fraction[j].append( tab.children[j].children[qubit].value)\n", "intent": "Once you've chosen, run the cells below to extract the values and create the animation.\n"}
{"snippet": "from qiskit import IBMQ\nIBMQ.load_accounts()\nbackend = IBMQ.get_backend(device)\n", "intent": "To use this device, and to get information about it, we need to set up a Qiskit backend object for it.\n"}
{"snippet": "grid = layout(num,coupling_map,pos)\ngrid.plot()\n", "intent": "Let's take a first glimpse at our qubits.\n"}
{"snippet": "def nsyl(word):\n  return [len(list(y for y in x if y[-1].isdigit())) for x in d[word.lower()]]\n", "intent": "Based on this, we can write a function that determines the number of syllables in a given word.\n"}
{"snippet": "probs = mitigate(probs)\ngrid.plot(probs=probs)\n", "intent": "Let's see what results we get.\n"}
{"snippet": "for gate in [['x','1'],['h','0'],['z','0'],['h','1'],['z','1']]:\n    command = 'grid.qc.'+gate[0]+'(grid.qr['+gate[1]+'])'\n    eval(command)\n    grid.update_grid()\n", "intent": "This has attributes and methods which create and run quantum circuits with Qiskit.\n"}
{"snippet": "grid = hello_quantum.pauli_grid(mode='line')\ngrid.update_grid()\n", "intent": "There is also an alternative visualization, which can be used to better represent non-Clifford gates.\n"}
{"snippet": "c2 = ClassicalRegister(2)\ncirc.add_register(c2)\ncirc.measure(q2, c2)\nresult = execute(circ, backend=backend).result()\nprint(result.get_counts())\n", "intent": "We can see that it used CNOT and Ry gates, but the effect is the same:\n"}
{"snippet": "circ_inv = QuantumCircuit(q3, c3)\ncirc_inv.initialize([0, .5, .5, .0, .5, .0, .0, .5], q3).inverse()\nprint(circ_inv)\n", "intent": "We can use the `inverse()` function to reverse the order of the gates in the quantum circuit. It is like running the program in a backward direction.\n"}
{"snippet": "SELECT person, reading\nFROM Survey\nWHERE person = \"roe\"\nAND quant = \"sal\";\n", "intent": "Write a query that shows her salinity measurements have been fixed.\n"}
{"snippet": "program.measure(qr,cr)\n", "intent": "We don't want to do anything to the qubit, so we'll skip straight to reading it out.\n"}
{"snippet": "job = qiskit.execute( program, qiskit.BasicAer.get_backend('qasm_simulator') )\n", "intent": "Now we'll tell the local simulator to execute this entirely trivial program.\n"}
{"snippet": "q = QuantumRegister(3)\nc = ClassicalRegister(3)\nqc = QuantumCircuit(q, c)\nqc.h(q)\nqc.measure(q, c)\n", "intent": "To obtain $2^3 = 8$ outcomes with the equal likelyhood we need to generate 3 qubits and put them into superposition using The Hadamard gate $H$.\n"}
{"snippet": "numUnique([1,2,1,2,3,2,4])\n", "intent": "Test it by running the cell below. The result should be <tt>4</tt>.\n"}
{"snippet": "job = execute(qc, backend=backend, shots=1)\nresult = job.result().get_counts(qc)\nanswer(result)\n", "intent": "Once we successfully loaded IBM Q account and connected to the least busy quantum computer, it's time to run the program on real device.\n"}
{"snippet": "n = math.ceil(math.log2(len(YEAST))) + 1                 \nqr = QuantumRegister(n)\ncr = ClassicalRegister(n)\nqc_yeast     = encode_bitstring(YEAST, qr, cr)\nqc_protozoan = encode_bitstring(PROTOZOAN, qr, cr)\nqc_bacterial = encode_bitstring(BACTERIAL, qr, cr)\ncircs = {\"YEAST\": qc_yeast, \"PROTOZOAN\": qc_protozoan, \"BACTERIAL\": qc_bacterial}\n", "intent": "We can now create quantum circuits to create the quantum states for the Yeast's, Protozoan's, and Bacterial's.\n"}
{"snippet": "import numpy as np\nimport time\nimport qiskit \nfrom qiskit import QuantumRegister, QuantumCircuit, ClassicalRegister, Aer\nfrom qiskit.providers.aer import noise\nfrom qiskit.tools.visualization import plot_histogram\nfrom qiskit.ignis.mitigation.measurement import (complete_meas_cal,\n                                                       CompleteMeasFitter, MeasurementFilter)\n", "intent": "Code imports\n==============\n"}
{"snippet": "def accept(parameter):\n    states = list(result.get_counts(parameter))\n    for s in states:\n        for integer in s:\n            if integer == \"1\":\n                return \"Reject: the string is not accepted into the language\"\n    return \"Accept: the string is accepted into the language\"\n", "intent": "We can run the above circuit on the simulator. \n"}
{"snippet": "range_lower = 0\nrange_higher = 36\nprime_number = 11\n", "intent": "Insert your own parameters and try even larger prime numbers.\n"}
{"snippet": "SELECT *\nFROM boating\nLIMIT 10;\n", "intent": "In the following queries, we'll do some basic exploration of the data.  Let's first see what a few records look like.\n"}
{"snippet": "prime_number = 3\nlength = 2          \nprint(\"The length of a is\", length, \" while the prime number is\", prime_number)\nqfa1 = qfa_controlled_algorithm(\"a\"* length, prime_number)\n", "intent": "Let us look an example when the QFA should reject the bitstring because the length of the bitstring is not divisible by the prime number.\n"}
{"snippet": "qfa1.draw(output='mpl')\n", "intent": "In the above, we can see that the probability of observing \"1\" is quite significant. Let us see how the circuit looks like. \n"}
{"snippet": "print_number = length = 3 \nprint(\"The length of a is\", length, \" while the prime number is\", prime_number)\nqfa2 = qfa_controlled_algorithm(\"a\"* length, prime_number)\n", "intent": "Now, let us see what happens when the QFAs should accept the input string.\n"}
{"snippet": "a = [\"a\",\"b\",\"c\"]\nb = [1,2,3]\nlists2dict(a,b)\n", "intent": "Test it by running the cell below. The result should be <tt>{'a': 1, 'b': 2, 'c': 3}</tt>.\n"}
{"snippet": "import random\nfor n in range(5):\n    print('Flip '+str(n+1))\n    if random.random()<0.5:\n        print('HEADS\\n')\n    else:\n        print('TAILS\\n')\n", "intent": "One important application of quantum computers is the generation of random numbers. This could be a simple as a coin flip.\n"}
{"snippet": "from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\nq = QuantumRegister(1)\nc = ClassicalRegister(1)\ncirc = QuantumCircuit(q, c)\n", "intent": "To generate a single random bit, we need only one qubit.\n"}
{"snippet": "from qiskit import BasicAer, execute\nbackend = BasicAer.get_backend('qasm_simulator')\njob = execute(circ, backend, shots=5, memory=True)\n", "intent": "Now the circuit is complete, let's run it for 5 shots to get 5 results.\n"}
{"snippet": "data = job.result().get_memory()\nprint(data)\n", "intent": "Our results are extracted from `job.result()` using `get_memory()`.\n"}
{"snippet": "for output in data:\n    print('Flip with output bit value ' +output)\n    if output=='0':\n        print('HEADS\\n')\n    else:\n        print('TAILS\\n')\n", "intent": "For a coin flip, we can simply use `0` to mean heads and `1` to mean tails.\n"}
{"snippet": "SELECT *\nFROM boating\nWHERE tx_type = \"BOAT CHANGE OF TYPE\";\n", "intent": "This should look familiar!\nLet's look at just the \"change\" types.\n"}
{"snippet": "job = execute(circ, BasicAer.get_backend('qasm_simulator'), shots=10, memory=True)\ndata = job.result().get_memory()\nprint(data)\n", "intent": "Now let's get some actual random samples from this distribution. Specifically, let's get ten of them.\n"}
{"snippet": "int_data = []\nfor bitstring in data:\n    int_data.append( int(bitstring,2) )\nprint(int_data)\n", "intent": "These are written in binary, but it is straightforward to convert them into decimal integers.\n"}
{"snippet": "job = execute(circuits, backend=backend, shots=shots)\nresults = job.result()\nprint(\"Experimental Result of Encode01DecodeFirst\")\nplot_histogram(results.get_counts(circuits[circuitNames.index(\"Encode01DecodeFirst\")]))\nprint(\"Experimental Result of Encode01DecodeSecond\")\nplot_histogram(results.get_counts(circuits[circuitNames.index(\"Encode01DecodeSecond\")]))\nprint(\"Experimental Result of Encode11DecodeFirst\")\nplot_histogram(results.get_counts(circuits[circuitNames.index(\"Encode11DecodeFirst\")]))\nprint(\"Experimental Result of Encode11DecodeSecond\")\nplot_histogram(results.get_counts(circuits[circuitNames.index(\"Encode11DecodeSecond\")]))\n", "intent": "Now, we can perform various experiments of $(2,1)$-QRAC. Below, we execute all circuits of QRACs and plot some experimental results. \n"}
{"snippet": "a = [1,2,None,3,4,None,5,6]\nprint trimReduceReverse(a)\n", "intent": "Test it by running the cell below. The result should be <tt>[5, 4, 3, 2]</tt>.\n"}
{"snippet": "backend = least_busy(IBMQ.backends(simulator=False))\njob_exp = execute(circuits, backend=backend, shots=shots)\njob_monitor(job_exp)\n", "intent": "Now, we can perform various experiments of $(3,1)$-QRAC. Below, we execute all circuits of QRACs and plot some experimental results. \n"}
{"snippet": "def ch(qProg, a, b):\n    qProg.u1((lambd-phi)/2, t)\n    qProg.cx(c, t)\n    qProg.u3(-theta/2, 0, -(phi+lambd)/2, t)\n    qProg.cx(c, t)\n    qProg.u3(theta/2, phi, 0, t)\n    return qProg\n", "intent": "We prepare the controlled-Hadamard and controlled-u3 gates that are required in the encoding as below.\n"}
{"snippet": "print('Ground state energy: {}'.format(result['energy']))\n", "intent": "The `run` method returns a result dictionary. Some notable fields include `energy`, which is the computed ground state energy. We can print it.\n"}
{"snippet": "for line in result['printable']:\n    print(line)\n", "intent": "There is also a `printable` field containing a complete ready to print readable result.\n"}
{"snippet": "driver = PySCFDriver(atom='Li .0 .0 .0; H .0 .0 1.6', unit=UnitsType.ANGSTROM,\n                     charge=0, spin=0, basis='sto3g')\nmolecule = driver.run()\n", "intent": "Here, we use LiH in sto3g basis with PySCF driver as an example.\nThe `molecule` object records the information from the PySCF driver.\n"}
{"snippet": "SELECT COUNT(*)\nFROM boating\nWHERE tx_type = \"BOAT CHANGE OF TYPE\";\n", "intent": "How many records do we have here, and which year had the most?\n"}
{"snippet": "results = vqe.run(quantum_instance)\nprint('The computed ground state energy is: {:.12f}'.format(results['eigvals'][0]))\nprint('The total ground state energy is: {:.12f}'.format(results['eigvals'][0] + energy_shift + nuclear_repulsion_energy))\nprint(\"Parameters: {}\".format(results['opt_params']))\n", "intent": "The smallest eigenvalue is stored in the first entry of the `eigvals` key.\n"}
{"snippet": "q = QuantumRegister(3, 'q')\ncirc = QuantumCircuit(q)\n", "intent": "The basic elements needed for your first program are the QuantumCircuit, and QuantumRegister.\n"}
{"snippet": "print(\"Available backends:\")\nIBMQ.backends()\n", "intent": "Once your account has been loaded, you can view the list of backends available to you.\n"}
{"snippet": "def f(x):\n    return x**2\n", "intent": "<b>7. (2 pts)</b><br>\nWithout a <tt>for</tt> loop or any sort of Python comprehension, apply the function:\n"}
{"snippet": "job_get=backend.retrieve_job(jobID)\n", "intent": "Given a job ID, that job object can be later reconstructed from the backend using retrieve_job:\n"}
{"snippet": "job_get.result().get_counts(qc)\n", "intent": "and then the results can be obtained from the new job object. \n"}
{"snippet": "plot_bloch_vector([0,1,0], title='My Bloch Sphere')\n", "intent": "- **title** (str): a string that represents the plot title\n- **figsize** (tuple): Figure size in inches (width, height).\n"}
{"snippet": "IBMQ.delete_accounts()\n", "intent": "Let's start fresh and delete any accounts on disk. If no accounts are on disk this will error\n"}
{"snippet": "IBMQ.stored_accounts()\n", "intent": "verify that there are no accounts stored now\n"}
{"snippet": "SELECT *\nFROM boating\nWHERE tx_type = \"BOAT CHANGE OF TYPE\"\nORDER BY num DESC;\n", "intent": "Which year had the most of these transactions?\n"}
{"snippet": "IBMQ.disable_accounts(token=Qconfig_IBMQ_experience.APItoken)\n", "intent": "Disable that account (so we go back to no accounts active)\n"}
{"snippet": "IBMQ.save_account(Qconfig_IBMQ_experience.APItoken, overwrite=True)\nIBMQ.save_account(Qconfig_IBMQ_network.APItoken, Qconfig_IBMQ_network.url, overwrite=True)\n", "intent": "Save two accounts: a public (IBM Q experience) and a premium (IBM Q network)\n"}
{"snippet": "IBMQ.active_accounts()\n", "intent": "but no account active in current session yet\n"}
{"snippet": "for i in range(10):\n    print(generate_example({1, 4, 8, 2, 5, 3}))\n", "intent": "Also make sure that it can handle a language containing *any* valid sentences, even if they are not 1 through 10:\n"}
{"snippet": "IBMQ.backends(hub='ibm-q-internal')\n", "intent": "now if you want to work with backends of a single account,\nyou can do so via account filtering\n"}
{"snippet": "IBMQ.disable_accounts(hub='ibm-q-internal')\n", "intent": "but you can also just disable account in the current session\n"}
{"snippet": "IBMQ.disable_accounts()\nIBMQ.load_accounts(hub=None)\nIBMQ.backends()\n", "intent": "or from the start use the filtering to just load up that account you're interested in\n"}
{"snippet": "IBMQ.backends(filters=lambda x: x.configuration().n_qubits <= 5 and \n              not x.configuration().simulator and x.status().operational==True)\n", "intent": "only return backends that are real devices, have at most 5 qubits and are operational\n"}
{"snippet": "from qiskit.providers.ibmq import least_busy\nsmall_devices = IBMQ.backends(filters=lambda x: x.configuration().n_qubits == 5 and\n                                                       not x.configuration().simulator)\nleast_busy(small_devices)\n", "intent": "Filter: show the least busy device (in terms of pending jobs in the queue)\n"}
{"snippet": "SELECT DISTINCT tx_type\nFROM boating;\n", "intent": "Use `DISTINCT` to determine the unique set of transaction types in this dataset. Tip: you should get 21 records.\n"}
{"snippet": "backend.configuration()\n", "intent": "The next is `configuration()`\n"}
{"snippet": "backend.properties()\n", "intent": "The next is `properties()` method\n"}
{"snippet": "for ran_job in backend.jobs(limit=5):\n    print(str(ran_job.job_id()) + \" \" + str(ran_job.status()))\n", "intent": "To see your last 5 jobs ran on the backend use the `jobs()` method of that backend\n"}
{"snippet": "import random\ndef f():\n    x = random.random()\n    if x < 0.5:\n        return x\n    else:\n        raise ValueError(\"Value was greater than 0.5\")\n", "intent": "<b>9. (4 pts)</b><br>\nConsider the function:\n"}
{"snippet": "backend_temp = job.backend()\nbackend_temp\n", "intent": "To get a backend object from the job use the `backend()` method\n"}
{"snippet": "result = job.result()\ncounts = result.get_counts()\nprint(counts)\n", "intent": "To get the result from the job use the `result()` method\n"}
{"snippet": "job.creation_date()\n", "intent": "If you want to check the creation date use `creation_date()`\n"}
{"snippet": "import time\njob.cancel()\n", "intent": "If you made a mistake and need to cancel the job use the `cancel()` method.\n"}
{"snippet": "job = backend.run(qobj)\n", "intent": "To rerun the job and set up a loop to check the status and queue position you can use the `queue_position()` method. \n"}
{"snippet": "SELECT tx_type, SUM(num) AS sum_tx\nFROM boating\nGROUP BY tx_type;\n", "intent": "Use `SUM` and `GROUP BY` to determine the overall number of transactions (across all years) per transaction type.\n"}
{"snippet": "from qiskit.providers.ibmq import least_busy\nbackend = least_busy(IBMQ.backends(simulator=False))\nbackend.name()\n", "intent": "Lets grab the least busy backend\n"}
{"snippet": "job = execute(qc, backend)\njob_monitor(job, monitor_async=True)\n", "intent": "Monitor the job using `job_monitor` using async-mode:\n"}
{"snippet": "job2 = execute(qc, backend)\n", "intent": "It is also possible to monitor the job using the `qiskit_job_status` Jupyter notebook magic.  This method is always asynchronos.\n"}
{"snippet": "x = MutableInt(1)\ny = x\nprint x, y\ny += 1\nprint x, y\n", "intent": "Test your class by running the code below.\n"}
{"snippet": "q = QuantumRegister(2)\nc = ClassicalRegister(2)\nqc = QuantumCircuit(q, c)\nqc.h(q[0])\nqc.cx(q[0], q[1])\nqc.measure(q, c);\n", "intent": "Lets build a simple Bell circuit, submit it to a device, and then monitor its status.\n"}
{"snippet": "from qiskit.providers.ibmq import least_busy\nbackend = least_busy(IBMQ.backends(filters=lambda x: not x.configuration().simulator))\nbackend.name()\n", "intent": "Lets grab the least busy backend\n"}
{"snippet": "job1 = execute(qc, backend)\njob_monitor(job1)\n", "intent": "Monitor the job using `job_monitor` in blocking-mode (i.e. using the same thread as the Python interpretor)\n"}
{"snippet": "from qiskit.providers import BaseProvider\nfrom qiskit.providers.providerutils import filter_backends\nclass HadamardProvider(BaseProvider):\n", "intent": "To create a provider inhereit from ``BaseProvider`` and minimally implement the ``backends`` method for retreiving a list of backends.\n"}
{"snippet": "q0 = QuantumRegister(2, 'q0')\nc0 = ClassicalRegister(2, 'c0')\nq1 = QuantumRegister(2, 'q1')\nc1 = ClassicalRegister(2, 'c1')\nq_test = QuantumRegister(2, 'q0')\n", "intent": "Quantum and Classical Registers are declared using the following:\n"}
{"snippet": "SELECT tx_type, SUM(num) AS sum_tx\nFROM boating\nGROUP BY tx_type\nORDER BY sum_tx DESC\nLIMIT 5;\n", "intent": "Use `ORDER BY` and `LIMIT` to determine the top five types of transactions overall.\n"}
{"snippet": "circ4 = QuantumCircuit(q1)\ncirc4.x(q1)\ncirc4.draw()\n", "intent": "It even works when the circuits have different registers. Let's start by making two new circuits:\n"}
{"snippet": "(circ4+circ5).draw()\n", "intent": "The new register is added to the circuit:\n"}
{"snippet": "circ4 += circ5\ncirc4.draw()\n", "intent": "We have also overloaded `+=` to the `QuantumCircuit` object:\n"}
{"snippet": "import math\nclass Pokemon(object):\n    def __init__(self,species, level, favNo):\n        self.species = species\n        self.level = level\n        self.favNo = favNo\n        self.i = 0\n", "intent": "<b>11. Pokemon Three Ways:</b><br>\nConsider the class <tt>Pokemon</tt>. \n"}
{"snippet": "backend_sim = BasicAer.get_backend('statevector_simulator')\nresult = execute(circ2, backend_sim).result()\nstates = result.get_statevector(circ2)\nbackend_sim = BasicAer.get_backend('qasm_simulator')\nresult = execute(qc2, backend_sim).result()\ncounts = result.get_counts(qc2)\nbackend_sim = BasicAer.get_backend('unitary_simulator')\nresult = execute(circ2, backend_sim).result()\nunitary = result.get_unitary(circ2)\n", "intent": "To show that it does not matter how you add the registers we run the same as above on the second example circuit:\n"}
{"snippet": "q = QuantumRegister(6)\ncircuit = QuantumCircuit(q)\ncircuit.h(q[0])\ncircuit.ccx(q[0], q[1], q[2])\ncircuit.cx(q[1], q[3])\ncircuit.x(q)\ncircuit.h(q[2])\ncircuit.h(q[3])\ncircuit.draw()\n", "intent": "A `QuantumCircuit` object provides methods for inquiring its resource use. This includes the number of qubits, operations, and a few other things.\n"}
{"snippet": "from qiskit.backends.ibmq import least_busy\ndevices = IBMQ.backends(simulator=False)\nleast_busy_device = least_busy(devices)\nleast_busy_device.status()\n", "intent": "You can also filter the backends by least busy queue to speed up your work:\n"}
{"snippet": "job = simulator_backend.run(qobj)\nresult = job.result()\n", "intent": "The compiled Qobj can be directly run on a backend.\n"}
{"snippet": "qr = QuantumRegister(3, 'q')\ncr = ClassicalRegister(3, 'c')\n", "intent": "You can design a quantum circuit with quantum registers, quantum gates and classical registers.\n"}
{"snippet": "SELECT *\nFROM Boating\nWHERE year = 2012\nAND tx_type LIKE \"%canoe%\";\n", "intent": "Use a wildcard search to determine how many _transactions_ in 2012 involve canoes?\n"}
{"snippet": "my_style = {'plotbarrier': True}\ndrawer(circuit, style=my_style)\n", "intent": "You can visualize barriers by `barrier` key.\n"}
{"snippet": "my_style = {'cregbundle': True}\ndrawer(circuit, style=my_style)\n", "intent": "You can combine classical registers into a single line by `cregbundle` key.\n"}
{"snippet": "my_style = {'showindex': True}\ndrawer(circuit, style=my_style)\n", "intent": "Index of operation can be shown by `index` key.\n"}
{"snippet": "p = Itermon(\"Pikachu\", 10, math.pi)\nfor field in p:\n    print field\nfor field in p:\n    print field\n", "intent": "Test your class using the code below. It should print the values in all three fields twice.\n"}
{"snippet": "my_style = {'usepiformat': True}\ndrawer(circuit, style=my_style)\n", "intent": "You can show rotation parameters in the unit of $\\pi$ by `usepiformat` key.\n"}
{"snippet": "qr = QuantumRegister(1, 'q')\ncircuit_xyz = QuantumCircuit(qr)\ncircuit_xyz.x(qr[0])\ncircuit_xyz.y(qr[0])\ncircuit_xyz.z(qr[0])\ndrawer(circuit_xyz)\n", "intent": "You can use unicode characters and latex symbols supported by matplotlib for gates.\n"}
{"snippet": "qr = QuantumRegister(2, 'q')\ncircuit_cucz = QuantumCircuit(qr)\ncircuit_cucz.cz(qr[0], qr[1])\ncircuit_cucz.cu1(pi, qr[0], qr[1])\ndrawer(circuit_cucz)\n", "intent": "CZ and CU1 gates can be visuarized in different formats by disable `latexdrawerstyle` key.\n"}
{"snippet": "cmp_style = qx_color_scheme()\ncmp_style\n", "intent": "You can configure the color scheme. Composer style sheet is prepared as `qx_color_scheme`.\n"}
{"snippet": "cmp_style.update({\n    'usepiformat': True,\n    'showindex': True,\n    'cregbundle': True,\n    'compress': True,\n    'fold': 17\n})\ndrawer(circuit_all, filename='circuit.pdf', style=cmp_style)\n", "intent": "The following line saves the image to 'circuit.pdf' by specifying a parameter `filename`.\n"}
{"snippet": "nlines_flights = !sqlite3 assignment.db < count_lines_flights.sql\nprint(nlines_flights.s)\n", "intent": "Run the following code cell to check the output of `count_lines_flights.sql`.\n"}
{"snippet": "qp.get_execution_list(qobj, verbose=True)\n", "intent": "If you want more information about the circuits to be run, you can set ```verbose=True```\n"}
{"snippet": "qp.get_compiled_configuration(qobj, 'GHZ', )\n", "intent": "To get the configuration of a circuit, use\n```get_compiled_configuration(qobj, 'circuit')```\n"}
{"snippet": "print(qp.get_compiled_qasm(qobj, 'GHZ'))\n", "intent": "To get the compiled qasm, use\n```get_compiled_qasm(qobj,'circuit')```\n"}
{"snippet": "p = Itermon2(\"Pikachu\", 10, math.pi)\nfor field in p:\n    print field\nfor field in p:\n    print field\np = Itermon3(\"Pikachu\", 10, math.pi)\nfor field in p:\n    print field\nfor field in p:\n    print field\n", "intent": "Test your classes using the code below. It should print the values in all three fields four times.\n"}
{"snippet": "result = qp.execute([\"qft3\"], backend=\"local_qasm_simulator\", shots=1024)\nresult.get_counts(\"qft3\")\n", "intent": "If we execute this circuit on the local simulator, we indeed see that the outcome is always \"001\".\n"}
{"snippet": "coupling_map = {0: [1], 1: [2], 2: [3], 3: [14], 4: [3, 5], 6: [7, 11], 7: [10], 8: [7], 9: [8, 10], 11: [10], 12: [5, 11, 13], 13: [4, 14], 15: [0, 14]}\ninitial_layout={(\"q\", 0): (\"q\", 0), (\"q\", 1): (\"q\", 1), (\"q\", 2): (\"q\", 2)}\nresult3 = qp.execute([\"qft3\"], backend=\"local_qasm_simulator\", coupling_map=coupling_map, initial_layout=initial_layout)\nresult3.get_counts(\"qft3\")\n", "intent": "Finally, let's lay out the qubits onto a segment of the ibmqx3 16-qubit device.\n"}
{"snippet": "x = ['foo', 'bar']\ncallable(x.append)\n", "intent": "Methods are **callable attributes**\n"}
{"snippet": "x = ['a', 'b']\nx.append('c')\ns = 'This is a string'\ns.upper()\n", "intent": "Methods tied to objects, intending to be useful for the data they contain\n"}
{"snippet": "x = ['a', 'b']\nx[0] = 'aa'  \nx\n", "intent": "Even item assignment is really just a method, as already discussed:\n"}
{"snippet": "assert_equal(nlines_flights.s, \"5967780\")\n", "intent": "Make sure that your code passes the following test.\n"}
{"snippet": "nums = range(1, 6)      \nfor num in nums:        \n    print num\n", "intent": "For loops and list comprehensions\n"}
{"snippet": "def convert_to_km(miles):\n    pass  \n", "intent": "Hint: 1 mile = 1.6 km\n"}
{"snippet": "def power_of_2(power):\n    pass  \n", "intent": "Hint: Powers of 2 are 1, 2, 4, 8, 16, 32 and so on for 2 to the power of 0, 1, 2, 3, 4, 5.\n"}
{"snippet": "print(r\"hello\\nworld\")\n", "intent": "But for a raw string...\n"}
{"snippet": "def is_palindrome(seq):\n", "intent": "Palindrome read the same backwards and forwards.\nRef: http://en.wikipedia.org/wiki/Palindrome\n"}
{"snippet": "import requests\nurl = 'http://www.d.umn.edu/~rmaclin/gettysburg-address.html'\ngettsburg = requests.get(url).text\n", "intent": "Hint: http://www.d.umn.edu/~rmaclin/gettysburg-address.html\n"}
{"snippet": "def convert_to_km(miles):\n    return 1.6 * miles\n", "intent": "Hint: 1 mile = 1.6 km\n"}
{"snippet": "def power_of_2(power):\n    return 2**power\n", "intent": "Hint: Powers of 2 are 1, 2, 4, 8, 16, 32 and so on for 2 to the power of 0, 1, 2, 3, 4, 5.\n"}
{"snippet": "def find_max(seq):\n    if len(seq) == 0:\n        return None\n    max_value = seq[0]\n    for i in range(1, len(seq)):\n        if seq[i] > max_value:\n            max_value = seq[i]\n    return max_value\n", "intent": "Don't use the max function\n* For [1, 3, 2], return 3\n* For [3, 3, 4, 5, 1], return 5\n* For [], return None\n"}
{"snippet": "pattern = 'fox'\npattern_matcher = re.compile(pattern)\nprint(pattern_matcher)\ninput = 'The quick brown fox jumps over the lazy dog'\nmatches = pattern_matcher.search(input)\nprint(matches)\n", "intent": "Let's see how this scheme works for the simplest case, in which the pattern is an exact substring.\n"}
{"snippet": "a = [23, 42, 18]\nb = [30, 60, 90]\nz=[a, b, []]\n", "intent": "We can make a list of lists\n"}
{"snippet": "a = ['c', 'a', 't', [23, 42, 18]]\na[0] = 'b'\nprint(a)\n", "intent": "Assignment with subscripting and slicing\n"}
{"snippet": "for item in a:\n    print(item)\n", "intent": "Looping over a list\n"}
{"snippet": "match = re.search(regex, s)\nprint match\nprint type(match)\n", "intent": "<a href = \"https://docs.python.org/2/library/re.html\n"}
{"snippet": "{'apples': 4,\n 'oranges': 1,\n 'grapes': 10,\n 'kiwi': 3}\n", "intent": "Dictionaries are key/value pairs and are denoted by curly braces.\n"}
{"snippet": "print(d.keys())\nprint(d.values())\nprint(d.items())\n", "intent": "<b>Using `keys()`, `values()`, and `items()`</b>\n* Note these methods return iterable objects so if you'd like a list use the `list()` function\n"}
{"snippet": "t = (('Sam', 3.9), ('Natalie', 4.0), ('Henry', 3.7))\nd = {k: v + 1 for k, v in t}\nprint(d)\n", "intent": "<b>Dictionary comprehension</b>\n"}
{"snippet": "A = set(letters[0:5])\nB = set(letters[1:3])\nprint('A:', A, 'B:', B, sep='\\n')\nd = A.difference(B)\nprint('Difference:', d)\ni = A.intersection(B)\nprint('Intersection:', i)\nsymmdiff = A.symmetric_difference(B)\nprint('Symmetric difference:', symmdiff)\n", "intent": "Some set methods: `difference`, `intersection`, `union` and `symmetric_difference`\n"}
{"snippet": "print(A - B)\nprint(A & B)\nprint(A | B)\nprint(A ^ B)\n", "intent": "Equivalent set operators\n"}
{"snippet": "import scipy.stats as ss\nss.shapiro([-26.3,-24.2, -20.9, -25.8, -24.3, -22.6, -23.0, -26.8, -26.5, -23.1, -20.0, -23.1, -22.4, -22.8])\n", "intent": "Are these numbers normally distributed? `[-26.3,-24.2, -20.9, -25.8, -24.3, -22.6, -23.0, -26.8, -26.5, -23.1, -20.0, -23.1, -22.4, -22.8]`\n"}
{"snippet": "a = range(1, 11)\nb = range(10, 21)\nz = zip(a, b)\nprint(list(z))\n", "intent": "<b>`zip`</b>\n* groups elements from sequences into tuples paired by index (NB: `zip` can take any number of sequences)\n* useful for feeding to `map`\n"}
{"snippet": "from functools import reduce\na = range(1, 10)\nprint (list(a))\nresult = reduce(lambda x, y: x * y, a)\nprint(result)\n", "intent": "> PYTHON 2 to 3:  In Python 2.7, `reduce` is a built-in function, but in Python 3 it's in the <b>`functools`</b> package.\n"}
{"snippet": "list(enumerate('Hello World'))\n", "intent": "<b>`enumerate()`</b>\n* takes any iterable (string, list, tuple, etc.) and returns a tuple with an index and associated element\n"}
{"snippet": "print match.start() \nprint match.end()   \nprint match.group() \n", "intent": "Apparently `re.search` returns a <a href = \"https://docs.python.org/2/library/re.html\n"}
{"snippet": "import itertools\nresult = list(itertools.repeat('A', 5))\nprint(result)\nresult = list('A' * 5)\nprint(result)\nresult = list(itertools.repeat(('unknown', 80), 5))\nprint(result)\n", "intent": "<b>`repeat()`</b>\n* This method creates an iterable \"repeat object\" which simply repeats its input argument (use `list()` to convert to list)\n"}
{"snippet": "from itertools import product\nlist(product('ABCD', repeat = 2))\n", "intent": "<b>`product()`</b>\n* r-length tuples, all possible orderings, with repeats\n* aka cartesian product\n"}
{"snippet": "from itertools import permutations\nlist(permutations('ABCD', r = 2))\n", "intent": "<b>`permutations()`</b>\n* r-length tuples, all possible orderings, no repeats\n"}
{"snippet": "from itertools import combinations\nlist(combinations('ABCD', r = 2))\n", "intent": "<b>`combinations()`</b>\n* r-length tuples, sorted order, no repeats\n"}
{"snippet": "people = ['Joshua Richardson', 'Wei Ling', 'Sarah McKearny', 'Matthias Strauch']\n", "intent": "* How could you imagine wanting to sort them?\n"}
{"snippet": "from math import pi\nprint('{:.3}'.format(pi / 2))\n", "intent": "Print $\\pi/2$ with three digits of precision. Use the `pi` constant from the math module\n"}
{"snippet": "import random\na = random.sample(range(50), 10)\nprint('a:', a, '\\n')\na.sort(reverse=True)\nprint('inline sorted a:', a, '\\n')\n", "intent": "* Inline - no copying with `list.sort()`\n"}
{"snippet": "b = random.sample(range(50), 10)\nprint('b:', b)\nb_sorted = sorted(b)\nprint('sorted copy of b:', b_sorted)\n", "intent": "* Sort and create a copy with `sorted`\n"}
{"snippet": "c = (3, 4, 2, 6, 5)\nd = sorted(c, reverse=True)\nprint(d)\n", "intent": "Will the following work with inline `sort` and/or copy version `sorted`?\n```python\nc = (3, 4, 2, 6, 5)\n```\n"}
{"snippet": "matches = list(match_iterator)\nmatches\n", "intent": "In case you haven't seen Python iterators yet, let's not worry about what that means. Let's just turn that thing into a more familiar `list`. \n"}
{"snippet": "func = lambda s: s.split()[1]\nfunc(people[0])\n", "intent": "Let's sort `people` from above by last name\n"}
{"snippet": "class Wallet:\n    def __init__(self, owner, cash):\n        self.owner = owner\n        self.cash = cash\n", "intent": "<b>This is a simple class declaration with a construtor method and two class variables</b>\n"}
{"snippet": "class Wallet:\n        self.cash -= amount\n    def earn(self, amount):\n", "intent": "<b>Let's add some methods to our Wallet class</b>\n"}
{"snippet": "class Wallet:\n        self._cash -= amount\n    def earn(self, amount):\n        return self._cash\n", "intent": "<b>Getter and setter methods</b>\n"}
{"snippet": "class Wallet:\n        self._cash -= amount\n    def earn(self, amount):\n        return self._cash\n    def set_cash(self, amount):\n", "intent": "<b>Let's add a method to be used by the `print()` function</b>\n"}
{"snippet": "for i in range(9):\n    print('{:5b}'.format(i))\n", "intent": "Using a `for` loop, print the integers from 0 to 8 in binary such that each line is right-aligned. \n"}
{"snippet": "import math\nclass Circle:\n        return 2 * Circle.pi * self.radius\n    @staticmethod\n    def calc_area(x):\n", "intent": "<b>Let's add a static method</b>\n* Usually used only within a class as some sort of helper method\n"}
{"snippet": "a = np.array([1, 2, 3, 4, 5])\nprint(a)\na[2:4] = 0\nprint(a)\n", "intent": "<b>Assignment via slicing</b>\n"}
{"snippet": "x = a2d[0][3]\nprint(x)\n", "intent": "<b>Subscription</b>\n* Two ways to access an element of 2D array\n"}
{"snippet": "def guess_language(observations, possible_languages):\n    raise NotImplementedError()\n", "intent": "Hint: you may want to take a look at [how to check if one set is a subset of another](https://docs.python.org/3.4/library/stdtypes.html?highlight=set\n"}
{"snippet": "data = np.random.randn(7, 4)\nprint(data)\nbindex = np.array([True, False, False, True, False, True, False])\n", "intent": "<b>Boolean indexing</b>\n* IMPORTANT: Boolean indexing creates a <b>copy</b> unlike slicing\n"}
{"snippet": "data = np.random.randn(7, 4)\nprint(data)\ndata[data < 0] = 0\nprint(data)\n", "intent": "<b>Booleans to set a swath of values</b>\n"}
{"snippet": "a = ['a'] * 10\nb = ['b'] * 12\nc = ['c'] * 5\nd = ['d'] * 8\nones = [1] * 20\nz = ['z'] * 6\narr = z + a + d + c + b + ones\nprint(arr)\nnp.unique(arr)\n", "intent": "<b>`np.unique()` will return a sorted, unique array</b>\n"}
{"snippet": "a = ['a'] * 10\nb = ['b'] * 12\nc = ['c'] * 5\nd = ['d'] * 8\na1 = a + b + c\na2 = b + c + d\nprint(a1)\nprint(a2)\nnp.intersect1d(a1, a2)\n", "intent": "<b>`np.intersect1d()` and `np.union1d()` will return sorted, unique intersection and union, respectively</b>\n"}
{"snippet": "import numpy as np\nhelp(np.linalg)\n", "intent": "<b>Use `help()` to see all that `numpy.linalg` has to offer\n"}
{"snippet": "sum = 0\nfor i in range(1,101):\n    sum += i\nprint(sum)\n", "intent": "Add up the numbers from 1 to 100\n"}
{"snippet": "print(text2)\nprint('-----')\ntext2.similar(\"love\")\n", "intent": "* We can extract word tokens similar to our search term using the similar() method. Here, I'm matching the word \"love\".\n"}
{"snippet": "print(text6)\nprint('------')\nprint(len(text6))\nprint('------')\nprint(list(sorted(set(text6))[:100]))\n", "intent": "* ** Note : nltk.text.Text.generate() method has been removed from the library by the nltk developer team **\n"}
{"snippet": "print(len(set(text6)))\n", "intent": "* Below we can see that even though there are 16967 tokens in the text, there are only 2166 types or unique words.\n"}
{"snippet": "print normalize_rectangle( (0.0, 1.0, 2.0) ) \n", "intent": "The preconditions on lines 2, 4, and 5 catch invalid inputs:\n"}
{"snippet": "print(text5)\nprint('-----')\nprint(text5.count(\"lol\"))\nprint('-----')\npercent = 100*(text5.count(\"lol\")/len(text5))\nprint(\"The word \\'lol\\' constitutes %s percent of the chat corpus\" %str(percent))\n", "intent": "* We can compute how often a word occurs in any given text with the count() method\n"}
{"snippet": "def lexical_diversity(text):\n    ratio = str(len(text)/len(set(text)))\n    return \"The lexical diversity in {} is {}\".format(text,ratio)\nlexical_diversity(text9)\n", "intent": "* Here I have written simple function to measure Token to Type Ratio(lexical_diversity()) and Count Percentage(percentage())\n"}
{"snippet": "top50_text4 = FreqDist(text4).most_common(50)\nprint(top50_text4)\n", "intent": "Extracting statistically significant data from the text as demonstrated in the chapter.\n"}
{"snippet": "fdist_text4 = FreqDist(text4)\nfdist_text4['people']\n", "intent": "* We can check the frequency of each word in the top50 as following.\n"}
{"snippet": "fdist_text4.plot(50,cumulative=True)\n", "intent": "* Generating a cumulative frequency graph to see the distribution of the words in text4.\n"}
{"snippet": "for i in range(1,6):\n    print(3**i)\n", "intent": "Print the first 5 powers of 3. Start at $3^1$\n"}
{"snippet": "text4.index('president')\n", "intent": "* We can check for the index of any given word using the index() method.\n"}
{"snippet": "morethan15 = [word for word in text4 if len(word)>15]\nprint(sorted(morethan15))\nprint('-----')\nprint(len(morethan15))\n", "intent": "* To get a word that is longer than 15 characters, we can use a simple list comprehension.\n"}
{"snippet": "morethan10 = [word for word in text4 if len(word)>10 and fdist_text4[word]>10]\nprint(sorted(set(morethan10)))\nprint('-----')\nprint(len(set(morethan10)))\n", "intent": "* To get a word longer than 10 characters that appears more than 10 times in the text, we can use a simple list comprehension.\n"}
{"snippet": "print normalize_rectangle( (0.0, 0.0, 5.0, 1.0) )\n", "intent": "but if we normalize one that's wider than it is tall,\nthe assertion is triggered:\n"}
{"snippet": "fdist_text6.items()\n", "intent": "* Here we see that although there are 16967 tokens, there are only 13 distinct types based on word length.\n"}
{"snippet": "fdist_text6.freq(7)\n", "intent": "* Here we see the frequency distributions of the words based on word length.\n"}
{"snippet": "fdist_text6.plot(cumulative=True)\n", "intent": "* From the above output, the frequency of 7 letter words is ~ 0.042%\n"}
{"snippet": "progressives = [word.lower() for word in text5 if word.endswith('ing')]\nprint(progressives[:50])\n", "intent": "* Here I am using a simple list comprehension with a conditional inside it to extract all the words of the '-ing' form.\n"}
{"snippet": "titles = list(set([word for word in text4 if word.istitle()==True]))\nprint(titles[:50])\n", "intent": "* Using a conditional to pull out all words that are title cased.\n"}
{"snippet": "x = [0,1,2,5,6,7]\nfx = []\nfor xi in x:\n    fx.append( (xi - 3)**2)\nprint(max(fx))\n", "intent": "Find the largest value of the function $(x - 3)^2$, where x is only the values: `[0,1,2,5,6,7]`\n"}
{"snippet": "lexical_diversity_humor = 21695/5017\nprint(\"Humor:\",lexical_diversity_humor)\nprint('-----')\nlexical_diversity_romance = 70022/8452\nprint(\"Romance:\",lexical_diversity_romance)\n", "intent": "Compare the lexical diversity scores for humor and romance fiction in Table 1-1. Which genre is more lexically diverse?\n"}
{"snippet": "print(len(set(sent3)),len(set(sent1)))\n", "intent": "This returned boolean False because len(set(sent3)) is greater than or equal to len(set(sent1))\n"}
{"snippet": "ght_words = set(ght_words)\nprint(ght_words)\nprint('-----')\nprint(\"There are %s words in this list\" %str(len(ght_words)))\n", "intent": "Now I am ** converting this list into a set **, to remove duplicates. \n"}
{"snippet": "try:\n    reader = open('nonexistent-file.txt', 'r')\nexcept IOError:\n    print 'Whoops!'\n", "intent": "We can use `try` and `except` to deal with these errors ourselves\nif we don't want the program simply to fall over:\n"}
{"snippet": "sum([len(w) for w in text1])\n", "intent": "What does the following Python code do? sum([len(w) for w in text1]) Can you use it to work out the average word length of a text?\n"}
{"snippet": "avg_word_length = sum([len(w) for w in text1])/len(text1)\nprint(avg_word_length)\n", "intent": "** The above line of code returns the total number of characters in the body of text1 **\n"}
{"snippet": "def percentage(word,text):\n    percent = str(100*(text.count(word)/len(text)))\n    return \"The word {} constitutes {} percent of {}\".format(word,percent,text)\nprint(percentage(\"love\",text2))\nprint('-----')\nprint(percentage(\"madness\",text1))\nprint('-----')\nprint(percentage(\"God\",text3))\n", "intent": "Define a function percent(word, text) that calculates how often a given word occurs in a text and expresses the result as a percentage.\n"}
{"snippet": "inventory = {\n    'gold' : 500,\n    'pouch' : ['flint', 'twine', 'gemstone'],\n    'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']\n}\n", "intent": "Given the following dictionary:\n"}
{"snippet": "function fxn_test2(a, b)\n    if a < b\n        relation = \"less than\"\n    elseif a == b\n        relation = \"equal to\"\n        else\n        relation = \"greater than\"\n    end\n    println(\"a is \", relation, \" b.\")\nend\n", "intent": "How about we throw in a **variable relation** and see how and where it fits in...\n"}
{"snippet": "x = [1, 2, 3, 4, 5, 6]\nPx = [1/21, 2/21, 3/21, 4/21, 5/21, 6/21]\nex = 0\nfor i in range(len(x)):\n    ex += Px[i] * x[i]\nprint(ex)\n", "intent": "Continuing the question above, calculate the expected value of `x` and `Px`.\n"}
{"snippet": "B = [1.5 2 -4; 2 -1 -3; -4 -3 5]\n", "intent": "**NOTE**: Since this matrix isn't symmetric, triangular, triagonol or bidiagonal, it does an LU factorization.\n"}
{"snippet": "B = [1.5 2 -4; 2 -1 -3; -4 -3 5]\nsB = Symmetric(B)\n", "intent": "**NOTE**: It figures out for the abovce matrix that is was symmtric and does a correct factorization for it.\n"}
{"snippet": "a = np.array([1,2])\nb = np.array([2,1])\n", "intent": "1. First method: $a.b = a^{T} = \\sum_{d = 1}^ba_{d}b_{d}$\n2. Second method: $a.b = |a||b|cos\\theta_{ab}$ - not really convenient\n"}
{"snippet": "assert rectangle_area([0, 1, 4, 7]) == 24.0\nassert rectangle_area([1, 1, 4, 4]) == 9.0\nassert rectangle_area([0, 0, 1, 1]) == 1.0\n", "intent": "This result is used,\nin the sense that we know something's wrong,\nbut look closely at what happens if we run the tests in a different order:\n"}
{"snippet": "for key, value in dict_1.items():\n    print (key, value)\n", "intent": "Iterate through a dictionary's keys and values:\n"}
{"snippet": "using QuantEcon\nusing Plots\nplotlyjs();\n", "intent": "The model is formulated with finite horizon in Section 7.2.1, but solved with infinite horizon in Section 7.6.1. Here we follow the latter.\n"}
{"snippet": "Q = zeros(n, m, n)\nfor j in 1:m\n    for i in 1:n\n        if j <= i\n            Q[i, j, i-j+1] = 1.0\n        else\n            Q[i, j, 1] = 1.0\n        end\n    end\nend\n", "intent": "(Degenerate) transition probability array:\n"}
{"snippet": "ddp = DiscreteDP(R, Q, beta);\n", "intent": "Set up the dynamic program as a DiscreteDP instance:\n"}
{"snippet": "res = solve(ddp, PFI);\n", "intent": "Solve the optimization problem with the solve method, which by defalut uses the policy iteration algorithm:\n"}
{"snippet": "p = 0.05\npsum = 0\nfor i in range(1,1000):\n    psum += p * (1 - p)**(i - 1)\n    if psum >= 0.99:\n        break\ntime = 30 * i / 60\nprint('After {:.1f} hours, there will be a {:.2%} of finding the treasure'.format(time, psum))\n", "intent": "Digging a hole takes 30 minutes. How much time will give at least a 99% probability of finding the treasure.\n"}
{"snippet": "Q_sa = Matrix{Float64}(L,n)\nfor (i, s) in enumerate(s_indices)\n    x = a_indices[i]\n    Q_sa[i, s-x+1] = 1\nend\n", "intent": "(Degenerate) transition probability array:\n"}
{"snippet": "ddp_sa = DiscreteDP(R_sa, Q_sa, beta, s_indices, a_indices);\n", "intent": "Set up the dynamic program:\n"}
{"snippet": "res_sa = solve(ddp_sa, PFI);\n", "intent": "Solve the optimization problem with the solve method, which by defalut uses the policy iteration algorithm:\n"}
{"snippet": "import ears\nears.run()\n", "intent": "Next,\nimport a library called `ears`\nand ask it to run our tests for us:\n"}
{"snippet": "maxage = 5    \nrepcost = 75  \nmancost = 10  \nbeta = 0.9    \nm = 3         \n", "intent": "`Julia` translation of the [Python version](http://nbviewer.jupyter.org/github/QuantEcon/QuantEcon.notebooks/blob/master/ddp_ex_MF_7_6_3_py.ipynb)\n"}
{"snippet": "R = [[5, 10],\n     [-1, -float('inf')]]\n", "intent": "The reward array `R` is an $n \\times m$ 2-dimensional array:\n"}
{"snippet": "Q = [[(0.5, 0.5), (0, 1)],\n     [(0, 1), (0.5, 0.5)]] \n", "intent": "The transition probability array `Q` is an $n \\times m \\times n$ 3-dimenstional array:\n"}
{"snippet": "ddp = DiscreteDP(R, Q, beta)\n", "intent": "We are ready to create a `DiscreteDP` instance:\n"}
{"snippet": "s_indices = [0, 0, 1]  \na_indices = [0, 1, 0]  \n", "intent": "We have arrays `s_indices` and ` a_indices` of length $3$\ncontain the indices of states and actions, respectively.\n"}
{"snippet": "p = factorial(20) / (factorial(17) * factorial(3)) * 0.07**3 * (1 - 0.07)**17\nprint('The probability is {:.3}'.format(p))\n", "intent": "What is the probability that after asking 20 students you will have 3 players for your tournament?\n"}
{"snippet": "ddp_sa = DiscreteDP(R, Q, beta, s_indices, a_indices)\n", "intent": "Now create a `DiscreteDP` instance:\n"}
{"snippet": "import scipy.sparse\nQ = scipy.sparse.coo_matrix(Q)\n", "intent": "For example, let us convert the above ndarray `Q` to the Coordinate (coo) format:\n"}
{"snippet": "ddp_sparse = DiscreteDP(R, Q, beta, s_indices, a_indices)\n", "intent": "Pass it to `DiscreteDP` with the other parameters:\n"}
{"snippet": "def fahr_to_kelvin(temp):\n    return ((temp - 32) * (5/9)) + 273.15\n", "intent": "Let's start by defining a function `fahr_to_kelvin` that converts temperatures from Fahrenheit to Kelvin:\n"}
{"snippet": "ddp.evaluate_policy(res.sigma)\n", "intent": "Verify that the value of the policy `[0, 0]` is actually equal to the optimal value `v`:\n"}
{"snippet": "epsilon = 1e-2   \nv_init = [0, 0]  \nres_vi = ddp.solve(method='value_iteration', v_init=v_init,\n                   epsilon=epsilon)\n", "intent": "Next, solve the model by value iteration,\nwhich returns an $\\varepsilon$-optimal solution for a specified value of $\\varepsilon$:\n"}
{"snippet": "epsilon = 1e-2   \nv_init = [0, 0]  \nres_mpi = ddp.solve(method='modified_policy_iteration', v_init=v_init,\n                    epsilon=epsilon)\n", "intent": "Finally, solve the model by modified policy iteration:\n"}
{"snippet": "np.abs(v_star(beta) - res_mpi.v).max()\n", "intent": "Modified policy function also returns an $\\varepsilon$-optimal policy function\nand an $\\varepsilon/2$-approximate value function:\n"}
{"snippet": "matching_pennies_bimatrix = Array{Float64}(2, 2, 2)\nmatching_pennies_bimatrix[1, 1, :] = [1, -1]  \nmatching_pennies_bimatrix[1, 2, :] = [-1, 1]\nmatching_pennies_bimatrix[2, 1, :] = [-1, 1]\nmatching_pennies_bimatrix[2, 2, :] = [1, -1]\ng_MP = NormalFormGame(matching_pennies_bimatrix)\n", "intent": "As an example, consider the following game (\"**Matching Pennies**\"):\n$\n\\begin{bmatrix}\n1, -1 & -1, 1 \\\\\n-1, 1 & 1, -1\n\\end{bmatrix}\n$\n"}
{"snippet": "p = 0.07\nN = 20\npsum = 0\nfor i in range(3, N + 1):\n    psum += factorial(N) / (factorial(N - i) * factorial(i)) * p**i * (1 - p)**(N - i)\nprint('The probability is {:.3}'.format(psum))\n", "intent": "What is the probability that after asking 20 students you will have 3 or more players for your tournament?\n"}
{"snippet": "g_BoS = NormalFormGame((player1, player2))\n", "intent": "Passing an array of Player instances is the third way to create a `NormalFormGame` instance:\n"}
{"snippet": "best_response(g_MP.players[1], [0.5, 0.5])\n", "intent": "Player 1's best responses to the opponent's mixed action `[0.5, 0.5]`\n(we know they are 1 and 2):\n"}
{"snippet": "best_responses(g_MP.players[1], [0.5, 0.5])\n", "intent": "`best_responses` returns an array of all the best responses:\n"}
{"snippet": "print '10.0/3 is:', 10.0/3\n", "intent": "If either part of the division is a float,\non the other hand,\nthe computer creates a floating-point answer:\n"}
{"snippet": "print_pure_nash_brute(g_RPS)\n", "intent": "Rock-Paper-Scissors:\n"}
{"snippet": "print_pure_nash_brute(g_BoS)\n", "intent": "Battle of the Sexes:\n"}
{"snippet": "print_pure_nash_brute(g_PD)\n", "intent": "Prisoners' Dillema:\n"}
{"snippet": "is_nash(g_Cou, tuple(a_star...))\n", "intent": "The limit action profile is indeed a Nash equilibrium:\n"}
{"snippet": "print_pure_nash_brute(g_Cou)\n", "intent": "In fact, the game has other Nash equilibria\n(because of our choice of grid points and parameter values):\n"}
{"snippet": "import numpy as np\nfrom scipy.special import binom\np = 0.07\nN = 20\nx = np.arange(0, N + 1)\nPx = binom(N, x) * p**x * (1 - p)**(N - x)\ni = np.argmax(Px)\nprint('The most likely value is {} with probability {}'.format(x[i], Px[i]))\n", "intent": "What is the most likely number of participants?\n"}
{"snippet": "pure_nash(g_APA_odd)\n", "intent": "Clearly, this game has no pure-action Nash equilibrium.\nIndeed:\n"}
{"snippet": "c = 6  \ng_APA_even = all_pay_auction(r, c, Val(N))\nsupport_enumeration(g_APA_even)\n", "intent": "If `e` is even, there is a unique equilibrium, which is symmetric and totally mixed.\nFor example:\n"}
{"snippet": "prettyprint(arr) = Base.showarray(STDOUT, arr, false, header=false)\n", "intent": "Define a custom pretty printing function:\n"}
{"snippet": "a = 10\nb = 3\nprint 'a/b is:', a/b\nprint 'float(a)/b is:', float(a)/b\n", "intent": "The advantage to this method is it can be used with existing variables. Let's take a look:\n"}
{"snippet": "is_irreducible(mc1)\n", "intent": "This Markov chain is reducible:\n"}
{"snippet": "communication_classes(mc1)\n", "intent": "Determine the communication classes:\n"}
{"snippet": "recurrent_classes(mc1)\n", "intent": "Classify the states of this Markov chain:\n"}
{"snippet": "recurrent_states = vcat(recurrent_classes(mc1)...)\n", "intent": "Obtain a list of the recurrent states:\n"}
{"snippet": "transient_states = setdiff(collect(1:n_states(mc1)), recurrent_states)\n", "intent": "Obtain a list of the transient states:\n"}
{"snippet": "np.std(data, ddof=1)\n", "intent": "Sample standard deviation is given by:\n$$\n\\sigma_x = \\sqrt{\\frac{1}{N - 1} \\sum_x (x - \\bar{x})^2}\n$$\nand is $\\sigma_x = 2.04$\n"}
{"snippet": "stationary_distributions(mc1)[1]'* mc1.p\n", "intent": "These are indeed stationary distributions:\n"}
{"snippet": "titles = [\"$recurrent_class\"\n          for recurrent_class in recurrent_classes(mc1)]\nps = []\nfor (title, dist) in zip(titles, stationary_distributions(mc1))\n    push!(ps, draw_histogram(dist, title=title, xlabel=\"States\"))\nend\nplot(ps..., layout=(1, 2))\n", "intent": "Stationary distribution for the recurrent class:\n"}
{"snippet": "simulate(mc1, 50, init=1)'\n", "intent": "A sample path from state `1`:\n(Note: Transposing the output array here is just for visualization.)\n"}
{"snippet": "def fahr_to_kelvin(temp):\n    return ((temp - 32) * (5.0/9.0)) + 273.15\nprint 'freezing point of water:', fahr_to_kelvin(32)\nprint 'boiling point of water:', fahr_to_kelvin(212)\n", "intent": "See that was much easier than redefining `a` or `b`!\nLet's fix our `fahr_to_kelvin` function with this new knowledge.\n"}
{"snippet": "time_series_dist(mc1, 100, init=2)\n", "intent": "Here is a frequency distribution along a sample path,  of length 100,\nfrom initial state `2`, which is a recurrent state:\n"}
{"snippet": "function plot_time_series_dists(mc, ts; init=rand(1:n_states(mc)), layout=(1,length(ts)))\n    dists = time_series_dist(mc, ts, init=init)\n    titles = [\"t=$t\" for t in ts]\n    ps = []\n    for (i, title) in enumerate(titles)\n        p = draw_histogram(dists[:, i], title=title, xlabel=\"States\")\n        push!(ps, p)\n    end\n    plot(ps..., layout=layout)\nend\n", "intent": "Plot the frequency distributions for a couple of different time lengths:\n"}
{"snippet": "init = 3\nts = [5, 10, 50, 100]\nplot_time_series_dists(mc1, ts, init=init)\n", "intent": "Start with state `3`,\nwhich is a transient state:\n"}
{"snippet": "init = 3\nts = [5, 10, 50, 100]\nplot_time_series_dists(mc1, ts, init=init)\n", "intent": "Some sample path with init=3\n"}
{"snippet": "plot_time_series_dists(mc1, ts, init=init)\n", "intent": "Another sample path with init=3\n"}
{"snippet": "import numpy as np\nm = np.zeros( (10,10) )\nm[:,1] = 3\nm[np.diag_indices(10)] = 4\nprint(m)\n", "intent": "10x10 matrix whose second column is the powers of 3, diagonal is all 4's, and all other elements are zero\n"}
{"snippet": "function plot_cross_sectional_dists(mc, ts, num_reps=10^4; init=1)\n    dists = cross_sectional_dist(mc, ts, num_reps, init=init)\n    titles = map(t -> \"t=$t\", ts)\n    ps = []\n    for (i, title) in enumerate(titles)\n        p = draw_histogram(dists[:, i], title=title, xlabel=\"States\")\n        push!(ps, p)\n    end\n    plot(ps..., layout=(1, length(ts)))\nend\n", "intent": "Plot the simulated marginal distribution at `t` for some values of `t`.\n"}
{"snippet": "init = 3\nt = 10\ncross_sectional_dist(mc1, t, init=init)\n", "intent": "Starting with a transient state `3`:\n"}
{"snippet": "init = 3\nts = [2, 3, 5, 10]\nplot_cross_sectional_dists(mc1, ts, init=init)\n", "intent": "How the simulated marginal distribution evolves:\n"}
{"snippet": "gold_game(guess_language)\n", "intent": "Try playing Gold's Game using your function:\n"}
{"snippet": "ts = [10, 20, 30]\nfor t in ts\n    P_t = mc1.p^t\n    println(\"P^$t =\")\n    prettyprint(P_t)\n    println()\nend\n", "intent": "The marginal distributions at time $t$ are obtained by $P^t$.\n"}
{"snippet": "Q = mc1.p[permutation, permutation]\nprintln(\"Q =\")\nprettyprint(Q)\nfor t in ts\n    Q_t = Q^t\n    println(\"\\nQ^$t =\")\n    prettyprint(Q_t)\nend\n", "intent": "In the canonical form:\n"}
{"snippet": "is_irreducible(mc2)\n", "intent": "This Markov chain is irreducible:\n"}
{"snippet": "permutation = vcat(cyclic_classes...)\nQ = mc2.p[permutation, permutation]\n", "intent": "Represent our Markov chain in cyclic normal form:\n"}
{"snippet": "mc2 = MarkovChain(Q)\n", "intent": "Re-define the Markov chain with the above matrix `Q`:\n"}
{"snippet": "import numpy as np\nm = np.ones( (10,3) )\nm[:-1:2,1] = 0\nprint(m)\n", "intent": "10x3 matrix where all elements are 1 except in the second column, where every other element is 0\n"}
{"snippet": "P_power_d = mc2.p^d\nprettyprint(P_power_d)\n", "intent": "$P^d$ is block diagonal:\n"}
{"snippet": "length(stationary_distributions(mc2))\n", "intent": "The Markov chain `mc2` has a unique stationary distribution,\nwhich we denote by $\\psi$:\n"}
{"snippet": "psi_s = []\nfor i in 1:d\n    push!(psi_s, stationary_distributions(MarkovChain(P_power_d_blocks[i]))[1])\n    println(\"psi^$i =\")\n    println(psi_s[i])\nend\n", "intent": "Obtain the stationary distributions $\\psi^1, \\ldots, \\psi^{d}$\neach associated with the diagonal blocks of $P^d$:\n"}
{"snippet": "def fahr_to_celsius(temp):\n    temp_k = fahr_to_kelvin(temp)\n    result = kelvin_to_celsius(temp_k)\n    return result\nprint 'freezing point of water in Celsius:', fahr_to_celsius(32.0)\n", "intent": "What about converting Fahrenheit to Celsius?\nWe could write out the formula,\nbut we don't need to.\nInstead,\nwe can [compose](../../gloss.html\n"}
{"snippet": "rhs = zeros(n_states(mc2))\nfor i in 1:d\n    rhs[cyclic_classes[i]] = psi_s[i]\nend\nrhs /= d\nrhs\n", "intent": "Verify that $\\psi = (\\psi^1 + \\cdots + \\psi^d)/d$:\n"}
{"snippet": "for i in 1:d+1\n    println(\"P^$i =\")\n    prettyprint(mc2.p^i)\n    println()\nend\n", "intent": "Print $P^1, P^2, \\ldots, P^d$:\n"}
{"snippet": "for i in [k*d for k in [2, 4, 6]]\n    println(\"P^$i =\")\n    prettyprint(mc2.p^i)\n    println()\nend\n", "intent": "Print $P^{2d}$, $P^{4d}$, and $P^{6d}$:\n"}
{"snippet": "for i in 10*d+1:11*d\n    println(\"P^$i =\")\n    prettyprint(mc2.p^i)\n    println()\nend\n", "intent": "Print $P^{kd+1}, \\ldots, P^{kd+d}$ with $k = 10$ for example:\n"}
{"snippet": "init = 1\ndist = time_series_dist(mc2, 10^4, init=init)\n", "intent": "Plot the frequency distribution of visits to the states\nalong a sample path starting at state `1`:\n"}
{"snippet": "import numpy as np\nimport numpy.linalg as  lin\nA = np.array([[2, 1, 1], [2, -4, 2], [4, 3, -5]])\nlin.eig(A)\n", "intent": "$$A = \\left[\\begin{array}{lcr}\n2 & 1 & 1\\\\\n2 & -4 & 2\\\\\n4 & 3 & -5\\\\\n\\end{array}\\right]$$\n"}
{"snippet": "epsilons = [10.0^(-i) for i in 11:17]\nfor eps in epsilons\n    println(\"epsilon = $eps\")\n    w, v = eigs(P_epsilon(eps)', nev=2)\n    i = indmax(w)\n    println(v[:, i]/sum(v[:, i]))\nend\n", "intent": "The same applies to [`Base.LinAlg.eigs`](https://docs.julialang.org/en/stable/stdlib/linalg/\n"}
{"snippet": "def entropy(*ps):\n    sum = 0\n    for p_i in ps:\n        if p_i <> 0:\n            sum += p_i*math.log(p_i, 2)\n    return -1 * sum\n", "intent": "\\begin{align} -\\sum _{i}p_{i} ld(p_{i}) \\end{align}\n"}
{"snippet": "structures_df = DataManager.load_annotation_v4(stack='MD585', by_human=True, \ntimestamp='latest', suffix='structures', annotation_rootdir=ANNOTATION_THALAMUS_ROOTDIR)\n", "intent": "Check structure files\n"}
{"snippet": "import numpy\ndef span(a):\n    diff = a.max() - a.min()\n    return diff\ndata = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')\nprint 'span of data', span(data)\n", "intent": "Why go to all this trouble?\nWell,\nhere's a function called `span` that calculates the difference between\nthe mininum and maximum values in an array:\n"}
{"snippet": "print(\"1 - demonstrating for loop\")\nfor i in [0,1,2,3,4,5]:\n    print(i)\n", "intent": "The code below demonstrates two ways of looping through the numbers 0,1,2,3,4,5\n"}
{"snippet": "print(simulate_coin_flips(100))\n", "intent": "You now have a new tool you can use! If you want to try calling this function with different values for num_trials, you can.\n"}
{"snippet": "Y = 7\nif 5 < Y < 10:\n    print(\"Y is between 5 and 10\")\nelse: \n    print(\"Y is not between 5 and 10\")\n", "intent": "The code below demonstrates how the flow of program execution can be controlled using statements like `if`, `elif` and `else`.\n"}
{"snippet": "import math\nradius        = 10.0\ndiameter      = 2 * radius\ncircumference = 2 * math.pi * radius\narea          = math.pi * radius ** 2\nprint(\"Radius is\", radius)\nprint(\"Diameter is\", diameter)\nprint(\"Circumference is\", circumference)\nprint(\"Area is\", area)\n", "intent": "Run the cell below to see examples of using math in Python. The math library contains mainy methods including a method that ouputs the value of pi.\n"}
{"snippet": "import numpy as np\nworld = np.array([ [0, 0, 0, 1, 0],\n                   [0, 0, 0, 1, 0],\n                   [0, 1, 1, 0, 0],\n                   [0, 0, 0, 0, 1],\n                   [1, 0, 0, 1, 0],\n                   [1, 0, 0, 0, 0] ])\nprint(world)\n", "intent": "Note that in this demonstration, we'll be using the `numpy` library again, which is a Python library that helps us create and manipulate arrays.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Use list comprehension to create a list of the first five square integers (starting from 1).\n```Python\n[1, 4, 9, 16, 25]\n```\n"}
{"snippet": "print(ticket['description'])\n", "intent": "Each **key** in a dictionary is associated with a **value**. The code below retrieves the **value** associated with the **key** `description`.\n"}
{"snippet": "del eng_to_spa['gren']\nprint(eng_to_spa)\n", "intent": "Oops! I mispelled \"green\". Let's remove that element from the dictionary...\n"}
{"snippet": "eng_to_spa['blue'] = 'azul'\nprint(eng_to_spa)\n", "intent": "It looks like \"azul\" is capitalized... let's change that!\n"}
{"snippet": "diff = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')\nprint 'span of data:', span(diff)\n", "intent": "Notice that `span` assigns a value to a variable called `diff`.\nWe might very well use a variable with the same name to hold data:\n"}
{"snippet": "def bayes(p_A, p_B_given_A, p_notB_given_notA):\n    p_B =  (p_B_given_A * p_A ) + ((1-p_notB_given_notA)*p_A)\n    posterior = (p_B_given_A * p_A) / p_B\n    return posterior\np_A = 0.2\np_B_given_A = 0.9\np_notB_given_notA = 0.5\nposterior = bayes(p_A, p_B_given_A, p_notB_given_notA)\nprint('Your function returned that the posterior is: ' + str(posterior))\n", "intent": "Complete this function so that it returns the posterior probability for any set of inputs.\n"}
{"snippet": "def complement(p_A):\n    complement = 1 - p_A\n    return complement\np_test = 0.1\ncomplement_test = complement(p_test)\nprint('Your function returned that the complement of '+str(p_test) +' is: '+str(complement_test))\n", "intent": "Complete the function so that it returns the complement of P(A), which is the probability that the event did not happen.\n"}
{"snippet": "def total_probability(p_disease, p_pos_given_disease, p_pos_given_no_disease):\n    p_pos_given_disease = p_pos_given_disease * p_disease\n    p_pos_given_no_disease = p_pos_given_no_disease * (1-p_disease)\n    total = p_pos_given_disease + p_pos_given_no_disease\n    return total\np_disease = 0.2\np_pos_given_disease= 0.6\np_pos_given_no_disease= 0.6\ntot = total_probability(p_disease, p_pos_given_disease, p_pos_given_no_disease)\nprint('Your function returned that the total probability is: '+str(tot))\n", "intent": "Complete the function so that it returns the total probability of a disease test, returning a positive result.\n"}
{"snippet": "print(character_counter[\"A\"])\n", "intent": "It looks like this string had 8 spaces, 4 e's, 4 o's, etc...\n"}
{"snippet": "date = \"2018-12-29\"\npriority = \"high\"\nticket_2 = create_ticket(date, priority, description)\n", "intent": "So far, it seems like strings work just fine. But it doesn't take much of an \"edge case\" to break this system...\n"}
{"snippet": "def perfects(n):\n    raise NotImplementedError()\n", "intent": "Using the function `perfect` and list comprehension, write a function `perfects` that returns all the perfect numbers less than some integer `N`.\n"}
{"snippet": "v3 = v1*v2\nprint (v3)\n", "intent": "Now we can perform the **standard vector mathematics operations** on this vector.\n"}
{"snippet": "v3 = v1*v2\nprint(v3)\n", "intent": "Now we can perform the **standard vector mathematics operations** on this vector.\n"}
{"snippet": "import numpy as np\nA = np.asarray([[1,2],[4,5]])\nB = np.asarray([[3,4,6],[4,5,7],[7,8,9]])\n", "intent": "1. 7.1 1-15 (odd)\n2. 7.2 1-22 (odd)\n"}
{"snippet": "data = numpy.loadtxt(fname='inflammation-01.csv', delimiter=',')\nprint center(data, 0)\n", "intent": "That looks right,\nso let's try `center` on our real data:\n"}
{"snippet": "print(\" 4C+2D\\n \",4*C+2*D)\nprint(2*(A+B),\"2(A+B)\")\nprint(u-v,\"u-v\")\n", "intent": "* $4C+2D$\n* $2(A+B)$\n* $u-v$\n"}
{"snippet": "coefficient_matrix = np.array([[1,1,2],\n                              [3,4,8],\n                              [-2,2,1]])\ndependent_matrix = np.array([[3],\n                            [10],\n                            [7]])\n", "intent": "$$\n\\begin{align}\nx + y + 2z & = 3 \\\\\n3x + 4y + 8z & = 10 \\\\\n-2x + 2y + z & = 7\n\\end{align}\n$$\n"}
{"snippet": "A = np.array([[1,1,2],[3,4,8],[-2,2,1]])\nb = np.array([[3],[10],[7]])\nx = np.linalg.solve(A, b)\nx\n", "intent": "$$\n\\begin{align}\nx + y + 2z & = 3 \\\\\n3x + 4y + 8z & = 10 \\\\\n-2x + 2y + z & = 7\n\\end{align}\n$$\n"}
{"snippet": "import numpy as np\nA = np.matrix(([1,1],\n            [4,3],\n            [2,4]))\nB=np.matrix(([3,0,1],\n          [0,6,0]))\nBA = np.matrix(([[5,7],\n         [24,18]]))\nB.dot(A)\n", "intent": "2) Write the product $\\bf{BA}$.\n"}
{"snippet": "import pandas as pd\nmatrix_list = [randomat(3) for _ in range(50)]\nmatrix_Series = pd.Series (matrix_list)\nprint(matrix_Series.head())\n", "intent": "Create a list containing 50 randomat 3x3 matrices. Make a copy of the list, \nin the form of a Pandas Series. Hint: Solution provided below.\n"}
{"snippet": "def gcount(seq):\n    raise NotImplementedError()\n", "intent": "Use list comprehension to write a function `gcount` to count how many guanine nucleotides are in the sequence (Carpodacus mexicanus) provided below.\n"}
{"snippet": "matrix_rank = [np.linalg.matrix_rank(a) for a in matrix_Series]\nmatrix_rank_Series = pd.Series(matrix_rank)\n", "intent": "Create a list of the the 50 ranks of the 50 matrices. Make a copy of the list, in the form of a Pandas Series.\n"}
{"snippet": "print(np.linalg.det(sixteen)) \nprint(np.allclose(np.linalg.det(sixteen),0)) \n", "intent": "Since number sixteen and eighteen are square matrices, the next step is to check the determinants of each.\n"}
{"snippet": "print(np.linalg.solve(sixteen,sixteen_b))\n", "intent": "For matrix eighteen, r < n , so there are infinite solutions\n"}
{"snippet": "print 'original min, mean, and max are:', data.min(), data.mean(), data.max()\ncentered = center(data, 0)\nprint 'min, mean, and and max of centered data are:', centered.min(), centered.mean(), centered.max()\n", "intent": "It's hard to tell from the default output whether the result is correct,\nbut there are a few simple tests that will reassure us:\n"}
{"snippet": "answer_vector  = np.linalg.solve(U,y) \nanswer_vector\n", "intent": "Now that we have $y$, recall that $U{\\bf x} = {\\bf y}$.  \nPlug in your $U$ and ${\\bf y}$ from above.  \nYou should be able to solve for ${\\bf x}$.\n"}
{"snippet": "P_-=np.array([[1/2.5,2/2.5],\n             [-1/2.5,.5/2.5]])\nD=np.array([[7,0],\n           [0,2]])\nP = np.array([[.5,-2],\n             [1,1,]])\n", "intent": "Kreyszig 8.4: 1, 5, 7, 8, 13, 17, 12 (do with friends - you will need to write the elements for part b)\n"}
{"snippet": "import numpy as np\nA = np.array([[1,-3,1],\n         [1,1,0],\n         [0,-2,1],\n         [0,0,0]])\nb = np.array([[0],\n            [0],\n            [0],\n             [0]])\n", "intent": "basis for the image is =  $\\begin{bmatrix}2 & 0\\\\0 & 1\\\\0 & -2\\\\0 & 0 \\end{bmatrix}$\n"}
{"snippet": "import numpy as np\nk = np.array([[4],[1],[3]])\nl = np.array([[2],[-2],[0]])\nm = np.array([[-1],[0],[2]])\nkl = k-l\nml = m-l\nprint(kl)\nprint(ml)\nnp = np.cross(kl, ml, axisa=0, axisb=0)/np.linalg.norm(np.cross(kl, ml, axisa=0, axisb=0))\nprint(np)\n", "intent": "1. Three points exist on a plane, $k = (4, 1, 3)$, $l = (2, -2, 0)$, $m = (-1, 0, 2)$. Write the normal form equation of this plane.\n"}
{"snippet": "import numpy as np\nA = np.array([[4,0],\n             [0,-1]])\nB = np.array ([[5,-3],\n              [2,-2]])\n", "intent": "- 3) Similar matrices mean  that$ Q = P * D * P ^{-1}$. Same eigenvalues.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Write a function `product` that computes the product of all the values in a list.\n"}
{"snippet": "p_t_L =stats.poisson(2)\n", "intent": "Poisson distribution\nL = 2\nk = 3\n"}
{"snippet": "3+stats.nbinom(3,.7).expect()\n", "intent": "negative binomial\np = .7\nn = 3\n"}
{"snippet": "from scipy import stats\npercentile5 = stats.t(35).ppf(0.05)\nprint(percentile5)\n", "intent": "p-value = $P(t_{35} < t_{stat}) = P(t_{35} < \\frac{\\bar{x} - \\mu_0}{s/ \\sqrt{n}}) < 0.05$\n"}
{"snippet": "print 'difference in standard deviations before and after:', data.std() - centered.std()\n", "intent": "Those values look the same,\nbut we probably wouldn't notice if they were different in the sixth decimal place.\nLet's do this instead:\n"}
{"snippet": "def fibonacci(n):\n    M = {0:1,1:1}\n    if n in M:\n        return M[n]\n    else:\n        for i in range(2, n+1):\n            M[i] = M[i-1]+M[i-2]\n    return M[n]\n", "intent": "Another method, more common in lower-level languages, is to decompose the recursion into a loop:\n"}
{"snippet": "def shellsort(a):\n        for i in range(s):\n            _gap_insertion_sort(a, i, s)\ndef _gap_insertion_sort(a, start, gap):\n    for i in range(start+gap, N, gap):\n        curr = a[i]\n        p = i\n", "intent": "2.Please fill in the following shellsort implementation\n"}
{"snippet": "pattern = '[\\w\\.-]+@[\\w\\.-]+'\nstring = 'purple amy@galvanize.com, blah monkey bob@abc.com blah dishwasher'\nm = re.findall(pattern, string)\nprint(m)\nassert m == ['amy@galvanize.com', 'bob@abc.com']\n", "intent": "<details><summary>\nClick here for a solution.\n</summary>\n`\npattern = '[^1234567890]'\n`\n</details>\n"}
{"snippet": "lps = [1 + cfd[a][b] for (a,b) in nltk.bigrams(sentence)]\n", "intent": "That is not a great model becuase it predicts zero for a sentence exists, even though we haven't seen it yet!\n"}
{"snippet": "months = tagger.tag(nltk.word_tokenize(text))\n", "intent": "The output should be like:\n```\n('January', 'MONTH')\n('brings', None)\n('the', None)\n('snow', None)\n...\n```\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Use recursion to write a Python implementation of the quick sort algorithm to sort the values of a list.\n"}
{"snippet": "father = [r'(.*) father(.*)',\n     [\"Tell me more about your father.\",\n      \"What was your relationship with your father like?\",\n      \"How do you feel about your father?\",\n      \"How does this relate to your feelings today?\",\n      \"Good family relations are important.\"]]\n", "intent": "TODO: Create father list of responses\n"}
{"snippet": "your_are = [r'You are(.*)',\n     [\"Why do you think I am {0}?\",\n      \"Does it please you to think that I'm {0}?\",\n      \"Perhaps you would like me to be {0}.\",\n      \"Perhaps you're really talking about yourself?\"]]\n", "intent": "TODO: Add a regex to handle \"You are _____\" statments. The responses have been provided.\n"}
{"snippet": "from IPython.display import YouTubeVideo\nYouTubeVideo(\"BKorP55Aqvg\")\n", "intent": "Being \"The Expert\" in Project Management meetings\n----\n"}
{"snippet": "numpy.loadtxt('inflammation-01.csv', ',')\n", "intent": "but we still need to say `delimiter=`:\n"}
{"snippet": "bucket.get_all_keys()\n", "intent": "Adding Files\n------------\nQ: How can I add a file to a bucket?\n- List files.\n"}
{"snippet": "bucket.get_all_keys()\n", "intent": "- List files again. New file should appear.\n"}
{"snippet": "f = bucket.get_key('file.txt')\nprint f.get_contents_as_string()\n", "intent": "Q: How can I get a file from a bucket?\n- Get file.\n"}
{"snippet": "file2_url = 'http://s3.amazonaws.com/' + bucket_name + '/file2.txt'\nprint file2_url\n", "intent": "- Try reading the file.\n"}
{"snippet": "file2.set_acl('public-read')\n", "intent": "- Now change its ACL.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Write a function `drop` that takes a list and and an integer N and returns a list with the first N elements dropped.\n"}
{"snippet": "print conn.get_all_buckets()\nbucket.delete()\nprint conn.get_all_buckets()\n", "intent": "- Then delete the bucket.\n"}
{"snippet": "from IPython.display import YouTubeVideo\nYouTubeVideo(\"Px7ZPLq4AOU\")\n", "intent": "---\nWhat is AWS's EC2?\n---\n"}
{"snippet": "from string import ascii_lowercase as alphabet\nfrom random import choice\na = [choice(alphabet) for _ in xrange(20)]\nprint(a)\nprint(sorted(a))\n", "intent": "---\nCheck for understanding\n---\n"}
{"snippet": "def center(data, desired=0.0):\n    return (data - data.mean()) + desired\n", "intent": "To understand what's going on,\nand make our own functions easier to use,\nlet's re-define our `center` function like this:\n"}
{"snippet": "import random\nnum_count = 500*1000\nnum_list = [random.random() for i in xrange(num_count)]\nrdd1 = sc.parallelize(num_list)\nrdd2 = rdd1.sortBy(lambda num: num)\n", "intent": "----\nCaching and Persistence\n-----\nConsider this Spark job:\n"}
{"snippet": "(sc.textFile('quotes.txt')\n     .flatMap(lambda line: line.split(\" \"))\n     .map(lambda word: (word,1))\n     .reduceByKey(lambda count1, count2: count1+count2)\n     .collect())\n", "intent": "2) Count the words.\n"}
{"snippet": "sales_by_state = (sc.textFile('sales.csv')\n                  .map(lambda x: x.split(\",\"))\n                  .filter(lambda x: not x[0].startswith('\n                  .map(lambda x: (x[-3],float(x[-1])))\n                  .reduceByKey(lambda amount1,amount2: amount1+amount2)\n                  .sortBy(lambda state_amount:state_amount[1],ascending=False))\n", "intent": "---\nHandling tabular data\n---\n"}
{"snippet": "$SPARK_HOME/bin/spark-submit test_queue_stream.py\n", "intent": "- Lets run this and see what happens.\n"}
{"snippet": "$SPARK_HOME/bin/spark-submit test_window.py\n", "intent": "- Lets run this and see what happens.\n"}
{"snippet": "import sys\nimport os \ntestPath = '/'.join(os.getcwd().split('/')[:-1]) + \"/Tester\"\nsys.path.insert(0, testPath )\npickleFile = testPath+ \"/SparkBasics1.pkl\"\nimport pickle\nimport numpy as np\nimport Tester\nimport SparkBasics1\n", "intent": "The following code imports all the tools and exercises needed to complete this document:\n"}
{"snippet": "python test_join.py\n", "intent": "- Lets run this and see what happens.\n"}
{"snippet": "$SPARK_HOME/bin/spark-submit test_checkpointing.py\n", "intent": "- Lets run this and see what happens.\n"}
{"snippet": "import os\nimport random\nuser = os.environ['USER']\nbucket_name = user + str(int(random.random()*1000))\nbucket_name = bucket_name.lower()\nprint (bucket_name)\nbucket = conn.create_bucket(bucket_name)\nprint (bucket)\n", "intent": "- Create new bucket.\n"}
{"snippet": "more_data = 5 + numpy.zeros((2, 2))\nprint 'data before centering:', more_data\nprint 'centered data:', center(more_data)\n", "intent": "But we can also now call it with just one parameter,\nin which case `desired` is automatically assigned the [default value](../../gloss.html\n"}
{"snippet": "file2_url = 'http://s3.amazonaws.com/' + bucket_name + '/file2.txt'\nprint (file2_url)\n", "intent": "- Try reading the file.\n"}
{"snippet": "print (conn.get_all_buckets())\nbucket.delete()\nprint (conn.get_all_buckets())\n", "intent": "- Then delete the bucket.\n"}
{"snippet": "try:\n    from cassandra.cluster import Cluster\nexcept ImportError:\n    import pip\n    pip.main([\"install\", \"cassandra-driver\"]) \n    from cassandra.cluster import Cluster\n", "intent": "Step 1: Install Cassandra Driver for Python\n-------------------------------------------\n"}
{"snippet": "def test_reverse(function):\n    \"Given a function, test whether it reverses a string\"\n    return (function(\"tattarrattat\") == \"tattarrattat\") and (function(\"redrum\") == \"murder\") \n", "intent": "Now is the time to write a simple test\n"}
{"snippet": "assert test_reverse(lambda string: string[::-1])\n", "intent": "Okay, let's start with idiomatic Python\n"}
{"snippet": "import findspark\nfindspark.init()\nfrom pyspark import SparkContext\nsc = SparkContext(master=\"local[4]\")\nsc\n", "intent": "We start by creating a **SparkContext** object named **sc**. In this case we create a spark context that uses 4 *executors*\n"}
{"snippet": "def rev_concatenation(string):\n    rev_string = \"\"\n    for c in reversed(string):\n        rev_string += c\n    return rev_string\n", "intent": "Let's get real and write our own function...\n"}
{"snippet": "def rev_preappend(string):\n    \"Reverse a string by iterating through and preappending\"\n    rev_string = \"\"\n    for c in string:\n        rev_string = c + rev_string\n    return rev_string\n", "intent": "There is also a varation with preappending:\n"}
{"snippet": "from collections import deque\ndef rev_deque(string):\n    \"Reverse a string by adding left\"\n    rev_string = deque\n    for c in string:\n        rev_string.appendleft(c)\n    return rev_string\n", "intent": "How about using some help from Standard Library?\n"}
{"snippet": "guess_language([2], [{1, 2, 3}, {1}, {1, 2}])\n", "intent": "Here are also a few toy examples for you to try:\n"}
{"snippet": "even = {2, 4, 6, 8, 10, 12, 14}\nP(even, die_faces)\n", "intent": "Because I don't want to count outcomes that were specified in `event` but aren't actually in the sample space. Consider:\n"}
{"snippet": "import random\nrandom.sample(U6, 10)\n", "intent": "I don't want to print all 100,947 members of the sample space; let's just peek at a random sample of them:\n"}
{"snippet": "from math import factorial\ndef choose(n, c):\n    \"Number of ways to choose c items from a list of n items.\"\n    return factorial(n) / (factorial(n - c) * factorial(c))\n", "intent": "And we can translate that to code and verify that 23 choose 6 is 100,947:\n"}
{"snippet": "P(red6, U6) == Fraction(int(choose(9, 6)), \n                        len(U6))\n", "intent": "So the probabilty of 6 red balls is then just 9 choose 6 divided by the size of the sample space:\n"}
{"snippet": "def P(event, space): \n    if callable(event):  \n        event = such_that(event, space) \n    return Fraction(len(event & space), len(space))\ndef such_that(predicate, collection): \n    \"The subset of elements in the collection for which the predicate is true.\"\n    return {e for e in collection if predicate(e)}\n", "intent": "-----\nFind the probability of being dealt a flush (5 cards of the same suit):\n"}
{"snippet": "def largerThan(x,y):\n    if len(x)>len(y): return x\n    elif len(y)>len(x): return y\n    else:  \n        if x>y: \n            return x\n        else: \n            return y\nwordRDD.reduce(largerThan)\n", "intent": "Suppose we want to find the \n* last word in a lexicographical order \n* among \n* the longest words in the list.\nWe could achieve that as follows\n"}
{"snippet": "Fraction(6,36)*Fraction(6,36)\n", "intent": "c) Rolling two 7s in a row?\n"}
{"snippet": "Fraction(8,36)*Fraction(8,36)\n", "intent": "e) Rolling a 7 or 11 twice in a row? (i.e. 7, 7; 7, 11; 11, 7; 11, 11)\n"}
{"snippet": "1 - Fraction(int(combination(9,2) + combination(6,2) + combination(5,2)),int(combination(20,2)))\n", "intent": "4) What is the probability the socks do __not__ match? \n"}
{"snippet": "print 'grid width:', grid.width\nprint 'grid height:', grid.height\nprint 'grid lines on:', grid.lines_on\n", "intent": "Just like a NumPy array,\nan `ImageGrid` has some properties that hold information about it:\n"}
{"snippet": "n = 26\nH = -((1/n)*log2(1/n)*n)\nprint(f\"{H:.5}\")\n", "intent": "What is the Shannon entropy of the English alphabet*?\n-----\nEnglish has 26 letters (a-z). \n<sub>* if each character is equally likely</sub>\n"}
{"snippet": "H = -((1/5)*log2(1/5) + \n      (1/5)*log2(1/5) +\n      (1/5)*log2(1/5) +\n      (2/5)*log2(2/5))\nprint(f\"{H:.3}\")\n", "intent": "p(\"h\") = p(\"e\") =  p(\"0\") = 1/5   \np(\"l\") = 2/5\n"}
{"snippet": "from IPython.display import YouTubeVideo\nYouTubeVideo(\"R3wIEzkv4Pg\")\n", "intent": "BO results\n-----\n<center><img src=\"http://scikit-learn.org/0.17/_images/plot_gp_regression_0011.png\" width=\"700\"/></center>\n"}
{"snippet": "def random_y_given_x(x):\n", "intent": "Now, we can also derive the conditional expectations analytically, and represent them in code:\n$$P(y|x)$$\n"}
{"snippet": "gibbs = gibbs_sample(1,5)\n", "intent": "Use your Gibbs sampler to calculate the expectation of $x$ and of $y$.\n"}
{"snippet": "from pyspark import SparkContext\nsc = SparkContext(master=\"local[4]\")\nsc\n", "intent": "We start by creating a **SparkContext** object named **sc**. In this case we create a spark context that uses 4 *executors*\n"}
{"snippet": "assert sort_row([2, 3, 1]) == [1, 2, 3]\n", "intent": "<details><summary>\nClick here for a hint...\n</summary>\nTry [`sorted`](https://docs.python.org/3/howto/sorting.html)\n</details>\n"}
{"snippet": "def word_count(phrase):\n    print(len(phrase.split()))\n    return(len(phrase.split()))\n", "intent": "<details><summary>\nClick here for a hint...\n</summary>\nCheck out [`len`](https://docs.python.org/3/library/functions.html\n</details>\n"}
{"snippet": "def word_lengths(phrase):\n    return[len(x) for x in phrase.split()]\n", "intent": "<details><summary>\nClick here for a hint...\n</summary>\nCheck out [`str.split()`](https://docs.python.org/3/library/stdtypes.html\n</details>\n"}
{"snippet": "print 'first element of color is:', color[0]\n", "intent": "We can select elements from tuples using indexing,\njust as we do with lists and arrays:\n"}
{"snippet": "def countDog(x):\n    counts=dict()\n    words=x.split()\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts['dog']\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "for i in range(1,101):\n    if int(i**0.5)==i**0.5:\n        print(i)\n", "intent": "https://www.analyticsvidhya.com/blog/2016/01/python-tutorial-list-comprehension-examples/\n"}
{"snippet": "def eg1_for(matrix):\n    flat = []\n    for row in matrix:\n        for x in row:\n            flat.append(x)\n    return flat \ndef eg1_ls(matrix):\n    return [x for row in matrix for x in row]\n", "intent": "**Example 1: Flatten a Matrix**\nAim: Take a matrix as input and return a list with each row placed on after the other.\n"}
{"snippet": "def eg2_for(sentence):\n    vowels = 'aeiou'\n    filtered_list = []\n    for l in sentence:\n        if l not in vowels:\n            filtered_list.append(l)\n    return ''.join(filtered_list)\ndef eg2_lc(sentence):\n    vowels = 'aeiou'\n    return ''.join([l for l in sentence if l not in vowels])\n", "intent": "**Example 2: Removing vowels from a sentence**\nAim: Take a string as input and return a string with vowels removed.\n"}
{"snippet": "def eg3_for(keys, values):\n    dic = {}\n    for i in range (len(keys)):\n        dic[keys[i]] = values[i]\n    return dic\ndef eg3_lc(keys, values):\n    return {keys[i] : values [i] for i in range(len(keys))}\n", "intent": "**Example 3: Dictionary Comprehension**\nAim: Take two list of same length as input and return a dictionary with one as keys and other as values.\n"}
{"snippet": "floating_bubbles = 3.145679\n", "intent": "In the following code cell, assign the value 1.6180339 to a floating point variable named `floating_bubbles`.\n"}
{"snippet": "def x2_for(arr):\n    for i in arr:\n        i*2\n", "intent": "***simple operation of multiplying the number by 2 but we need not store the result***\n"}
{"snippet": "for n in range(0,5,1):\n    print(n)\n", "intent": "https://swcarpentry.github.io/python-novice-inflammation/02-loop/\n"}
{"snippet": "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nimport backtrader as bt\nif __name__ == '__main__':\n    cerebro = bt.Cerebro()\n    cerebro.broker.setcash(100000.0)\n    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n    cerebro.run()\n    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())\n", "intent": "backtrader\nhttps://www.backtrader.com/docu/introduction.html\n"}
{"snippet": "color[0] = 40\nprint 'first element of color after change:', color[0]\n", "intent": "Unlike lists and arrays,\nthough,\ntuples cannot be changed after they are created&mdash;in technical terms,\nthey are [immutable](../../gloss.html\n"}
{"snippet": "initial = \"left\"\nposition = initial\ninitial = \"right\"\n", "intent": "What is the final value of `position` in the program below?\n(Try to predict the value without running the program, then check your prediction.)\n"}
{"snippet": "first_name = \"Johan\"\nlast_name = \"Gambolputty\"\nfull_name = first_name + last_name\nprint(full_name)\n", "intent": "* We've already seen some operations that can be done with strings.\n"}
{"snippet": "full_name = first_name + \" \" + last_name\nprint(full_name)\n", "intent": "* Remember that computers don't understand context.\n"}
{"snippet": "\"Johann Gambolputty\".upper()\n", "intent": "For what its worth, you don't need to have a variable to use the upper() method, you could use it on the string itself.\n"}
{"snippet": "print(len(poem), len(poem.strip(\"?\")), len(poem.replace(\"?\", \"\")) )\n", "intent": "What is the difference between `poem.strip(\"?\")` and `poem.replace(\"?\", \"\")` ?\n"}
{"snippet": "the_string = 'YoImAString'\n", "intent": "Finally, you will need to assign the string 'YoImAString' to a string variable named `the_string`.\n"}
{"snippet": "print(poem.lower().find(\"and\"))\nprint(poem.lower().rfind(\"and\"))\n", "intent": "How can you answer the above accounting for upper- and lowercase?\n"}
{"snippet": "len(poem.split(\"\\n\")) - poem.count(\"\\n\\n\")\n", "intent": "How many lines? (HINT: A line break is represented as  `\\n`  )\n"}
{"snippet": "len(set(poem.lower().split()))\n", "intent": "How many unique words? (HINT: look up what `set` does)\n"}
{"snippet": "from ipythonblocks import colors\nc = ImageGrid(3, 2)\nc[0, 0] = colors['Fuchsia']\nc[0, 1] = colors['Salmon']\nc[1, 0] = colors['Orchid']\nc[1, 1] = colors['Lavender']\nc[2, 0] = colors['LimeGreen']\nc[2, 1] = colors['HotPink']\nc.show()\n", "intent": "It also provides a table of standard colors:\n"}
{"snippet": "print(country_list[-1])\nprint(country_list[-2])\n", "intent": "* Lists can be indexed from the back using a negative index. \n"}
{"snippet": "print(country_list[1:4])\n", "intent": "* Just as with strings, we can get multiple items from a list using slicing\n* Note that the first index is included, while the second is excluded\n"}
{"snippet": "print(country_list[:4])\n", "intent": "* Leave an index blank to get everything from the beginning / end\n"}
{"snippet": "new_list = country_list\nprint(\"original list: \", country_list)\nprint(\"new list: \", new_list)\nprint()\ncountry_list[0] = \"India\"\nprint(\"original list: \", country_list)\nprint(\"new list: \", new_list)\n", "intent": "The fact that lists are mutable also means that any other variables pointing to a list will *also* changed if that list gets changed:\n"}
{"snippet": "new_list[0] = \"Austria\"\nprint(\"original list: \", country_list)\nprint(\"new list: \", new_list)\n", "intent": "But it goes both ways! If a variable pointing to that list is changed, then the original list itself is changed.\n"}
{"snippet": "def print_compositions(func_out):\n    for x in func_out:\n        string = \"\"\n        for i in x:\n           string = string + str(i)+ \" + \"\n        print string[0:-2]\n", "intent": "This helper function not used in your homework. You don't need to know how it works.\n"}
{"snippet": "countries[0] = 'Liechtenstein'\nprint('countries', countries)\nprint('new countries', new_countries)\n", "intent": "Now let's change the first item in `countries`, and print both lists.\n"}
{"snippet": "new_countries[0] = 'Italy'\nprint('countries', countries)\nprint('new countries', new_countries)\n", "intent": "Only `countries` changed! Same thing if we change `new_countries`.\n"}
{"snippet": "country_list.append(\"United States\")\nprint(country_list)\n", "intent": "* If you want to append items to the end of a list, use the `append` method.\n"}
{"snippet": "num = 53\nprint 'before conditional...'\nif num > 100:\n    print '53 is greater than 100'\nprint '...after conditional'\n", "intent": "Conditional statements don't have to include an `else`.\nIf there isn't one,\nPython simply does nothing if the test is false:\n"}
{"snippet": "complex_list = ['life', 42, 'the universe', [1,2,3]]\nprint(complex_list)\n", "intent": "*   A single list may contain numbers, strings, and anything else.\n"}
{"snippet": "print(complex_list[3])\nprint(complex_list[3][0])\n", "intent": "* Notice that we put a list inside of a list, which can itself be indexed. The same could be done for a string. \n"}
{"snippet": "thing = [1,3,8,20,6, 'elephant', 'banana', 200, 2, 'list comprehension']\nlow = 2\nhigh = 8\n", "intent": "If `thing` is a list and `low` and `high` are both non-negative integers like this:\n"}
{"snippet": "city = 'Berkeley'\nprint(city[::2])\nprint(city[::-1])\n", "intent": "What does the following program print?\n"}
{"snippet": "pantry_1 = ['bread', 'pasta', 'beans', 'cereal']\npantry_2 = ['bread', 'pasta', 'beans', 'cereal']\nnew_items = ['granola bars', 'cookies']\npantry_1.append(new_items)\npantry_2.extend(new_items)\nprint('append does this:', pantry_1)\nprint('extend does this:', pantry_2)\n", "intent": "Using the program below, can you tell the difference between the `append` method and the `extend` method?\n"}
{"snippet": "def query(collection):\n    result = [doc['conds'] for doc in collection.find({\"visi\": {'$eq': '10.0'}}).sort('conds')]\n    return result\n", "intent": "- Find all documents with `visi` equal to `\"10.0\"` and sort the documents by `conds`.\n- Return a list of `conds` as a validation of the process.\n"}
{"snippet": "letters = ['s', 'p', 'a', 'm']\n", "intent": "Using the join method, concatenate all the values in this list into one string:\n"}
{"snippet": "print(2)\nprint(3)\nprint(5)\n", "intent": "*   This `for` loop is equivalent to:\n"}
{"snippet": "primes = [2, 3, 5]\nfor p in primes:\n    squared = p ** 2\n    cubed = p ** 3\n    print(p, squared, cubed)\n", "intent": "*   But no loop should be more than a few lines long.\n*   Hard for human beings to keep larger chunks of code in mind.\n"}
{"snippet": "if (1 < 0) or ('left' < 'right'):\n    print 'at least one test is true'\n", "intent": "while `or` is true if either part is true:\n"}
{"snippet": "presidents_full = [\"George Washington\", \"John Adams\", \"Thomas Jefferson\", \"James Madison\", \"James Monroe\", \\\n        \"John Quincy Adams\", \"Andrew Jackson\", \"Martin Van Buren\", \"William Henry Harrison\", \"John Tyler\", \\\n        \"James K. Polk\", \"Zachary Taylor\", \"Millard Fillmore\", \"Franklin Pierce\", \"James Buchanan\", \\\n        \"Abraham Lincoln\", \"Andrew Johnson\", \"Ulysses S. Grant\", \"Rutherford B. Hayes\", \"James A. Garfield\", \\\n        \"Chester A. Arthur\", \"Grover Cleveland\", \"Benjamin Harrison\", \"Grover Cleveland\", \"William McKinley\", \\\n        \"Theodore Roosevelt\", \"William Howard Taft\", \"Woodrow Wilson\", \"Warren G. Harding\", \"Calvin Coolidge\", \\\n        \"Herbert Hoover\", \"Franklin D. Roosevelt\", \"Harry S. Truman\", \"Dwight D. Eisenhower\", \"John F. Kennedy\", \\\n        \"Lyndon B. Johnson\", \"Richard Nixon\", \"Gerald Ford\", \"Jimmy Carter\", \"Ronald Reagan\", \"George H. W. Bush\", \\\n        \"Bill Clinton\", \"George W. Bush\", \"Barack Obama\"]\n", "intent": "Below is a list of presidents. Create a new list that contains only the last name of each president.\n(HINT: Look at string methods!)\n"}
{"snippet": "ages = [20, 43, 12, 88, 97]\nfor age in ages:\n    if age > 70:\n        print(age, 'is old')\n", "intent": "*   Not much point using a conditional when we know the value (as above).\n*   But useful when we have a collection to process.\n"}
{"snippet": "ages = [20, 43, 12, 88, 97]\nfor age in ages:\n    if age > 70:\n        print(age, 'is old')\n    else:\n        print(age, 'is not old')\n", "intent": "*   `else` is always attached to `if`.\n*   Allows us to specify an alternative to execute when the `if` *branch* isn't taken.\n"}
{"snippet": "ages = [20, 43, 12, 88, 97]\nfor age in ages:\n    if age > 65 or age < 16:\n        print(age, 'is outside the labor force')\n    else:\n        print(age, 'is in the labor force')\n", "intent": "I can also generate more complex conditional statements with boolean operators\nlike **and** and **or**, and use comparators like \"<\", \">\"\n"}
{"snippet": "words = ['bears', 'beets', 'battlestar galacticta', 'skateboarding', 'peanut parfait']\nfor word in words:\n    if word[0] == 'b':\n        print(word + ' starts with \"b\"!')\n", "intent": "If we want the condition to test whether two things are the same, then we use two equals signs: `==`\n"}
{"snippet": "def modify(session):\n    dire_data = retrieve_data(session, direction = 'WSW')\n    for row in dire_data:\n        result = session.execute(update, {'id': row['id']})\n    return result\n", "intent": "- Change the `wspdi` value to 1.0 for all rows where the `wdire` attribute is equal to `\"WSW\"`.\n"}
{"snippet": "grade = 85\nif grade >= 70:\n    print('grade is C')\nelif grade >= 80:\n    print('grade is B')\nelif grade >= 90:\n    print('grade is A')\n", "intent": "*   Python steps through the branches of the conditional in order, testing each in turn.\n*   So ordering matters.\n"}
{"snippet": "population = 10000\nif population > 200000:\n    print('large city')\nelse:\n    print('small city')\n    population = 500000\n", "intent": "*   Conditionals do *not* automatically go back and re-evaluate if values change.\n"}
{"snippet": "presidents_full = [\"George Washington\", \"John Adams\", \"Thomas Jefferson\", \"James Madison\", \"James Monroe\", \\\n        \"John Quincy Adams\", \"Andrew Jackson\", \"Martin Van Buren\", \"William Henry Harrison\", \"John Tyler\", \\\n        \"James K. Polk\", \"Zachary Taylor\", \"Millard Fillmore\", \"Franklin Pierce\", \"James Buchanan\", \\\n        \"Abraham Lincoln\", \"Andrew Johnson\", \"Ulysses S. Grant\", \"Rutherford B. Hayes\", \"James A. Garfield\", \\\n        \"Chester A. Arthur\", \"Grover Cleveland\", \"Benjamin Harrison\", \"Grover Cleveland\", \"William McKinley\", \\\n        \"Theodore Roosevelt\", \"William Howard Taft\", \"Woodrow Wilson\", \"Warren G. Harding\", \"Calvin Coolidge\", \\\n        \"Herbert Hoover\", \"Franklin D. Roosevelt\", \"Harry S. Truman\", \"Dwight D. Eisenhower\", \"John F. Kennedy\", \\\n        \"Lyndon B. Johnson\", \"Richard Nixon\", \"Gerald Ford\", \"Jimmy Carter\", \"Ronald Reagan\", \"George H. W. Bush\", \\\n        \"Bill Clinton\", \"George W. Bush\", \"Barack Obama\"]\n", "intent": "Here are our presidents again. Create a list of all the presidents whose last name starts with the letter B.\n"}
{"snippet": "pos_total = 0\nneg_total = 0\nfor n in numbers:\n    if n >= 0:\n        pos_total = pos_total + n\n    else:\n        neg_total = neg_total + n\nprint 'negative and positive sums are:', neg_total, pos_total\n", "intent": "We could equally well calculate the positive and negative sums in a single loop:\n"}
{"snippet": "result = print_date(1871, 3, 19)\nprint('result of call is:', result)\n", "intent": "See what the following programs prints\n"}
{"snippet": "def print_date(year, month, day):\n    joined = str(year) + '/' + str(month) + '/' + str(day)\n    print(joined)\nprint_date(day=1, month=2, year=2003)\n", "intent": "What does this short program print?\n"}
{"snippet": "rec_1 = \"143.1 Pursue efforts to ratify international human rights instruments (Kuwait);\" \nrec_2 = \"143.2 Ratify the international human rights instruments to which Djibouti is not yet party (Niger);\" \nrec_3 = \"143.3 Carry on with the ratification of international conventions (Democratic Republic of Congo);\" \nrec_4 = \"143.4 Speed up measures aimed at ratifying the Optional Protocol to CEDAW (Republic of Moldova);\" \n", "intent": "In our project, we'll be dealing with texts like this (from Djibouti's 2013 review):\n"}
{"snippet": "pressure = 103.9\ndef adjust(t):\n    temperature = t * 1.43 / pressure\n    return(temperature)\n", "intent": "Things can get confusing when you use the same names for variables both inside and outside a function. Check out this example:\n"}
{"snippet": "x = [1, 2, 3, 5]\ndef add_3(val):\n    val[0] = val[0] + 3\n    return val\nadd_3(x)\n", "intent": "But once we start using **mutable** data types like lists, things become tricky:\n"}
{"snippet": "def delete(session):\n    dire_data = retrieve_data(session, direction = 'WSW')\n    for row in dire_data:\n        result = session.execute(delete, {'id': row['id']})\n    return result\n", "intent": "- Delete all rows where the `wdire` attribute is equal to `\"WSW\"`.\n"}
{"snippet": "send(recipient='World', message='Hello')\n", "intent": "In the case above, it is possible to use [argument](https://github.com/dlab-berkeley/python-intensive/blob/master/Glossary.md\n"}
{"snippet": "def send(message, recipient, cc=None, bcc=None):\n    print(message, recipient)\n    print(\"CC: \", cc)\n    print(\"BCC: \", bcc)\nsend('Hello','World')\n", "intent": "2) **Keyword arguments** are not mandatory and have default values. They are often used for optional parameters sent to the function.\n"}
{"snippet": "send('Hello','World', \"Rochelle\", \"Laura\")\n", "intent": "Here cc and bcc are optional, and evaluate to `None` when they are not passed another value.\n"}
{"snippet": "for consonant in 'bcd':\n    for vowel in 'ae':\n        print consonant + vowel\n", "intent": "We can even put one loop inside another:\n"}
{"snippet": "print('\\n'.join(Wheres_Waldo[::-1]))\n", "intent": "Reverse the order of the names:\n"}
{"snippet": "total = 0\nfor word in [\"red\", \"green\", \"blue\"]:\n    total = total + len(word)\nprint(total)\n", "intent": "Fill in the blanks in each of the programs below\nto produce the indicated result.\n"}
{"snippet": "factorial = 1\nfor num in range(1, 43):\n    factorial *= num\nprint(factorial)\n", "intent": "Using `range` and a for loop, calculate the factorial of 42 (the product of all integers up to and including 42).\n"}
{"snippet": "def print_date(year, month, day):\n    joined = str(year) + '/' + str(month) + '/' + str(day)\n    print(joined)\nresult = print_date(1871, 3, 19)\nprint('result of call is:', result)\n", "intent": "See what the following programs prints\n"}
{"snippet": "def get_country_rec(rec):\n    return (rec.split(\"(\")[-1][:-2], ' '.join(rec.split(\"(\")[0].split()[1:]))\nget_country_rec(rec_3)\n", "intent": "In one line--**DON'T EVER WRITE CODE LIKE THIS**:\n"}
{"snippet": "wl = wordlist_sample(10)\nprint('t = ', time_lookups(['bryllyg', 'slythy', 'toves', 'mimsy', 'borogroves'], wl))\n", "intent": "The code cell below shows how to use `time_lookups` to measure how long it takes to search for the nonsense words a list of size 10.\n"}
{"snippet": "print(poets_dict.keys())\nprint(poets_dict.values())\n", "intent": "- Instead of using indices to extract items, dictionaries uses key-value pairs to find and retrieve information.\n"}
{"snippet": "poets_dict[\"works\"][-1]\n", "intent": "- Or perhaps you wanted the last element of the `works` list\n"}
{"snippet": "poets_dict[\"language\"] = \"Farsi\"\nprint(poets_dict)\n", "intent": "This is because its a *mutable* object.\n"}
{"snippet": "square = ImageGrid(5, 5)\nfor x in range(square.width):\n    for y in range(square.height):\n        if x < y:\n            square[x, y] = colors['Fuchsia']\n        elif x == y:\n            square[x, y] = colors['Olive']\n        else:\n            square[x, y] = colors['SlateGray']\nsquare.show()\n", "intent": "We can combine nesting and conditionals to create patterns in an image:\n"}
{"snippet": "poets_dict[\"gender\"] = \"Female\"\nprint(poets_dict)\n", "intent": "- Note that dictionaries are \"indexed\" with square braces, just like lists--they look the same, even though they're very different.\n"}
{"snippet": "d = {'apples': 0.49, 'oranges': 0.99, 'pears': 1.49, 'bananas': 0.32}\nfor key in d.keys():\n    print(key, d[key])\n", "intent": "- There are several ways to loop through dictionaries. Looping over `.keys()` is the most common.\n- Note the order is non-deterministic.\n"}
{"snippet": "d = {'apples': 0.49, 'oranges': 0.99, 'pears': 1.49, 'bananas': 0.32}\nfor key in d.keys():\n    d[key] = round(1.05 * d[key], 2)\nprint(d)\n", "intent": "* This makes it really easy to, say, change the value of items in the dictionary:\n"}
{"snippet": "d = {'apples': 0.49, 'oranges': 0.99, 'pears': 1.49, 'bananas': 0.32}\n", "intent": "Using the dictionary below and a for loop, calculate how much it'll cost you to buy 2 pieces of each fruit.\n"}
{"snippet": "l = [\"Afghanistan\", \"Canada\", \"Sierra Leone\", \"Denmark\", \"Japan\"]\nd = {'apples': 0.49, 'oranges': 0.99, 'pears': 1.49, 'bananas': 0.32}\nprint('Canada' in l)\nprint('grapefruit' in d)\nprint('grapefruit' not in d)\n", "intent": "To see if something is in a container, use the `in` operator. This works for both lists and dictionaries:\n"}
{"snippet": "s1 = s1 = DNA('test1', 'GATTACA')\nrepr(s1)\n", "intent": "Use the following code cell as a \"sandbox\" if you want to do your own tests. You can add additional cells here if you want.\n"}
{"snippet": "nums2 = [x * 2 for x in nums1]\nprint(nums2)\n", "intent": "- Python has another way to perform iteration called `list comprehensions`, which is shorter and more compact. \n"}
{"snippet": "nums1 = [5, 1, 3, 10]\nnums2 = []\nfor x in nums1:\n    if x > 4:\n        nums2.append(x * 2)\nprint(nums2)\n", "intent": "- What if we also have some conditional logic?\n"}
{"snippet": "a = [3, 4, 5]\nb = []\nfor i in a:\n    if i > 4:\n        b.append(i)\n", "intent": "Convert the following code to list comprehensions:\n"}
{"snippet": "common_features(orange_features, lemon_features)\n", "intent": "Test our your `common_features` function on the orange and lemon features, to see if it does in fact return 2:\n"}
{"snippet": "items = 'a b c d'  \nitems = items.split(' ')  \nitems = set(items)  \n", "intent": "Because of dynamic typing, it is better to use different names even for things that are related, when they have a different type:\n"}
{"snippet": "d = {'apples': 0.49, 'oranges': 0.99, 'pears': 1.49, 'bananas': 0.32}\n", "intent": "Using the dictionary below and a for loop, to calculate how much it'll cost you to buy 2 pieces of each fruit.\n"}
{"snippet": " ids = [1, 2, 3, 4, 5, 6]\n", "intent": "You want to select a random value from your data:\n"}
{"snippet": "from math import *\nprint(pi)\n", "intent": "We can uses the `*` character to import everything from a library, and then refer to each item by name without a prefix.\n"}
{"snippet": "a = [3, 4, 5]\nb = []\nfor i in a:\n    if i > 4:\n        b.append(i)\nprint(b)\n", "intent": "Convert the following code to list comprehensions:\n"}
{"snippet": "c2 = CDS('cds2', 'ATGACGTAA')\nprint(c2.codons())\n", "intent": "Use the following code cell as a \"sandbox\" if you want to do your own tests. You can add additional cells here if you want.\n"}
{"snippet": "directory = './data/txts'\nfile_name = \"cotedivoire2014.txt\"\nwith ____(directory + '/'+ file_name,'r') as ____:\n    text = f.____()\n", "intent": "Fill in the blanks to read in the file.\n"}
{"snippet": "rec = accept[1]\nprint(rec)\n", "intent": "Take a look at a recommendation. I've given you a sample one below.\n"}
{"snippet": "def get_country(rec):\n    return(rec_country)\n", "intent": "Using the code you just wrote, create a function called `get_country` that passes an individual recommendation and returns the recommending country\n"}
{"snippet": "width, height = data.shape\nheatmap = ImageGrid(width, height)\n", "intent": "The second is to create an image grid that is the same size as the data:\n"}
{"snippet": "directory = 'data/txts'\nfor file_name in os.listdir(directory):\n    print(file_name)\n", "intent": "The program below reads all the file_names in the directory `data/txts`.\n"}
{"snippet": "import csv\nkeys = all_recs[0].keys()\nwith open('upr-recs.csv', 'w') as output_file:\n    dict_writer = csv.DictWriter(output_file, keys)\n    dict_writer.writeheader()\n    dict_writer.writerows(all_recs)\n", "intent": "Now we get to save our data_base to a CSV, and we're done!\n"}
{"snippet": "examine_dictionaries = []\nreject_dictionaries = []\n", "intent": "Now write a program that does the same for the `examine` and `rejected` lists:\n"}
{"snippet": "dir = 'data/txts'\nfor file_name in os.listdir(dir):\n    print(file_name)\n", "intent": "The program below reads all the file_names in the directory `data/txts`.\n"}
{"snippet": "def foo(required, *args, **kwargs): \n    print(required)\n    if args: \n        print(args)\n    if kwargs: \n        print(kwargs)\n", "intent": "- positional args: __func(arg1, arg2)__\n- variable length args: __func(*args)__\n- keyworded variable length args: __func(**kwargs)__\n"}
{"snippet": "s2 = DNA('test2', 'AAAGGGGAAA')\n", "intent": "Use the following code cell as a \"sandbox\" if you want to do your own tests. You can add additional cells here if you want.\n"}
{"snippet": "A = zeros(5, 5)\nfor i in 1:5\n    for j in 1:5\n        A[i, j] = i+j  \n    end\nend\nA\n", "intent": "First let's use a nested for loop to fill in a matrix that's initially zero:\n"}
{"snippet": "for i in 1:5, j in 1:5\n   A[i, j] = i+j  \nend\nA\n", "intent": "We can abbreviate this using a double `for` loop:\n"}
{"snippet": "[i+j for i in 1:5, j in 1:5]\n", "intent": "The Julia way would be to use a so-called **array comprehension**:\n"}
{"snippet": "h = make_heatmap(flipped, colors['Orchid'], colors['Fuchsia'], colors['HotPink'], 0.8, 1.2, 5)\nh.show()\n", "intent": "To test this function,\nwe'll run it with the settings we just used:\n"}
{"snippet": "sort(unique(x^2 + y^2 for x in 1:5, y in 1:5))  \n", "intent": "**Explore**: What does the following do? \n"}
{"snippet": "for n in 1:5\n    display([i*j for i=1:n, j=1:n])\nend\n", "intent": "Suppose we want to see $n \\times n$ multiplication tables for $n=1,2,3,4,5$:\n"}
{"snippet": "@manipulate for n in 1:1000\n    n\nend\n", "intent": "The package contains a `@manipulate` macro, that is wrapped around a `for` loop:\n"}
{"snippet": "@manipulate for n in 3:10, i in 1:9\n   A = fill(0, n, n)\n   A[1:3, 1:3] = i    \nA\nend\n", "intent": "We use a double `for` loop to get a double slider!\n"}
{"snippet": "function f(x)\n    x^2\nend\nf2(x) = x^2\nf3 = x -> x^2;\n", "intent": "Julia is built around functions: all \"commands\" or \"operations\" in Julia are functions:\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "**Exercise 1** (`x_float_test`: 1 point). Create a variable named `x_float` whose numerical value is one (1) and whose type is *floating-point*.\n"}
{"snippet": "A = fill(0, 10, 10)\nn = size(A, 1)\n@manipulate for i in 1:n-2, j in 1:n-2\n    insert_block(A, i, j)\nend\n", "intent": "We can move the block around:\n"}
{"snippet": "A = fill(\"Julia\", 5, 5)\n", "intent": "Functions in Julia try to be **generic**, i.e. to work with as many kinds of object as possible:\n"}
{"snippet": "A = fill(\"Julia\", 10, 10)\nn = size(A, 1)\n@manipulate for i in 1:n-2, j in 1:n-2\n    insert_block(A, i,j, \"[FUN]\")\nend\n", "intent": "Let's use the **same code**, but now with strings:\n"}
{"snippet": "h = make_heatmap(flipped, colors['Gray'], colors['YellowGreen'], colors['SpringGreen'], 0.5, 1.5, 5)\nh.show()\n", "intent": "That seems right,\nso let's widen the band and use more dramatic colors:\n"}
{"snippet": "println(\"I'm excited to learn Julia!\")\n", "intent": "In Julia we usually use `println()` to print\n"}
{"snippet": "my_answer = 42\ntypeof(my_answer)\n", "intent": "All we need is a variable name, value, and an equal's sign!<br>\nJulia will figure out types for us.\n"}
{"snippet": "my_answer = my_name\n", "intent": "After assigning a value to a variable, we can reassign a value of a different type to that variable without any issue.\n"}
{"snippet": "s3 = \"How many cats \";\ns4 = \"are too many cats?\";\n", "intent": "We can also use `*` or string interpolation!\n"}
{"snippet": "myfavoriteanimals = (\"penguins\", \"cats\", \"sugargliders\")\n", "intent": "We can create a tuple by enclosing an ordered sequence of elements in `( )`.\nSyntax: <br>\n```julia\n(item1, item2, ...)```\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "**Exercise 0** (1 point). Create a variable named `x` and assign it the integer value of 1.\n"}
{"snippet": "myfavoriteanimals[1] = \"otters\"\n", "intent": "but since tuples are immutable, we can't update it\n"}
{"snippet": "myphonebook[\"Jenny\"]\n", "intent": "In this example, each name and number is a \"key\" and \"value\" pair. We can grab Jenny's number (a value) using the associated key\n"}
{"snippet": "myphonebook[\"Kramer\"] = \"555-FILK\"\n", "intent": "We can add another entry to this dictionary as follows\n"}
{"snippet": "h = make_heatmap(flipped, 0.4, 1.6)\nh.show()\n", "intent": "We can now leave out everything except the data being visualized,\nor provide the data and the bands\nand re-use the default colors and block size:\n"}
{"snippet": "fibonacci = [1, 1, 2, 3, 5, 8, 13]\n", "intent": "or to store a sequence of numbers\n"}
{"snippet": "myfriends[3] = \"Baby Bop\"\n", "intent": "We can use indexing to edit an existing element of an array\n"}
{"snippet": "B = fill(0, (m, n))\n", "intent": "Here's some syntactic sugar for the same nested `for` loop\n"}
{"snippet": "C = [i + j for i in 1:m, j in 1:n]\n", "intent": "The more \"Julia\" way to create this addition table would have been with an *array comprehension*.\n"}
{"snippet": "for n in 1:10\n   A = [i + j for i in 1:n, j in 1:n]\n   display(A)\nend\n", "intent": "In the next example, we embed an array comprehension in a `for` loop, generating addition tables of growing size.\n"}
{"snippet": "sc.parallelize([1, 2, 3]).collect()\n", "intent": "Generate a RDD from a Python array with the `parallelize` method.\n"}
{"snippet": "function sayhi(name)\n    println(\"Hi $name, it's great to see you!\")\nend\n", "intent": "Julia gives us a few different ways to write a function. The first requires the `function` and `end` keywords\n"}
{"snippet": "sayhi2(name) = println(\"Hi $name, it's great to see you!\")\n", "intent": "Alternatively, we could have declared either of these functions in a single line\n"}
{"snippet": "sayhi3 = name -> println(\"Hi $name, it's great to see you!\")\n", "intent": "Finally, we could have declared these as \"anonymous\" functions\n"}
{"snippet": "def range_overlap(ranges):\n", "intent": "Again,\nwe get an error because we haven't written our function,\nbut we're now ready to do so:\n"}
{"snippet": "rand(palette, 3, 3)\n", "intent": "and then we can create a randomly checkered matrix using the `rand` command\n"}
{"snippet": "\"hello \" + \"world!\"\n", "intent": "Let's say we want to be able to concatenate strings using `+`. Without extension, this doesn't work.\n"}
{"snippet": "+(x::String, y::String) = string(x, y)\n", "intent": "So we add a method for `+` that takes two strings as inputs and concatenates them.\n"}
{"snippet": "foo(x, y) = println(\"duck-typed foo!\")\nfoo(x::Int, y::Float64) = println(\"foo with an integer and a float!\")\nfoo(x::Float64, y::Float64) = println(\"foo with two floats!\")\nfoo(x::Int, y::Int) = println(\"foo with two integers!\")\n", "intent": "Let's do one more example!\n"}
{"snippet": "l,u,p = lu(A, Val{false})\n", "intent": "On the other hand, we could turn pivoting off for LU factorizations using the argument `Val{false}` in Julia 0.6 or `Val(false)` in later versions.\n"}
{"snippet": "SELECT first_name, last_name, COUNT\nFROM\n(SELECT emp_no, COUNT(*) \n FROM dept_manager \n GROUP BY emp_no) A -- deptmanager table has emp_no, dept_no, from_date, to_date\nNATURAL JOIN employees\nORDER BY last_name, first_name;\n", "intent": "Your result should be in alphabetical order by last name, then first name\n"}
{"snippet": "Asvd = svdfact(A[:,1:2])\n", "intent": "We do not recommend this version.\nThe `svdfact` function computes the singular value decomposition\n"}
{"snippet": "LowerTriangular(tril(A))\n", "intent": "Creating a lower triangular matrix:\n"}
{"snippet": "Asym_noisy = copy(Asym); Asym_noisy[1,2] += 5eps();\n", "intent": "Now let's create a noisy version of Asym to simulate a symmetric matrix with floating point errors.\n"}
{"snippet": "test_range_overlap()\n", "intent": "We can now test `range_overlap` with a single function call:\n"}
{"snippet": "@time eigvals(Asym);\n", "intent": "Now let's look at how the noise in `Asym_noisy` impacts the time to perform an eigendecomposition\n"}
{"snippet": "@time eigvals(Symmetric(Asym_noisy));\n", "intent": "Luckily we can provide explicit information about matrix structure to Julia.\nIn this example, we do so with the `Symmetric` keyword\n"}
{"snippet": "c_bench = @benchmark c_sum($a) \n", "intent": "We can now benchmark the C code directly from Julia:\n"}
{"snippet": "myfavoriteanimals[1]\n", "intent": "We can index into this tuple,\n"}
{"snippet": "x0, y0 = 2.0, 0.8\nplot(w->(y0 - f(x0, w))^2, -3, 3, xlabel=\"w\", ylabel=\"C(w)\", ylims=(0, 0.7))\n", "intent": "Let's draw $C(w)$ as a function of the parameter $w$:\n"}
{"snippet": "import warnings\nwarnings.filterwarnings('ignore')\n", "intent": "Due:  Wednesday November 4th\n"}
{"snippet": "mean(float.(red.(apple)))\n", "intent": "Julia's [mathematical standard library](https://docs.julialang.org/en/stable/stdlib/math/\n"}
{"snippet": "\"The average value of red in the apple is $(mean(float.(red.(apple)))) while the average value of red in the banana is $(mean(float.(red.(banana))))\"\n", "intent": "and then compare their average value for the color red, we end up with something paradoxical:\n"}
{"snippet": "@manipulate for i = 1:size(trainLabels,1)\n    load(\"$(path)/trainResized/$i.Bmp\")\nend\n", "intent": "You can also scroll through the images!\n"}
{"snippet": "a = np.array([[1, 2], [3, 4]])\n", "intent": "NumPy provides the type *N-dimensional array*.\n"}
{"snippet": "print not a is b , not a == b\n", "intent": "We can write also  : \"not (logical expression)\" :\n"}
{"snippet": "'x' not in 'ooooooooxooooooo'\n", "intent": " 'not' can be inserted before 'in' operator, like in natural language :\n"}
{"snippet": "z = 12.0 + 3.0j\nprint z\n", "intent": "Hmm.. interesting! Imaginary numbers are built in!\nDeclare them by **using the \"j\" suffix after a number**\n"}
{"snippet": "print \"=\"*50\nprint \"hello\"*10\n", "intent": "note: string concatination like this is *not fast*, so for complex string processing there are better ways (see `join()` later)\n"}
{"snippet": "t2 = t + (\"value\",6)\nprint t2\n", "intent": "tuples are fixed-structures (you cannot add/remove items or change types once they are defined!), but you can create a new tuple via concatination:\n"}
{"snippet": "postgresql://osmaah02:@localhost/osmaah02\n", "intent": "Create a table for the student entity we modeled in class.\n"}
{"snippet": "x,y,z = 1,2,3\nprint y\n", "intent": "very useful for **multiple assignment**: use a tuple on the left-hand-side to \"undo\" the tuple!\n"}
{"snippet": "v = [1,2,3,4,5] ; \nprint v\nprint len(v), type(v)\n", "intent": "Like tuples, the definition is simple: replace ``()`` with ``[]``\n"}
{"snippet": "v = [1,2,3,4,5]\nprint v.pop()  \nprint v.pop()\nprint v\n", "intent": "Lists can work like Stacks or Queues using `.append(x)` and `.pop()`\n"}
{"snippet": "a1 = np.ones((2, 2))\nprint \"Array is\", a1\ncoord1 = np.where(a1 == 1)\nprint \"Ones are found at (row, column) =\", coord1\nprint \"Values at these coordinates\", a1[coord1]\nprint \"Values of former array at these coordinates\", a[coord1]\n", "intent": "Note that everything is stored in arrays.  If you have several instances, it looks like the following:\n"}
{"snippet": "mylist = [\"this\",\"is\",\"a\",\"test\"]\n\" \".join(mylist)  \n", "intent": "Now let's combine some string and list functions:\n"}
{"snippet": "mydict = { 'firstname': 'Karl', 'lastname': 'Kosack' }\nprint mydict\n", "intent": "One of the most powerful and useful structures is the **dict**  = \"Dictionary\"\n"}
{"snippet": "dd = {}  \ndd[10] = 1.0\ndd[0] = 2.0\nprint dd\nprint dd[10]\n", "intent": "> NOTE Dict keys **do not need to be strings!** \n"}
{"snippet": "a = {\"test\": [1,2,3], 12: 6, 15:(\"one\",\"two\"), \"nesteddict\": dict(x=1,y=15,z=[1,3,5]) }\nprint a\n", "intent": "(allowing you to make complex tree-structures)\n"}
{"snippet": "container = [1,3,5,7]\nfor variable in container:\n    print variable\n", "intent": "You might have noticed that nearly all collecitons let you iterate over them using :\n"}
{"snippet": "DROP TABLE IF EXISTS student;\nCREATE TABLE student (\n    student_id INTEGER,\n    first_Name VARCHAR(20),\n    last_name VARCHAR(20),\n    start_date DATE,\n    grad_date DATE,\n    gpa FLOAT,\n    CONSTRAINT sid_key PRIMARY KEY(student_id)\n);\n", "intent": "Now create a student table, make sure you create a constraint for a primary key.\n"}
{"snippet": "niter = 10\nnx = 128\nny = 128\na = np.zeros((nx,ny))\na = initProblem(a, nx, ny)\nanew = a.copy()\npyversion = %timeit -o solveHeat(a, anew, nx, ny, niter)\ntimes = []; labels = []\ntimes.append(pyversion.best)\nlabels.append('Python')\n", "intent": "Allright, and if we time it:\n"}
{"snippet": "def jacobiNumPy(a):\n", "intent": "Thanks to Karl, here is a pure NumPy version. As you can see, the performances are very similar to what you'd get from Cython, F2Py or Numba!\n"}
{"snippet": "import multiprocessing as mp\ndef piPool(nelmt=int(1e6)):\n    nproc  = mp.cpu_count()\n    pool   = mp.Pool(processes=nproc)\n    result = pool.map(compPi, [nelmt/nproc for i in xrange(nproc)])\n    return sum(result)/nproc\n", "intent": "For the multiprocessing version, the simplest thing to do is to distribute evenly the work among the processes (for example using a pool):\n"}
{"snippet": "b = np.array([1, 2, 3])\n", "intent": "The dot product of 1D arrays expresses inner product of vectors:\n"}
{"snippet": "diff(f, x, 1, y, 2)\n", "intent": "$\\frac{\\partial^3f}{\\partial x \\partial y^2}$ :\n"}
{"snippet": "integrate(f, (x, -1, 1))\n", "intent": "By providing limits for the integration variable we can evaluate definite integrals:\n"}
{"snippet": "Product(n, (n, 1, 10)) \n", "intent": "Products work much the same way:\n"}
{"snippet": "h = Symbol(\"h\")\nlimit((f.subs(x, x+h) - f)/h, h, 0)\n", "intent": "$\\displaystyle \\frac{\\mathrm{d}f(x,y)}{\\mathrm{d}x} = \\frac{f(x+h,y)-f(x,y)}{h}$\n"}
{"snippet": "limit(1/x, x, 0, dir=\"+\")\n", "intent": "We can change the direction from which we approach the limiting point using the dir keywork argument:\n"}
{"snippet": "INSERT INTO student (student_id, first_name, last_name, start_date, grad_date, gpa)\n                    VALUES('1', 'Ahmad', 'Osman', '8/20/2016', '5/23/2020', '3.8');\n", "intent": "Try to add a student with the student_id identical to a student you have previously added.  This **should** create an error.\n"}
{"snippet": "Name= \"Michael Jackson\"\nName\n", "intent": "We can bind or assign a string to another variable:\n"}
{"snippet": "len(\"Michael Jackson\")\n", "intent": " We can find the number of characters in a string by using 'len', short for length:\n"}
{"snippet": "Statement = Name + \"is the best\"\nStatement\n", "intent": "We can concatenate or combine strings by using the addition symbols, and the result is a new string that is a combination of both:\n"}
{"snippet": "grapefruit_features = np.array([True,  True,  True,  False, True ])\nbanana_features     = np.array([True,  False, False, False, False])\nprint(\"f(grapefruit - banana) = \" + str(differences(grapefruit_features, banana_features)))\nprint(\"f(banana - grapefruit) = \" + str(differences(banana_features, grapefruit_features)))\n", "intent": "Test your `differences` function on the orange and lemon feature vectors to see if it works!\n"}
{"snippet": "print(\" Michael Jackson \\\\ is the best\" )\n", "intent": " If you want to place a back slash in your string, use a double back slash:\n"}
{"snippet": "print(r\" Michael Jackson \\ is the best\" )\n", "intent": " We can also place an \"r\" before the string to display the backslash:\n"}
{"snippet": "A=\"Thriller is the sixth studio album\"\nprint(\"before upper:\",A)\nB=A.upper()\nprint(\"After upper:\",B)\n", "intent": "Let's try with the method \"upper\"; this method converts upper case characters to lower case characters:\n"}
{"snippet": "Name=\"Michael Jackson\"\nName.find('el')\n", "intent": " <img src=\"https://ibm.box.com/shared/static/mc414goh1l8jfo9gb19yibuylk8zk7dh.png\" width=600,align=\"center\"></a>\n"}
{"snippet": "Name.find('Jasdfasdasdf')\n", "intent": "If the  sub-string is not in the string then the output is a negative one. For example, the string 'Jasdfasdasdf' is not a substring:\n"}
{"snippet": "release_date.query(\"year == 2014\").groupby(\"country\").count(\"year\").rename(\"count_year\", \"year\")\n", "intent": "Your result should be a table that contains the columns country and year\n"}
{"snippet": "print( tuple1[0])\nprint( tuple1[1])\nprint( tuple1[2])\n", "intent": "We can print out each value in the tuple:\n"}
{"snippet": "print( type(tuple1[0]))\nprint( type(tuple1[1]))\nprint( type(tuple1[2]))\n", "intent": "We can print out the **type** of each value in the tuple:\n"}
{"snippet": "tuple2=tuple1+(\"hard rock\", 10)\ntuple2\n", "intent": "We can concatenate or combine tuples by using the **+** sign:\n"}
{"snippet": "bm = np.matrix(b)\nbm.shape\n", "intent": "Matrix has all the features of array.  You want to use the matrix type if your problem is linear algebra.  Indeed, vectors are then 1-by-N matrices.\n"}
{"snippet": "Ratings1=Ratings\nRatings\n", "intent": " We can assign the tuple to a 2nd variable:\n"}
{"snippet": "RatingsSorted=sorted(Ratings )\nRatingsSorted\n", "intent": "We can sort the values in a tuple and save it to a new tuple: \n"}
{"snippet": "print(\"Element 0 of Tuple: \",   NestedT[0])\nprint(\"Element 1 of Tuple: \",  NestedT[1])\nprint(\"Element 2 of Tuple: \",  NestedT[2])\nprint(\"Element 3 of Tuple: \", NestedT[3])\nprint(\"Element 4 of Tuple: \", NestedT[4])\n", "intent": "<img src = \"https://ibm.box.com/shared/static/estqe2bczv5weocc4ag4mx9dtqy952fp.png\" width = 750, align = \"center\"></a>\n"}
{"snippet": "print(\"Element 2,0 of Tuple: \",   NestedT[2][0])\nprint(\"Element 2,1 of Tuple: \",   NestedT[2][1])\nprint(\"Element 3,0 of Tuple: \",   NestedT[3][0])\nprint(\"Element 3,1 of Tuple: \",   NestedT[3][1])\nprint(\"Element 4,0 of Tuple: \",   NestedT[4][0])\nprint(\"Element 4,1 of Tuple: \",   NestedT[4][1])\n", "intent": " We can access the nested tuples :\n"}
{"snippet": "genres_tuple = (\"pop\", \"rock\", \"soul\", \"hard rock\", \"soft rock\", \\\n                \"R&B\", \"progressive rock\", \"disco\") \ngenres_tuple\n", "intent": "Consider the following tuple:\n"}
{"snippet": "release_date.query(\"(month==6 | month==7 | month==8) & country=='Germany' & year>2000\").\\\nnjoin(moviecast.query(\"n==1\")).\\\ngroupby(['name']).count(\"title\").sort(['count_title','name'],ascending=False).\\\nproject(['name','count_title']).head(10)\n", "intent": "Lets define the Christmas season as the months of November and December.\n"}
{"snippet": "L=[ \"Michael Jackson\", 10.2]\nL.extend(['pop',10])\nL\n", "intent": "We can use the method \"extend\" to add new elements to the list:\n"}
{"snippet": "L=[ \"Michael Jackson\", 10.2]\nL.append(['pop',10])\nL\n", "intent": "Another similar method is 'appended'. If we apply 'appended' instead of 'extended', we add one element to the list:\n"}
{"snippet": "L.append(['a','b'])\nL\n", "intent": "If we append the list  **['a','b']** we have one new element consisting of a nested list:\n"}
{"snippet": "print \"King Arthur\"\n", "intent": "The most basic way to print something in python is simply to use the `print` command, followed by the string to print:\n"}
{"snippet": "print('Before change:', A)\ndel(A[0])\nprint('After change:', A)\n", "intent": " We can also delete an element of a list using the **del** command:\n"}
{"snippet": "A=[\"hard rock\",10,1.2]\nB=A\nprint('A:',A)\nprint('B:',B)\n", "intent": " When we set one variable  **B** equal to **A**;  both **A** and **B** are referencing the same list in memory :\n"}
{"snippet": "print('B[0]:',B[0])\nA[0]=\"banana\"\nprint('B[0]:',B[0])\n", "intent": "Now if you change **A**, **B** will not change: \n"}
{"snippet": "Dict={\"key1\":1,\"key2\":\"2\",\"key3\":[3,3,3],\"key4\":(4,4,4),('key5'):5,(0,1):6}\nDict\n", "intent": " An example of a  Dictionary **Dict**:\n"}
{"snippet": "soundtrack_dic = { \"The Bodyguard\":\"1992\", \"Saturday Night Fever\":\"1977\"}\nsoundtrack_dic \n", "intent": "You will need this dictionary for the next two questions :\n"}
{"snippet": "rmse = None\nrmse\nnp.sqrt(((observed-predicted)**2).mean()),(((observed-predicted)**2).mean())**.5\n", "intent": "**Q4** Give the formula for  the _root mean squared error_ between the two lists of samples: `observed` and `predicted`.\n"}
{"snippet": "release_year_dict['The Bodyguard'] \n", "intent": "Similarly for The Bodyguard     \n"}
{"snippet": "release_year_dict.keys() \n", "intent": "Now let us retrieve the keys of the dictionary using the method **release_year_dict()**:\n"}
{"snippet": "release_year_dict.values() \n", "intent": " You can retrieve the values using the method  **`values()`**:\n"}
{"snippet": "castle = \"Camelot\"\nprint castle\n", "intent": "The `print` command also accepts variable names:\n"}
{"snippet": "del(release_year_dict['Thriller'])\ndel(release_year_dict['Graduation'])\nrelease_year_dict\n", "intent": "We can delete an entry:   \n"}
{"snippet": "'The Bodyguard' in release_year_dict\n", "intent": " We can verify if an element is in the dictionary: \n"}
{"snippet": "album_list =[ \"Michael Jackson\", \"Thriller\", 1982, \"00:42:19\", \\\n              \"Pop, Rock, R&B\", 46.0, 65, \"30-Nov-82\", None, 10.0]\nalbum_set = set(album_list)             \nalbum_set\n", "intent": " You can also  create a set from a list as follows:\n"}
{"snippet": "music_genres = set([\"pop\", \"pop\", \"rock\", \"folk rock\", \"hard rock\", \"soul\", \\\n                    \"progressive rock\", \"soft rock\", \"R&B\", \"disco\"])\nmusic_genres\n", "intent": "Now let us create a set of  genres:\n"}
{"snippet": "A = set([\"Thriller\",\"Back in Black\", \"AC/DC\"] )\nA\n", "intent": " Let us go over Set Operations, as these can be used to change the set. Consider the set **A**:\n"}
{"snippet": "from numpy.linalg import norm\nimport math\nv1a = np.array([5,-1,1,0,-5])\nnorm_v1 = norm(v1a)\nnorm_v1\n", "intent": "$$v_1= \\begin{bmatrix}5\\\\-1\\\\1\\\\0\\\\-5\\end{bmatrix}$$\n"}
{"snippet": "album_set1 = set([\"Thriller\",'AC/DC', 'Back in Black'] )\nalbum_set2 = set([ \"AC/DC\",\"Back in Black\", \"The Dark Side of the Moon\"] )\n", "intent": " Consider the following two sets:\n"}
{"snippet": "album_set_3=album_set1 & album_set2\nalbum_set_3\n", "intent": "We can find the common elements of the sets as follows:\n"}
{"snippet": "album_set1.difference(album_set2)  \n", "intent": "We can find all the elements that are only contained in **album_set1** using the **difference** method:\n"}
{"snippet": "print \"King Arthur lived in\", castle\n", "intent": "Strings and variables can be mixed by using a comma to separate them:\n"}
{"snippet": "album_set1.intersection(album_set2)   \n", "intent": "We can also find the intersection, i.e in both **album_list2** and **album_list1**, using the intersection command :\n"}
{"snippet": "album_set1.union(album_set2)\n", "intent": " The union is given by:\n"}
{"snippet": "set(album_set1).issuperset(album_set2)   \n", "intent": "And you can check if a set is a superset or subset of another set, respectively, like this:\n"}
{"snippet": "set({\"Back in Black\", \"AC/DC\"}).issubset(album_set1) \n", "intent": "Here is an example where **issubset()** is **issuperset()** is true:\n"}
{"snippet": "\"ACDC\"!=\"Michael Jackson\"\n", "intent": " If we use the inequality operator, we get a **True** as the strings are not equal.\n"}
{"snippet": "from numpy.linalg import norm\nimport math\nv2a = np.array([2, 3, 9, 4])\nnorm_v2 = norm(v2a)\nnorm_v2\n", "intent": "$$v_2= \\begin{bmatrix}2\\\\ 3\\\\ 9\\\\ 4\\end{bmatrix}$$\n"}
{"snippet": "album_year = 1980\nif(album_year > 1979) and (album_year < 1990):\n    print (\"Album year was in between 1981 and 1989\")\nprint(\"\")\nprint(\"Do Stuff..\")\n", "intent": " The block of code to perform this check is given by:\n"}
{"snippet": "album_year = 1990\nif(album_year < 1980) or (album_year > 1989):\n    print (\"Album was not made in the 1980's\")\nelse:\n    print(\"The Album was made in the 1980's \")\n", "intent": "The block of code to perform this check is given by:\n"}
{"snippet": "album_year = 1983\nif not (album_year == '1984'):\n    print (\"Album year is not 1984\")\n", "intent": "The **not** statement checks if the statement is false:\n"}
{"snippet": "print \"pi is ...\".format()\n", "intent": "In python, every string has a `format()` method. Let's apply that method to our string:\n"}
{"snippet": "for i in range(0,8):\n    print(i)\n", "intent": "In this example we can print out a sequence of numbers from 0 to 7:\n"}
{"snippet": "for year in dates:  \n    print(year)  \n", "intent": "In Python we can directly access the elements in the list as follows: \n"}
{"snippet": "squares=['red','yellow','green','purple','blue ']\nfor i in range(0,5):\n    print(\"Before square \",i, 'is',  squares[i])\n    squares[i]='wight'\n    print(\"After square \",i, 'is',  squares[i])\n", "intent": "We can change the elements in a list:\n"}
{"snippet": "squares=['red','yellow','green','purple','blue ']\nfor i,square in enumerate(squares):\n    print(i,square)\n", "intent": " We can access the index and the elements of a list as follows: \n"}
{"snippet": "Mult(2,\"Michael Jackson \")\n", "intent": "We can even replicate a string by multiplying with an integer: \n"}
{"snippet": "from numpy.linalg import norm\nimport math\nv3a = np.array([-2, -3, -7, -5])\nnorm_v3 = norm(v3a)\nnorm_v3\n", "intent": "$$v_3=\\begin{bmatrix}-2, -3, -7, -5\\end{bmatrix}^T$$\n"}
{"snippet": "print(MJ())\nprint(MJ1())\n", "intent": " Printing the function after a call reveals a **None** is the default return statement:\n"}
{"snippet": "album_ratings = [10.0,8.5,9.5,7.0,7.0,9.5,9.0,9.5] \nprint(album_ratings)\n", "intent": "The **print()** function:\n"}
{"snippet": "def PrintList(the_list):\n    for element in the_list:\n        print(element)\n", "intent": " We can use a loop in a function. For example, we can **print** out each element in  a list:\n"}
{"snippet": "print \"large is {number}\".format(number=math.pi*1E6)\n", "intent": "Here is another example involving a large number:\n"}
{"snippet": "oct(28), hex(28), bin(28)\n", "intent": "Integer literals can be in decimal, binary, octal and hexadecimal format:\n"}
{"snippet": "44.789, 0.44789e2, 447.89E-1\n", "intent": "Literals can be entered using decimal or scientific notation\n"}
{"snippet": "a = complex(5,4)\nb = 9+3j\nc = a.real + b.imag\nd = complex(a.real, b.imag)\nprint(a,b,c,d)\n", "intent": "Imaginary numbers are marked using the j suffix.\n"}
{"snippet": "L = [2, 3, 5, 7, 11]\n", "intent": "Python provides access to elements in compound types through *indexing* for single elements, and *slicing* for multiple elements.\n"}
{"snippet": "L[0] = 100\nprint(L)\n", "intent": "Both indexing and slicing can be used to set elements as well as access them:\n"}
{"snippet": "from numpy.linalg import norm\nimport math\nv4a = np.array([-10,   6,   8,   0,  -8,   7])\nnorm_v4 = norm(v4a)\nnorm_v4\n", "intent": "$$v_4=\\begin{bmatrix}-10,   6,   8,   0,  -8,   7\\end{bmatrix}^T$$\n"}
{"snippet": "numerator, denominator = x.as_integer_ratio()\nprint(numerator / denominator)\n", "intent": "These multiple return values can be individually assigned as follows:\n"}
{"snippet": "numbers['ninety'] = 90\nprint(numbers)\n", "intent": "New items can be added to the dictionary using indexing as well:\n"}
{"snippet": "primes = {2, 3, 5, 7}\nodds = {1, 3, 5, 7, 9}\n", "intent": "Unordered collections of unique items.\nThey are defined much like lists and tuples, except they use the curly brackets of dictionaries:\n"}
{"snippet": "print \"large is {number:.2e}\".format(number=math.pi*1E6)\n", "intent": "The default output shows all the digits, but it is possible to use the exponential notation instead:\n"}
{"snippet": "for n in [2, 3, 5,67, 7]:\n    print(n, end=' ') \nn\n", "intent": "Loops in Python are a way to repeatedly execute some code statement, once for each item in a collection:\n"}
{"snippet": "a, b = 0, 1\namax = 100\nL = []\nwhile True:\n    (a, b) = (b, a + b)\n    if a > amax:\n        break\n    L.append(a)\nprint(L)\n", "intent": "Fill a list with all Fibonacci numbers up to a certain value:\n"}
{"snippet": "def real_imag_conj(val):\n    return val.real, val.imag, val.conjugate()\nr = real_imag_conj(3 + 4j)\nprint(r)\n", "intent": "+ No type information associated with the function inputs or outputs.\n+ Can `return` any Python object, simple or compound, e.g. a tuple. \n"}
{"snippet": "fibonacci(10, 0, 2)\n", "intent": "But now we can use the function to explore new things, such as the effect of new starting values:\n"}
{"snippet": "fibonacci(10, b=3, a=1)\n", "intent": "Keyword arguments can be in any order:\n"}
{"snippet": "from numpy.linalg import norm\nimport math\nv5a = np.array([6,  -5,  -7, -10,  -6,  -2,  -2])\nnorm_v5 = norm(v5a)\nnorm_v5\n", "intent": "$$v_5=\\begin{bmatrix}6,  -5,  -7, -10,  -6,  -2,  -2\\end{bmatrix}^T$$\n"}
{"snippet": "data = [{'first':'Guido', 'last':'Van Rossum', 'YOB':1956},\n        {'first':'Grace', 'last':'Hopper',     'YOB':1906},\n        {'first':'Alan',  'last':'Turing',     'YOB':1912}]\n", "intent": "So why would you ever want to use such a thing?\nSuppose we have some data stored in a list of dictionaries:\n"}
{"snippet": "sorted([2,4,3,5,1,6])\n", "intent": "Now suppose we want to sort this data.\nPython has a ``sorted`` function that does this:\n"}
{"snippet": "sorted(data, key=lambda item: item['first'])\n", "intent": "To tell the function *how* to sort our data, we specify a ``key`` function, which given an item returns the sorting key for that item:\n"}
{"snippet": "students = 24\nsuccess = 20\nprint \"The success rate is {rate:.1%}\".format(rate=float(success)/students)\n", "intent": "Another useful specifier is `%`, which shows percentages:\n"}
{"snippet": "def fibonacci(N):\n    if N < 0:\n        raise ValueError(\"N must be non-negative\")\n    L = []\n    a, b = 0, 1\n    while len(L) < N:\n        a, b = b, a + b\n        L.append(a)\n    return L\n", "intent": "Errors stemming from invalid parameter values, by convention, lead to a ``ValueError`` being raised:\n"}
{"snippet": "N = -10\ntry:\n    print(\"trying this...\")\n    print(fibonacci(N))\nexcept ValueError as e:\n    print(e)\n    print(\"Bad value: need to do something else\")\n", "intent": "Now the user knows exactly why the input is invalid, and could even use a ``try``...``except`` block to handle it!\n"}
{"snippet": "try:\n    print(\"do something\")\n    raise MySpecialError(\"[informative error message here]\")\nexcept MySpecialError:\n    print(\"do something else\")\n", "intent": "This would allow you to use a ``try``...``except`` block that only catches this type of error:\n"}
{"snippet": "itr = iter([2, 4, 6, 8, 10])\nitr\n", "intent": "The ``for`` loop works on any objects that acts as iterator, i.e. that can return a `next` value until exhausted:\n"}
{"snippet": "for i in range(10):\n    print(i, end=' ')\n", "intent": "So Python knows to treat it *as if* it's a list:\n"}
{"snippet": "from numpy.linalg import norm\nimport math\nv6a = np.array([4, 2, -8])\nnorm_v6 = norm(v6a)\nnorm_v6\n", "intent": "$$v_6= \\begin{bmatrix}4\\\\  2\\\\ -8\\end{bmatrix}$$\n"}
{"snippet": "from itertools import count\nfor i in count():\n    if i >= 10:\n        break\n    print(i, end=', ')\n", "intent": "Python's ``itertools`` library contains a ``count`` function that acts as an infinite range:\n"}
{"snippet": "L = [2, 4, 6, 8, 10]\nfor i in range(len(L)):\n    print(i, L[i])\n", "intent": "Often you need to iterate not only the values in an array, but also keep track of the index.\nYou might be tempted to do things this way:\n"}
{"snippet": "for i, val in enumerate(L):\n    print(i, val)\n", "intent": "Although this does work, Python provides a cleaner syntax using the ``enumerate`` iterator:\n"}
{"snippet": "author = \"Robert Herrick\"\nlife = \"1591-1674\"\ntitle = \"To the Virgins, to Make Much of Time\"\n", "intent": "Let's look at how to format text using a poem as an example:\n"}
{"snippet": "square = lambda x: x ** 2\nfor val in map(square, range(10)):\n    print(val, end=' ')\n", "intent": "The ``map`` iterator takes a function and applies it to the values in an iterator:\n"}
{"snippet": "is_even = lambda x: x % 2 == 0\nfor val in filter(is_even, range(10)):\n    print(val, end=' ')\n", "intent": "The ``filter`` iterator looks similar, except it only passes-through values for which the filter function evaluates to True:\n"}
{"snippet": "print(*map(lambda x: x ** 2, range(10)))\n", "intent": "So, for example, we can get tricky and compress the ``map`` example from before into the following:\n"}
{"snippet": "L1 = (1, 2, 3, 4)\nL2 = ('a', 'b', 'c', 'd')\n", "intent": "Why is there no ``unzip()`` function which does the opposite of ``zip()``.\n"}
{"snippet": "from itertools import combinations\nc = combinations(range(4),3)\nprint(*c)\n", "intent": "Similarly, the ``itertools.combinations`` function iterates over all unique combinations of ``N`` values within a list:\n"}
{"snippet": "import json, a301\nhas_key=False\nans_file = a301.test_dir / Path('assign14_sol.json')\nif ans_file.is_file():\n    with open(ans_file,'r') as f:\n        sol=json.load(f)\n    has_key=True\n", "intent": "Read in my answer key when I run this notebook\n"}
{"snippet": "[n ** 2 for n in range(12)]\n", "intent": "The list comprehension equivalent of this is the following:\n"}
{"snippet": "L = []\nfor val in range(20):\n    if val % 3:\n        L.append(val)\nL\n", "intent": "\"Construct a list of values for each value up to 20, but only if the value is not divisible by 3\".\n"}
{"snippet": "{n**2 for n in range(12)}\n", "intent": "With curly braces you can create a ``set`` with a *set comprehension*:\n"}
{"snippet": "find_similar_animals('mouse', animal_features, animal_names)\n", "intent": "Use your function to find out what animals are most similar to a mouse:\n"}
{"snippet": "{n:n**2 for n in range(6)}\n", "intent": "With a slight tweak, you can add a colon (``:``) to create a *dict comprehension*:\n"}
{"snippet": "(n**2 for n in range(12))\n", "intent": "Finally, if you use parentheses rather than square brackets, you get what's called a *generator expression*:\n"}
{"snippet": "[n ** 2 for n in range(12)]\n", "intent": "This is a representative list comprehension:\n"}
{"snippet": "(n ** 2 for n in range(12))\n", "intent": "While this is a representative generator expression:\n"}
{"snippet": "L = [n ** 2 for n in range(12)]\nfor val in L:\n    print(val, end=' ')\n", "intent": "Both expose the same iterator interface, as we can see here:\n"}
{"snippet": "def find_RR_snow(dbZ):\n   raise NotImplementedError()\n", "intent": "Assuming $Z=2000 \\times {RR}^2$\n"}
{"snippet": "G = (n ** 2 for n in range(12))\nlist(G)\n", "intent": "A generator expression, on the other hand, is used-up after one iteration:\n"}
{"snippet": "G = (n**2 for n in range(12))\nfor n in G:\n    print(n, end=' ')\n    if n > 30: break\nprint(\"\\ndoing something in between\")\nfor n in G:\n    print(n, end=' ')\n", "intent": "This can be very useful because it means iteration can be stopped and started:\n"}
{"snippet": "G1 = (n ** 2 for n in range(12))\ndef gen():\n    for n in range(12):\n        yield n ** 2\nG2 = gen()\nprint(*G1)\nprint(*G2)\n", "intent": "Similarly, here we have two ways of constructing equivalent generators:\n"}
{"snippet": "print \"*{text:<50}*\".format(text=author)\nprint \"*{text:^50}*\".format(text=author)\nprint \"*{text:>50}*\".format(text=author)\n", "intent": "The default justification for strings is to the left, but it can be changed:\n"}
{"snippet": "line = \"this is the content\"\nline.center(30)\n", "intent": "The opposite of this operation, adding spaces or other characters, can be accomplished using the ``center()``, ``ljust()``, and ``rjust()`` methods.\n"}
{"snippet": "'435'.rjust(10, '0')\n", "intent": "All these methods additionally accept any character which will be used to fill the space.\nFor example:\n"}
{"snippet": "line.replace('o', '--')\n", "intent": "The ``replace()`` function returns a new string, and will replace all occurrences of the input:\n"}
{"snippet": "'--'.join(['1', '2', '3'])\n", "intent": "Note that if you would like to undo a ``split()``, you can use the ``join()`` method, which returns a string built from a splitpoint and an iterable:\n"}
{"snippet": "print(\"\\n\".join(['matsushima-ya', 'aah matsushima-ya', 'matsushima-ya']))\n", "intent": "A common pattern is to use the special character ``\"\\n\"`` (newline) to join together lines that have been previously split, and recover the input:\n"}
{"snippet": "from numpy.testing import assert_almost_equal\nTemps=np.asarray([300.,280.,270.,260.])\ntaus=np.asarray([0.,0.2, 0.35, 0.5, 0.6])\nTsfc=305.\nthe_wavel=10.e-6\nout=multi_layer_radiance(Tsfc,Temps,taus,the_wavel)\nassert_almost_equal(out*1.e-6,9.045,decimal=3)\n", "intent": "Here is a test set of layers that should produce a radiance of 9.045 W/m^2/micron/sr\n"}
{"snippet": "line.replace('fox', 'BEAR')\n", "intent": "Similarly, the ``regex.sub()`` method operates much like ``str.replace()``:\n"}
{"snippet": "text = \"To email Guido, try guido@python.org or the older address guido@google.com.\"\nemail.findall(text)\n", "intent": "Using this, if we're given a line from a document, we can quickly extract things that look like email addresses\n"}
{"snippet": "regex = re.compile('e')\nregex.findall('Great Expectationsion')\n", "intent": "If you build a regular expression on a simple string of characters or digits, it will match that exact string:\n"}
{"snippet": "print \"{title}\".format(title=title)\nprint \"*\"*80\nfor line in poem.split('\\n'):\n    print \"*{line:^78}*\".format(line=line)\nprint \"*\"*80\nprint \"{author:>80}\".format(author=author)\nprint \"{life:>80}\".format(life=life)\n", "intent": "As a final example, let's format the entire poem:\n"}
{"snippet": "list = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nfor x in list: \n    if (x % 2 == 0):\n        print x \n", "intent": "Write some code that creates a list of integers, loops through each element of the list, and only prints out even numbers!\n"}
{"snippet": "island = IslandInterface(k=10, D=50, c=100, rhof=1000, rhos=1025, W=1000, \n                         N=0.001, Nstreamlines=20)\nisland.plot()\n", "intent": "Note: the limitation of this implementation is that the toe of interface must be below the island (so not beyond the coast line).\n"}
{"snippet": "from scipy import weave\nfrom scipy.weave import converters\ndef inline_update(u, dx2, dy2):        \n    nx, ny = u.shape\n    dnr_inv = 0.5 / (dx2 + dy2)\n    err = weave.inline(code, ['u', 'dx2', 'dy2', 'dnr_inv', 'nx','ny'],\n                       type_converters = converters.blitz)\n", "intent": "The `weave` module allows you to insert fragments of code in C. Even better, it communicates with Scipy or Python variables seamlessly. \n"}
{"snippet": "F = 88\nC = (5/9)*(F - 32)\nprint(\"%.1f\"%C)\n", "intent": "Alternatively you could use text formatting.\n"}
{"snippet": "from IPython.display import YouTubeVideo\nYouTubeVideo('bjkuvwYWGPM')\n", "intent": "The list class is a good first example of a built-in Python class. Lists are very useful in Python. They are used to store items.\n"}
{"snippet": "def find_RR_snow(dbZ):\n   a1_snow=0.02236   \n   a2_snow=0.5   \n   Z=10**(dbZ/10.)\n   RR=a1_snow*Z**a2_snow\n   return RR\n", "intent": "Assuming $Z=2000 \\times {RR}^2$\n"}
{"snippet": "groceries.append(bread)\n", "intent": "Note that for our purposes we must enclose the parameter with quotes. If we did not we would get an error\n"}
{"snippet": "groceries.append(\"sugar\")\ngroceries.append(\"milk\")\n", "intent": "The `append` method is an example of a *mutator*. Mutators change the internal state of an object. We can continue to add items to the list:\n"}
{"snippet": "groceries.append(\"sugar\")\ngroceries\n", "intent": "Notice that append method did what you'd expect, it added the item to the end of the list. We can add multiple copies of the same item.\n"}
{"snippet": "select distinct quant from Survey;\n", "intent": "We can eliminate the redundant output\nto make the result more readable\nby adding the `distinct` keyword\nto our query:\n"}
{"snippet": "largest_cities.append(\"Tallahassee\")\nlargest_cities\n", "intent": "As before, we can append cities to the end.\n"}
{"snippet": "groceries.remove(\"bread\")\ngroceries\n", "intent": "Another example of a mutator is the  `remove` method. Returning to our grocery list, let's remove bread from the list.\n"}
{"snippet": "groceries.remove(\"sugar\")\ngroceries\n", "intent": "What if we try to remove sugar from our list?\n"}
{"snippet": "groceries.remove(\"coffee\")\n", "intent": "What happens if you try to remove an item from a list that is not actually on the list?\n"}
{"snippet": "groceries.count('milk')\n", "intent": "Sticking with our grocery list, let's look at the `count` method. The count method returns the number of times an item occurs on the list.\n"}
{"snippet": "p = range(1,11)\ntype(p)\n", "intent": "Now write a set of `assert` tests for your `number_to_words` function that verifies that it is working as expected.\n"}
{"snippet": "groceries.append('milk')\ngroceries.append('milk')\ngroceries.count('milk')\n", "intent": "Note that if we later add more milk to the list, the value of milk_count does not change\n"}
{"snippet": "groceries.index(\"coffee\")\n", "intent": "The index method returns an error if the object is not in the list.\n"}
{"snippet": "groceries = groceries.sort()\ngroceries\n", "intent": "Most mutators do no return values. A common mistake is to try and call something like\n"}
{"snippet": "select * from person order by ident desc;\n", "intent": "By default,\nresults are sorted in ascending order\n(i.e.,\nfrom least to greatest).\nWe can sort in the opposite order using `desc` (for \"descending\"):\n"}
{"snippet": "contestants[2] = \"Sami\"\ncontestants\n", "intent": "List indexing can be used to replace existing items. Let's say we want to replace the bronze medalist with \"Sami\". We could do that by calling\n"}
{"snippet": "groceries = list()   \n", "intent": "The second is the *inline* a comment on the right hand side of an existing command:\n"}
{"snippet": "groceries = [\"milk\", \"cookies\", \"flour\", \"salt\", \"chips\", \"eggs\", \"yogurt\", \"suggar\" , \"rice\", \"fish\", \"chicken\"]\n", "intent": "Suppose we have a grocery list:\n"}
{"snippet": "a = \"this is a string\"\ntype(a)\n", "intent": "* the string class is designed to store a sequence of characters.\n* supports many methods that make sense only when dealing with characters\n"}
{"snippet": "a = 'this is a string'\na\n", "intent": "To initialize strings we can use either single quotes of double quotes.\n"}
{"snippet": "l=\"I am a-string\"\nlen(''.join(l.split()))\n", "intent": "Now define a `count_letters(n)` that returns the number of letters used to write out the words for all of the the numbers `1` to `n` inclusive.\n"}
{"snippet": "a = \"this is a string\"\nlen(a)\n", "intent": "Strings use zero-indexing, just like lists. They also support many of the same accesors.\n"}
{"snippet": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\nalphabet[4:10]\n", "intent": "Likes lists, strings support slicing.\n"}
{"snippet": "a = \"This is a string\"\n\"T\" in a\n", "intent": "The `in` function checks whether a particular pattern is contained in a string.\n"}
{"snippet": "select distinct taken, person from Survey order by taken asc, person desc;\n", "intent": "This is easier to understand if we also remove duplicates:\n"}
{"snippet": "a = 3.153545\ntype(a)\n", "intent": "Numbers that are not inegers (i.e. most numbers) are stored in the `float` class. \n"}
{"snippet": "a = \"3.5\"\nb = float(a)\nprint(b)\n", "intent": "Ints and floats can also be cast to and from strings.\n"}
{"snippet": "print(\"This is an integer with two leading zeros %03d.\"%4)\nprint(\"Here is a floating point number that takes up 10 spaces %10.2f. It is displayed to 2 decimal places.\"%3.50399500)\nprint(\"%3.2e is displayed in scientific notation to %d decimal places\"%(0.0000014353,2))\n", "intent": "What does all this mean? It may be useful to look at a few examples first.\n"}
{"snippet": "a = 3\nprint(a == 3)\n", "intent": "To test for exact equality, we can use the `==` operator.\n"}
{"snippet": "a = 0.1\nb = 0.2\nprint(a + b)\n", "intent": "We saw earlier how Python can struggle with seemingly simple floating point operations.\n"}
{"snippet": "assert count_letters(1000)==11\nassert count_letters(342)==23\nassert count_letters(115)==20\nassert count_letters(21)==9\n", "intent": "Now write a set of `assert` tests for your `count_letters` function that verifies that it is working as expected.\n"}
{"snippet": "len(\"bacon\") > 3 and 5 > 1\n", "intent": "2) **`and`** - this operator takes two booleans and returns `true` if they are both true and `false` otherwise\n"}
{"snippet": "len(\"bacon\") > 3 or 1 > 5\n", "intent": "3) **`or`** - this operator takes two booleans and returns `true` if at least one them is `true`\n"}
{"snippet": "x = 5\n3 < x and x < 8\n", "intent": "Consider a compound boolean expression:\n"}
{"snippet": "select ident from Visited where site='DR-1';\n", "intent": "This processing order means that\nwe can filter records using `where`\nbased on values in columns that aren't then displayed:\n"}
{"snippet": "list(range(10,5,-1))\n", "intent": "Note that step can be negative\n"}
{"snippet": "skyBlue = (136, 207, 236)\n", "intent": "As with lists, we can construct a tuple without using the tuple constructor.\n"}
{"snippet": "tuple_1 = (\"hello\", \"hi\")\ntuple_2 = (0, 255, 0)\nprint(tuple_1 + tuple_2)\n", "intent": "Tuples can be concatenated with the \"+\" operator.\n"}
{"snippet": "tuple_list = list(tuple_2)\nprint(tuple_list)\n", "intent": "Tuples can also be converted to a list by passing them in as a constructor.\n"}
{"snippet": "print(tuple(tuple_list))\n", "intent": "Lists can be converted to tuples using the `tuple` constructor.\n"}
{"snippet": "total=0\nfor i in range(1,1001):\n    total += count_letters(i)\ntotal\n", "intent": "Finally used your `count_letters` function to solve the original question.\n"}
{"snippet": "latLong[\"Auckland\"] = (-36.52,174.45)\nlatLong[\"Berlin\"] = (52.30, 13.25)\nlatLong[\"Cairo\"] = (30.20, 31.21)\nlatLong[\"Havanna\"] = (23.80,-82.23)\nlatLong[\"New York\"] = (40.47,-73.58)\nprint(latLong)\n", "intent": "We can add key-value pairs to our dictionary using an assignement syntax.\n"}
{"snippet": "latLong[\"Tallahassee\"]\n", "intent": "If we ask for a key that is not in the dictionary we get an error. \n"}
{"snippet": "latLong[\"New York\"] = (23.7,-82.23)\nprint(latLong)\n", "intent": "The keys in a dictionary must be unique. If we attempt to add a duplicate key, it updates the value already stored for that key.\n"}
{"snippet": "select * from Visited where (site='DR-1') and (dated>='1930-00-00');\n", "intent": "We can use many other Boolean operators to filter our data.\nFor example,\nwe can ask for all information from the DR-1 site collected since 1930:\n"}
{"snippet": "print(a)\nprint(\"a\")\n", "intent": "The `print` function is used to print information to the console. \n"}
{"snippet": "from math import cos\ncos(2)\n", "intent": "2) Specifically importing `cos` from the math library. If we are using `cos` several times in the code, this can avoid repeated typing.\n"}
{"snippet": "T = 70 \nM = 47\nrho = 1.038\nc = 3.7\nK = 5.4e-3\nT0 = 4\nfrom math import log, pi\nt = (M**(2/3)*c*rho**(1/3))/(K*pi**2*(4*pi/3)**(2/3))*log(0.76*(T0 - 100)/(T - 100))\nprint(t)\n", "intent": "$$ t = \\frac{M^{2/3}c\\rho^{1/3}}{K\\pi^2(4\\pi/3)^{2/3}}\\ln\\left(0.76\\frac{T_0 - 100}{T - 100}\\right)$$\n"}
{"snippet": "person = \"George Washington\"\nperson.split()[1]\n", "intent": "Function calls have high precedence. When multiple function calls are used in the same expression they are typically evaluated from left to right.\n"}
{"snippet": "groceries = [\"cereal\", \"milk\", \"apple\"]\ngroceries.insert(groceries.index(\"milk\") + 1, \"eggs\")\ngroceries\n", "intent": "More complicated expressions are evaluated by first resolving commands inside parentheses.\n"}
{"snippet": "assert number_to_words(1)[0] == 'one'\nassert number_to_words(100)[99] == 'one hundred'\nassert number_to_words(178)[177] == 'one hundred and seventy-eight'\n", "intent": "Now write a set of `assert` tests for your `number_to_words` function that verifies that it is working as expected.\n"}
{"snippet": "c = np.array([[1,2],[3,4,5,6]])\n", "intent": "We could initialize an array as an array of arrays of different sizes. \n"}
{"snippet": "print(c.ndim)\nprint(c.shape)\nprint(c.size)\n", "intent": "This is perfectly valid. What are the size and shape of `c` of however?\n"}
{"snippet": "a = np.array([1,2.0,3.2])\na[0] \n", "intent": "Like lists and strings, arrays support indexing and slicing.\n"}
{"snippet": "select * from Survey where person='lake' or person='roe';\n", "intent": "If we want to find out what measurements were taken by either Lake or Roerich,\nwe can combine the tests on their names using `or`:\n"}
{"snippet": "a = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])\nprint(a)\n", "intent": "Slicing is done in exactly the same way.\n"}
{"snippet": "a = np.array([1,2])\nprint(2*a)\nprint(a/2)\n", "intent": "Arrays support several familiar operators. For example you can multiply or divide them by a number.\n"}
{"snippet": "a = np.array([1,2])\nprint(a + 1)\n", "intent": "You can also add a number to them. \n"}
{"snippet": "a = np.array([1,2])\na = np.array([2,4,5])\nprint(a + b)\n", "intent": "When you add two arrays together they must be the same size. If they are not, an error is thrown.\n"}
{"snippet": "x = np.array([1,2])\nA = np.array([[3,2], [1,2]])\nprint(A*x)\n", "intent": "Now suppose $A$ is a 2D array and $x$ is a 1D array. In linear algebra an array times a vector returns a vector. So what is `A*x` in Python? \n"}
{"snippet": "assert count_letters(1) == 3\nassert count_letters(5) == 19\nassert count_letters(12) == 51\nassert count_letters(22) == 130\n", "intent": "Now write a set of `assert` tests for your `count_letters` function that verifies that it is working as expected.\n"}
{"snippet": "a = np.array([0.1, 0.2, 0.3])\nprint(np.sum(a))\n", "intent": "The `np.sum` function returns the sum of an array.\n"}
{"snippet": "A = np.array([[0.1,0.2],[0.3,0.4]])\nprint(np.sum(A,0)) \n", "intent": "For 2D (or higher) arrays, we can input an optional second parameter that tells NumPy which axis to sum along. \n"}
{"snippet": "a = np.array([0,1])\nprint(np.sin(a))\n", "intent": "NumPy provides its own implementations of many mathematical functions that take in arrays and perform operations on each element.\n"}
{"snippet": "select * from Survey where person in ('lake', 'roe');\n", "intent": "Alternatively,\nwe can use `in` to see if a value is in a specific set:\n"}
{"snippet": "d = np.asarray(c)\ntype(d)\n", "intent": "NumPy also provides the function `asarray` that takes a list and returns an array.\n"}
{"snippet": "string = \"is this a long string?\"\nif len(string)>20:\n    print(\"This is a long string!\")\n", "intent": "As a simple example consider the following code snippet.\n"}
{"snippet": "if len(string)>20 and \"s\" in string:\n    print(\"This is a long string, and it contains the letter s!\")\n", "intent": "This is actually exactly equivalent to an example from earlier.\n"}
{"snippet": "s = \"This is a string that contains the letter t\"\n", "intent": "Write a code fragment that prints the number of occurances of the letter \"t\" in a string __only if__ there are more than 3.\n"}
{"snippet": "string = \"how about this?\"\nif len(string)>20:\n    print(\"This is a long string!\")\nelse:\n    if (len(string) > 10):\n        print(\"Sort of...\")\n    else:\n        print(\"This is not a long string :-(\")\n", "intent": "Sometimes we may have more than 2 possible outcomes. For example:\n"}
{"snippet": "def my_f(x):\n    \"Evaluate polynomial function\"\n    return x**3 - 6*x**2 + 4*x + 12\n", "intent": "Define the function for computing $f(x)$:\n"}
{"snippet": "numbers = [1, 3, 5, 19]\nnumbers = [n/10 for n in numbers]\nprint(numbers)\n", "intent": "At the end of our discussion of for loops we talked about list comprehension. For example:\n"}
{"snippet": "game = TicTacToe()\ngame.play()\n", "intent": "For example, let's say we want our top level class to be called `TicTacToe`. This class might have a method `play()` that starts the game. \n"}
{"snippet": "import numpy as np\nclass Board:\n    def __init__(self):\n         self.board = np.array([[\"-\",\"-\",\"-\"],[\"-\",\"-\",\"-\"],[\"-\",\"-\",\"-\"]])\n", "intent": "So we are ready to start creating the Board class. The `__init__` routine should set the `board` member to be an empty board.\n"}
{"snippet": "find_similar_animals('giant panda', animal_features, animal_names)\n", "intent": "Run your function `find_similar_animals` for the input 'giant panda':\n"}
{"snippet": "b = Board()\nprint(b)\n", "intent": "At this point we can already begin to test our Board class by printing the empty board to the console.\n"}
{"snippet": "b = Board()\nprint(b.check_winner(\"x\"))\nb._board = np.array([[\"x\", \"x\", \"x\"],[ \"-\", \"-\", \"-\"], [\"o\", \"x\", \"o\"]])\nprint(b.check_winner(\"o\"))\nprint(b.check_winner(\"x\"))\n", "intent": "To test our winner method, we can modify the `_board` member.\n"}
{"snippet": "class TicTacToe:\n    def __init__(self):\n        self._board = Board() \n", "intent": "Recall that the `TicTacToe` class has a single member variable of type `Board`. We will create this object in the `__init__` function.\n"}
{"snippet": "class SortedSet:\n    def __init__(self):\n        self._items = list()\n", "intent": "Instead of inheriting from the `list` class, we could create a `SortedSet` class that has a `list` as an attribute. \n"}
{"snippet": "  SELECT *\n    FROM Students\nORDER BY id;\n", "intent": "**Note**: While not needed, the output of all SELECT queries have been ordered for easy verification.\n"}
{"snippet": "def compute_root(f, x0, x1, tol, max_it):\n    \"Compute roots of a function using bisection\"\n    raise NotImplementedError()\n    return x_mid, f_mid, it\n", "intent": "Create the function that performs the bisection:\n"}
{"snippet": "  SELECT state, COUNT(name)\n    FROM Students\nGROUP BY STATE\n  HAVING COUNT(NAME) > 1\nORDER BY State;\n", "intent": "Similar to how we filtered rows with a `WHERE` clause we can filter\ngroups with a `HAVING` clause\n"}
{"snippet": "  SELECT state, COUNT(name)\n    FROM Students\nGROUP BY STATE\n  HAVING COUNT(NAME) > 1\nORDER BY COUNT(NAME) DESC, STATE ASC; \n", "intent": "We can arrange the input in descending order of count with:\n"}
{"snippet": "  SELECT name, gpa     -- ..... query-2\n    FROM Students\n   WHERE gpa > 3.0225\nORDER BY name;\n", "intent": "Now filter based on the value of 3.0225\n"}
{"snippet": "select * from Survey where quant='sal' and (person='lake' or person='roe');\n", "intent": "which is salinity measurements by Lake,\nand *any* measurement by Roerich.\nWe probably want this instead:\n"}
{"snippet": "select count(fname)\n  from Baby_Names;\n", "intent": "**[Q] What is the total number of records in the file (1 record per line)**\n"}
{"snippet": "select sum(number)\n  from Baby_Names;\n", "intent": "** [Q] According to this data set, what is the total number of babies?**\n"}
{"snippet": "  select sum(number)\n    from Baby_Names\n   where gender = 'M'\n", "intent": "** [Q] How many boys were born?**\n"}
{"snippet": "  select sum(number)\n    from Baby_Names\n   where gender = 'F'\n", "intent": "**[Q] How many girls were born?**\n"}
{"snippet": "  select gender, sum(number)\n    from Baby_Names\ngroup by gender;\n", "intent": "**[Q] Suppose we want to see the count of boys and girls at the same time?**\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Repeat the Shakespeare string 100 times, and compress:\n"}
{"snippet": "-- emma, olivia, noah \n   select fname, sum(number)\n     from baby_names\n    where year = 2016\n group by fname \n order by sum(number) desc\n    limit 10;\n", "intent": "** [Q] What are the most popular baby names in 2016 **\n"}
{"snippet": "   select fname, sum(number)\n     from baby_names\n    where (year = 2016) and (gender='M')\n group by fname \n order by sum(number) desc\n    limit 10;\n", "intent": "**[Q] What are the most popular boy's names in 2016?**\n"}
{"snippet": "   select fname, sum(number)\n     from baby_names\n    where (year = 2016) and (gender='F')\n group by fname \n order by sum(number) desc\n    limit 10;\n", "intent": "**[Q] What are the most popular girl's names in 2016?**\n"}
{"snippet": "select distinct person, quant from Survey where person='lake' or person='roe';\n", "intent": "Finally,\nwe can use `distinct` with `where`\nto give a second level of filtering:\n"}
{"snippet": "mix = [12, 12.2, 'flower', 'a', (1, 2, 3)]\nprint mix\n", "intent": "Complete the questions using the following list:\n"}
{"snippet": "header = new_lines[0]\ndata = new_lines[1:]\nprint header\nprint data\n", "intent": "---\nThe header is the first string in the list of strings. It contains the column names of our data.\n"}
{"snippet": "names = []\nfor row in parsed_data:\n    names.append(row[0])\nprint names\n", "intent": "---\nThis will be a list of the peoples' names. We are going to use this in the section below. This can be done with a for-loop.\n"}
{"snippet": "salary = np.array(ath['Salary/Winnings'])\ntotal_pay = np.array(ath['Total Pay'])\nendorsements = np.array(ath['Endorsements'])\nheight = np.array(ath['Height (cm)'])\n", "intent": "---\nPull out the three different salary columns and the height column into their own numpy arrays.\n"}
{"snippet": "def distribution_plotter(column, data):\n    sns.set(rc={\"figure.figsize\": (10, 7)})\n    sns.set_style('white')\n    dist = sns.distplot(data, hist_kws={'alpha':0.2}, kde_kws={'linewidth':5})\n    dist.set_title('Distribution of ' + column + '\\n', fontsize=16)\n", "intent": "---\nUse the distribution plotter function below to plot out the distributions for the four variables assigned above.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Create random string and compress:\n"}
{"snippet": "mat = np.array([[1,2],[3,4],[5,6]])\nprint mat.shape\nmat\n", "intent": "You can make matrices by using `np.array()` on lists of lists (or numpy arrays). Combine the small height and pay arrays together into a matrix.\n"}
{"snippet": "stores = pd.Series({\n    99:'Mac',\n    100:'Apple',\n    101:'Gucci'\n})\n", "intent": "Trying to index on a number indexed list is not possible\n"}
{"snippet": "import numpy as np\ns = [1,2,3,4,5,6]\ntotal = np.sum(s)\ntotal\n", "intent": "Applying a given function on all items in a series\n"}
{"snippet": "select personal || ' ' || family from Person;\n", "intent": "We can also combine values from different fields,\nfor example by using the string concatenation operator `||`:\n"}
{"snippet": "s = pd.Series(animals, index=['India', 'Africa', 'Africa'])\ns\n", "intent": "Creating an indexed list\n"}
{"snippet": "def vol(rad):\n    import math\n    print((4/3)*math.pi*(rad**3))\n    pass\n", "intent": "Complete the following questions:\n____\n**Write a function that computes the volume of a sphere given its radius.**\n"}
{"snippet": "def ran_check(num,low,high):\n    for rannum in range(low,high+1):\n        if rannum == num:\n            print(\"Number\",num,\"is in range!\")\n    pass\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "def ran_bool(num,low,high):\n    r=range(low,high+1)\n    print(num in r)\n    pass\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "def multiply(numbers):\n    result = 1\n    for item in numbers:\n        result = result * item\n    print(result)\n    pass\n", "intent": "____\n**Write a Python function to multiply all the numbers in a list.**\n    Sample List : [1, 2, 3, -4]\n    Expected Output : -24\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Compare compression efficiency:\n"}
{"snippet": "l = [1,2,[3,4,'hello']]\nl[2][2] = 'goodbye'\nprint(l)\n", "intent": "Reassign 'hello' in this nested list to say 'goodbye' item in this list:\n"}
{"snippet": "l = [3,4,5,5,6]\nl.sort()\nprint(l)\n", "intent": "Sort the list below:\n"}
{"snippet": "d = {'simple_key':'hello'}\nprint(d['simple_key'])\n", "intent": "Using keys and indexing, grab the 'hello' from the following dictionaries:\n"}
{"snippet": "select distinct site from Visited;\n", "intent": "3.  The site identifiers in the `Visited` table have two parts\n    separated by a '-':\n"}
{"snippet": "print('Convert to string', \"%r\"% (123)) \n", "intent": "First arg is total minimum digits/chars the string should contain. Leave as 1 if you want to default to some normal looking numbers (like 0.54 or 41)\n"}
{"snippet": "print('First:', \"%s\"% (\"1\"), 'Second:', \"%s\"% (\"2\"), 'Third:', \"%s\"% (\"3\")) \n", "intent": "r    String (converts any python object using repr()).\ns    String (converts any python object using str()).\n"}
{"snippet": "for num in range(0,11,2):\n    print(num)\n", "intent": "______\n**Use range() to print all the even numbers from 0 to 10.**\n"}
{"snippet": "print([num for num in range(1,51) if num % 3 == 0])\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "for word, ratio in pos_neg_ratios.most_common():\n    if ratio>1:\n        pos_neg_ratios[word] = np.log(ratio)\n    else:\n        pos_neg_ratios[word] = -np.log((1/ (ratio + 0.01)))\n", "intent": "Convert the ration into log scale for easy evaluation\n"}
{"snippet": "A = np.array([[4.0, 7.0, -2.43, 67.1],\n             [-4.0, 64.0, 54.7, -3.33],\n             [2.43, 23.2, 3.64, 4.11],\n             [1.2, 2.5, -113.2, 323.22]])\nprint(A)\n", "intent": "For the two-dimensional array\n"}
{"snippet": "show_image('images/shortcuts.png')\n", "intent": "A list of keyboard shortcuts can be revealed by entering `h`.\n"}
{"snippet": "show_image('images/save.png')\n", "intent": "You can save in several formats via the **File** menu entry\n"}
{"snippet": "bbi = y * ps.lag_spatial(w,y)\n", "intent": "$bb_i = \\sum_j y_i w_{i,j} y_j = y_i \\sum_j w_{i,j} y_j$ \n"}
{"snippet": "select * from Visited where dated<'1930-00-00';\n", "intent": "Null doesn't behave like other values.\nIf we select the records that come before 1930:\n"}
{"snippet": "reg1 = pysal.spreg.OLS_Regimes(y,x,regimes,w=w,spat_diag=True,moran=True,\nname_y=y_name,name_x=x_names,name_regimes=rvar,name_w=\"boston_k4\",name_ds=\"boston.dbf\")\n", "intent": "Default regime regression\n"}
{"snippet": "colsvari = [True,True,False,False,False,False]\n", "intent": "Keeping AGE, DIS, LSTAT and RM constant and letting constant, CRIM and NOX vary\norder of variables in x is CRIM, NOX, RM, AGE, DIS, LSTAT\n"}
{"snippet": "y_name = \"PRICE\"\ny = np.array([db.by_col(y_name)]).T\n", "intent": "read in dependent variable and turn into numpy array y\n"}
{"snippet": "x_names = ['NROOM','NBATH','PATIO','FIREPL','AC','GAR','AGE','LOTSZ','SQFT']\nx = np.array([db.by_col(var) for var in x_names]).T\n", "intent": "read in explanatory variables and turn into numpy array x\n"}
{"snippet": "w = pysal.knnW_from_shapefile(\"data/baltim.shp\",k=4,idVariable='STATION')\nw.transform = 'r'\n", "intent": "create k = 4 nearest neighbor weights and row-standardize\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Compute the transpose of `A` (search online to find the function/syntax to do this).\n"}
{"snippet": "reg1.regime_err_sep\n", "intent": "Separate regressions by regime\n"}
{"snippet": "reg2 = pysal.spreg.OLS_Regimes(y,x,regimes,w=w,spat_diag=True,moran=True,\nregime_err_sep=False,\nname_y=y_name,name_x=x_names,name_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "using k nearest neighbor weights\n"}
{"snippet": "reg3 = pysal.spreg.OLS_Regimes(y,x,regimes,w=w,spat_diag=True,moran=True,\nconstant_regi='one',name_y=y_name,name_x=x_names,\nname_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "with regime_err_sep=True (default), i.e. groupwise heteroskedasticity\n"}
{"snippet": "select * from Visited where dated>='1930-00-00';\n", "intent": "we get two results,\nand if we select the ones that come during or after 1930:\n"}
{"snippet": "reg5 = pysal.spreg.OLS_Regimes(y,x,regimes,w=w,spat_diag=True,moran=True,\nconstant_regi='one',cols2regi=colsvari,\nname_y=y_name,name_x=x_names,\nname_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "with default regime_err_sep = True, k nearest neighbor weights\n"}
{"snippet": "reg6 = pysal.spreg.OLS_Regimes(y,x,regimes,w=w,spat_diag=True,moran=True,\nconstant_regi='one',cols2regi=colsvari,regime_err_sep=False,\nname_y=y_name,name_x=x_names,\nname_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "with regime_err_sep = False (homoskedasticity), k nearest neighbors\n"}
{"snippet": "reg7 = pysal.spreg.OLS_Regimes(y,x,regimes,w=w,spat_diag=True,moran=True,\ncols2regi=colsvari,\nname_y=y_name,name_x=x_names,\nname_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "**default is constant varies across regimes**\n"}
{"snippet": "reg1 = pysal.spreg.GM_Lag_Regimes(y,x,regimes,w=w,spat_diag=True,name_y=y_name,\nname_x=x_names,name_regimes=rvar,name_w=\"boston_k4\",name_ds=\"boston.dbf\")\n", "intent": "Default regime regression - one spatial lag coefficient\n"}
{"snippet": "reg2 = pysal.spreg.GM_Lag_Regimes(y,x,regimes,w=w,spat_diag=True,cores=False,\nregime_lag_sep=True,regime_err_sep=True,name_y=y_name,\nname_x=x_names,name_regimes=rvar,name_w=\"boston_k4\",name_ds=\"boston.dbf\")\n", "intent": "Different spatial lag coefficient by regime\n"}
{"snippet": "pd.read_sql_query(query, conn)\n", "intent": "**Exercise 2** (3 points). Make sure every edge has its end points in the vertex table.\n"}
{"snippet": "reg1 = pysal.spreg.GM_Lag_Regimes(y,x,regimes,w=w,spat_diag=True,name_y=y_name,\nname_x=x_names,name_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "**regime_lag_sep = False and regime_err_sep = True**\none spatial lag coefficient and heteroskedasticity (White standard errors)\n"}
{"snippet": "reg2 = pysal.spreg.GM_Lag_Regimes(y,x,regimes,w=w,spat_diag=True,\nregime_err_sep=False,name_y=y_name,\nname_x=x_names,name_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "**regime_lag_sep = False and regime_err_sep = False**\n"}
{"snippet": "reg3 = pysal.spreg.GM_Lag_Regimes(y,x,regimes,w=w,spat_diag=True,cores=False,\nregime_lag_sep=True,regime_err_sep=True,name_y=y_name,\nname_x=x_names,name_regimes=rvar,name_w=\"baltim_k4\",name_ds=\"baltim.dbf\")\n", "intent": "**regime_lag_sep = True and regime_err_sep = True**\n"}
{"snippet": "select * from Visited where dated is NULL;\n", "intent": "To check whether a value is `null` or not,\nwe must use a special test `is null`:\n"}
{"snippet": "y = np.array([db.by_col(y_name)]).T\n", "intent": "Create the y array as a n by 1 column vector (hence the transpose **T**)\n"}
{"snippet": "x_names = ['NROOM','NBATH','PATIO','FIREPL','AC','GAR','AGE',\n           'LOTSZ','SQFT']\nx = np.array([db.by_col(var) for var in x_names]).T\n", "intent": "**x** - the explanatory variables\nFirst create a list with the variable names, then use a list comprehension to create the **x** array\n"}
{"snippet": "w = pysal.knnW_from_shapefile('data/baltim.shp',\n                                k=4,idVariable='STATION')\n", "intent": "k nearest neighbor with k=4 constructed from baltim.shp, using STATION as the ID variable\n"}
{"snippet": "kw = pysal.adaptive_kernelW_from_shapefile('data/baltim.shp',\n                                             k=12,diagonal=True,idVariable='STATION')\n", "intent": "triangular adaptive bandwidth kernel with k=12, constructed from baltim shape file\n"}
{"snippet": "ols1 = pysal.spreg.OLS(y,x)\n", "intent": "**Default settings, no variable names**\n"}
{"snippet": "import sys\nsys.path.append(\"../modules/orcid-python\")\nsys.path.append(\"../modules/pyalm\")\nimport os\nimport requests\nimport time\nimport orcid\nimport json\n", "intent": "Get everything ready before we start the exercise.\n"}
{"snippet": "ols2 = pysal.spreg.OLS(y,x,white_test=True,name_y=y_name,\n                       name_x=x_names,name_ds='baltim.shp')\n", "intent": "set **white_test = True**\n"}
{"snippet": "ols4 = pysal.spreg.OLS(y,x,robust='white',\n                       name_y=y_name,name_x=x_names,name_ds='baltim.shp')\n", "intent": "set **robust= 'white'** for the default scaling, dividing by $n - k$, the spatial diagnostics have been turned off\n"}
{"snippet": "ols5 = pysal.spreg.OLS(y,x,robust='white',sig2n_k=False,\n                       name_y=y_name,name_x=x_names,name_ds='baltim.shp')\n", "intent": "turn off scaling (i.e., divide by n) by setting **sig2n_k = False**\n"}
{"snippet": "select * from Visited where dated is not NULL;\n", "intent": "or its inverse `is not null`:\n"}
{"snippet": "v = pysal.spreg.diagnostics.vif(ols1)\n", "intent": "use **vif** and pass a regression object, e.g., **ols1**\n"}
{"snippet": "vw = pysal.spreg.diagnostics_sp.LMtests(ols1,w)\n", "intent": "use **LMtests** with a regression object and a weights object\n"}
{"snippet": "reg1 = pysal.spreg.TSLS(y,x,yend,q,w=w,robust='white',spat_diag=True,\n                       name_y=y_name,name_x=x_names,name_yend=yend_names,\n                       name_q=q_names,name_w='nat_k6',\n                       name_ds='natregimes.shp')\n", "intent": "two stage least squares with White standard errors and diagnostics for spatial dependence\n"}
{"snippet": "reg2 = pysal.spreg.TSLS(y,x,yend,q,w=w,robust='hac',gwk=kw,spat_diag=True,\n                       name_y=y_name,name_x=x_names,name_yend=yend_names,\n                       name_q=q_names,name_w='nat_k6',name_gwk='nat_quadratic_12',\n                       name_ds='natregimes.shp')\n", "intent": "two stage least squares with HAC standard errors and diagnostics for spatial dependence\n"}
{"snippet": "db = pysal.open('data/natregimes.dbf','r')\n", "intent": "Loading the data set and creating the data object\n"}
{"snippet": "import os\nimport sys\nsys.path.append(\"/Users/dennis_hammerschmidt/Desktop/Uni/M.A. Political Science/5. Semester/Big Data and Social Sciences/Big-Data-Workbooks-master/04. Social Media and APIs/modules/orcid-python\")\nsys.path.append(\"/Users/dennis_hammerschmidt/Desktop/Uni/M.A. Political Science/5. Semester/Big Data and Social Sciences/Big-Data-Workbooks-master/04. Social Media and APIs/modules/pyalm\")\nimport requests\nimport time\nimport orcid\nimport pyalm.pyalm as pyalm\nsys.path.append(\"/Users/dennis_hammerschmidt/Desktop/Uni/M.A. Political Science/5. Semester/Big Data and Social Sciences/Big-Data-Workbooks-master/04. Social Media and APIs/modules/pyalm/pyalm\")\nimport utilities.plossearch as search\n", "intent": "Load the required packages before the start of the exercise.\n"}
{"snippet": "x_names = ['RD90','MA90','PS90']\nx = np.array([db.by_col(var) for var in x_names]).T\n", "intent": "**x** - array with observations on explanatory variables\n"}
{"snippet": "yend_names = ['UE90']\nyend = np.array([db.by_col(var) for var in yend_names]).T\n", "intent": "**yend** - endogenous explanatory variable, UE90\n"}
{"snippet": "q_names = ['FH90','FP89','GI89']\nq = np.array([db.by_col(var) for var in q_names]).T\n", "intent": "**q** - array of instruments\n"}
{"snippet": "select max(dated) from Visited;\n", "intent": "<img src=\"files/img/sql-aggregation.svg\" alt=\"SQL Aggregation\" />\n"}
{"snippet": "reg1 = pysal.spreg.TSLS(y,x,yend,q,name_y=y_name,name_x=x_names,\n                        name_yend=yend_names,name_q=q_names,name_ds='nat.dbf')\n", "intent": "**default settings** including variable names and data set name\n"}
{"snippet": "bigx = np.hstack((x,q))\n", "intent": "create a matrix with all the instruments, i.e., both **x** and **q**\n"}
{"snippet": "step1 = pysal.spreg.OLS(yend,bigx)\n", "intent": "OLS regression of endogenous variable on all the instruments (**x** and **q**)\n"}
{"snippet": "newx = np.hstack((x,y2))\n", "intent": "replace the endogenous variable by its predicted value\n"}
{"snippet": "step2 = pysal.spreg.OLS(y,newx)\n", "intent": "second step OLS regression\n"}
{"snippet": "row_count = -1\nsingle_row = -1\nvendor_count = -1\nsql_select = \"SELECT * FROM vendor LIMIT 10\"\nrow_count = cursor.execute( sql_select )\ncursor.fetchall()\n", "intent": "That's kind of a lot.  But we should see what happens...  Load 'em anyway!\n"}
{"snippet": "reg3 = pysal.spreg.TSLS(y,x,yend,q,robust='white',\n                        name_y=y_name,name_x=x_names,name_yend=yend_names,\n                        name_q=q_names,name_ds=\"nat.dbf\")\n", "intent": "set **robust = 'white'**\n"}
{"snippet": "reg4 = pysal.spreg.TSLS(y,x,yend,q,robust='hac',gwk=kw,\n                        name_y=y_name,name_x=x_names,name_yend=yend_names,\n                        name_q=q_names,name_gwk=\"nat_k20_triang\",\n                        name_ds=\"nat.dbf\")\n", "intent": "set **robust = 'hac'** and specify a kernel weights object as **gkw** (**name_gwk** is optional)\n"}
{"snippet": "reg1 = pysal.spreg.GM_Lag(y,x,w=w,spat_diag=True,\n                          name_y=y_name,name_x=x_names,\n                          name_w='south_k6',name_ds='south')\n", "intent": "spatial two stage least squares: exogenous variables only, using k=6 nearest neighbors\n"}
{"snippet": "leopard = animal_features[animal_names.index('leopard')]\ntiger = animal_features[animal_names.index('tiger')]\nprint(\"S(leopard, tiger) = {}\".format(tversky_sim(leopard, tiger, theta=1.0, alpha=2.5, beta=0.5)))\nprint(\"S(tiger, leopard) = {}\".format(tversky_sim(tiger, leopard, theta=1.0, alpha=2.5, beta=0.5)))\n", "intent": "Now, run the cell below to find out what Tversky's similarity metric says about the similarity:\n"}
{"snippet": "reg1b = pysal.spreg.GM_Lag(y,x,w=ww,spat_diag=True,\n                          name_y=y_name,name_x=x_names,\n                          name_w='south_queen',name_ds='south')\n", "intent": "spatial two stage least squares using queen contiguity\n"}
{"snippet": "reg2 = pysal.spreg.GM_Lag(y,xe,yend,q,w=w,spat_diag=True,\n                          name_y=y_name,name_x=xe_names,name_yend=yend_names,\n                          name_q=q_names,name_w='south_k6',name_ds='south')\n", "intent": "spatial two stage least squares with exogenous and endogenous variables, k=6 nearest neighbors\n"}
{"snippet": "db = pysal.open('data/baltim.dbf','r')\ny_name = \"PRICE\"\ny = np.array([db.by_col(y_name)]).T\nx_names = ['NROOM','NBATH','PATIO','FIREPL','AC','GAR','AGE',\n           'LOTSZ','SQFT']\nx = np.array([db.by_col(var) for var in x_names]).T\n", "intent": "the **baltimore** sample data set\n"}
{"snippet": "w = pysal.knnW_from_shapefile('data/baltim.shp',\n                                k=4,idVariable='STATION')\nw.transform = 'r'\n", "intent": "model weights - k nearest neighbors with k=4\n"}
{"snippet": "kw12 = pysal.adaptive_kernelW_from_shapefile('data/baltim.shp',\n                                             k=12,diagonal=True,idVariable='STATION')\n", "intent": "kernel weights - triangular with k=12\n"}
{"snippet": "def example_float_associative():\n    raise NotImplementedError()\n    return (a + b) + c == a + (b + c)\n", "intent": "---\nGive an example where floating point addition is not associative.\n"}
{"snippet": "reg2a = pysal.spreg.GM_Lag(y,x,w=w,w_lags=3,name_y=y_name,\n                          name_x=x_names,name_w='baltim_k4',\n                          name_ds='baltim')\n", "intent": "up to third order spatial lags, set **w_lags=3**\n"}
{"snippet": "b = reg1.betas[:-1]\n", "intent": "extract the regression coefficients\n"}
{"snippet": "rho = reg1.betas[-1]\n", "intent": "extract the spatial autoregressive coefficient\n"}
{"snippet": "select person, count(*) from Survey where quant='sal' and reading<=1.0;\n", "intent": "We can also combine aggregated results with raw results,\nalthough the output might surprise you:\n"}
{"snippet": "varnames = [\"CONSTANT\"] + x_names\nprint \"Variable       Direct       Indirect      Total\"\nfor i in range(len(varnames)):\n    print \"%10s %12.7f %12.7f %12.7f\" % (varnames[i],b[i][0],bind[i][0],btot[i][0])\n", "intent": "summary of the results\n"}
{"snippet": "reg3 = pysal.spreg.GM_Lag(y,x,w=w,spat_diag=True,\n                          name_y=y_name,name_x=x_names,\n                          name_w='baltim_k4',name_ds='baltim')\n", "intent": "specify the weights as **w=w**, set **spat_diag = True** and optionally specify a name for the weights\n"}
{"snippet": "reg4 = pysal.spreg.GM_Lag(y,x,w=w,robust='white',\n                          spat_diag=True,name_y=y_name,name_x=x_names,\n                          name_w='baltim_k4',name_ds='baltim')\n", "intent": "set **robust = 'white'**\n"}
{"snippet": "reg5 = pysal.spreg.GM_Lag(y,x,w=w,robust='hac',gwk=kw12,\n                          spat_diag=True,name_y=y_name,name_x=x_names,\n                          name_w='baltim_k4',name_gwk='baltim_tri_k12',\n                          name_ds='baltim')\n", "intent": "set **robust = 'hac'** and specify the kernel weights **gwk** and optionally their name **name_gwk**\n"}
{"snippet": "db = pysal.open('data/natregimes.dbf','r')\ny_name = \"HR90\"\ny = np.array([db.by_col(y_name)]).T\nx_names = ['RD90','MA90','PS90']\nx = np.array([db.by_col(var) for var in x_names]).T\nyend_names = ['UE90']\nyend = np.array([db.by_col(var) for var in yend_names]).T\nq_names = ['FH90','FP89','GI89']\nq = np.array([db.by_col(var) for var in q_names]).T\n", "intent": "create the variable arrays using the **natregimes** sample data set\n"}
{"snippet": "assert diagonalsum(5) is not None, \"did you make sure that your function returns a result?\"\nassert type(diagonalsum(5)) == type(1), 'Your result is not an integer.'\n", "intent": "Test your solution by executing the following three cells. If there is no output, everything is fine. Otherwise you have to go hunting coding errors.\n"}
{"snippet": "reg7 = pysal.spreg.GM_Lag(y,x,yend,q,w=w,lag_q=False,spat_diag=True,\n                          name_y=y_name,name_x=x_names,name_yend=yend_names,\n                          name_q=q_names,name_w='nat_queen',name_ds='nat')\n", "intent": "without spatial lags for the instruments, set **lag_q = False**\n"}
{"snippet": "db = pysal.open(pysal.examples.get_path('baltim.dbf'),'r')\ny_name = \"PRICE\"\ny = np.array([db.by_col(y_name)]).T\nx_names = ['NROOM','NBATH','PATIO','FIREPL','AC','GAR','AGE',\n           'LOTSZ','SQFT']\nx = np.array([db.by_col(var) for var in x_names]).T\n", "intent": "the **baltimore** sample data set\n"}
{"snippet": "w = pysal.knnW_from_shapefile(pysal.examples.get_path('baltim.shp'),\n                                k=4,idVariable='STATION')\nw.transform = 'r'\n", "intent": "model weights - k nearest neighbors with k=4\n"}
{"snippet": "select min(dated) from Visited where dated is not null;\n", "intent": "instead of always having to filter explicitly:\n"}
{"snippet": "for t in get_taxa_list(taxa):\n    print(t, get_mean_r(taxa, r_values, target_taxon = t))\n", "intent": "Calculate the mean `r` for each taxon:\n"}
{"snippet": "import csv \nwith open('../data/Dalziel2016_data.csv', 'r') as f: \n    my_csv = csv.DictReader(f) \n    for line in my_csv: \n        print(line)\n        break \n", "intent": "Now we open the file for reading. We use the `with` statement that takes care of closing the file:\n"}
{"snippet": "citycount = {} \nimport csv \nwith open('../data/Dalziel2016_data.csv', 'r') as f: \n    my_csv = csv.DictReader(f)\n    for line in my_csv:\n        mycity = line['loc']\n        citycount[mycity] = citycount.get(mycity, 0)\n        citycount[mycity] = citycount[mycity] + 1\n", "intent": "With this at hand, we can write our program:\n"}
{"snippet": "for city in ['CHICAGO', 'LOS ANGELES', 'NEW YORK']:\n    print(city, round(citypop[city][0],1))\n", "intent": "If we want print only a few decimals, we can use `round`:\n"}
{"snippet": "tree = html.fromstring(html_page)\n", "intent": "Any HTML document is equivalent to a tree:\n"}
{"snippet": "import numpy as np \nx = np.random.randn(4)\n", "intent": "- $L_1$\n- $L_2$\nfor a given vector.\n$$ L_p = \\left\\| \\mathbf{x} \\right\\| _p := \\bigg( \\sum_{i=1}^n \\left| x_i \\right| ^p \\bigg) ^{1/p}$$\n"}
{"snippet": "url = 'https://georgetown.edu/yanni-or-laurel'\nres = requests.get(url)\nprint('\\nThe status code for \"%s\" is: %d' % (url, res.status_code))\nprint('The reason is: %s' % res.reason)\n", "intent": "- `3xx`: Redirection\n    - e.g. `\"301: Moved Permanently\"` means that the requested page has moved to a new URL \n"}
{"snippet": "import numpy as np\nx = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\nv = np.array([1, 0, 1])\ny = x + v  \nprint y\n", "intent": "Numpy broadcasting allows us to perform this computation without actually creating multiple copies of v. Consider this version, using broadcasting:\n"}
{"snippet": "print('fraction reaching sealevel %.2e' % np.exp(-sea_level / (v * decay_time * gamma)))\n", "intent": "$N_0 e^{-z/v<t>} \\rightarrow N_0 e^{-z/v<\\tau>} = N_0 e^{-z/v<t>\\gamma}$\n"}
{"snippet": "clean = InteractClean(synData,timeData)\nclean\n", "intent": "Parameters of the below widget to fit observed reflection event are:\n- t0: intercept time of the hyperbola \n- v: velocity of the hyperbola\n"}
{"snippet": "n,m = A.shape\nprint n \nprint m \n", "intent": "How big is A? Let's find out, using the shape function.\n"}
{"snippet": "def age(birth_year, birth_month, birth_day):\n    today = 13\n    this_month = 7\n    this_year = 2016\n    if (birth_month > this_month) or ((birth_month == this_month) and (birth_day >= today)):\n        return this_year - birth_year - 1\n    else:\n        return this_year - birth_year\n", "intent": "There are some things we need to know about when using functions. Recall the age function we wrote yesterday.\n"}
{"snippet": "def age(birth_year, birth_month, birth_day):\n    today = 13\n    this_month = 7\n    this_year = 2016\n    a = a + 1 \n    print(\"I can see a! It's \", a)\n    if (birth_month > this_month) or ((birth_month == this_month) and (birth_day >= today)):\n        return this_year - birth_year - 1\n    else:\n        return this_year - birth_year\n", "intent": "So we've seen that a function can see a variable outside its scope (in Python), but what would happen if we tried to do this?\n"}
{"snippet": "def powers(n):\n    i = 0\n    while i <= n:\n        print(2**i)\n        i = i + 1\n", "intent": "The following function uses a while loop to print powers of 2. It takes a nonnegative integer n, which is the highest power of 2 that it will print.\n"}
{"snippet": "def powers(n):\n    if n == 0 :\n        print(1) \n    else:\n        powers(n-1) \n        print(2**n)\n", "intent": "However, another way to do this is with recursion. Here's how this function would look with recursion:\n"}
{"snippet": "def get_string(x,y):\n    raise NotImplementedError()\n", "intent": "Complete the function to output a string which is the concatenation of the inputs to the function\n"}
{"snippet": "print([x+y for x in range(1,7) for y in range(1,7)])\n", "intent": "Here's another more intricate example that uses list comprehension:\n"}
{"snippet": "if a < 5 : a = a + 1\nprint(a)\n", "intent": "Now that that cell is executed, let's look at the following piece of trivial code:\n"}
{"snippet": "if True : a = a*3\nprint(a)\n", "intent": "With this knowledge, we can see why stuff like this works:\n"}
{"snippet": "clean = InteractClean(synData,timeData)\nclean\n", "intent": "**Parameters of the below widget to fit observed reflection event are:**\n- *t0*: intercept time of the hyperbola \n- *v*: velocity of the hyperbola\n"}
{"snippet": "if a < 5:\n    a = a + 1\nelse:\n    a = a - 4\nprint(a)\n", "intent": "If you want the computer to execute a different piece of code should the if condition fail, you use an else statement. Here's an example:\n"}
{"snippet": "my_number = 5   \nif my_number < 10:   \n    print(\"my_number is less than 10\")\n", "intent": "1) Write a cell that checks if a number is less than 10, and if it is, print \"my_number is less than 10\".\n"}
{"snippet": "my_number = 5  \nif my_number < 10:   \n    print(\"my_number is less than 10\")\n", "intent": "Here's the above code without comments:\n"}
{"snippet": "my_number = 17    \nif my_number < 10:\n    print(\"my_number is less than 10\")\nelif my_number < 20:\n    print(\"my_number is greater than 10 but less than 20\")\n", "intent": "Here's the above code without comments:\n"}
{"snippet": "my_number = 34\nif my_number < 10:\n    print(\"my_number is less than 10\")\nelif my_number < 20:\n    print(\"my_number is greater than 10 but less than 20\")\nelse:\n    print(\"my number is greater than 20\")\n", "intent": "Here's the above code without comments:\n"}
{"snippet": "def divisibo(N):\n    raise NotImplementedError()\n", "intent": "Complete the code to return a list of the first $N$ numbers that are divisible by 5,7 and 11\n"}
{"snippet": "my_dictionary['Location'] = \"Stony Brook\" \n", "intent": "We can create new keys and add them to our dictionary like this:\n"}
{"snippet": "del my_dictionary['Location']\n", "intent": "We can delete a key as well. This also deletes the value associated with that key.\n"}
{"snippet": "my_dictionary.clear() \n", "intent": "We can clear all entries of our dictionary with one function call.\n"}
{"snippet": "from IPython.core.display import Image\nImage(filename = 'Fig1.png')\n", "intent": "<h2>The plane outonomous system</h2>\n<ls>\n    <li>Consider the position column vector <b><i>X</i></b><i>(t)</i></li>\n</ls>\n"}
{"snippet": "birthday_lists['Samantha'][0] \n", "intent": "Because this value is actually a list, we can access its individual elements with square brackets. It looks like this:\n"}
{"snippet": "len(birthday_lists)\n", "intent": "We can use the len() command on dictionaries, as well as the entries of dictionaries. \n"}
{"snippet": "def dot(a,b):\n    assert len(a)==len(b) , \"The lists given are not the same length.\"\n    n = len(a)\n    answer = 0.0\n    for i in range(n):\n        answer += a[i]*b[i]\n    return answer\n", "intent": "We can make our assert statement more useful by putting in a message that will be displayed if the assertion fails:\n"}
{"snippet": "for a in numlist:\n    print(a**2)\n", "intent": "Now, let's make the for loop:\n"}
{"snippet": "for number in numlist:\n    print(number**2)\n", "intent": "While it's possible to square all of these numbers with a while loop (try it on your own!), a for loop can square all of these numbers quite simply:\n"}
{"snippet": "def primes_upto(N):\n    raise NotImplementedError()\n", "intent": "Complete the function to output all primes up to the number $n$\n"}
{"snippet": "mystring = \"I like potatoes.\"\nnewstring = \"\"  \nfor i in range(len(mystring)):\n    if i % 2 == 1:\n        newstring = newstring + \"_\"\n    else:\n        newstring = newstring + mystring[i]\nprint(newstring)\n", "intent": "Write a for loop that loops through a string and converts every other character in the string to an underscore, starting with the second letter.\n"}
{"snippet": "namelist = [\"Billy\",\"Matthew\",\"Shannon\",\"Kristen\",\"Taylor\"]\n", "intent": "Write a cell that takes a list of names (as strings), and prints \"Hello \\_\\_\\_\\_\\_\\_!\" for each name in the list.\n"}
{"snippet": "def age(birth_year, birth_month, birth_day):\n    today = 15\n    this_month = 12\n    this_year = 2016  \n    if (birth_month > this_month) or ((birth_month == this_month) and (birth_day >= today)): \n        print(this_year - birth_year - 1)\n    else: \n        print(this_year - birth_year)\n", "intent": "Here's another example of a function. This one takes a birth year, month, and day, and prints out the persons age:\n"}
{"snippet": "Image(filename = 'Fig2.png')\n", "intent": "<ls>\n    <li>If <i>n = 2</i> and considering the first derivative of <b><i>X</i></b><i>(t)</i> as:</li>\n</ls>\n"}
{"snippet": "def multiples(a,b):\n    result = []    \n    c = a\n    while c < b:\n        result.append(c)   \n        c = c + a\n    return result    \n", "intent": "Modify the above function to instead return a list of all multiples of a that are less than b\n"}
{"snippet": "input(\"What is your name?\")\n", "intent": "A very simple way to demonstrate how to interact with the user is to take input from them using the input() function. (Run the cell below).\n"}
{"snippet": "my_int = input(\"Enter an integer:\")  \nprint(type(my_int))                       \nprint(\"You entered \" , my_int)            \nmy_int = int(my_int)                     \nprint(type(my_int))                       \nprint(\"You entered \" , my_int)            \n", "intent": "Lets try and get a number from the user now.\n"}
{"snippet": "my_int = int(input(\"Please enter an integer:\"))\nprint(type(my_int))\nprint(\"You entered \" , my_int)\n", "intent": "So notice here that we took something that was a string and converted it to an integer. We could do it in one line by doing the following:\n"}
{"snippet": "input_file = open('hello.txt','r') \n", "intent": "Now, in order to read what's in our file, lets open it up in read mode.\n"}
{"snippet": "def primes_first(N):\n    raise NotImplementedError()\n", "intent": "Complete the function to output the first $n$ primes\n"}
{"snippet": "the_second_line = input_file.readline() \nprint(the_second_line)\n", "intent": "Yay, the string we added is in our file. Can we read any more? We didn't add anything else, but lets try.\n"}
{"snippet": "the_big_file = open('hello.txt','r') \nfor line in the_big_file:  \n    print(line)\nthe_big_file.close() \n", "intent": "Now lets open this file and read it line by line. We can do this quite easily using this next loop structure.\n"}
{"snippet": "the_big_file = open('hello.txt','r')\nfor line in the_big_file:\n    print(line)\nthe_big_file.close()\n", "intent": "Now lets print each line of our new file. This is the same code as before.\n"}
{"snippet": "sp.Eq(sp.Derivative(x, t), 2 * x + 8 * y), sp.Eq(sp.Derivative(y, t), -x - 2 * y)\n", "intent": "<ls>\n<li><h3>Example problem</h3></li>\n    <li>Sketch the graph of the following function for <i><b>X</b>(0) = (2, 0)</i></li>\n</ls>\n"}
{"snippet": "names = [\"Billy\",\"Matthew\",\"Shannon\",\"Kristen\",\"Taylor\"]\nprint(names)\n", "intent": "You can put any kind of variable in a list, such as strings:\n"}
{"snippet": "randomlist = [\"h\",67,True,9,\"masonry\",False,True]\nprint(randomlist)\n", "intent": "Though it's less commmon, the elements of a list don't even have to be the same type! It's possible for us to do something like this:\n"}
{"snippet": "print(scores) \nscores.append(85) \nprint(scores)\n", "intent": "We can use the append function to add another student's score to the list.\n"}
{"snippet": "i = 0\nwhile i < 8:\n    mylist.append(2*i)  \n    i = i + 1\nprint(mylist)\n", "intent": "The code below will now put the first 8 even numbers into mylist.\n"}
{"snippet": "print(scores)\ndel scores[-1]\nprint(scores)\n", "intent": "The del keyword removes the element of the list at the index specified. For example, this code deletes the last element of scores.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Now write a set of `assert` tests for your `number_to_words` function that verifies that it is working as expected.\n"}
{"snippet": "the_list = [98, 43, 56, 38, 99, 17, 22]\nthe_average = the_list[0] + the_list[2] + the_list[4]\nthe_average = the_average / 3\nprint the_average\n", "intent": "Here's the above code without comments:\n"}
{"snippet": "message = \"My first car was a \" + cars[0] + \".\"\nprint(message)\n", "intent": "You can use individual values from a list as you would any other variable. For example, you can use concatenation to create a message from a list. \n"}
{"snippet": "scores = [89,77,100,95,88]\ndel scores[0]\nprint(scores)\n", "intent": "**Removing Elements from a List**  \n<br>\nI. If you know the position of the element you want to remove, you can use the del statement\n"}
{"snippet": "A = sp.Matrix([[2., 8.], [-1., -2.]])\nA\n", "intent": "<ls>\n    <li>First make a matrix of coefficients</li>\n</ls>\n"}
{"snippet": "scores = [89,77,100,95,88] \nscores.sort()   \nprint(scores)\n", "intent": "**I. Sorting a list permamently with the sort() method **\n"}
{"snippet": "scores = [89,77,100,95,88] \nscores.sort(reverse=True)   \nprint(scores)\n", "intent": "You can also sort this list in reverse order by passing the argument reverse=True\n"}
{"snippet": "scores = [89,77,100,95,88]\nprint('The original list is:')\nprint(scores)\nprint('Here is the sorted list: ')\nprint(sorted(scores))\nprint('Here is the original list again:')\nprint(scores)   \n", "intent": "**II. Sorting a list temporarily with the sorted() function **.  The sorted() function doesn't affect the actual order of the lthe list\n"}
{"snippet": "cars = ['toyota','honda','audi','bmw']\nprint(cars)\ncars.reverse()\nprint(cars)\n", "intent": "**III. Printing a list in reverse order**:  use the reverse() method\n"}
{"snippet": "cars = ['toyota','honda','audi','bmw']\nprint(len(cars))\n", "intent": "**IV. Finding the length of a list **:  use the len() function\n"}
{"snippet": "print(\"Max in each column:\", np.amax(A, axis=0)) \nprint(\"Max in each row:\", np.amax(A, axis=1)) \n", "intent": "The above examples aggregate over all values. But you can also aggregate along a dimension using the optional `axis` parameter.\n"}
{"snippet": "i = 1\nwhile i < 10:\n    print(i)\n    i = i + 1\n", "intent": "What can we do to make it work? We can remember to increment i, as in the cell below.\n"}
{"snippet": "a = 3          \nwhile a < 18:  \n    print(a)    \n    a = a + 1  \n", "intent": "Write a loop that prints the numbers 3 through 17\n"}
{"snippet": "a = 20         \nwhile a < 51:  \n    print(a)   \n    a = a + 2  \n", "intent": "Write a loop to print the even numbers between 20 and 50\n"}
{"snippet": "sp.Matrix(A).eigenvals()\n", "intent": "<ls>\n    <li>Calculate the eigenvalues</li>\n</ls>\n"}
{"snippet": "window = turtle.Screen()\n", "intent": "Lets start by creating a window to draw in.\n"}
{"snippet": "ned = turtle.Turtle() \n", "intent": "Next we need to create the thing we will be drawing with, called a Turtle. Note the capital and lower case turtles here (they are important!)\n"}
{"snippet": "side_length = 100 \nangle = 90 \nned.forward(side_length)\nned.left(angle)\nned.forward(side_length)\nned.left(angle)\nned.forward(side_length)\nned.left(angle)\nned.forward(side_length)\n", "intent": "Now let's use ned to draw some regular polygons.\n"}
{"snippet": "ned.pendown()\nned.home()\n", "intent": "So there we go. What do we do if we want to start drawing lines again? Naturally, its simply pendown().\n"}
{"snippet": "window.bgcolor(\"blue\")\n", "intent": "We can change the background color of our window using window.bgcolor(\"color_name\"). For example:\n"}
{"snippet": "A_col_means = np.mean(A, axis=1)\nprint(A, \"\\n=>\\n\", A_col_means)\n", "intent": "Suppose you instead want to mean-center the _columns_ instead of the rows. You could start by computing column means:\n"}
{"snippet": "ned.home()\nned.clear()\nned.pencolor(\"red\")\nned.forward(50)\n", "intent": "You can also change the color of the line drawn. \n"}
{"snippet": "ned.home()\nned.clear()\nned.pensize(1)\nned.pencolor(\"black\")\nned.circle(10)\nned.circle(40)\nned.circle(80)\n", "intent": "There are a few other things I wanted to highlight. First, there are shapes that can be automatically drawn.\n"}
{"snippet": "ned.pensize(1)\nned.pencolor((0,0,1))\n", "intent": "We can also color the pen using floating point numbers between zero and one to assign colors. These are the RGB (red,green,blue) values.\n"}
{"snippet": "print(\"Actual prototype:   \" + str(fruit_prototype))\nprint(\"Computed prototype: \" + str(prototype(fruit_features)))\n", "intent": "Test your function on the fruit features, to see if it gives the right prototype:\n"}
{"snippet": "APP_KEY = \"R9TTlO9BvQ50ftyYA6IwA\"                                   \nAPP_SECRET = \"uAjP8CThyXnbdEqXxsVlgE3tJIvePm2a7PL8cB8N74\"       \nOAUTH_TOKEN = \"555507083-njJAAWYiGJpUxeX7tAtuFhxSM2rFUgj9KEKFgFwo\"      \nOAUTH_TOKEN_SECRET = \"DIzvCloqs7LoC2Fh5b5H43svJk3F6A6SVmckh1KOhDY\"    \n", "intent": "You will be shown where to get login credentials to access the Twitter API\n"}
{"snippet": "twitter = Twython(APP_KEY, APP_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET)\nmyHashtag = \"\nmatchedTweets = twitter.search(q=myHashtag, count=140)\n", "intent": "The next cell gets you started searching by hashtag\n"}
{"snippet": "window = turtle.Screen()\nwindow.title('Molecular Dynamics 1')\nwindow.clear()\n", "intent": "Now lets get our back drop set up.\n"}
{"snippet": "atom = turtle.Turtle()\n", "intent": "Now we have our window, lets make a turtle to draw our atoms.\n"}
{"snippet": "atom_radius = 5\natom_color = \"red\"\natom.shape('circle')\natom.shapesize(atom_radius)\natom.color(atom_color)\natom.penup()\n", "intent": "Now lets draw our atom as a sphere with a fixed radius and color.\n"}
{"snippet": "print(A.shape, A_col_means.shape)\n", "intent": "By contrast, consider the shapes of `A` and `A_col_means`:\n"}
{"snippet": "window = turtle.Screen()\nwindow.title('Molecular Dynamics 2')\nwindow.clear()\n", "intent": "Now lets get our back drop set up.\n"}
{"snippet": "height = window.window_height()\nwidth = window.window_width()\n", "intent": "Lets see how big our window is, which will tell us where the boundaries are.\n"}
{"snippet": "print height\nprint width\n", "intent": "Lets check and see what we have here.\n"}
{"snippet": "sym.Eq(lamda1, (tau + sym.sqrt(tau ** 2 - 4 * Delta)) / 2)\n", "intent": "Solving this simple quadratic equation leaves:\n"}
{"snippet": "window = turtle.Screen()\nwindow.title('Molecular Dynamics 4')\nwindow.clear()\n", "intent": "Now lets get our back drop set up.\n"}
{"snippet": "num_atoms = 5\natoms = []\nfor i in range(num_atoms):\n    atoms.append(turtle.Turtle())\n", "intent": "Now we have our window, lets make a turtles to draw our atoms. We are going to make a list of atoms and then populate it.\n"}
{"snippet": "atom_radius = 20\nscaling_factor = 0.8\nfor i in range(num_atoms):\n    atoms[i].shape('circle')\n    atoms[i].shapesize(atom_radius/10.0)\n    atoms[i].color((random.random(),random.random(),random.random()))\n    atoms[i].penup()\n    atoms[i].goto(random.uniform(-1,1)*width/2.0 * scaling_factor, random.uniform(-1,1)*height/2.0 * scaling_factor)\n    atoms[i].tracer(0,0)\n    turtle.update()\n", "intent": "Everything looks good. Now lets draw our atoms as spheres with a fixed radius and random color and place them at random locations.\n"}
{"snippet": "window = turtle.Screen()\nwindow.title('Molecular Dynamics 3')\nwindow.clear()\n", "intent": "Now lets get our back drop set up.\n"}
{"snippet": "num_atoms = 5\natom_list = []\nfor i in range(num_atoms):\n    atom_list.append(turtle.Turtle())\n", "intent": "Now we have our window, lets make a turtles to draw our atoms. We are going to make a list of atoms and then populate it.\n"}
{"snippet": "def intersect_keys(d1, d2):\n    assert type(d1) is dict or type(d1) is defaultdict\n    assert type(d2) is dict or type(d2) is defaultdict\n    return d1.keys() & d2.keys()   \n", "intent": "**Exercise 9** (`intersect_keys_test`: 2 points). Write a function that, given two dictionaries, finds the intersection of their keys.\n"}
{"snippet": "atom_radius = 20\nscaling_factor = 0.8\nfor i in range(num_atoms):\n    atom_list[i].shape('circle')\n    atom_list[i].shapesize(atom_radius/10.0)\n    atom_list[i].color((random.random(),random.random(),random.random()))\n    atom_list[i].penup()\n    atom_list[i].goto(random.uniform(-1,1)*width/2.0 * scaling_factor, random.uniform(-1,1)*height/2.0 * scaling_factor)\n    atom_list[i].tracer(0,0)\n    turtle.update()\n", "intent": "Everything looks good. Now lets draw our atoms as spheres with a fixed radius and random color and place them at random locations.\n"}
{"snippet": "print len(velocity_list)\n", "intent": "Lets check to make sure this worked.\n"}
{"snippet": "print velocity_list[0]\n", "intent": "Now how would we access only 1 element? We use square brackets []!\n"}
{"snippet": "tau ** 2 - 4 * Delta > 0\n", "intent": "<h2>Real distinct eigenvalues</h2>\n<p>\nOccurs when:\n"}
{"snippet": "num_atoms = 20\natoms = []\nfor i in range(num_atoms):\n    atoms.append(turtle.Turtle())\n", "intent": "Now we have our window, lets make a turtles to draw our atoms. We are going to make a list of atoms and then populate it.\n"}
{"snippet": "def forces(coords):\n", "intent": "Now lets write a function to calculate the forces on our atoms.\n"}
{"snippet": "namelist = [\"Billy\",\"Matthew\",\"Shannon\",\"Kristen\",\"Taylor\"]\nfor name in namelist:\n    print(\"Hello\", name, \"!\")\nprint(\"\\n\")\nfor name in namelist:\n    print(\"Hello {}!\".format(name))\n", "intent": "Write a function that takes a list of names (as strings), and prints \"Hello \\_\\_\\_\\_\\_\\_!\" for each name in the list.\n"}
{"snippet": "def print_integers(n):\n    i = 1\n    while i <= n:\n        print(i)\n        i = i + 1\n", "intent": "Write a function that takes an integer n and prints the first n numbers.\n"}
{"snippet": "def vowel_count(the_string):\n    vowels = \"aeiouAEIOU\"\n    length = len(the_string)\n    count = 0\n    i = 0\n    while i < length:\n        if the_string[i] in vowels:\n            count = count + 1\n        i = i + 1\n    return count\n", "intent": "Write a function that takes a string and counts how many vowels (a,e,i,o,u) are in the string. Return the result.\n"}
{"snippet": "import random\ndim = int(1000)\nvec = [random.random() for x in range(dim)]\n", "intent": "Generate a list of random floats of a given dimension (dim), and store its result in the variable `vec`.\n"}
{"snippet": "odd_list = []\ni = 1\nwhile i <= 17:\n    odd_list.append(2*i-1)\n    i = i + 1\nprint(odd_list)\n", "intent": "Write a cell that creates a list containing the first 17 odd numbers.\n"}
{"snippet": "multiples = []\ni = 5\nwhile i < 100:\n    multiples.append(i)\n    i = i + 5\nprint(multiples)\n", "intent": "Write a cell that creates a list of all multiples of 5 less than 100.\n"}
{"snippet": "alist = [1,2,3,4,5,6,7,8,9,10]\nmysum = 0\nsize = len(alist)\ni = 0\nwhile i < size:\n    mysum = mysum + alist[i]\n    i = i + 1\nprint(mysum)\n", "intent": "Write a cell that sums all the entries of a list.\n"}
{"snippet": "from sympy import *\nx = Symbol(\"x\")\nx+pi\n", "intent": "Office Hours: Mondays and Thursdays from 1:00pm to 2:00pm\nOffice: SSM A-543\n"}
{"snippet": "a = 57\na = a + 10\nprint a\n", "intent": "Write a cell that creates an integer variable with value between 10 and 99. Then add 10 to the variable. Then print the variable\n"}
{"snippet": "c = \"Nick\"\nprint c\nprint c\n", "intent": "Write a cell that creates a variable and assign to it a string containing your name (e.g. \"Joel\"). Print this string twice.\n"}
{"snippet": "wordsSampledbyLength = wordsByLength.sampleByKey(False,s)\n", "intent": "Now we've got the items grouped by categories, and the fractions we want to sample for each category, let's do it\n"}
{"snippet": "pd.Series(data=minha_lista)\n", "intent": "** Usando listas **\n"}
{"snippet": "def square(num):\n    return num**2\n", "intent": "Continuando a quebra:\n"}
{"snippet": "def table_count(file_path):\n    return num_tables\n", "intent": "Write a function called $\\texttt{table_count}$ which parses a website and then returns the number of html tables on that website.\n"}
{"snippet": "x = ['ID','State','Amount']\n", "intent": "** Lembre-se de tentar usar o desmembramento para facilitar a leitura. Por exemplo: **\n"}
{"snippet": "import numpy as np\ndef compute_matrix(x,y): \n    return np.vander(np.array(x), increasing =y)\ncompute_matrix([1,2,3,4],True)\n", "intent": "<p>HINT: Such a matrix with a geometric progression in each row is named for Alexandre-\nTheophile Vandermonde. </p>\n"}
{"snippet": "df.write.parquet(\"new_data.parquet\")\n", "intent": "- API docs: https://spark.apache.org/docs/latest/api/python/pyspark.sql.html\n"}
{"snippet": "x = Symbol(\"x\")\ny = Symbol(\"y\")\nf = x\nintegrate(f,x)\n", "intent": "**Ex.** $ \\frac{dy}{dx}=y^2x+x $\n**Solution:**\nWhat about Singular Solutions?\n"}
{"snippet": "crimes.groupBy(\"WARD\").count().show()\n", "intent": "<font color=\"white\">Use .groupBy(\"ARREST\")</font>\n"}
{"snippet": "import re\nsentences.flatMap(lambda sentence: sentence.split(' ')) \\\n         .map(lambda word: re.compile('[^a-zA-Z]').sub('', word)) \\\n         .map(lambda word: (word ,1)) \\\n         .reduceByKey(lambda a, b: a + b) \\\n         .collect()\n", "intent": "<font color='white'>Hint: use flatMap!</font>\n"}
{"snippet": "d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}\nd[\"k1\"][3][\"tricky\"][3][\"target\"][3]\n", "intent": "** Given this nested dictionary grab the word \"hello\". Be prepared, this will be annoying/tricky **\n"}
{"snippet": "def countDog(sentence):\n    lowerSen = sentence.lower().split()\n    ans = [word == \"dog\" for word in lowerSen].count(True)\n    return ans\ncountDogLbd = lambda sentence: [word == \"dog\" for word in sentence.lower().split()].count(True)\nprint(countDogLbd('This dog runs faster than the other dog dude!'))\nprint(countDog('This dog runs faster than the other dog dude!'))\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "numMatrix = np.arange(1,26).reshape(5,5)\nnumMatrix\n", "intent": "Now you will be given a few matrices, and be asked to replicate the resulting matrix outputs:\n"}
{"snippet": "@vectorize([float64(float64, float64)])\ndef vec_add(x, y):\n    return x + y\n", "intent": "<div class=\"alert alert-success\">\nRedefine the vec_add() function so that it takes float64 as arguments and produces the correct results.\n</div>\n"}
{"snippet": "print(var1, var2, var3)\n", "intent": "Let's look at the values of these variables:\n"}
{"snippet": "numberOfPies = 10\nnumberOfPlates = numberOfPies\nprint(numberOfPlates)\n", "intent": "You can also assign a the value of a variable to another variable:\n"}
{"snippet": "x = 2\ny = x\nprint(x, y)\n", "intent": "When you assign the value of a variable to another variable, you can change the original value without changing the new variable:\n"}
{"snippet": "res = 120 - (-80.41 + 0.44*284 - 3.33*0 - 0.01*27 + 1.15*62 + 0.05*100 - 8.4*0)\nprint(\"Residual is %.4f\" % res)\n", "intent": "<b>(d)</b> Calculate the residual for the first observation in the data set.\n"}
{"snippet": "'He said \"I never wanted that to happen\"'\n", "intent": "Likewise, strings which contain a double quotation mark must be enclosed by single quotation marks:\n"}
{"snippet": "string2 = \"5.0\"\ntestVarInt2 = int(string2)\nprint(testVarInt2)\n", "intent": "And others can't, even though they look like they can:\n"}
{"snippet": "string3 = 'Hello World!'\nprint(int(string3))\n", "intent": "And some can't, and definitely shouldn't:\n"}
{"snippet": "int1 = 5\nstring4 = str(int1)\nprint(type(string4))\n", "intent": "We can also convert integers and floats into strings using the <code>str()</code> function:\n"}
{"snippet": "string1 = \"This is a test\"\nstring2 = string1 + '. ' + string1\nprint(string2)\n", "intent": "We can also use mathematical operators on strings. This might seem counterintuitive at first...\n"}
{"snippet": "x = 0\ndef func_f1(i):\n    global x\n    x = x + i\ndef func_test1():\n    for i in range(1000000): \n        func_f1(i)\n", "intent": "In the following example, the function `func_f1` is called for each element in the list. \n"}
{"snippet": "x = 3\ny = 6\ntestString2[x:y]\n", "intent": "We can also use variables instead of the numbers in a string slice:\n"}
{"snippet": "testString = \"Hi there, this is a string\"\nprint('string' in testString)\n", "intent": "We can see if a string contains another string:\n"}
{"snippet": "boolTrue = True\nboolFalse = False\n", "intent": "Boolean values evaluate to True or False. You can see how Jupyter highlights these keywords:\n"}
{"snippet": "import random\nimport pandas as pd\nimport numpy as np\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n", "intent": "In this notebook we'll go over different data distributions. First we import the necessary packages.\n"}
{"snippet": "print(not (True or False) and not(False and True))\n", "intent": "You can use brackets to create complex expressions. What do you think this evaluates to?\n"}
{"snippet": "list2 = ['a', 'b', 'c', 'd', 'e']\n", "intent": "This is a list of strings:\n"}
{"snippet": "list3 = [list1, list2]\nprint(list3)\n", "intent": "And this is a list of lists:\n"}
{"snippet": "list4 = list1 + list2\nprint(list4)\n", "intent": "We can do addition on lists:\n"}
{"snippet": "string1 = 'abcdefg'\nprint(string1[4])\n", "intent": "In a previous lesson we learnt how to select different items within a string by using the index of that item:\n"}
{"snippet": "x = 0\ndef func_f2(list):\n    global x\n    for i in list:\n        x = x + i\ndef func_test2():\n    func_f2(range(1000000))\n", "intent": "In the next example, the loop is moved inside the function so that the function is only called once instead of 10000 times.\n"}
{"snippet": "list1[2:5] = [10,10,10]\nprint(list1)\n", "intent": "To change all of the items in a slice, you must set them equal to a new list of the same length as the slice:\n"}
{"snippet": "print(\"Before:\", xValsDel)\ndel xValsDel[0]\nprint(\"After:\", xValsDel)\n", "intent": "If we wanted to delete the first (or zeroeth) item in the list we would use the <code>del</code> keyword, and select the item at index 0:\n"}
{"snippet": "print(\"Before:\", xValsDel)\ndel xValsDel[-1]\nprint(\"After:\", xValsDel)\n", "intent": "We might also want to delete the last item in the list. We can select the last item by choosing the item at index -1:\n"}
{"snippet": "colours = [\"Brown\", \"Yellow\", \"Red\", \"Green\", \"Orange\", \"Tan\"]\nprobs = [0.3, 0.2, 0.2, 0.1, 0.1, 0.1]\nm_and_ms = {\"Brown\": 0, \"Yellow\": 0, \"Red\": 0, \"Green\": 0, \"Orange\": 0, \"Tan\": 0}\nfor counter in range(1000):\n    colour = np.random.choice(colours, p=probs)\n    m_and_ms[colour] += 1\nm_and_ms_df = pd.DataFrame.from_dict(m_and_ms, orient=\"index\")\nm_and_ms_df.columns = [\"Count\"]\nm_and_ms_df\n", "intent": "In this case we will sample 1000 M&Ms and show the resulting frequency table, frequency distribution, and probability distribution\n"}
{"snippet": "allData2 = [allData, allData]\nallData2\n", "intent": "We can continue this process indefinitely, with nested lists inside nested lists. This list is three levels deep:\n"}
{"snippet": "testScores['Jeremy'] = 100\ntestScores\n", "intent": "As well as accessing items in a dictionary, we can also create new items:\n"}
{"snippet": "testScores['Alice'] = 100\n", "intent": "We can also change the value of a specific key:\n"}
{"snippet": "testScores.update({'Andy' : 90, 'Bob' : 25})\ntestScores\n", "intent": "We can update more than one item at a time by using the <code>dict.update()</code> method.\nWe can pass a dictionary as an argument to this method:\n"}
{"snippet": "testScores.update({'Malcolm' : 64, 'Anthony' : 32, 'Bethany' : 99})\ntestScores\n", "intent": "We can also add more than one item at the same time:\n"}
{"snippet": "from functools import wraps\ndef cache(f):\n    cache = { }\n    @wraps(f)\n    def wrap(*arg):\n        if arg not in cache: cache[arg] = f(*arg)\n        return cache[arg]\n    return wrap\n", "intent": "Using the following code, we can create a decorator that saves each intermediate value in memory rather than calculating it every time. \n"}
{"snippet": "testScores.clear()\ntestScores\n", "intent": "And we can empty the dictionary of all its elements by using the <code>dict.clear()</code> method:\n"}
{"snippet": "print(testScores1.keys())\n", "intent": "We can get a list of keys in a dictionary by using the <code>dict.keys()</code> method:\n"}
{"snippet": "var1 = testScores1.keys()\nvar1[0]\n", "intent": "This returns an object that looks a bit like a list, but doesn't behave like one. You can't slice it for example:\n"}
{"snippet": "prob_1 = (1-kick_prob) * (1-kick_prob) * (1-kick_prob) * (1-kick_prob) * (kick_prob)\nprob_1 = prob_1 * 5\nprint(prob_1)\nprob_2 = ((kick_prob) * (kick_prob) * (1-kick_prob) * (1-kick_prob) * (1-kick_prob)) * 10\nprint(prob_2)\nprob_3 = ((kick_prob) * (kick_prob) * (kick_prob) * (1-kick_prob) * (1-kick_prob)) * 10\nprint(prob_3)\n", "intent": "Suppose the kicker is given five chances to make the field goal. What is the probability that exactly one kick will be a success? Two kicks?\n"}
{"snippet": "var5 = list(testScores1.items())\nvar5[0]\n", "intent": "Once again, we need to convert this <code>dict_items</code> object into a list to be able to index and slice it:\n"}
{"snippet": "testScores2 = {'Ian': 32, 'Susan': 71, 'Bob': 63, 'Alice': 99}\nstudentGrades.update({'test2' : testScores2})\nprint(studentGrades)\n", "intent": "Now I can add the scores for the second test:\n"}
{"snippet": "print(studentGrades['test1'])\n", "intent": "We can access the scores for the first test:\n"}
{"snippet": "a = 2\nif a > 3:\n    print(\"a is greater than 3\")\nelif a == 3:\n    print(\"a is equal to 3\")\nelif a == 2:\n    print(\"a is equal to 2\")\nelse:\n    print(\"a is less than 2\")\nprint(\"This code runs anyway\")\n", "intent": "We can add as many <code>elif</code> statements as we wish:\n"}
{"snippet": "for banana in list1:\n    print(banana)\n", "intent": "It's not important what we call this variable:\n"}
{"snippet": "upperlist = []\ndef do_append():\n    upper = str.upper\n    append = upperlist.append\n    for word in lowerlist:\n        append(upper(word))\n", "intent": "<div class=\"alert alert-success\">\nRe-write the above example to use local variables rather than global variables and time the execution.\n</div>\n"}
{"snippet": "for prop in proportions:\n    percentages.append(prop * 100)\nprint(percentages)\n", "intent": "Next, we'll loop through each item in proportions, multiply it by 100 and append it to percentages:\n"}
{"snippet": "for k in data.keys():\n    print(k)\n", "intent": "We can loop through the keys by using <code>dict.keys()</code>:\n"}
{"snippet": "for v in data.values():\n    print(v)\n", "intent": "And we can loop through the values (which are lists):\n"}
{"snippet": "import random\nimport pandas as pd\nimport numpy as np\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n", "intent": "In this notebook we'll go over how we simulate data. First we import the necessary packages.\n"}
{"snippet": "for v in data.values():\n    allYears = allYears + v\nprint(allYears)\n", "intent": "And then we'll loop through the dictionary and concatenate each year's data to the <code>allYears</code> list:\n"}
{"snippet": "for d in dataProp.values():\n    for item in d:\n        print(item)\n", "intent": "Next, within the loop that cycles through the lists in the dictionary, we need to create a loop which cycles through each item in the list:\n"}
{"snippet": "for d in dataProp.values():\n    for item in d:\n        percentages.append(int(item * 100))\npercentages\n", "intent": "Now, we can append each item in turn to the <code>percentages</code> list (and multiply by 100 to get the percentage):\n"}
{"snippet": "testFunction2('abc', 20)\n", "intent": "We can then use this function an pass arguments to it:\n"}
{"snippet": "repeated1 = alternateList(5, 50, 3)\n", "intent": "Because the function returns a value we must assign the output that is return to a variable:\n"}
{"snippet": "upperlist = []\ndef do_append():\n    upperlist = [str.upper(i) for i in lowerlist]\n", "intent": "<div class=\"alert alert-success\">\nThe same loop can also be written with a list comprehension. Do this, and time how long it takes.\n</div>\n"}
{"snippet": "def stringMultiply(stringIn, number):\n    return stringIn * number\ntest1 = stringMultiply('hi', 5)\ntest2 = stringMultiply('one', 2)\nprint(test1, test2)\n", "intent": "These answers do not show the only way of solving the problem, as with everything in programming, there are several solutions!\n"}
{"snippet": "from random import randint, random\nprint(random())\n", "intent": "You can also import multiple modules at the same time. In this example, <code>random()</code> creates a random number between 0 and 1:\n"}
{"snippet": "trace1 = {'type' : 'scatter',\n        'x' : [0,1,2,3,4,5,6,7,8,9],\n        'y' : [0,1,2,3,4,5,6,7,8,9]}\n", "intent": "The third instruction tells Plotly what the y-values of the chart are; these are interpreted in the same way as the x-values, from left to right.\n"}
{"snippet": "grapefruit_features = np.array([True,  True,  True, False, True ])\nbanana_features  = np.array([True, False,  False,  False, False ])\nshepard_sim(grapefruit_features, banana_features)\n", "intent": "Test your function on the grapefruit and banana feature vectors:\n"}
{"snippet": "trace1 = {'type' : 'scatter',\n        'x' : [0,1,2,3,4,5,6,7,8,9],\n        'y' : [0,1,2,3,4,5,6,7,8,9],\n        'name' : 'trace1',\n        'mode' : 'lines'}\n", "intent": "We're going to use the same chart as last time.\n"}
{"snippet": "data = Data([trace1])\n", "intent": "Creating the Data object as a list of traces (one in this case):\n"}
{"snippet": "fig = Figure(data = data, layout = layout)\n", "intent": "Combining the Data and Layout objects into a Figure object:\n"}
{"snippet": "updatedY = {'y' : [0,3,7,2,6,9,1,4,5,8]}\n", "intent": "Here, I'm creating a variable which I'll pass to the update method:\n"}
{"snippet": "trace1.update(updatedY)\ntrace1\n", "intent": "Now I can pass it to the update method:\n"}
{"snippet": "def evens():\n    evens = [i for i in range(1000) if i % 2 == 0]\n    return evens\n", "intent": "<div class=\"alert alert-success\">\nTime how long it takes to create the same list with an equivalent comprehension.\n</div>\n"}
{"snippet": "layout.update({'title' : 'My second Plotly line chart'})\n", "intent": "Here I'm updating the layout directly, rather than creating a variable and passing it to the update method:\n"}
{"snippet": "fig = Figure(data = data, layout = layout)\npyo.iplot(fig)\n", "intent": "Let's have a look at the new chart. We only have to update the Figure object this time because we haven't changed any data:\n"}
{"snippet": "del layout['yaxis']['title']\n", "intent": "Next we need to tell the <code>del</code> keyword to only delete the <code>'title'</code> key from the <code>'yaxis'</code> dictionary:\n"}
{"snippet": "all_rolls=[]\nfor i in range(100):\n    roll = np.random.choice(np.arange(1,7),p=[0.05,  0.10,  0.15,  0.20,  0.25,  0.25])\n    all_rolls.append(roll)\ndata = [go.Histogram(x=all_rolls, histnorm='probability')]\niplot(data)\n", "intent": "Pick a random sample from a non-uniform but known discrete distribution. In this case we have a die wrigged to weight heigher number rolls.\n"}
{"snippet": "updateSmoothTrace = {'smoothing' : 0.3}\nsmoothTrace['line'].update(updateSmoothTrace)\ndata = Data([unSmoothTrace, smoothTrace])\nfig = Figure(data = data)\npyo.iplot(fig)\n", "intent": "The slightly less smoothed line even more closely follows the unsmoothed line. \nHere's an even smaller value for <code>smoothing</code>\n"}
{"snippet": "py.plot(fig, filename = \"Stock closing prices for Apple in 2012 (Plotly smoothing)\", fileopt=\"overwrite\")\n", "intent": "Let's push this chart to the cloud:\n"}
{"snippet": "py.plot(fig, filename=\"Stock closing prices for Apple in 2012 (Savitzy-Golay smoothing)\", fileopt = \"overwrite\")\n", "intent": "I'm going to push this smooted chart to the cloud as well:\n"}
{"snippet": "allData['GOOGL'].head()\n", "intent": "You can access items in a dictionary in the same was as you would access columns in a DataFrame:\n"}
{"snippet": "layout = {'title' : \"Stock closing prices from \" + str(datetime.datetime.today().date() - datetime.timedelta(days = 2 * 365))\n                  + \" to \" + str(datetime.datetime.today().date()),\n         'xaxis' : {'title' : 'Date'},\n         'yaxis' : {'title' : 'Closing Price ($)'}}\ndata = Data(traces)\nfig = Figure(data = data, layout= layout)\npyo.iplot(fig)\n", "intent": "I'll now create the layout, data and figure objects before plotting the chart:\n"}
{"snippet": "def func():\n    import string\n    string.lower('Python')\n", "intent": "<div class=\"alert alert-success\">\nCompare the execution of the two functions by timing how long it takes to run each 10000 times.\n</div>\n"}
{"snippet": "expenses = py.get_figure('rmuir', 148)\npyo.iplot(expenses)\n", "intent": "We'll import the MPs expense claims chart and set the tickvalues individually:\n"}
{"snippet": "expenses['layout']['xaxis'].update({'tickmode' : 'array', \n                                    'tickvals' : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \n                                    'ticktext' : ['three',' six','nine']})\npyo.iplot(expenses)\n", "intent": "You can see how the <code>'ticktext'</code> and <code>'tickvals'</code> have been placed on the x-axis.\n"}
{"snippet": "py.plot(expenses, filename=\"MP Expense claims by month 2010-2015\", fileopt = \"overwrite\")\n", "intent": "Great, that helps to clarify one of the main trends in the chart. Let's push it back to the Plotly cloud:\n"}
{"snippet": "spark = SparkSession.builder.appName(\"Basics\").getOrCreate()\n", "intent": "Then start the SparkSession\n"}
{"snippet": "stocks['layout']['yaxis'].update({'tickformat' : '.0%'})\npyo.iplot(stocks)\n", "intent": "This is the same format but without the decimal places:\n"}
{"snippet": "stocks['layout']['yaxis'].update({'tickformat' : '$.2f'})\npyo.iplot(stocks)\n", "intent": "This format gives us the dollar amount and two decimal places:\n"}
{"snippet": "stocks['layout']['yaxis'].update({'tickformat' : '$.0'})\npyo.iplot(stocks)\n", "intent": "This gives us the dollar amount with 0 decimal places:\n"}
{"snippet": "stocks['layout'].update({'yaxis' : {'range' : [0, max(stocks['data'][0]['y']) * 1.05],\n                                    'title' : 'Closing Price', 'tickformat' : \"$.0\"}})\npyo.iplot(stocks)\n", "intent": "Let's change the tickformat to something sensible and update the y-axis title then update our chart.\n"}
{"snippet": "updateDT(\"%d/%m/%y\")\n", "intent": "UK date with a two digit year:\n"}
{"snippet": "def func():\n    'Python'.lower()\n", "intent": "<div class=\"alert alert-success\">\nTry executing this function 10000 times and see how long it takes.\n</div>\n"}
{"snippet": "updateDT(\"%a %d %b %Y\")\n", "intent": "Abbreviated weekday and month names:\n"}
{"snippet": "py.plot(stocks, filename=\"Stock closing prices for Apple in 2012 (Savitzy-Golay Smoothing)\", fileopt = 'overwrite')\n", "intent": "Let's push this fully updated chart to the cloud. Don't forget to overwrite it and remember to spell the filename correctly!\n"}
{"snippet": "updateHoverInfo('x')\n", "intent": "Let's try some different values for <code>'hoverinfo'</code>. This shows only the x-values:\n"}
{"snippet": "df.withColumn('doubleage',df['age']*2).show()\n", "intent": "More complicated operations to create new columns\n"}
{"snippet": "updateHoverInfo('name')\n", "intent": "This shows only the name of the trace:\n"}
{"snippet": "updateHoverInfo('text')\n", "intent": "And this shows only the text attribute:\n"}
{"snippet": "updateHoverInfo('none')\n", "intent": "And this shows nothing:\n"}
{"snippet": "updateHoverInfo('all')\n", "intent": "This shows everything apart from the trace name:\n"}
{"snippet": "revEmp = py.get_figure(\"rmuir\", 200)\npyo.iplot(revEmp)\n", "intent": "We'll use the same chart that we made in the previous lesson:\n"}
{"snippet": "tx = cuda.threadIdx.x\nbx = cuda.blockIdx.x\nbw = cuda.blockDim.x\ni = tx + bx * bw\narray[i] = compute(i)\n", "intent": "For a 1-dimensional grid:\n"}
{"snippet": "py.plot(revEmp, filename=\"Revenue by number of employees (styled)\", fileopt = \"overwrite\")\n", "intent": "I'm going to push this chart to the Plotly cloud:\n"}
{"snippet": "plots.append_trace(trace = {'type' : 'scatter',\n                            'mode' : 'markers',\n                           'x' : [random.random() for i in range(10)],\n                           'y' : [random.random() for i in range(10)],\n                           'name' : 'trace2'},\n                    row = 1, col = 2)\npyo.iplot(plots)\n", "intent": "Let's add another trace to a different sub-plot:\n"}
{"snippet": "plots.append_trace(trace = {'type' : 'scatter',\n                            'mode' : 'markers',\n                           'x' : [random.random() for i in range(10)],\n                           'y' : [random.random() for i in range(10)],\n                           'name' : 'trace5'},\n                    row = 1, col = 1)\npyo.iplot(plots)\n", "intent": "We can also add more than 1 trace to a grid space. Here I'm adding trace5 to the top-left space in the subplots:\n"}
{"snippet": "df.createOrReplaceTempView(\"people\")\n", "intent": "To use SQL queries directly with the dataframe, you will need to register it to a temporary view:\n"}
{"snippet": "stackedArea = py.get_figure('rmuir', 158)\nstackedArea\n", "intent": "We should also update the tickformat for the proportional stacked area plot:\n"}
{"snippet": "textStyling = {'color' : '\n              'family' : 'Arial',\n              'size' : 12}\nfig['layout']['font'] = textStyling\npyo.iplot(fig)\n", "intent": "I'm going to try a slightly darker colour, and a more modern font family:\n"}
{"snippet": "textStyling = {'color' : '\n              'family' : 'Droid Serif, Raleway,Times New Roman',\n              'size' : 20}\nfig['layout']['font'] = textStyling\npyo.iplot(fig)\n", "intent": "Let's try changing the global <code>'font'</code> <code>'size'</code> to see the effect this has on the chart:\n"}
{"snippet": "fig['layout']['annotations'][0].update({'xanchor' : 'left'})\npyo.iplot(fig)\n", "intent": "Let's try varying the <code>'xanchor'</code> and <code>'yanchor'</code> values:\n"}
{"snippet": "fig['layout']['xaxis']['range'] = [50, 200]\nfig['layout']['yaxis']['range'] = [0, 0.5]\npyo.iplot(fig)\n", "intent": "Now let's try changing the range to something very different to make sure that the annotations stay in the same point:\n"}
{"snippet": "tx = cuda.threadIdx.x\nty = cuda.threadIdx.y\nbx = cuda.blockIdx.x\nby = cuda.blockIdx.y\nbw = cuda.blockDim.x\nbh = cuda.blockDim.y\nx = tx + bx * bw\ny = ty + by * bh\narray[x, y] = compute(x, y)\n", "intent": "For a 2-dimensional grid:\n"}
{"snippet": "fig['layout'].update({'margin' : {'l' : 300, 'r' : 300}})\npyo.iplot(fig)\n", "intent": "And the left and right:\n"}
{"snippet": "lifeExp['layout'].update({'annotations' : [{'text' : \"<i>Source: The World Health Organisation (WHO)</i>\",\n                                             'xref' : 'paper',\n                                             'yref' : 'paper',\n                                             'x' : 0,\n                                             'y' : -0.4,\n                                             'font' : {'size' : 12,\n                                                      'color' : 'grey'},\n                                              'xanchor' : 'left',\n                                             'showarrow' : False}]})\npyo.iplot(lifeExp)\n", "intent": "I sourced the data for this plot from the WHO. Let's add this to the chart, keeping the same parameters for the annotation:\n"}
{"snippet": "lifeExp['layout'].update({'height' : 500,\n                         'margin' : {'b' : 130}})\npyo.iplot(lifeExp)\n", "intent": "Let's increase the height and bottom margin of the chart so we can see the source:\n"}
{"snippet": "from pyspark.sql import SparkSession\nspark = SparkSession.builder.appName(\"dates\").getOrCreate()\n", "intent": "You will often find yourself working with Time and Date information, let's walk through some ways you can deal with it!\n"}
{"snippet": "testFig = make_subplots(rows = 2, cols = 2)\ntestFig.append_trace({'type' : 'scatter',\n                     'mode' : 'markers',}, row = 1, col = 1)\npyo.iplot(testFig)\n", "intent": "We're going to make a dummy subplots object which we'll use to demonstrate changing the horizontal and vertical spacing:\n"}
{"snippet": "testFig = make_subplots(rows = 2, cols = 2,\n                       horizontal_spacing = 0.2)\ntestFig.append_trace({'type' : 'scatter',\n                     'mode' : 'markers',}, row = 1, col = 1)\npyo.iplot(testFig)\n", "intent": "We probably wouldn't want to ever make a plot like this, but you can now see the range of values available. Let's return it to the default of 0.2:\n"}
{"snippet": "testFig = make_subplots(rows = 2, cols = 2,\n                       vertical_spacing = 0)\ntestFig.append_trace({'type' : 'scatter',\n                     'mode' : 'markers',}, row = 1, col = 1)\npyo.iplot(testFig)\n", "intent": "Let's now change the vertical spacing between the different charts on the subplots object. \nWe'll first set it to the minimum value of 0:\n"}
{"snippet": "fig = make_subplots(rows = 3, cols = 3)\nfig.append_trace({'type' : 'scatter'}, row = 1, col = 1)\npyo.iplot(fig)\n", "intent": "We'll make a subplots object with three rows and 3 columns, append a dummy trace to it and plot it as before:\n"}
{"snippet": "for t in traces:\n    t['textfont'] = textStyling\nlayout['titlefont'] = textStyling\nlayout['xaxis']['titlefont'] = textStyling\nlayout['yaxis']['titlefont'] = textStyling\n", "intent": "Let's now apply this to each of the text items.\n"}
{"snippet": "from itertools import *\nfor i in izip(count(1), ['a', 'b', 'c']):\n    print i\n", "intent": "The [`count()`](https://docs.python.org/2/library/itertools.html\n"}
{"snippet": "stacked['layout'].update({'legend' : {'borderwidth' : 2}})\npyo.iplot(stacked)\n", "intent": "So that's a bit thick, let's reduce it slighlty:\n"}
{"snippet": "stacked['layout']['legend'].update({'bordercolor' : '\npyo.iplot(stacked)\n", "intent": "We can now change the colour the legend border. I'm going to try something a little lighter:\n"}
{"snippet": "stacked['layout']['legend'].update({'traceorder' : 'reversed'})\npyo.iplot(stacked)\n", "intent": "We can reverse the order by setting <code>traceorder</code> to <code>'reversed'</code>:\n"}
{"snippet": "df.select(year(df['Date'])).show()\n", "intent": "So for example, let's say we wanted to know the average closing price per year. Easy! With a groupby and the year() function call:\n"}
{"snippet": "stacked['layout']['legend'].update({'y' : -1})\npyo.iplot(stacked)\n", "intent": "Let's move the legend down by changing the y-value to position the legend underneath the chart:\n"}
{"snippet": "stacked['layout']['legend'].update({'traceorder' : 'normal'})\npyo.iplot(stacked)\n", "intent": "I'll now remove the grouping using <code>'traceorder'</code>. This shows the legend items in a long line:\n"}
{"snippet": "stacked['layout']['legend'].update({'y' : 1.125})\npyo.iplot(stacked)\n", "intent": "This legend isn't positioned very well, let's improve this! I used trial and error to find the best position for it:\n"}
{"snippet": "stacked['layout'].update({'width' : 1050})\npyo.iplot(stacked)\n", "intent": "Part of the legend item for the line trace is now chopped off. We need to increase the width of the chart to account for this:\n"}
{"snippet": "lifeExp['layout'].update({'paper_bgcolor' : '\npyo.iplot(lifeExp)\n", "intent": "Let's change the <code>'paper_bgcolor'</code> first. I'm going to change it to an off-white colour:\n"}
{"snippet": "from itertools import *\nfor i in repeat('over-and-over', 5):\n    print i\n", "intent": "The [`repeat()`](https://docs.python.org/2/library/itertools.html\n"}
{"snippet": "ethPie = py.get_figure(\"rmuir\", 263)\npyo.iplot(ethPie)\n", "intent": "We'll load the chart that we made last lesson:\n"}
{"snippet": "ethPie['data'][0].update({'marker' : {'colors' : [\"rgb(12,192,170)\", \n                                                  \"rgb(190,252,250)\", \n                                                  \"rgb(77,194,84)\", \n                                                  \"rgb(211,238,128)\", \n                                                  \"rgb(97,167,193)\"]}})\npyo.iplot(ethPie)\n", "intent": "We can change the colour of the individual segments by passing a list of colours into the trace:\n"}
{"snippet": "ethPie['data'][0]['marker'].update({'line' : {'color' : '\n                                             'width' : '1'}})\npyo.iplot(ethPie)\n", "intent": "We can also change the width and colour of the line that surrounds each segment:\n"}
{"snippet": "result = newdf.groupBy(\"Year\").mean()[['avg(Year)','avg(Close)']]\nresult = result.withColumnRenamed(\"avg(Year)\",\"Year\")\nresult = result.select('Year',format_number('avg(Close)',2).alias(\"Mean Close\")).show()\n", "intent": "Still not quite presentable! Let's use the .alias method as well as round() to clean this up!\n"}
{"snippet": "ethPie['data'][0].update({'pull' : 1})\npyo.iplot(ethPie)\n", "intent": "Let's move all of the sectors out the maximum amount:\n"}
{"snippet": "ethPie['data'][0].update({'pull' : 0.1})\npyo.iplot(ethPie)\n", "intent": "And maybe a little less. . .\n"}
{"snippet": "ethPie['data'][0].update({'pull' : [0, 0, 0.2, 0, 0]})\npyo.iplot(ethPie)\n", "intent": "Let's now try moving a specific segment. I'm going to move the segment for Black students out to highlight it:\n"}
{"snippet": "ethPie['data'][0]['labels'] = newLabels\nethPie['data'][0]['values'] = newValues\npyo.iplot(ethPie)\n", "intent": "Let's put this sorted data back into the trace and replot it!\n"}
{"snippet": "ethPie['data'][0].update({'pull' : [0,0,0,0,0.5]})\npyo.iplot(ethPie)\n", "intent": "Success! Let's try changing which segment we're pulling:\n"}
{"snippet": "from itertools import *\ndef should_drop(x):\n    print 'Testing:', x\n    return (x<1)\nfor i in dropwhile(should_drop, [ -1, 0, 1, 2, 3, 4, 1, -2 ]):\n    print 'Yielding:', i\n", "intent": "The [`dropwhile()`](https://docs.python.org/2/library/itertools.html\n"}
{"snippet": "level['data'][0].update({'textposition' : 'inside'})\npyo.iplot(level)\n", "intent": "And finally to <code>'inside'</code> (which replicates the effect of setting it to auto for this chart):\n"}
{"snippet": "py.plot(eth, filename=\"Ethnicity of UK students (text styled)\", fileopt=\"overwrite\")\n", "intent": "Let's send this styled chart to the Plotly cloud:\n"}
{"snippet": "sub = make_subplots(rows = 2, cols = 2)\nsub\n", "intent": "Our first step is to make a subplots object so we can understand more about how to set the domain for cells on the subplot:\n"}
{"snippet": "df = spark.read.csv('sales_info.csv',inferSchema=True,header=True)\n", "intent": "Read in the customer sales data\n"}
{"snippet": "fig['data'].append(pieData)\npyo.iplot(fig)\n", "intent": "We can now pass in the pie chart trace that we modified previously:\n"}
{"snippet": "table = py.get_figure(\"rmuir\", 313)\npyo.iplot(table)\n", "intent": "Let's get the chart we created in the last lesson:\n"}
{"snippet": "table['data'][0]['colorscale'] = [[0, \"\n                                  [0.5, \"\n                                 [1, \"\npyo.iplot(table)\n", "intent": "Let's try a different colour scheme:\n"}
{"snippet": "table = py.get_figure(\"rmuir\", 313)\npyo.iplot(table)\n", "intent": "Let's get the table we worked on in the last lesson:\n"}
{"snippet": "for ann in table['layout']['annotations']:\n    try:\n        ann['text'] = \"{:,}\".format(int(ann['text']))\n    except: \n        ValueError\n", "intent": "Now that we've used this statement to isolate only the numbers, let's format them with a thousand separator:\n"}
{"snippet": "from itertools import *\ndef should_take(x):\n    print 'Testing:', x\n    return (x<2)\nfor i in takewhile(should_take, [ -1, 0, 1, 2, 3, 4, 1, -2 ]):\n    print 'Yielding:', i\n", "intent": "The opposite of `dropwhile()`, [`takewhile()`](https://docs.python.org/2/library/itertools.html\n"}
{"snippet": "text = [['','','','','',''],\n       ['','','<b>London</b><br>Population: 8,630,100','','',''],\n       ['','','<b>Edinburgh</b><br>Population: 492,680','','',''],\n       ['','','<b>Cardiff</b><br>Population: 346,100','','',''],\n       ['','','<b>Belfast</b><br>Population: 333,870','','',''],]\ntable['data'][0].update({'text' : text})\npyo.iplot(table)\n", "intent": "Now let's add the info:\n"}
{"snippet": "py.plot(table, filename=\"Population of UK Countries (hoverinfo)\", fileopt=\"overwrite\")\n", "intent": "I'm really happy with how that's turned out! Let's push this to the Plotly cloud:\n"}
{"snippet": "afx_2017_dict = r.json()\n", "intent": "Task 2) Convert the returned JSON object into a Python dictionary.\n"}
{"snippet": "df.groupBy(\"Company\")\n", "intent": "Let's group together by company!\n"}
{"snippet": "change = []\nfor i in data:\n    change.append(abs(i[2] - i[3]))\nmax_change = round(max(change), 2)\nprint('Max daily price change in 2017: ', max_change)    \n", "intent": "Task 4) What was the largest change in any one day (based on High and Low price)?\n"}
{"snippet": "dod_change = [] \nfor i in range(len(data) - 1):\n    dod_change.append(abs(data[i][4] - data[i+1][4]))\nlargest_change = round(max(dod_change),2)\nprint('Largest day-over-day change: ', largest_change)\n", "intent": "Task 5) What was the largest change between any two days (based on Closing Price)?\n"}
{"snippet": "trade_volume = []\nfor i in data:\n    if i[6] != None:\n        trade_volume.append(int(i[6]))\navg_trade_volume = sum(trade_volume) / len(trade_volume)\nprint('Average daily trading volume in 2017: ', avg_trade_volume)  \n", "intent": "Task 6) What was the average daily trading volume during this year?\n"}
{"snippet": "a=np.array([[1,2,3,4],[4,5,6,7],[9,10,11,12]])\na\n", "intent": "As for Python lists there are many sophisticated ways how to access or extract elements or sub-arrays\n"}
{"snippet": "some_list = [0,10,20,30,40,50,60,70]\nprint(some_list[2:4])\n", "intent": "Change the cell below so it prints the second through fourth elements in the list.\n"}
{"snippet": "from itertools import *\ndef check_item(x):\n    print 'Testing:', x\n    return (x<1)\nfor i in ifilter(check_item, [ -1, 0, 1, 2, 3, 4, 1, -2 ]):\n    print 'Yielding:', i\n", "intent": "[`ifilter()`](https://docs.python.org/2/library/itertools.html\n"}
{"snippet": "some_list = [1,2,3]\na_list_copy = some_list\nsome_list[1] = 273\n", "intent": "How would you fix the following code so it does what you expect it to do?\n"}
{"snippet": "def some_function(a,b=5,c=7):\n    print(a,b,c)\nsome_function(1,c=2)\nsome_function(1,2)\nsome_function(a=5,b=4)\n", "intent": "What does b=5 let you do?\n"}
{"snippet": "def some_function(a,b):\n    v = a + b\n    return v\nv = some_function(1,2)\nprint(v)\n", "intent": "Alter the program below so it returns the calculated value.\n"}
{"snippet": "claws = find_feature_prototype('claws', animal_features, feature_names)\nprint(\"The 'claws' prototype has the following features:\")\nprint(np.array(feature_names) [claws])\n", "intent": "Try running your function on a few different features, and see what the features are for the prototype:\n"}
{"snippet": "x = 0\nfor i in range(1002):\n    x = x + i\nprint(x)\n", "intent": "Write a loop that calculates the sum:\n$$ 1 + 2 + 3 + ... + 1001$$\n"}
{"snippet": "s = \"Hi there Sam!\"\nlst = s.split()\n", "intent": "** Split this string:**\n    s = \"Hi there Sam!\"\n**into a list. **\n"}
{"snippet": "def countDog(sentence):\n    words =  sentence.lower().split()\n    dogs = list(filter(lambda word: word == 'dog',words))\n    return len(dogs)\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "def hanoi(height, fro='left', to='right', through='middle'):\n    if height:\n        hanoi(height - 1, fro, through, to )\n        print ('%-7s => %s' % (fro, to))\n        hanoi(height -1, through, to, fro)\n", "intent": "Defining function which sorts the Hanoi Tower\n"}
{"snippet": "def sort( values ):\n    n = len(values) \n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if values[j] > values[j + 1]:\n                temp = values[j];\n                values[j] = values[j + 1];\n                values[j + 1] = temp;\n    return values\n", "intent": "A function that takes a list and sorts it in ascending order using Insertion Sort; used for Binary Search.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "<div class=\"alert alert-success\">\nTime this code and see if it is any faster than the previous version.\n</div>\n"}
{"snippet": "def select_sort( values ):\n    n = len( values ) \n    index = 0 \n    for i in range( n - 1): \n        smallest = values[i]\n        for j in range(i, n):\n            if values[j] < smallest:\n                index = j \n        values[index], values[i] = values[i], values[index]\n    return values\n", "intent": "Following code shows its implementation in python.\n"}
{"snippet": "start = time.time()\nprint( select_sort( [1, 5, 9, 8, 6, 3] ) )\nprint (\"----- %s seconds -----\" % (time.time() - start))\n", "intent": "Checking the output of the function\n"}
{"snippet": "print( merge( [2,3,4], [0, 1] ) )\n", "intent": "A little test on our merge function\n"}
{"snippet": "df.select(countDistinct(\"Sales\").alias(\"Distinct Sales\")).show()\n", "intent": "Often you will want to change the name, use the .alias() method for this:\n"}
{"snippet": "start = time.time()\nprint( merge_sort([14, 33, 27, 10, 35, 19, 42, 44]) )\nprint (\"----- %s seconds -----\" % (time.time() - start))\n", "intent": "Example of Merge Sort in action\n"}
{"snippet": "def pigeon_sort(values):\n    _min = min(values)\n    _max = max(values)\n    _range = _max - _min + 1\n", "intent": "This function sorts the values using the Pigeonhole Principle\n"}
{"snippet": "start = time.time()\nprint( pigeon_sort( [5,4,3,2,1] ) )\nprint (\"----- %s seconds -----\" % (time.time() - start))\n", "intent": "Let's see how it performs\n"}
{"snippet": "def pigeonsort( values ):\n    _min = min(values)\n    _max = max(values)\n    _range = _max - _min\n    holes = [0 for i in range(_range + 1)]\n    for value in values:\n        holes[ value - _min ] = value\n    values = [value for value in holes]\n    return values\n", "intent": "A function based on the Pigeonhole Sort Algorithm which works only if the values are continuous and non-repeating.\n"}
{"snippet": "start = time.time()\nprint(_next([3,4,5,2,1]))\nprint(\"----- %s seconds -----\" % (time.time() - start))\n", "intent": "Finding the next permutation\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Time how long it takes to run the `do_sort()` function.\n"}
{"snippet": "start = time.time()\nprint(_next( list('ACBD') ))\nprint(\"----- %s seconds -----\" % (time.time() - start))\n", "intent": "This can also be applied to string\n"}
{"snippet": "def isPowerof2(num):\n    return (num and not (num & (num - 1)))\n", "intent": "Check if Power of 2\n"}
{"snippet": "def prime_generator( limit ):\n    ls = [True] * limit\n    for i in range(2, int(math.sqrt(limit)) + 1): \n        for j in range(i*2, limit, i): \n            ls[j] = False \n    print( \"We  have \", ls.count(True) - 2, \" prime numbers.\" )\n    print( [i for i in range(2, limit) if ls[i]]) \n", "intent": "Prime generator function\n"}
{"snippet": "df.orderBy(\"Sales\").show()\n", "intent": "You can easily sort with the orderBy method:\n"}
{"snippet": "def mac91( N ): \n    if N: \n        if N > 100:\n            return N - 10\n        else:\n            return mac91( mac91(N + 11) )\n    return \"Not Natural\"\n", "intent": "A simple version of the Algorithms\n"}
{"snippet": "def printBoard():\n    N = len(board[0]) \n    for i in range(N):\n        for j in range(N):\n            if board[i][j]:\n                print('Q  ')\n            else:\n                print('_  ')\n        print(\"\\n\")\n", "intent": "First I implement a method to see if a Queen at x, y location is attackable by checking horizontally, vertically, and diagonally.\n"}
{"snippet": "N = int(input(\"Enter N here:\"))\nimport numpy as np\nboard = np.zeros((N, N))\nqueens(N)\n", "intent": "Initilizing the work\n"}
{"snippet": "from subprocess import check_output\ncheck_output([\"./Day_16_main\"])\n", "intent": "The output of the code is given below but it is not very clearly readable.\n"}
{"snippet": "with ix.searcher() as searcher:\n    results = searcher.search(q)\n    for hit in results:\n        print hit[\"Articulo\"]+' - '+str(hit[\"PVP\"])+' eur'\n    results = searcher.search(q, sortedby=\"PVP\")\n    for hit in results:\n        print hit[\"Articulo\"]+' - '+str(hit[\"PVP\"])+' eur'\n", "intent": "We can sort by any field that is previously marked as sortable in the schema. \n```python\nPVP=NUMERIC(sortable=True) \n```\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "<div class=\"alert alert-success\">\nRedefine the vec_add() function so that it takes float64 as arguments and produces the correct results.\n</div>\n"}
{"snippet": "url = \"https://api.spacexdata.com/v2/launchpads/\"\n", "intent": "Check out the documentation:\nhttps://github.com/r-spacex/SpaceX-API/wiki\n"}
{"snippet": "type(response_json)\n", "intent": "response.json() returns a list of dictionaries\n"}
{"snippet": "json_str = json.dumps(response_json, indent=4, sort_keys=True)\ntype(json_str)\n", "intent": "https://docs.python.org/2/library/json.html\n"}
{"snippet": "from pyspark.sql import SparkSession\nspark = SparkSession.builder.appName(\"missingdata\").getOrCreate()\n", "intent": "A few machine learning algorithms can easily deal with missing data, let's see what it looks like:\n"}
{"snippet": "number_payloads = len(response_json[\"payload_weights\"])\nprint(f\"There are {number_payloads} payloads.\") \n", "intent": "https://www.python.org/dev/peps/pep-0498/\n"}
{"snippet": "url = \"https://swapi.co/api/people/\"\n", "intent": "https://swapi.co/documentation\n"}
{"snippet": "response_json['results'][0]\n", "intent": "Get a specific person with a more detailed url\n"}
{"snippet": "question = (\"What type of data would you like to search for? \"\n            \"[Trivia, Math, Date, or Year] \")\nkind_of_search = input(question)\n", "intent": "Notice that we can put long strings on multiple lines by wrapping the separate strings in parentheses\n"}
{"snippet": "url = \"http://www.omdbapi.com\"\napi_key = \"40e9cece\"\n", "intent": "Docs:\nhttp://www.omdbapi.com/\n"}
{"snippet": "print(\"The point is that you can provide a complete record of some data analysis\")\n1+1\n", "intent": "*They were not designed to make programs.*\n"}
{"snippet": "url = \"https://api.nytimes.com/svc/search/v2/articlesearch.json?\"\napi_key = \"164b73c522a8420c8e05343ef1da0a7e\"\n", "intent": "You can request an API key that lets you access the API, or you can use the one given below\nhttps://developer.nytimes.com/signup\n"}
{"snippet": "api_key = \"25bc90a1196e6f153eece0bc0b0fc9eb\"\nurl = \"http://api.openweathermap.org/data/2.5/weather?\"\ncity = \"San Francisco\"\n", "intent": "http://openweathermap.org/api\nhttp://openweathermap.org/current\n"}
{"snippet": "params = {\"appid\": api_key,\n          \"q\": city}\n", "intent": "http://docs.python-requests.org/en/master/user/quickstart/\n"}
{"snippet": "df.na.fill('No Name',subset=['Name']).show()\n", "intent": "Usually you should specify what columns you want to fill with the subset parameter\n"}
{"snippet": "units = [\"metric\", \"imperial\"]\ntemperatures = []\nfor unit in units:\n    query_url = url + \"appid=\" + api_key + \"&q=\" + city + \"&units=\" + unit\n    weather_response = requests.get(query_url)\n    weather_json = weather_response.json()\n    temperature = weather_json[\"main\"][\"temp\"]\n    temperatures.append(temperature)\nprint(\n    f\"The temperature in Bujumbura is {temperatures[0]}C or {temperatures[1]}F.\")\n", "intent": "Try to refactor this code.\n"}
{"snippet": "actors_in_black_panther = {\n    \"Chadwick Boseman\": \"T'Challa\",\n    \"Lupita Nyong'o\": \"Nakia\",\n    \"Michael B. Jordan\": \"Killmonger\",\n    \"Danai Gurira\": \"Okoye\"\n}\nprint(actors_in_black_panther.get(\"Kevin Bacon\",\"(not in this movie)\"))\n", "intent": "https://docs.quantifiedcode.com/python-anti-patterns/correctness/not_using_get_to_return_a_default_value_from_a_dictionary.html\n"}
{"snippet": "query = f\"{url}countries?lendingType=IBD&format=json\"\nquery\n", "intent": "Look at output for one lending type\n"}
{"snippet": "import requests\nimport json\nfrom localenv import gkey\ntarget_city = \"Berkeley, California\"\ntarget_url = \"https://maps.googleapis.com/maps/api/geocode/json?\" \\\n    \"address=%s&key=%s\" % (target_city, gkey)\nprint(target_url)\n", "intent": "google maps [geocode documentation](https://developers.google.com/maps/documentation/geocoding/start)\n"}
{"snippet": "import json\nimport tweepy \nfrom twitenv import consumer_key, \\\n                     consumer_secret, \\\n                     access_token, \\\n                     access_token_secret\n", "intent": "[tweepy docs](http://docs.tweepy.org/en/v3.5.0/getting_started.html)\n```\nconda install -c conda-forge tweepy\n```\n"}
{"snippet": "favorite_number = -1\n", "intent": "What's your favorite *positive* number? Reassign the `favorite_number` variable with something that's at least larger than 0.\n"}
{"snippet": "session.query(func.count(Dow.date)).all()\n", "intent": "How many dates do we have?\n"}
{"snippet": "session.query(Dow.date).order_by(Dow.date).first()\n", "intent": "What is the earliest date?\n"}
{"snippet": "session.query(Dow.date).order_by(Dow.date.desc()).first()\n", "intent": "What is the latest date?\n"}
{"snippet": "from pyspark.sql.functions import mean\nmean_val = df.select(mean(df['Sales'])).collect()\nmean_val[0][0]\n", "intent": "A very common practice is to fill values with the mean value for the column, for example:\n"}
{"snippet": "week_ago = dt.date.today() - dt.timedelta(days=7)\n", "intent": "Calculate a time delta\n"}
{"snippet": "query_date = dt.date(2011, 4, 8) - dt.timedelta(days=7)\nprint(\"Query Date: \", query_date)\n", "intent": "Query for the Dow closing price 1 week before `2011-04-08` using the datetime library\n"}
{"snippet": "date_str = \"14\"\nsession.query(Dow.date).\\\n    filter(func.strftime(\"%d\", Dow.date) == date_str).all()\n", "intent": "Putting it all together\n"}
{"snippet": "url = 'https://en.wikipedia.org/wiki/List_of_medical_abbreviations'\nmed_abbreviations = ['BMR', 'BP', 'ECG', 'MRI', 'qid', 'WBC']\n", "intent": "Use Pandas to scrape the following site and decode the medical abbreviations in the list\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Cleanup of extra row\n"}
{"snippet": "famous_person = \"\"\ntheir_quote = \"\"\n", "intent": "Print out a famous quote! In the code below, fill out the string variables to contain the name of a famous person, and a quote that they said.\n"}
{"snippet": "A = Matrix([[2, 6],[6, 18]])\nA\n", "intent": "Let $\\mathbf{A} = \\begin{bmatrix} 2 & 6 \\\\6 & 18 \\end{bmatrix}$. Find the eigen values of A.\n"}
{"snippet": "print (name, \", age: \", str(age), \", \", gender, \", is smart: \" + str(smart), sep=\"\")\n", "intent": "In the previous cell, we've [concatenated a couple of strings](https://docs.python.org/3.5/tutorial/introduction.html\n"}
{"snippet": "print(f(2))\nprint(f(3))\nf(5)\n", "intent": "We can now run this function with multiple input values: \n"}
{"snippet": "s ='hello'\nprint(s[-1])\n", "intent": "Given the string hello, give two methods of producing the letter 'o' using indexing.\n"}
{"snippet": "my_true_var = True\nprint (my_true_var)\nmy_false_var = False\nprint (my_false_var)\n", "intent": "Boolean values represent truth values `True` and `False`. Booleans can be used as any other variable:\n"}
{"snippet": "a < b + 0.00001 and a > b - 0.00001\n", "intent": "Instead, you can do something like this: \n"}
{"snippet": "x = 2\ny = 3\nx = x+y\nx\n", "intent": "Also, remember, that many operations have a shorthand assignment version, i.e., instead of:\n"}
{"snippet": "x = 2\ny = 3\nx += y\nx\n", "intent": "you can also write: \n"}
{"snippet": "x = 2\ny = 3\nx -= y\nx\n", "intent": "This works equally for other operators: \n"}
{"snippet": "n1 = 20344983945038.48374839\nn2 = 984374.783894273\nquotient = -1\n", "intent": "Two numbers are given below. When you perform the operation `n1 / n2`, what is the quotient? Store this quantity in the variable named `quotient`.\n"}
{"snippet": "def scope_test():\n    function_scope = \"only readable in here\"\n    print(\"Within function: \" + function_scope)\nscope_test()\nprint(\"Outside function: \" + function_scope)\n", "intent": "Also, remember that variables defined inside of a function are not accesible outside of a function:\n"}
{"snippet": "def smallest_factors(x):\n    if(not x % 2):\n        print(\"2 is a factor of \" + str(x))  \n    elif(not x % 3):     \n        print(\"3 is a factor of \" + str(x))\n    else: \n        print(\"Neither 2 nor 3 are factors of \" + str(x))\nsmallest_factors(4)\nsmallest_factors(9)\nsmallest_factors(12)\n", "intent": "You can also **chain conditions using the `elif` statement**, which is short for else if:\n"}
{"snippet": "paul = \"Paul McCartney\"\npaul[0:4]\n", "intent": "Strings can be treated similar to arrays with respect to indexing and slicing:\n"}
{"snippet": "list3 = [1,2,[3,4,'hello']]\nlist3[2][2] = \"goodbye\"\n", "intent": "Reassign 'hello' in this nested list to say 'goodbye' instead:\n"}
{"snippet": "beatles.append(\"George Martin\")\nbeatles\n", "intent": "Arrays can also be **extended with the `append()` function**:\n"}
{"snippet": "zeppelin = [\"Jimmy\", \"Robert\", \"John\", \"John\"]\nbeatles += zeppelin\nbeatles\n", "intent": "Lists can be **concatenated**: \n"}
{"snippet": "beatles = [\"Paul\", \"John\", \"George\", \"Ringo\"]\nbands = [beatles, zeppelin]\nbands\n", "intent": "Lists can also be **nested**: \n"}
{"snippet": "bad_bands = bands + [1, 0.3, 17, \"This is bad\"]\nbad_bands\n", "intent": "In fact, lists can be of hybrid data types, which, however, is something that you typically don't want to and shouldn't do:\n"}
{"snippet": "a = 1\nwhile (a <= 100):\n    print(a, end=\", \") \n    a += 1\n", "intent": "While loops use the `while` keyword, a condition, and the loop body:\n"}
{"snippet": "print(number_to_words(500))\n", "intent": "Now write a set of `assert` tests for your `number_to_words` function that verifies that it is working as expected.\n"}
