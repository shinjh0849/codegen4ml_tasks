{"snippet": "a=[10,20,30,40,50]\nb=[]\nfor i in range(0, len(a)):\n   b.append(a[i-1])\nprint(b)\n", "intent": "Interview question: how to perform a left rotation\n"}
{"snippet": "lambda = 3*sigma/ 2\nimageplot(clamp(h(f, lambda)))\n", "intent": "Example of denoising result.\n"}
{"snippet": "for i in range(5):\n    print(i)\n", "intent": "You can print out all the numbers from 0 to 4 (inclusive) as follows:\n"}
{"snippet": "m = np.matrix([[1, 2], [3, 4]])\n", "intent": "If you want to use `*` as the operator for matrix multiplication, you need to create matrix objects.\n"}
{"snippet": "print('id(y):', id(y))\ny = y + x\nprint('id(y):', id(y))\n", "intent": "In order to perform efficient in-place operations, we should avoid:\n```python\ny = y + x\n```\nInstead, we should use:\n```python\ny[:] = y + x\n```\n"}
{"snippet": "def f(x=True): \n    return x\n", "intent": "Define a function with a checkbox widget abbreviation for the argument x.\n"}
{"snippet": "ipython nbconvert  --to=html 'Index.ipynb'\n", "intent": "Html is the (configurable) default value.  The verbose form of the same command as above is \n"}
{"snippet": "ght_terms = list(set([word.lower() for word in text6 if 'ght' in word]))\nprint(ght_terms)\n", "intent": "* Similarly, to pull out words based on a matching pattern.\n"}
{"snippet": "start = time.time()\nprint(_next([5, 4, 3, 2, 1]))\nprint(\"----- %s seconds -----\" % (time.time() - start))\n", "intent": "Special case when next permutation is not possible\n"}
{"snippet": "d={x:x**3 for x in range(5)}\nd\n", "intent": "**Problem 7: Create this dictionary:\n{0: 0, 1: 1, 2: 8, 3: 27, 4: 64}\n using dictionary comprehension.**\n"}
{"snippet": "Kelvin(t::Temperature) = convert(Kelvin, t)\nCelsius(t::Temperature) = convert(Celsius, t)\nFahrenheit(t::Temperature) = convert(Fahrenheit, t)\n", "intent": "We can add some nice constructors, so we can initialise each \n"}
{"snippet": "p1 = Point(0, 0)\np2 = Point(10, 10)\nline1 = Line(p1, p2)\nline2 = copy.copy(line1)\nprint(line1.p1, id(line1.p1))\nprint(line2.p1, id(line2.p1))\n", "intent": "However, if we had done a shallow copy:\n"}
{"snippet": "match_object = p.match('goodbye world') \nprint match_object.group()          \nprint match_object.start()               \nprint match_object.end()                 \nprint match_object.span()                \n", "intent": "<h3>No Match Found</h3>\n<p>What happens if our search string doesn't have a match for our regular expression </p>\n"}
{"snippet": "shopping_list = {\n    \"apple\": 2,\n    \"pear\": 1,\n    \"plum\": 5,\n}\nprint(\"\\n\".join(\"item {0}: {1}, quantity: {2}\".format(idx+1, item, quantity)\n                for idx, (item, quantity) in sorted(enumerate(shopping_list.items()))\n))\n", "intent": "- Decreasing order by quantity\n"}
{"snippet": "import sys\nimport os\nsys.stdout.write(\"hh mm ss\\n\")\nfor h in range(1,12):\n    for m in range(1,59):\n        for s in range(1,59):\n            sys.stdout.write(\"\\r%d  %d  %d\"%(h,m,s))\n", "intent": "<h3>Example 6.32, Page number: 130<h3>\n"}
{"snippet": "months = ['January', 'february', 'March', 'April', 'May', 'June', 'July','August', 'September', 'October','November', 'December']\n", "intent": "For a quick quiz Try to return the 6th month and the second to last month in months! \n"}
{"snippet": "for x in range(3):\n    for y in range(4):\n        print(x,y)\n        print(x + y)\n", "intent": "The content of a `for` loop can be any block, which may include additional flow control.\n"}
{"snippet": "[U,S] = eig(full(L));\nS = diag(S);\n[S,I] = sort(S, 'ascend');\nU = real( U(:,I) );\n", "intent": "Compute the full set of eigenvector.\n"}
{"snippet": "sx = 5; sv = .02\nFV1 = bilateral_lin(FV, sx, sv)\n", "intent": "The base layer is defined as\n$ B_V = \\Bb_{\\si_x,\\si_v}(F_V) $.\n"}
{"snippet": "I = find(sum(X + dX >n | Y + dY >n))\nX(: , I) = []\nY(: , I) = []\ndX(: , I) = []\ndY(: , I) = []\n", "intent": "Remove the block which fails outside the image.\n"}
{"snippet": "yuml(\"[Animal]^-[Bird],[Bird]^-[Eagle],[Bird]^-[Starling]%\")\n", "intent": "UML shows inheritance with an open triangular arrow pointing from subclass to superclass.\n"}
{"snippet": "sym.diff(sym.cos(x), x)\n", "intent": "You can differentiate any SymPy expression using `diff(func, var)`, for example:\n$$\n\\frac{\\text{d}\\cos(x)}{\\text{d}x}=-\\sin(x)\n$$\n"}
{"snippet": "A = np.array(range(9))\nA = A.reshape(3,3)\nprint(A)\n", "intent": "A transpose is used to flip the rows and columns of an array.  Using NumPy, finding the transpose of a matrix is quick and efficient.\n"}
{"snippet": "Z = np.arange(10, 50)\n", "intent": "4\\.  Create a Numpy vector `Z` with values ranging from 10 to 49\n"}
{"snippet": "hdfs dfs -mkdir /movielens\nhdfs dfs -put /notebooks/cineca/data/movielens/medium/ratings.dat /movielens/ratings.dat\nhdfs dfs -put /notebooks/cineca/data/movielens/medium/movies.dat /movielens/movies.dat\n", "intent": "Load dataset in hdfs.\n"}
{"snippet": "df = brfss.ReadBrfss()\n", "intent": "I'll start with the data from the BRFSS again.\n"}
{"snippet": "roslaunch exercise3 solution3.launch\n", "intent": "Then, compile and run it.\n"}
{"snippet": "response1 = nppes.query_to_pandas_safe(query1)\nresponse1.head(20)\n", "intent": "What are the most common medical specialties in Mountain View, California?\n"}
{"snippet": "def count_upper(s):\n", "intent": "Define a function named `count_upper` that has one `str` parameter and returns the number of uppercase letters in the given string.\n"}
{"snippet": "header = new_lines[0]\ncolumns = new_lines[1:]\nprint(header)\nprint(columns)\n", "intent": "---\nThe header is the first string in the list of strings. It contains the column names of our data.\n"}
{"snippet": "def haversine_formula(r, p1, p2):\n    phi_1, lambda_1 = p1\n    phi_2, lambda_2 = p2\n    phi_1 = radians(phi_1)\n    phi_2 = radians(phi_2)\n    lambda_1 = radians(lambda_1)\n    lambda_2 = radians(lambda_2)\n    a = sin((phi_1-phi_2)/2)**2 + cos(phi_1)*cos(phi_2)*sin((lambda_1-lambda_2)/2.0)**2\n    c = 2*asin(a**0.5)\n    return r*c\n", "intent": "<div class=\"btn-group\"><button class=\"btn\" onclick=\"IPython.canopy_exercise.toggle_solution('3')\">Solution</button></div>\n"}
{"snippet": "answer = False\nexplanation = \"The intersection of CDE and EFA (which is E) is not candidtate key for any listed relations.\"\n", "intent": "Jeff also claims that the decomposition $ABC$, $CDE$, $EFA$ is lossless. Is Jeff correct?\n"}
{"snippet": "import sqlite3\nsqlite_db = 'test_db.sqlite';\nconn = sqlite3.connect(sqlite_db)\nc = conn.cursor()\n", "intent": "Si el archivo no existe, lo crea y se conecta al mismo.\n"}
{"snippet": "def paper_doll(text):\n    triplicate = \"\"\n    for letter in text:\n        triplicate += letter*3\n    return triplicate\n", "intent": "    paper_doll('Hello') --> 'HHHeeellllllooo'\n    paper_doll('Mississippi') --> 'MMMiiissssssiiippppppiii'\n"}
{"snippet": "plot_three(spectrum)\n", "intent": "So we can visualize the unmodified spectrum:\n"}
{"snippet": "import pandas.io.sql as sqlio          \nimport numpy as np                     \nimport pyodbc\ncon = pyodbc.connect('DSN=Denso_Postgre')\ndf = sqlio.read_frame(sql, con)\ncon.close()\nprint df.head()\nprint df.tail()\n", "intent": "<H2 align=\"center\">Testing connection to a PostgreSQL database via ODBC</H2>\n"}
{"snippet": "nested_list = [(1, 2, 3), [4, 5]]\nnested_list\n", "intent": "Create a nested list:\n"}
{"snippet": "a_x <- a[1]\na_y <- a[2]\nx <- c(a_x, 0)\ny <- c(0, a_y)\n", "intent": "Create component vectors along the $x$ and $y$ axes.\n"}
{"snippet": "import numpy as np\ndata = np.loadtxt(fname='inflammation-01.csv', delimiter=',')\nprint 'data shape:', data.shape\n", "intent": "The last step is to turn our data into something we can see.\nAs in previous lessons,\nthe first step is to get the data into memory:\n"}
{"snippet": "def loud(s):\n    return s.upper() + \"!\"\nloud('hello')\n", "intent": "* In this exercise, you wrap a function with another function that checks for illegal input (None)\n"}
{"snippet": "x, y, legend, info, _params=p.getCurve('exp')\ny=y+100\np.show()\np.addCurve(x, y, color='red', legend='exp')\np.show()\n", "intent": "get back the curve and add an offset in y axis\n- $y=y+100.0$\n- get all needed data from the 'Plot1D' object\n"}
{"snippet": "@show sol.t[3] \n@show sol[3] \n@show sol(5) \n", "intent": "The solution object acts both as an array and as an interpolation of the solution\n"}
{"snippet": "[fibonacci(i) for i in range(10)]\n", "intent": "Note: if you really want to compute Fibonicci numbers, there is a function in SymPy called `fibonicci` that can do this far more efficiently.\n"}
{"snippet": "normalize_rectangle( (0.0, 1.0, 2.0) ) \n", "intent": "The preconditions on lines 2, 4, and 5 catch invalid inputs:\n"}
{"snippet": "groupby = df.groupby('sex')\ngroupby\n", "intent": "If we group by sex, we get a `DataFrameGroupBy` object.\n"}
{"snippet": "cheryls_birthday(gabe_dates)\n", "intent": "We can verify that they do indeed make the puzzle work, giving a single known birthdate:\n"}
{"snippet": "{(student_name(s), grade_mark(g)) for s in students for g in grades if student_name(s) == 'Smith'}\n", "intent": "- We can also combine this with a predicate:\n"}
{"snippet": "pd.Series(5., index=['a', 'b', 'c', 'd', 'e'])\n", "intent": "If data is a scalar value, an index must be provided. The value will be repeated to match the length of index\n"}
{"snippet": "np.linspace(0, 10, 3)\n", "intent": "Return evenly spaced numbers over a specified interval.\n"}
{"snippet": "vowel = ['a','e','i','o','u']\ndef return_vowel(x):\n    if x in vowel:\n        print ('true')\n    else:\n        print ('false')\nreturn_vowel('a')\n", "intent": "---\n**Grade**\nGrading rubric [2/2 points]:\n* [1/1 pt] Successfully created a dictionary\n* [1/1 pt] Properly defined all keys\n---\n"}
{"snippet": "Card('Z', 'clubs') in deck\n", "intent": "**Exercise** Make up a card that doesn't exist and confirm that `in` yields `False`.\n"}
{"snippet": "def sortFirst(n):\n    return maxProduct\ndef sortFirstIncludeNegatives(n):\n    return maxProduct\ndef onePass(n):\n    return maxProduct\n", "intent": "Now, optimize the solution above.\nCan you find a solution that works in O(n log n) time?\nHow about looping over the data just once, i.e. O(n)?\n"}
{"snippet": "list1 = [[1,2], \"one\", 1, 2.2, sum]\nfor item in list1:\n    print item, \"Type =>\", type(item)\n", "intent": "`To iterate over all the elements in a list`\n```Python \nfor <variable_name> in list:\n    block_of_code\n```\n"}
{"snippet": "print(list(tokenize(mmg) & tokenize(geb)))\n", "intent": "Set also comes with a nifty intersection command\n"}
{"snippet": "new_list = [expression(i) for i in old_list if filter(i)]\n", "intent": "You can obtain the same thing using list comprehension:\n"}
{"snippet": "for cid in cids: AllChem.UFFOptimizeMolecule(tm,confId=cid)\n", "intent": "Clean the conformations up using the built-in UFF implementation:\n"}
{"snippet": "def win_check(board, mark):\n    return (board[1] == board[2]== board[3] == mark) or (board[4] == board[5]== board[6] == mark) or (board[7] == board[8]== board[9] == mark) or (board[1] == board[4]== board[7] == mark) or (board[2] == board[5]== board[8] == mark) or (board[3] == board[6]== board[9] == mark) or (board[1] == board[5]== board[9] == mark) or (board[3] == board[5]== board[7] == mark)\n    pass\n", "intent": "**Step 4: Write a function that takes in a board and a mark (X or O) and then checks to see if that mark has won. **\n"}
{"snippet": "anova(jobtest.lm1, jobtest.lm3)\n", "intent": "Is there any effect of ETHN on slope?  (Assuming we have accepted the hypothesis that the intercept is the same within each\ngroup).\n"}
{"snippet": "x = [1, 2, 3]\nx.extend([4, 5])\nprint x\n", "intent": "extend: extends list by appending elements from the iterable\n"}
{"snippet": "numbers = list(range(1,11))\nprint(numbers)\n", "intent": "If we want to store these numbers in a list, we can use the *list()* function. This function takes in a range, and turns it into a list:\n"}
{"snippet": "d = Donut(autompg, label=['cyl', 'origin'],\n           values='displ', agg='mean', level_spacing=[0.8, 0.3])\nshow(d)\n", "intent": "This is applied to each level individually, including the first.\n"}
{"snippet": "soln = solve(area - height*width, height)[0]\nsoln\n", "intent": "We can use subs and solve together to plug the solution of one equation into another\n"}
{"snippet": "l = [ 4, 3, 0, 2, 1 ]\ni = 0\nwhile l[i] != 0 :\n    i = l[i]\n    print (i)            \n", "intent": "**Que fait le programme suivant ?**\n"}
{"snippet": "import math\nf = 599e6     \nE = 1e-6      \nD = 20        \nc = 3e8       \nZ_0 = 377     \nwave_lt = c/f                       \nA_e = (D*(wave_lt**2))/(4*math.pi)  \nP_r = (E**2)*A_e/Z_0                \nprint \"The received power is\", round(P_r,17), \"W\"\n", "intent": "<h3>Example 3-7.1, Page number: 62<h3>\n"}
{"snippet": "means_size1000 = array(sample_means(10000, 1000))\nhist(means_size1000, bins = linspace(0,1,101));\n", "intent": "What happens if we keep increasing the sample size of each sample?\n"}
{"snippet": "cipher_dict = {}\nfor letter in 'abcdefghijklmnopqrstuvwxyz':\n    if ord(letter)+5 < 122:\n        cipher_dict[letter] = chr(ord(letter)+5)\n    if ord(letter)+5 > 122:\n        cipher_dict[letter] = chr(ord(letter)+5-26)\n    cipher_dict[' '] = ' '\ncipher_dict    \n", "intent": "See how we have 5 unique names, but some people have the same favorite ice cream?\n"}
{"snippet": "x = np.array([1, 3, 0, -1, -3])\n", "intent": "Q31. Compute an element-wise indication of the sign of x, element-wise.\n"}
{"snippet": "for i in range(len(test)):\n    print(test[i])\n", "intent": "<br>\nIterate by index:\n"}
{"snippet": "li = [1,2,3,4,5,6,7,8,9,10]\nevens = filter(lambda x : x % 2 == 0, li)\nsquare_of_evens = [x ** 2 for x in list(evens)]\nprint(square_of_evens)\n", "intent": "Hint : You can use lambda function\n"}
{"snippet": "x = np.array([0, 0, 0, 1, 2, 3, 0, 2, 1, 0])\nx = x[3:]\nx\n", "intent": "Q16. Let x be an array [0, 0, 0, 1, 2, 3, 0, 2, 1, 0].<br/>\nremove the leading the trailing zeros.\n"}
{"snippet": "def large_cont_sum(arr): \n    hold=arr[0]\n    maximum=[hold]\n    for i in arr[1:]:\n        hold = max(hold+i, i)\n        maximum.append(hold)\n    return max(maximum)\n", "intent": "Given an array of integers (positive and negative) find the largest continuous sum. \nFill out your solution below:\n"}
{"snippet": "N = 252\n[ divisor for divisor in range(1,N+1) if N % divisor == 0 ]\n", "intent": "We can use an `if` statement in a list comprehension. For example, we can create the list of divisors of an integer $N$:\n"}
{"snippet": "x = np.array([[1,4],[3,1]])\nout = np.argsort(x, axis=1)\nprint (out)\n", "intent": "Q3. Get the indices that would sort x along the second axis.\n"}
{"snippet": "tuple_methods = set(dir(tuple))\nset_methods = set(dir(set))\ntuple_unique = tuple_methods - set_methods\n[method for method in tuple_unique if method[0] != '_']\n", "intent": "<span style=\"color:green\">Find all the public tuple methods that are not in common with set methods.</span>\n"}
{"snippet": "import datetime\nx = datetime.datetime.now()\nprint('B:', x.strftime(\"%B\"))\nprint('A:', x.strftime(\"%A\"))\nprint('Y:', x.strftime(\"%Y\"))\nprint('Z:', x.strftime(\"%Z\"))  \nprint('c:', x.strftime(\"%c\"))\nprint('x:', x.strftime(\"%x\"))\n", "intent": "Run this example, exchanging %B with %A, %Y, %Z, %c, and %x and see the differences.\n"}
{"snippet": "tk_pass_manager = PassManager()\ntk_pass = TketPass(real_backend)\ntk_pass_manager.append(tk_pass)\n", "intent": "To route the variational circuit onto real hardware, we simply need to change the backend.\n"}
{"snippet": "n_iter = 10 \np = 2\nbeta = np.random.uniform(0, np.pi*2, p)\ngamma = np.random.uniform(0, np.pi*2, p)\n", "intent": "We set $p=2$ and initialize the $\\beta_i$ and $\\gamma_i$ parameters:\n"}
{"snippet": "circ = QuantumCircuit(q0, q1)\ncirc.x(q0[1])\ncirc.x(q1[0])\ncirc.draw()\n", "intent": "Quantum Circuits are made using registers. Either when initiated or by using the `add_register` command. \n"}
{"snippet": "hapaxes = fdist_text4.hapaxes()\nprint(hapaxes[:50])\n", "intent": "* Words that appear only once in a body of text are called **hapaxes**. We can also locate them using the hapaxes() method.\n"}
{"snippet": "def find_stop_index(road):\n    length = len(road)\n    for index in range(0, length):\n        value = road[index]\n        if str(value) == 's':\n            stop_index =  index - 1\n            return stop_index\n", "intent": "Complete this function so that it returns the index of the cell that is *right before* the stop sign (ex. 0, if the stop sign is at index 1)!\n"}
{"snippet": "def empty_for(arr):\n    for i in arr:\n        pass\n", "intent": "**Getting into crux of the matter**\n"}
{"snippet": "function insert_block(A, i, j, what=7)\n    B = A[:,:]        \n    B[i:i+2, j:j+2] = fill(what, 3, 3)\n    return B          \nend\n", "intent": "Let's define a function to insert a block in a matrix:\n"}
{"snippet": "release_year_dict['Thriller'] \n", "intent": "You can retrieve the values based on the names:\n"}
{"snippet": "groceries.append('bread')\n", "intent": "After creating our grocery list, we can add objects to it.\n"}
{"snippet": "np.dot(salary_sub,pay_subset)\n", "intent": "We can also do the dot product of the arrays, which is for 1D-arrays the sum of the element-wise values multiplied together.\nTry it with `np.dot()`.\n"}
{"snippet": "url = 'http://getstatuscode.com/301'\nres = requests.get(url)\nprint('\\nThe status code for \"%s\" is: %d' % (url, res.status_code))\nprint('The reason is: %s' % res.reason)\n", "intent": "- `2xx`: Successful\n    - e.g. `\"200: OK\"`\tmeans that the request is OK (this is the standard response for successful HTTP requests)\n"}
{"snippet": "my_list = [1,1,1,1,1]\n", "intent": "Write a cell that creates a list that contains 5 seperate entries with value 1. (That is, the list has length 5 and every entry has value 1.)\n"}
{"snippet": "updateDT(\"%m-%d-%Y\")\n", "intent": "American date with hyphens:\n"}
{"snippet": "def tokenize(text_str):\n    tokens = word_tokenize(text_str)\n    return tokens\n", "intent": "In this function, you will tokenize the given input text.  The function word_tokenize() might prove helpful in this instance.\n"}
{"snippet": "import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--verbose\", help=\"increase output verbosity\",\n                    action=\"store_true\") \nargs = parser.parse_args()\nif args.verbose:\n    print(\"verbosity turned on\")\nelse:\n    print(\"Ha we are not verbose, but whom am I kidding!\")\n", "intent": "(we either use it as True or if we do not use it then it is false)\n"}
{"snippet": "lst = [1, 2, 3]\nlst.append(5)\nlst\n", "intent": "* Capitalize the first element in a string\n"}
{"snippet": "def get_data(filename):\n    data_tuples = list()\n    with open(filename,'r') as f:\n        for line in f:\n            data_tuples.append(line.strip().split(','))\n    import datetime\n    format_str = \"%Y-%m-%d %H:%M:%S\"\n    data_tuples = [(datetime.datetime.strptime(x[0],format_str).hour,float(x[1])) for x in data_tuples]\n    return data_tuples    \n", "intent": "<h3>Create a function that returns the data</h3>\n"}
{"snippet": "prop.table(table(titanic$Sex, titanic$Survived)) \n", "intent": "This represents the proportion of all passengers in each group.\n"}
{"snippet": "somefunc(kwarg2=\"Hello\", arg1=\"Hi\", kwarg1=6, arg2=[2])\n", "intent": "If we use variable_name=value for all arguments, their sequence in the function header can be in any order.\n"}
{"snippet": "price = 1.5\nprint('Type of price variable before:', type(price))\nprice = 0\nprint('Type of price variable after:', type(price))\n", "intent": "Python is an intepreted language and variables have no strict type.\nThis means that you can change a variables value to anything at any time.\n"}
{"snippet": "@result deleteJob(ctx, job; force=true)\n", "intent": "Once the job is completed, we can clean it up and free it's resources. Again, this is important to do for cost reasons. \n"}
{"snippet": "from nose.tools import assert_equal\nclass TestReverse(object):\n    def test_rev(self,solution):\n        assert_equal(solution('hello'),'olleh')\n        assert_equal(solution('hello world'),'dlrow olleh')\n        assert_equal(solution('123456789'),'987654321')\n        print('PASSED ALL TEST CASES!')\ntest = TestReverse()\ntest.test_rev(reverse)\n", "intent": "Run the cell below to test your solution against the following cases:\n    string = 'hello'\n    string = 'hello world'\n    string = '123456789'\n"}
{"snippet": "val names = sc.textFile(\"file:///root/summit-spark/notebooks-unfinished/datastax/4000names.csv\")\nval num_names = names.cache.count\n", "intent": "As inputs, we have \n- 4000names.csv\n- stock_symbols.csv\n"}
{"snippet": "random.seed(10)\nrandom.random_integers(0,1,10)\n", "intent": "If we now specify the seed again as 10, we can generate the exact same sequence\n"}
{"snippet": "x = x[::-1]\nprint(x)\n", "intent": "4) Reverse the previous vector (first element becomes last)\n"}
{"snippet": "g_df = geocode_fs.df\ng_df.head(2)\n", "intent": "**4.** Convert the results to a dataframe and show the first two locations\n"}
{"snippet": "my_list = ['one','two','three',4,5]\n", "intent": "Indexing and slicing work just like in strings.\n"}
{"snippet": "import thinkstats2\nlive = preg[preg.outcome == 1]\nfirsts = live[live.birthord == 1]\nothers = live[live.birthord != 1]\ncdf = thinkstats2.Cdf(live.totalwgt_lb)\n", "intent": "Select live births, then make a CDF of <tt>totalwgt_lb</tt>. \n"}
{"snippet": "class Animal(Customer):\n    def walk(self):\n        return 'Animal walked 2 steps.'\napril_the_giraffe = Animal()\nprint(april_the_giraffe.walk())\nprint(april_th)\n", "intent": "---\nGoing back to that `__init__` method, we can ask the question: What if there is no initialization method in a class?\n"}
{"snippet": "my_state = GameState(\n    to_move = 'X',\n    utility = '0',\n    board = {(1,1): 'X', (1,2): 'O', (1,3): 'X',\n             (2,1): 'O',             (2,3): 'O',\n             (3,1): 'X',\n            },\n    moves = [(2,2), (3,2), (3,3)]\n    )\n", "intent": "Hmm, so that's the initial state of the game; no X's and no O's.  \n  Let us create a new game state by ourselves to experiment:\n"}
{"snippet": "a = np.array([1,2])\nb = np.array([3,4])\n", "intent": "Let's review all we saw, plus add the aforementioned product.\n"}
{"snippet": "def get_hour_data(hour):\n    hour_data = oct_13[oct_13['Time Local'] == hour]\n    hour_data['Type'] = np.repeat('Observed', len(hour_data))\n    return hour_data\ndef create_grid(seed):\n    grid = ca_locations.sample(150, random_state = seed)\n    grid['Type'] = np.repeat('Predicted', len(grid))\n    return grid\n", "intent": "Here are some functions we asked you to write for Section 1\n"}
{"snippet": "def run_func(func):\n    func()\n", "intent": "Now, so far this is stuff we already know. But we can now also write a function which runs any function that we pass to it. \n"}
{"snippet": "x = 21.33\ny = x * 100\ni = int(y)\nprint(y, i)\n", "intent": "The following example *might* show `i=2132` because 21.33 is not exactly representable in binary and is slightly less than 21.33.\n"}
{"snippet": "db.restaurants.remove( { \"borough\": \"Staten Island\" } )\n", "intent": "remove all the resturants in Staten Island\n"}
{"snippet": "hist = thinkstats2.Hist(resp.ager)\nthinkplot.Hist(hist, label='ager')\nthinkplot.Show()\n", "intent": "Make a histogram of <tt>age_r</tt>, the respondent's age at the time of interview.\n"}
{"snippet": "n=123456  \nsum1=0  \nwhile n>0:  \n    r=n%10 \n    sum1+=r  \n    n=n//10  \nprint(sum1) \n", "intent": "Write a program to add the digits\nFor example:\ndigits 123456 = 1+2+3+4+5+6 --> 21\n"}
{"snippet": "fig, ax = r.plot('z', 'absmag_g_r', with_hist=False)\n", "intent": "By default, it will also plot histograms of the column as well.  This can be turned off by setting `with_hist=False`.\n"}
{"snippet": "def func_4():\n    a = 2\n", "intent": "Functions **must** always return something. If you do not specify a return value, Python will automatically return the **None** object:\n"}
{"snippet": "a = 'abc'\nif a is not None:\n    print(a[0])\n", "intent": "Doing the following would break our code in some instances:\n"}
{"snippet": "my_func.__code__.co_argcount\n", "intent": "Attribute **co_argcount** returns the number of arguments (minus any \\* and \\*\\* args)\n"}
{"snippet": "def fib(n):\n    return calc_fib_recurse(n)\nfib = timed(fib)\n", "intent": "And again we decorate it using the long syntax:\n"}
{"snippet": "'cmath' in globals()\n", "intent": "Now let's see if `cmath` and `exp` are in our module (global) namespace:\n"}
{"snippet": "l1 = [1, 2, 3]\nl1_copy = [item for item in l1]\nprint(l1_copy)\n", "intent": "We can use a list comprehension to do exactly what we did in the previous example:\n"}
{"snippet": "iter_items = iter(d.items())\n", "intent": "And to iterate over both the keys and values, dictionaries provide an `items()` iterable:\n"}
{"snippet": "result[0], result[1], result[2]\n", "intent": "So be careful here. If you try to use repeat to create three separate instances of a list, you'll actually end up with shared references:\n"}
{"snippet": "def coroutine(gen_fn):\n    def inner(*args, **kwargs):\n        gen = gen_fn(*args, **kwargs)\n        next(gen)\n        return gen\n    return inner  \n", "intent": "Now, we still need to expand this slightly to accomodate passing arguments to our generator function (coroutine):\n"}
{"snippet": "sort_dict_by_value(composers)\n", "intent": "And we end up with the same end result:\n"}
{"snippet": "d = {\n    'name': 'Python',\n    'age': 27,\n    'created_by': 'Guido van Rossum',\n    'list': [1, 2, 3]\n}\n", "intent": "We can even change how the serialization is rendered (which of course means we may no longer have actual JSON):\n"}
{"snippet": "counts = Counter(p.eye_color for p in persons)\n", "intent": "Let's try the first approach:\n"}
{"snippet": "my_list.extend([8, 9, 'ten'])\nprint(my_list)\n", "intent": "You need to use anothe menthod called `extend()`:\n"}
{"snippet": "alpha<-0.05\nconf.interval.min<-beta.hat.1-qt(alpha/2,df=N-2,lower.tail=FALSE)*sqrt(var.hat.w/S.xx)\nconf.interval.max<-beta.hat.1+qt(alpha/2,df=N-2,lower.tail=FALSE)*sqrt(var.hat.w/S.xx)\n", "intent": "*  Compute the confidence interval for $\\beta_1$ using equation (Eq. 4) and the function `qt`.\n"}
{"snippet": "l = [4, 10, 2]\nl.sort()\n", "intent": "You can use the `sort` method to sort lists:\n"}
{"snippet": "geocodeRequest = \\\n\"https://geocoding.geo.census.gov/geocoder/locations/onelineaddress?address=4600+Silver+Hill+Rd%2C+Suitland%2C+MD+20746&benchmark=9&format=json\"\ngeocodeResponse = requests.get(geocodeRequest)\nprint (type(geocodeResponse))  \ngeocodeResponseJSON = json.loads(geocodeResponse.text)\nprint (type(geocodeResponseJSON))  \nprint(json.dumps(geocodeResponseJSON, indent=4))\n", "intent": "<h2>Example for returntype=locations<h2>\n"}
{"snippet": "def product(x, y, z=3):\n    return x*y*z\n", "intent": "This can work with any other similarly formed function. This is a simple product of the three arguments, 2 unnamed, one named. \n"}
{"snippet": "function mltpl2(x, y)\n    print(\"Blah, blah,... Multiply!\")\n    x * y\nend\n", "intent": "Let's see what happens if we omit the return keyword.\n"}
{"snippet": "using Plots; gr()\nsol = solve(prob,alg_hints = [:stiff],reltol=1e-6)\nplot(sol,denseplot=false)\n", "intent": "Another way to understand stiffness is to look at the solution.\n"}
{"snippet": "class Rocket():\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n    def move_rocket(self, x_increment=0, y_increment=1):\n        self.x += x_increment\n        self.y += y_increment\n", "intent": "This new method will allow the rocket to be moved any amount, in any direction:\n"}
{"snippet": "status = [s if s in guesses else '*' for s in guesses]\nstatus = ''.join(letters_guessed)\nstatus\n", "intent": "And here's how we can accomplish the same thing using list comprehension.\n"}
{"snippet": "heights <- c(1.70, 1.67, 1.75, 1.62, 1.81)\nweights <- c(65, 70, 66, 61, 85)\nplot(sort(heights), weights[order(heights)], type=\"l\")\n", "intent": "Remember the example from the Lecture:\n"}
{"snippet": "x <- seq(-3,3,length.out = 100)\nplot(x, myfunc_vec(x), type=\"l\")\n", "intent": "(c) Plot the function using the vectorized function definition.\n"}
{"snippet": "sort(worker_income, decreasing = TRUE)\n", "intent": "Sort worker's income in descending order\n"}
{"snippet": "merge(sample2[,1:2], averages2[,1:2], by = \"Group.1\", all.y = T)\n", "intent": "Now keep all species on the RIGHT df:\n"}
{"snippet": "even_numbers = (2*n for n in range(10))\nwhile True:\n    try:\n        print(next(even_numbers))\n    except StopIteration:\n        break\n", "intent": "calling `next()` raises a `StopIteration` exception\n"}
{"snippet": "print(s[0:6], s[6:], s[-2:])\n", "intent": "Slicing, more on this later\n"}
{"snippet": "sqrs= [[1,1],[2,4],[3,9],[4,16],[5,25],\n         [6,36],[7,49],[8,64],[9,81],[10,100]]  \ni=6               \nfor j in range(10):\n    if sqrs[j][0]==i:\n        break\nprint \"The square of \",i,\" is \", sqrs[j][1]\n", "intent": "<h3>Example 5.15, Page Number: 98<h3>\n"}
{"snippet": "from __future__ import division\nM = 5; \na = 2; \nF = M*a\nprint \"Force:\", F,\"Newton(N)\"\n", "intent": "<h3>Example 2, page no. 5</h3>\n"}
{"snippet": "from __future__ import division\nimport math\nPi1  =  8000;\nPi2  =  4000;\nPi  =  Pi1  +  Pi2\nphi  =  math.atan((Pi1  -  Pi2)*(3**0.5)/(Pi1  +  Pi2))\npf  =  math.cos(phi)\nprint  \"\\n\\n  Result  \\n\\n\"\nprint  \"\\n  (a)power  input  is  \",round(Pi,2),\"W\"\nprint  \"\\n  (b)power  factor  is  \",round(pf,2)\n", "intent": "<h3>Example 15, page no. 309</h3>\n"}
{"snippet": "I_max=700*10**-3;    \nR_ext=0.7/I_max;\nprint('value of resistor in Ohms for which max current is 700mA = %f'%R_ext)\n", "intent": "<h3>Example 17.7, Page Number: 572<h3>\n"}
{"snippet": "p=1000   \np1=350   \nSg=0.85  \nHa=p*2.31/Sg\nH1=p1*2.31/Sg\nHe=Ha-H1-679.41\nprint('The energy extracted from the fluid = %.2f lbf/in^2' %He)\n", "intent": "<h3>Example 3.10, Page No 55 <h3>\n"}
{"snippet": "from collections import namedtuple\nstruct_book = namedtuple(\"struct_book\", \"name author callno\")\ndef display (b):\n    print b.name, b.author, b.callno  \nb1 = struct_book(\"Let us C\", \"YPK\", 101)\ndisplay ( b1) \n", "intent": "<h3>Passing Structure to a Function , Page number: 378<h3>\n"}
{"snippet": "Voch=10.0             \nslew=0.5              \ntime=Voch/slew        \nprint('Time= %d us'%time)\n", "intent": "<h3>Example No. 3.11, Page No: 134<h3>\n"}
{"snippet": "n=5\nList=[3.0,-2.0,12.0,4.4,3.5]\nSum=0.0\nfor count in range(0,n):\n    Sum+=List[count]\navg=Sum/n\nprint \"The average is %5.2f \\n\\n\" %avg\nfor count in range(0,n):\n    d=List[count]-avg\n    print \"i=%d  x=%5.2f  d=%5.2f\\n\" %(count+1,List[count],d)\n", "intent": "<h3>Example 9.9, Page number: 9.8<h3>\n"}
{"snippet": "x = 0.0\ny = 0.0\nn = int(raw_input(\"Enter Value of n : \"))\nfor i in range(1,n+1):\n    x = x + (1.0/pow(i,2))\n    y = y + (1.0/pow(i,3))\nprint(\"Value of x = %f\"%(x))\nprint(\"\\nValue of y = %f\"%(y))\n", "intent": "<h3>Example 6.14, Page number: 115<h3>\n"}
{"snippet": "from math import  sin,pi\ncnv=pi/180\nBAC = 20*cnv                           \nABC = 130*cnv                    \nACB = 30*cnv   \nR =  500                            \nF1=R*sin(ACB)/sin(ABC)\nF2=R*sin(BAC)/sin(ABC)\nprint \"F1=\",round(F1,2),\"N\"\nprint \"F2=\",round(F2,2),\"N\"\n", "intent": "example 1.5 Page number 12\n"}
{"snippet": "import numpy as np\nimport pylab\nimport comp116\ncheck, report = comp116.start('Midterm2')\n", "intent": "I will set up the environment for you here. Do not modify any of this.\n"}
{"snippet": "def backward(s):\n    return s[::-1]\nbackward('hello')\n", "intent": "We could reverse the string with slicing.\n"}
{"snippet": "friends = ['Curly', 'Moe', 'Larry', 'Tweedle Dee', 'Tweedle Dumb']\n", "intent": "'Curly', 'Moe', 'Larry', 'Tweedle Dee', 'Tweedle Dumb'\n"}
{"snippet": "amazon = rivers[rivers['name'] == 'Amazonas'].geometry.squeeze()\n", "intent": "Another example, extracting the linestring of the Amazon river in South America, we can query through which countries the river flows:\n"}
{"snippet": "lat = '37.24N'\nlon = '115.81W'\nprint(f'Latitude: {lat}, Longitude: {lon} ==> [{lat}, {lon}]')\n", "intent": "We can of course re-order and use the placeholders multiple times:\n"}
{"snippet": "[1, \"cat\", 15.13451, [1,2,3]]\n", "intent": "Python's collections (e.g. `list`) can be heterogeneous -- e.g., can contain objects of different types:\n"}
{"snippet": "attribute versus methods.\n", "intent": "What is the indispensabble element of a class?\n"}
{"snippet": "def make_complex(*args):\n    x, y = args\n    return dict(**locals())\n", "intent": "While any kind of black magic is possible with Python, the most explicit and straightforward manner is preferred.\nFor example, this is bad:\n"}
{"snippet": "xx = -200:0.1:200\nplot(xx,real.(f.(xx)))\n", "intent": "This is difficult as a real integral as the integrand is very oscillatory:\n"}
{"snippet": "Select DISTINCT lpsuppl.'S\nFrom (Select * From P Where COLOR = 'Red' ) as 'redpart', \n    (Select * From S Where CITY = 'London' or CITY = 'Paris') as 'lpsuppl',\n    SPJ as 'spj'\nWHERE lpsuppl.'S\n", "intent": "**8)** Find supplier number (`S\n"}
{"snippet": "teststring = 'Find all of the words in a string that are less than 4 letters'\nresults = [character for character in teststring if character == ' ']\nlen(results)\n", "intent": "Count the number of spaces in a string\n"}
{"snippet": "width=str(width)\nprint(width*height)\n", "intent": "__4)__ Re-define the variable `width` as a string, now repeat the area calculation. What happens? Why?\n"}
{"snippet": "from thinkbayes2 import MakeBinomialPmf\npmf1 = MakeBinomialPmf(n, x1)\npmf2 = MakeBinomialPmf(n, x2)\nmetapmf = Pmf({pmf1:0.3, pmf2:0.7})\nmetapmf.Print()\n", "intent": "One more way to do the same thing is to make a meta-Pmf, which contains the two binomial `Pmf` objects:\n"}
{"snippet": "[belief.Mean() for belief in beliefs]\n", "intent": "After playing each machine 10 times, we have some information about their probabilies:\n"}
{"snippet": "viewer.setStyle({'chain':'A'},{'cartoon': {'color': 'orange'}})\nviewer.show()\n", "intent": "Here we select chain A and apply a cartoon style.\n"}
{"snippet": "our_list = [1,2,3]\nsquared = lambda x: x**2\nprint([squared(x) for x in our_list])\nprint(list(map(lambda x: x**3, our_list)))\n", "intent": "lambdas are anonymous (no formal 'def' statement) functions that allow for a quick function to be declared and called in place.\n"}
{"snippet": "hist(data,breaks=50,xlab=expression('x'[k]*' [miles]'))\n", "intent": "We expect that the $x_k$ data is distributed like a Chauchy function around $x_0$. A first look on the data hints that this is indeed the case.\n"}
{"snippet": "meal = 200.00\ntip_percent = 10\nmeal * tip_percent / 100\n", "intent": "If you want to make it more user friendly you could do the following.\n"}
{"snippet": "from collections import Counter \ndef countDog(s):\n    words = s.lower().split()\n    c = Counter(words)\n    return c['dog']\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "lst = [12,23,34,100,56,67,78,89]\n", "intent": "LOOK AT PICTURE WILL MAKE SENSE IMMEDIATELY \nhttps://www.udemy.com/complete-python-bootcamp/learn/v4/t/lecture/3512788?start=0\n1:56\n"}
{"snippet": "def countDog(sentence):\n    return sentence.lower().count('dog')\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "fM = real(ifft2(c)*n);\n", "intent": "Inverse the Fourier transform.\n"}
{"snippet": "h = @(f,lambda)convol(f, g(lambda));\n", "intent": "Define our denoising operator $h=h_\\la$ (we make explicit the\ndependency on $\\la$):\n$$ h_\\la(f) = g_\\la \\star f. $$\n"}
{"snippet": "t = linspace(-3,3,1024);\nclf; hold on;\nplot(t,t.*psi(t,1)); \nplot(t,t, 'r--'); axis equal;\n", "intent": "Display the thresholding function $\\th_T$.\n"}
{"snippet": "[D,Z,Q] = perform_fast_marching(1./W, pstart);\n", "intent": "Perform the propagation using the Fast Marching.\n"}
{"snippet": "x = [0:n/2 -n/2+1:-1];\n[U,V] = meshgrid(x,x); \nS = sqrt(U.^2+V.^2); \nS(1,1) = 1;\n", "intent": "To compute the final texture, we perform a *spectral integration*, which\ncorresponds to a low pass filtering.\nFourier frequency localizations.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('solutions/inverse_2_deconvolution_variational')\n", "intent": "This numerical tour explores the use of\nSobolev and TV regularization to perform image deconvolution.\n"}
{"snippet": "clf;\nplot_mesh(vertexF,faces);\n", "intent": "Display the flattened mesh.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('toolbox_graph')\naddpath('solutions/meshproc_4_fourier')\n", "intent": "This tour explores the use of the eigenvectors of the Laplacian, for\nfiltering and for compression.\n"}
{"snippet": "MW = cat3(1, (MW(1:2:n,:,:)+MW(2:2:n,:,:))/sqrt(2), (MW(1:2:n,:,:)-MW(2:2:n,:,:))/sqrt(2) );\n", "intent": "average/difference along X\n"}
{"snippet": "Gradf = @(x)x-y+lambda*GradJ(x);\n", "intent": "Gradient of the functional.\n"}
{"snippet": "addpath('toolbox_signal')\naddpath('toolbox_general')\naddpath('solutions/optimaltransp_3_matching_1d')\n", "intent": "This tour details the computation of discrete 1-D optimal transport with\napplication to grayscale image histogram manipulations.\n"}
{"snippet": "r = .98*n/2;\np = 128; % number of points on the curve\ntheta = linspace(0,2*pi,p+1)'; theta(end) = [];\ngamma0 = n/2*(1+1i) +  r*(cos(theta) + 1i*sin(theta));\n", "intent": "Create a circular curve $\\ga_0$.\n"}
{"snippet": "G = @(x)sum( sqrt(sum(x(I).^2)) );\n", "intent": "A block is defined as $B_i = \\{ I_{k,i} \\}_{k=1}^{w^2}$.\nDefine the energy.\n"}
{"snippet": "ProxJ = @(w,lambda)ProjC( w-[lambda*ones(size(w,1),1) zeros(size(w,1),1)] );\n", "intent": "Callback for the proximal operator of $J$.\n"}
{"snippet": "h = exp( -(t.^2)/(2*muopt^2) );\nh = h/sum(h(:));\n", "intent": "Display the results.\ncompute the optimal filter\n"}
{"snippet": "gamma1 = resample(gamma0);\n", "intent": "Initial curve $ \\ga_1(t)$.\n"}
{"snippet": "d  = sqrt(sum(P.^2, 2))\nd1 = sqrt(sum(P1.^2, 2))\nI = find(d >.2)\nI1 = find(d1 >.2)\n", "intent": "Compute the angles of the points with largest energy.\n"}
{"snippet": "def x_trigrams(tokens, x):\n    trigram_measures = TrigramAssocMeasures()\n    finder = TrigramCollocationFinder.from_words(tokens)\n    tri_list = finder.nbest(trigram_measures.pmi, x)\n    return tri_list\n", "intent": "Now you will repeat the previous function, but instead of bi-grams, you will be finding the x best tri-grams, again using PMI.\n"}
{"snippet": "ThreshWav = lambda f, T: iwav(ThreshBlock(wav(f), T))\n", "intent": "Define the wavelet block thresholding operator.\n"}
{"snippet": "faces_euc = compute_delaunay(pstart)\n", "intent": "Compare this Geodesic Delaunay triangulation with the Euclidean\ntriangulation.\n"}
{"snippet": "ProjI = lambda V: V - grad(A(V), options)\n", "intent": "Projection on incompressible flows.\n"}
{"snippet": "imageplot(fftshift(h), 'Filter', 1, 2, 1)\nimageplot(fftshift(hF), 'Fourier transform', 1, 2, 2)\n", "intent": "Display the kernel $h$ and its transform $\\hat h$.\nWe use |fftshift| to center the filter for display.\n"}
{"snippet": "clf; hold on\nh = plot(V(1, [1: end 1]), V(2, [1: end 1]), 'r.-')\nset(h, 'LineWidth', lw); set(h, 'MarkerSize', ms)\nrho = .1\nfor i in 1: k:\n    j = mod(i, k) + 1\n    a = mean(V(: , [i, j]), 2)\n    h = plot([a(1) a(1) + rho*N(1, i)], [a(2) a(2) + rho*N(2, i)], 'k')\n    set(h, 'LineWidth', lw); set(h, 'MarkerSize', ms)\naxis square; axis off\n", "intent": "Display the normals.\n"}
{"snippet": "hausdorff = lambda f, g: sqrt(mean(min(dist(f, g)).^2))\nhausdorff = lambda f, g: hausdorff(f, g) + hausdorff(g, f)\n", "intent": "Compute the Hausdorff distance.\n"}
{"snippet": "imageplot(M0, 'Clean image', 1, 2, 1)\nimageplot(clamp(M), strcat(['Noisy, SNR = ' num2str(pnoisy)]), 1, 2, 2)\n", "intent": "Display the clean and noisy images.\n"}
{"snippet": "gamma = otransp(C, p0, p1)\n", "intent": "Solve the optimal transport.\n"}
{"snippet": "s = [2: n 1]; t = [n 1: n-1]\nd2x = lambda f: f(s, : ) + f(t, : ) - 2*f\nd2y = lambda f: d2x(f')'\ndxy = lambda f: dy(dx(f))\n", "intent": "Define second order derivatives.\n"}
{"snippet": "G(G <-nbound/ 2) = G(G <-nbound/ 2) + nbound\nG(G >nbound/ 2) = G(G >nbound/ 2) - nbound\n", "intent": "Take it modulo |nbound|.\n"}
{"snippet": "Phi  = lambda x: convol(upsample(x, rho), phi_d)\nPhiS = lambda x: downsample(convolS(x, phi_d), rho)\nPsi  = lambda s: convol(upsample(s, rho), phi1_d)*Delta/ 2\nPsiS = lambda s: downsample(convolS(s, phi1_d), rho)*Delta/ 2\nGamma  = lambda u: Phi(u(: , 1)) - Psi(u(: , 2))\nGammaS = lambda y: [PhiS(y), -PsiS(y)]\n", "intent": "Operator $\\Phi_z$, $\\Phi_z^*$, $\\De/2 \\Phi_z'$, $(\\De/2 \\Phi_z')^{*}$,\n$ \\Ga_z = [\\Phi_z, \\De/2 \\Phi_z'] $ and $\\Ga_z^*$.\n"}
{"snippet": "options(repr.plot.width=5, repr.plot.height=3)\nfor (i in (1:s))\n{\n    plot(xr[,i], main=paste(\"Estimated source \n}\n", "intent": "One can display the recovered signals.\n"}
{"snippet": "Thresh <- function(H,T){ psi(energy(H), T)*H }\nThreshBlock <- function(x,T){ iblock(Thresh(block(x), T)) }\n", "intent": "Block thresholding operator.\n"}
{"snippet": "grad = grad_3\ndiv = div_2\na = randn(n,n)\nb = array(0, dim=c(n,n,2))\nb[,,1] = randn(n, n)\nb[,,2] = randn(n, n)\ndotp = function(x,y){sum(x * y)}\nprint(paste(\"Should be 0: \", dotp(grad(a),b) + dotp(a,div(b))))\n", "intent": "We first check that the discretized grad and -div are adjoint one of each other.\n"}
{"snippet": "nablaE = function(W){1./n * t(X) %*% ( SM(X %*% W) -  D)}\n", "intent": "Define its gradients\n  $$ \\nabla E(W) =  \\frac{1}{n} X^\\top ( \\text{SM}(X W) - D ).  $$\n"}
{"snippet": "gamma <- otransp(C, p0, p1)\n", "intent": "Solve the optimal transport.\n"}
{"snippet": "diag(D) <- Inf\nD[is.nan(D)] <- Inf\n", "intent": "Add connexion between a point and itself.\n"}
{"snippet": "for x in range(10):\n    if x % 6 < 3:\n        print \"For he's a jolly good fellow\"\n    else:\n        print \"Which nobody can deny\"\n", "intent": "Bonus Challenge) Without ever repeating a line of code.\n"}
{"snippet": "me = { \"name\": \"James\", \"age\": 39, \n       \"Jobs\": [\"Programmer\", \"Teacher\"] }\n", "intent": "In a dictionary, we look up an element using **another object of our choice**:\n"}
{"snippet": "class MyClass:\n    def someMethod(self, argument):\n        pass\nmy_object = MyClass()\nmy_object.someMethod(value)\n", "intent": "Method: A function which is \"built in\" to a class\n"}
{"snippet": "def vol(rad):\n    volume = 4/3*3.14*rad**3\n    return volume\nprint(vol(3))\n", "intent": "Complete the following questions:\n____\n**Write a function that computes the volume of a sphere given its radius.**\n"}
{"snippet": "odd_arr1=odd_arr.astype(float)\n", "intent": "Convert the type to float\n"}
{"snippet": "def hiJonny(): \n    print(\"Hi Jonny!\")\n", "intent": "* lets say Hi to Jonny\n"}
{"snippet": "gl.SFrame.from_odbc(db, \"DESCRIBE titles\")\n", "intent": "Cloudera Impala uses SQL as its query language. We can run a standard SQL DESCRIBE query to get a sense for what the data looks like.\n"}
{"snippet": "SELECT x1.p AS median\nFROM X AS x1\nWHERE \n    (SELECT COUNT(*) FROM X AS x2 WHERE x2.p > x1.p)\n    =\n    (SELECT COUNT(*) FROM X AS x2 WHERE x2.p < x1.p);\n", "intent": "Write your query here:\n"}
{"snippet": "for C, F in table2:\n    print C, F\n", "intent": "And you can loop through this list as before:\n"}
{"snippet": "def functionname( parameters ):\n", "intent": "A function is a block of reusable code. It has the following syntax: \n"}
{"snippet": "C = (Vc / ec).simplify()\nC\n", "intent": "We express $V_c$ as $V_c = e_c \\cdot C$. Arguably the simplest expression for $C$ is:\n"}
{"snippet": "sentence = 'that rug really tied the room together'\n", "intent": "<div style=\"background: \n<p><strong>Exercise 1.15:</strong>  Reverse the word order in a sentence.\n</div>\n"}
{"snippet": "x = sym.Symbol(\"x\")\ny = sym.Symbol(\"y\")\n", "intent": "In constrast to many other Computer Algebra systems, in SymPy you have to declare symbolic variables explicitly:\n"}
{"snippet": "import numpy as np\nnp.info(np.dot)\n", "intent": "Q2. Get help information for numpy dot function.\n"}
{"snippet": "conn = pg2.connect(host=host, database = db_name, password = password, port = port, user = user)\ncurr = conn.cursor()\ncurr.execute(query)\nresult = curr.fetchall()\ncurr.close()\nconn.close()\nresult\n", "intent": "Display 10 values from `sample_code_number` where diagnosis is `2`\n"}
{"snippet": "x = list(range(3))\nprint(x)\n", "intent": "The way memory works with containers can be important:\n"}
{"snippet": "from thinkstats2 import NormalProbabilityPlot\nNormalProbabilityPlot(spectrum.real, label='real part')\nthinkplot.config(xlabel='normal sample',\n                 ylabel='power',\n                 ylim=[-250, 250],\n                 legend=True,\n                 loc='lower right')\n", "intent": "We can use a normal probability plot to test the distribution of the power spectrum.\n"}
{"snippet": "datatxt = np.genfromtxt('newtest.txt',dtype=str)\n", "intent": "load in data as set of strings and remove duplicates \n"}
{"snippet": "from pyspark.sql.functions import format_number,dayofmonth,hour,dayofyear,month,year,weekofyear,date_format\ndf.select([year(\"Date\").alias(\"year\"), \"High\"]).show()\n", "intent": "What is the max High per year?\n"}
{"snippet": "z=2312-sqrt(4335)*I\n", "intent": "Correction: $2312-4335i$\n"}
{"snippet": "class Person:\n    pass\njohn_doe = Person()\njohn_doe.name = \"Alec\"\njohn_doe.surname = \"Baldwin\"\njohn_doe.year_of_birth = 1958\nprint(john_doe)\nprint(\"%s %s was born in %d.\" %\n      (john_doe.name, john_doe.surname, john_doe.year_of_birth))\n", "intent": "Say we need to model a Person as:\n* Name\n* Surname  \n* Age  \n"}
{"snippet": "months = [\"January\", \"februaJJJJJJry\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\ncaps_months = [];\nfor month in months:\n    caps_months.append(month.capitalize())  \nprint caps_months\n", "intent": "What if you wanted to change the list so that all the letters in the names of the months are in CAPS?\n"}
{"snippet": "storeClient.mv(token, fr = 'vos://temp/newmags.csv', to = 'vos://results')\nprint (\"Results dir: \" + storeClient.ls (token, name='vos://results/'))\n", "intent": "We can move a file or directory:\n"}
{"snippet": "a = 16\nb = 4\nc = a/b\nprint(c, type(c))\nb = 2\n", "intent": "If we divide two integers, the result will be a `float`:\n"}
{"snippet": "def disp_func(func):\n    def new_func(*args, **kwargs):\n        print(\"running function :\", func.__name__)\n        print(\"args :\", args)\n        print(\"kwargs :\", kwargs)\n        result = func(*args, **kwargs) \n        print(\"result :\", result)\n        return result\n    return new_func\n", "intent": "@E\ndef C():\n    code_3\n"}
{"snippet": "plot_greeks_3d([a_1, a_2, vega_2], ['gbm1', 'gbm2', 'vega gbm2'])\n", "intent": "And the one for the second **risk factor**.\n"}
{"snippet": "import math\ndef numberMonths(total,monthly,interest=0.0425,downpay=0):\n    i=interest/12\n    return math.ceil(-math.log(1-i*(total-downpay)/monthly)/math.log(1+i))\ndef monthlyPayment(total,months,interest=0.0425,downpay=0):\n    i=interest/12\n    return round((1+i)**months*(total-downpay)*i/((1+i)**months-1),2)\n", "intent": "The two functions are below. \n"}
{"snippet": "actions = \naction_durations = \ncheetah_video = \n", "intent": "Now, see if you can get the cheetah to run further by taking multiple actions periodically.\n"}
{"snippet": "D = np.asarray([[1,0,0],[0,1,0],[0,0,0]])\nD\n", "intent": "We lose the information of z axis.\n"}
{"snippet": "a = np.floor(10*np.random.random((2,2)))\nb = np.floor(10*np.random.random((2,2)))\nprint a\nprint b\n", "intent": "Several arrays can be stacked together along different axes:\n"}
{"snippet": "SELECT DISTINCT s.sname\nFROM Suppliers s, Parts p, Catalog c\nWHERE p.color = 'red' AND c.sid = s.sid AND c.pid = p.pid\n", "intent": "** 1) Find the names of suppliers who supply some red part. **\n"}
{"snippet": "max_number_of_episodes = 10\nenv = CliffWalkingEnv()\nagent = RandomAgent(range(env.action_space.n))\nexperiment = Experiment(env, agent)\nexperiment.run_agent(max_number_of_episodes, interactive)\n", "intent": "Let's do one with the CliffWalkingEnv environment. This time with 10 episodes.\n"}
{"snippet": "def countDog(string):\n    sentence = string.lower().split()\n    count = 0\n    for word in sentence:\n        if word == 'dog':\n            count += 1\n    return count\n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "x = sc.parallelize([1,2,3], 2)\ny = x.collect()\nprint(x.glom().collect()) \nprint(y)\n", "intent": "Action / To Driver: Return all items in the RDD to the driver in a single list\nStart with this action, since it is used in all of the examples.\n"}
{"snippet": "A = np.empty((3, 4)) \nprint(A)\n", "intent": "You can also create empty (uninitialized) arrays. What does the following produce?\n"}
{"snippet": "females = [is_female(gen) for gen in genders] \nfemales\n", "intent": "Create a new array called `females` that maps through the `genders` array and creates a list of 1's and 0's using your `is_female` function\n"}
{"snippet": "euler = np.array([np.deg2rad(90), np.deg2rad(30), np.deg2rad(0)])\nq = euler_to_quaternion(euler) \nprint(q)\nassert np.array_equal(euler, quaternion_to_euler(q))\n", "intent": "Test the conversion.\n"}
{"snippet": "zf = ZipFile(r'./LA_Hub_Datasets.zip')\nzf.extractall(path=r'./LA_Hub_datasets')\n", "intent": "Use the ZipFile library you imported earlier to extract the contents of the downloaded dataset.\n"}
{"snippet": "num_orders = len(set([row[0] for row in data]))     \n", "intent": "Hint: Examine the data to see if the `quantity` column is relevant to this calculation.\nHint: Think carefully about the simplest way to do this!\n"}
{"snippet": "counts = [12, 30, 34, 14, 5, 4, 1, 0, 0, 0, 0]\nnum = range(10)\nfor c in num:\n    print('%d\\t%d' % (c,counts[c]))\n", "intent": "Of course, you can do better than that. Make it into a nice table.  \n[Tooltip: use string formatting.]\n"}
{"snippet": "dpll_satisfiable((A & B) | (C & ~A) | (B & ~D))\n", "intent": "This is a simple case to highlight that the algorithm actually works.\n"}
{"snippet": "some_list = [1, \"text\", 5, 1.0]\nfor entry in some_list:\n    print(entry)\n", "intent": "In fact, the ``for`` loop can run over any list (more precisely, any iterable, but just google this yourself):\n"}
{"snippet": "def get_taxa_list(names):\n    return(set(names))\n", "intent": "Let's try to run this on all taxa. We can write a little function that returns the set of unique taxa in the database:\n"}
{"snippet": "analyze(jobs_df, 'stems', segments)\n", "intent": "Let's look at the effects of stemming on $\\mbox{TF.IDF}$.\n"}
{"snippet": "import numpy as np\nx = np.array([1, 2, 6, 4, 2, 3, 2])\na,b = np.unique(x,return_inverse=True)\nprint a\nprint b\nprint a[b]\n", "intent": "Q1. Get unique elements and reconstruction indices from x. And reconstruct x.\n"}
{"snippet": "myinst.set_attr(-4)\n", "intent": "We can see that everything works as before, but when we try setting a negative integer \n"}
{"snippet": "psub3 = psub(3)\nprint(\"$(psub3) has type $(typeof(psub3)).\")\n", "intent": "Evaluation at a particular $x$\n"}
{"snippet": "from IPython.display import HTML\nHTML('<iframe width=\"900\" height=\"550\" src=\"https://www.youtube.com/embed/3k72z_WaeXg\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>')\n", "intent": "<img src=\"../../../sources/img/RNN/backpropagation-1.png\">\n"}
{"snippet": "for item in sushi_order:\n    print((\"I'd like to order the {}.\".format(item)))\nprint(\"And hold the wasabi!\")\n", "intent": "Don't forget, you can use the `for` and `in` keywords to loop through a list\n"}
{"snippet": "my_doohicky.some_function.assert_called_once()\nmy_doohicky.some_function.assert_called_with()\n", "intent": "You can also confirm the method was called a certain way:\n"}
{"snippet": "x_dict ={'mina':x}\na.update(x_dict)\n", "intent": "Note: the update function takes the dictionary you want to merge in as a variable.\n"}
{"snippet": "{5: 5, \"yes\": \"yes\", 2.0: 2.0}\n", "intent": "Note that there can be no **slices** since dictionaries have no order.\n"}
{"snippet": "list(map(pow,[2, 3, 4], [10, 11, 12]))\n", "intent": "**Another Example for \\_\\_map\\_\\_**\n"}
{"snippet": "def vol(rad):\n    x = (4 * 3.14 * (r*r*r))/3\n", "intent": "Complete the following questions:\n____\n**Write a function that computes the volume of a sphere given its radius.**\n"}
{"snippet": "H.test <- 0.055\nnu.test <- 0.4\nrho.test <- -0.65\nparams.rHeston <- list(H=H.test,nu=nu.test,rho=rho.test)\n", "intent": "Let's now compute the leverage swap using the forest expansion in the rough Heston model with these parameters.\n"}
{"snippet": "rv.actual[which(as.numeric(vol.actual)>.09)]\n", "intent": "Which point is the outlier?\n"}
{"snippet": "def false_color_urban(x_range, y_range, w, h):\n    cvs = ds.Canvas(plot_width=w, plot_height=h, x_range=x_range, y_range=y_range)\n    r, g, b = [cvs.raster(b).data for b in (band7, band6, band4)]\n    return combine_bands(r, g, b)\n", "intent": "(Red=SWIR 2, Green=SWIR 1, Blue=Red)\n"}
{"snippet": "A = [1,2,3,4]\nB = A\nprint(B)\nB[0] = 10\nprint(A)\n", "intent": "Note, this is also true for Python lists and objects in general\n"}
{"snippet": "r = requests.get(query_url)\n", "intent": "perform get request\n"}
{"snippet": "birthdays = {'Newton' : 1642, 'Darwin' : 1809}\n", "intent": "We create a new dictionary by putting key-value pairs inside curly\nbraces with a colon between the two parts of each pair:\n"}
{"snippet": "e = c.union(d)\nprint('My new set \"e\" is: ', e)\n", "intent": "Find the union between sets 'c' and 'd' and store this in a new set called 'e'.\n"}
{"snippet": "array_opn = np.arange(10)\narray_opn\n", "intent": "* Array with Array\n* Array with Scalar\n* Universal Array Function\n"}
{"snippet": "print('My decimal is {:.2f}'.format(3.1415927))\n", "intent": "There are several formatting options we can use with numerical values. \n"}
{"snippet": "alt.Chart(cars).mark_point().encode(\n    x='Miles_per_Gallon',\n    y='Horsepower',\n    color='Origin'\n)\n", "intent": "A 2D plot allows us to encode two dimensions of the data. Let's look at using color to encode a third:\n"}
{"snippet": "def f_three(z):\n    return math.sin(phase(z) + norm(z))\ndrawComplexFunction(f_three)\nfrom IPython.display import Image, display\ndisplay(Image(\"HW05_f_three.png\", width=400))\n", "intent": "To produce the next picture, think about moving the phase as you go away from the origin...\n"}
{"snippet": "'The first time i appears is at index: ', my_string.find('i')\n", "intent": "We can also find the first instance of a character or group of characters in a string.\n"}
{"snippet": "weather_small.write.mode(\"overwrite\").parquet(\"/tmp/weather_small\")\n", "intent": "Now let's write the `coalesce`d DataFrame and inspect the result on HDFS\n"}
{"snippet": "color_cycle = cycle(colors)\n", "intent": "Define a new object called `color_cycle` which is a `cycle` on the list `colors`.\n"}
{"snippet": "print(SecurityDoor.colour is Door.colour)\n", "intent": "The first check we can do is that class attributes are still global and shared\n"}
{"snippet": "def add (num1, num2):\n    return num1 + num2\n", "intent": "Modify the 'add' function to return the sum of the two numbers\n"}
{"snippet": "r = requests.get(\"https://www.quandl.com/api/v3/datasets/FSE/AFX_X.json?start_date=2017-01-01&end_date=2017-12-31& \\\napi_key=dxpXisifsxgCyjy8xgZs\")\n", "intent": "(keep in mind that the date format is YYYY-MM-DD).\n"}
{"snippet": "HEADLOSS_FLOC = exp.K_MINOR_FLOC_BAFFLE * VELOCITY_FLOC **2 / (2 * pc.gravity) * NUMBER_FLOC_EXPANSIONS\n", "intent": "$$Headloss_{Floc}=\\frac{K_{Minor,FlocBaffle}\\,v_{Floc}^{2}}{2\\,g}\\,N_{FlocExpan}$$\n"}
{"snippet": "response1 = sampleTables.query_to_pandas_safe(query1, max_gb_scanned=10)\nresponse1.head(10)\n", "intent": "What words did Shakespeare use that contain the stem \"laugh\" or \"prais\"?\n"}
{"snippet": "def vol(rad):\n    return (4.0/3) * 3.14 * (rad**3) \nvol(2)\n", "intent": "Complete the following questions:\n____\n**Write a function that computes the volume of a sphere given its radius.**\n"}
{"snippet": "hello = \"hello\\nworld\"\nprint(hello)\n", "intent": "The last sequence, `\\n`, represents the *newline character*. It causes Python to start a new line.\n"}
{"snippet": "import opensignalstools.open as ostOpen\nimport opensignalstools.visualise as ostVis\nimport opensignalstools.detect as ostDetect\nimport numpy\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.io import output_notebook\nfrom bokeh.layouts import gridplot\nfrom bokeh.models import BoxAnnotation\nfrom bokeh.models.tools import *\noutput_notebook(hide_banner=True)\n", "intent": "<p class=\"steps\">1 - Importation of the needed packages</p>\n"}
{"snippet": "print(numpy.sum(a))\nprint(numpy.prod(a))\nprint(numpy.mean(a))\nprint(numpy.var(a))\nprint(numpy.argmax(a))\n", "intent": "Many operations that can be applied to an entire array are defined\n"}
{"snippet": "def count_treffer_index(L):\n    pass\n", "intent": "Nutze enumerate() und andere Skills von oben, um den count der Anzahl von Items in einer Liste auszugeben, deren Wert ihrem Index entspricht.\n"}
{"snippet": "[x for x in range(1,51) if x%3==0]\n", "intent": "___\n**Use a List Comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Chebyshev nodes are defined as:\n$$\nx_k = cos\\left(\\frac{2k-1}{2n} \\pi \\right), k = 1,\\ldots,n.\n$$\nWrite a function to evaluate then for a given $n$.\n"}
{"snippet": "def square(num):\n    pass \nprint (square(2))\nprint (square(3))\n", "intent": "Question:\n    Write a method which can calculate square value of number\nHints:\n    Using the ** operator\n"}
{"snippet": "s2 = s.replace(\"world\", \"python\")\ns3 = s2.replace(\"Hello\",\"monty\")\nprint s\nprint s2\nprint s3\n", "intent": "Find and replace (notice the immutability).\n"}
{"snippet": "def f(x):\n    print(x**2)\n", "intent": "A function that has no `return` statement will always return `None`:\n"}
{"snippet": "print sam.breed\nprint frank.breed\n", "intent": "Now we have created two instances of the Dog class. With two breed types, we can then access these attributes like this:\n"}
{"snippet": "rknl = ReductionKernel(ctx, np.float64,\n        neutral=\"0\",\n        reduce_expr=\"a+b\", map_expr=\"x[i]*x[i]\",\n        arguments=\"double *x\")\n", "intent": "Syntax:\nReductionKernel(context, dtype, netural, reduce_expr, map_expr, arguments)\n"}
{"snippet": "random.sample(l, 2)\n", "intent": "To extract a sample of arbitrary size from a sequence, the __sample__ method can be used, which performs sampling _without replacement_\n"}
{"snippet": "the_vars['S'] = DDZ(the_vars['f'], metric=metric)\n", "intent": "Calculating the solution\n"}
{"snippet": "opt = minimize()\nopt\n", "intent": "This will take some time because we have build a matrix, each matrix element is created via a 3D integration and then we have solve the eigenvalues!\n"}
{"snippet": "S = 'ifo'\nprint(list(S))\n", "intent": "The **list()** function can also be used to convert a string to a list:\n"}
{"snippet": "simulation.reporters = []\nsimulation.reporters.append(PDBReporter('TetraAspDimer_noIons_MDwoHeat.pdb', 100))\nsimulation.reporters.append(StateDataReporter(stdout, 500, step=True, potentialEnergy=True, temperature=True))\nintegrator.setTemperature(target_temperature)\nprint ('Running production MD simulation ', target_temperature)\nsimulation.step(10000)\ndel simulation\n", "intent": "<h2>Production MD at 600 K</h2>\n"}
{"snippet": "myfunction = lambda x: 40 + (x - 40) * 1.50 \\\n    if x > 40 else x\n", "intent": "Below is a lambda function that does the same thing:\n"}
{"snippet": "is.factor(temperature_vector)\nis.ordered(temperature_vector)\nis.factor(factor_temperature_vector)\nis.ordered(factor_temperature_vector)\n", "intent": "* to check whethr it is factor or ordered factor  \n* to convert the vectors into factor vector or ordered factors   \n"}
{"snippet": "x += ['True Detective Season 1',]\n", "intent": "** Check for understanding **: How would it be different if you did: \n    x += ('True Detective Season 1',)\n    x += ['True Detective Season 1',]\n"}
{"snippet": "from IPython.display import Image\nImage(\"/home/huynguyen/Desktop/temp/Algorithm---Data-Structure/recursion/exponentiation.png\")\n", "intent": "(Faster than recursion)\n"}
{"snippet": "x = ['ID', 'State', 'Amount']\n", "intent": "Take advantage of tuple unpacking to enhance readability:\n"}
{"snippet": "def move(V_robot,w_robot):\n    r = 0.1953 / 2\n    L = 0.33\n    w_r = (2 * V_robot + L * w_robot) / (2*r)\n    w_l = (2 * V_robot - L * w_robot) / (2*r)\n    p3dx.move(w_l, w_r)\n", "intent": "We need the code for the motion of the robot with the given linear and angular velocities, as in previous modules.\n"}
{"snippet": "l = [0,0,0]\nl\nl = []\nl = [0]\nl.append(0)\nl.append(0)\nl\n", "intent": "Build this list [0,0,0] two separate ways.\n"}
{"snippet": "machine1 = [2.95, 3.45, 3.50, 3.75, 3.48, 3.26, 3.33, 3.20, 3.16, 3.20, 3.22, 3.38, 3.90, 3.36, 3.25, 3.28, 3.20, 3.22, 2.98, 3.45, 3.70, 3.34, 3.18, 3.35, 3.12]\nmachine2 = [3.22, 3.30, 3.34, 3.28, 3.29, 3.25, 3.30, 3.27, 3.38, 3.34, 3.35, 3.19, 3.35, 3.05, 3.36, 3.28, 3.30, 3.28, 3.30, 3.20, 3.16, 3.33]\ns12 = variance(machine1)\ns22 = variance(machine2)\nprint(s12,s22)\ns12/s22\n", "intent": "$$H_0:\\sigma_1^2=\\sigma_2^2$$\n$$H_a:\\sigma_1^2\\ne\\sigma_2^2$$\n"}
{"snippet": "convert(Int64, '1')\n", "intent": "See what happens when you execute\n```julia\nconvert(Int64, '1')\n```\nand\n```julia\nparse(Int64, '1')\n```\nWhat's the difference?\n"}
{"snippet": "class Stack: \n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def peek(self):\n        return self.items[-1]\n", "intent": "Create a Python module called `my_adts.py` and add the following code.\n"}
{"snippet": "class Sample:\n    pass\nx = Sample()\nprint(type(x))\n", "intent": "Now, let's see how we can use **class**:\n"}
{"snippet": "for i in range(10):\n    print i*i\n", "intent": "Take something to walk through, from the beginning to the end. \"Something\": for example, a list\n"}
{"snippet": "print \"The number of amino acids is\", len(amino_acids)\n", "intent": "<div class=\"btn-group\"><button class=\"btn\" onclick=\"IPython.canopy_exercise.toggle_solution('6')\">Solution</button></div>\n"}
{"snippet": "def primefactorize(n):\n    m = n\n    answer = []\n    while m != 1:\n        for i in range(1,m+1):\n            if isprime(i) and m%i==0:\n                answer.append(i)\n                m = m/i\n                break\n    return answer\n", "intent": "Write a function that finds the prime factorization of a number.\n"}
{"snippet": "def initialize_window():\n    window = turtle.Screen()\n    window.title('Molecular Dynamics 1')\n    window.clear()\n    return window\n", "intent": "Now lets write a function to get our back drop set up.\n"}
{"snippet": "a = np.array([[ 0.0, 0.0, 0.0],\n              [10.0,10.0,10.0],\n              [20.0,20.0,20.0],\n              [30.0,30.0,30.0]])\nb = np.array([[1.0,2.0,3.0]])\nprint (a + b)\nprint ()\nprint (a.shape)\nprint (b.shape)\nprint ((a+b).shape)\n", "intent": "In multiple dimensions, the rule applies but, perhaps, is less immediately intuitive:\n"}
{"snippet": "function my_abs(x::Real)\n    if x >= 0\n        x\n    else\n        -x\n    end\nend\nfunction my_abs(x::Complex)\n    sqrt(real(x)^2 + imag(x)^2)\nend\n", "intent": "[4] Define a method of the function `my_abs` for real numbers, and a method for complex numbers.\n"}
{"snippet": "import scipy.optimize\nres = scipy.optimize.minimize(mylikelihood, x0, method='L-BFGS-B')\n", "intent": "Okay, cool! We're now ready to work with that. \n* Compute the posterior for a few different parameters. How does it compare to the likelihood?\n"}
{"snippet": "fn = katarchive.search_archive(filename='1362743782.h5')\nh5 = katfile.open(fn[0].path_to_file)\n", "intent": "Loading a file from the archive for processing\n"}
{"snippet": "n=len(data)\nfor i in range(n):\n  print (\"I am at element\",i,\" and the value is\", data[i])\n", "intent": "Often we want to run through all the elements of a list. You might remember ```loops``` from last time. Run the code in the cell below.\n"}
{"snippet": "knn_model.query(obama)\n", "intent": "- Who is closest to Obama?\n"}
{"snippet": "lst = [x for x in xrange(0, 50, 3)]\nprint lst\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "import re\ntext = \"<h1> Title </h1>\"\npattern = r'<.*?>'\nmatch = re.search(pattern, text)\nprint(match.group())\n", "intent": "<center><h1> Non-Greedy Match </h1></center>\n"}
{"snippet": "first_type = data_types[0]\nprint(first_type)\n", "intent": "You can access a specific item in a list using its **index** (i.e. position) in the list.  \n**NOTE:** the list index starts with zero.\n"}
{"snippet": "Gamma_tot_leptons = 3*decay_width_massless('nu')+2*decay_width_massless('l')+decay_width_massive('l','tau')\nGamma_tot_quarks = 3*(2*decay_width_massless('down')+decay_width_massless('up')+decay_width_massive('up','c')+decay_width_massive('down','b'))\n", "intent": "2) Calculate the total width of Z in GeV\n"}
{"snippet": "import os\nprint(os.path.exists(\"abc.txt\"))\nwith open(\"abc.txt\", \"w\") as fh:\n    pass  \nprint(os.path.exists(\"abc.txt\"))\nos.remove(\"abc.txt\")\nprint(os.path.exists(\"abc.txt\"))\n", "intent": "`os` provides operating specific operations, mostly about file handling:\n"}
{"snippet": "df = pd.read_sql('SELECT * FROM Visited WHERE dated >= \"1930-01-01\";', conn)\ndf\n", "intent": "we get two results, and if we select the ones that come during or after 1930:\n"}
{"snippet": "strings = ['black','Yellow','ReD','GreeN','BLUe']\nstrings = [i.upper() for i in strings]\nprint strings\n", "intent": "[Hint: python strings can be turned to uppercase by appending: .upper(), e.g 'hello'.upper()]\n"}
{"snippet": "import numpy as np\nstart = (0, 0)\ngoal = (4, 4)\ngrid = np.array([\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0],\n    [0, 1, 0, 1, 0, 0],\n    [0, 0, 0, 1, 1, 0],\n    [0, 0, 0, 1, 0, 0],\n])\n", "intent": "[`Enum`](https://docs.python.org/3/library/enum.html\n"}
{"snippet": "P_0=27.2*0.01\nP_1=28.2*0.01\nNt_0=P_0*n_0\nNt_1=P_1*n_1\nsp_stdev_3y=sp_stdev((Nt_0+Nt_1)/(n_0+n_1),[n_0,n_1])\nz_3y = zscore(P_0, P_1, sp_stdev_3y)\nprint z_3y\nz_3y = zscore(P_1, P_0, sp_stdev_3y)\nprint z_3y\n", "intent": "$P_0 = 27.2, P_1= 28.2$\n"}
{"snippet": "class LinkedListNode():\n", "intent": "<a id=\"linked_lists\"></a> linked lists \n=====================================\n"}
{"snippet": "x = [1]\nold_id = id(x)\nx += [2]\nnew_id = id(x)\nx, old_id == new_id\n", "intent": "But for a list, only update gets a new id, but not reassign.\n"}
{"snippet": "doc4 = nlp(u\"That's an enormous automobile\")\nshow_lemmas(doc4)\n", "intent": "<font color=green>Here the lemma of `meeting` is determined by its Part of Speech tag.</font>\n"}
{"snippet": "lst = []\nfor letter in 'word':\n    lst.append(letter)\nprint(lst)\n", "intent": "[expr(item) for item in iterable]\n"}
{"snippet": "favorite_numbers = [8e-5, 3.1415, 2.718, -1000, 0.0111, 1.0e3, 14.2, -101, 0, 18]\nprint favorite_numbers\n", "intent": "Let's now create a list of our favorite numbers:\n"}
{"snippet": "from IPython.display import Image\nImage('.\\Figs\\EE0404_Lecture8_fig1.png',width=400)\n", "intent": "Filtering usually implies modification of frequency content of an input signal.\n"}
{"snippet": "def is_even(number):\n    if (number % 2) == 0:\n        print(number, \" is even.\")\n    else:\n        print(number, \" is odd.\")\nis_even(3)\n", "intent": "Let's write a function that helps us by deciding if a number is even or odd.\n"}
{"snippet": "K = dR['_{abcd}']*uR['^{abcd}']\nprint(K)\nK.display()\n", "intent": "Then we perform the contraction:\n"}
{"snippet": "graph = XN.plot(XS, ambient_coords=(r,t), fixed_coords={th: pi/2, ph: pi}, \n                number_values=17, plot_points=200, color='green', \n                style={u: '-', v: ':'}, thickness={u: 1, v: 2})\nshow(graph)\n", "intent": "Let us plot the coordinate grid $(u,v)$ in terms of the coordinates $(t,r)$:\n"}
{"snippet": "def countDog(string):\n    count = 0\n    for index, char in enumerate(string):\n        if (string[index:index+3] == 'dog'):\n            count+=1\n        if (len(string)-index <= 3):\n            return count \n", "intent": "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **\n"}
{"snippet": "def inverse(c):\n    k=ord(c)\n    d=122-k+97\n    e=chr(d)\n    return e\nprint inverse('a')\nprint inverse('z')\n", "intent": "Please implement a function called `inverse(c)` that gives you the mapping.\n"}
{"snippet": "dic = {}\nfor inter in range(97,123):\n    char = chr(inter)\n    inver_inter = 122 - (inter - 97)\n    dic[char] = chr(inver_inter)\nprint dic\n", "intent": "Please create the inverse mapping dictionary: `dic`.\n"}
{"snippet": "top = results.filter(lambda x: x[1] > 1000).map(lambda x: (x[2], x)).sortByKey(False).take(10)\n", "intent": "Highest rated with more than `1000` ratings?\n"}
{"snippet": "var_pdfsamples_abc= Var_ABC(threshold=0.005)\nh= hist(var_pdfsamples_abc,range=[0.,2.],bins=51,normed=True)\nplot(xs,ys,lw=2.)\n", "intent": "That's not good! What if we make the threshold smaller?\n"}
{"snippet": "print(\"\\nAdd another shopping destination and list of items to the existing disctionary\")\nshopping_dictionary['SafeWay'] = ['Jorrito','Milk']\nprint(shopping_dictionary)\nprint(\"\\nDelete one shopping destination\")\ndel(shopping_dictionary['Traders Joe'])\nprint(shopping_dictionary)\n", "intent": "- Add a item\n- Delete an item\n"}
{"snippet": "violin.make_audio()\n", "intent": "Here's what it sounds like before transformation:\n"}
{"snippet": "convolved = wave.convolve(response)\nconvolved.normalize()\nconvolved.make_audio()\n", "intent": "Now that we recognize this operation as convolution, we can compute it using the convolve method:\n"}
{"snippet": "output2.max_diff(output3)\n", "intent": "And within floating point error, they are the same:\n"}
{"snippet": "modulated = wave * carrier_wave\n", "intent": "The `*` operator performs elementwise multiplication.\n"}
{"snippet": "sampled = sample(wave, 4)\nsampled.make_audio()\n", "intent": "The result doesn't sound very good.  It has a bunch of extra high frequency components.\n"}
{"snippet": "filtered.make_audio()\n", "intent": "Now if we listen to the sampled/filtered wave, it sounds pretty good.\n"}
{"snippet": "assert count_letters(9) == 4\nassert count_letters(16) == 7\nassert count_letters(56) == 8\nassert count_letters(200) == 10\nassert count_letters(315) == 22\nassert count_letters(638) == 24\nassert count_letters(1000) == 11\n", "intent": "Now write a set of `assert` tests for your `count_letters` function that verifies that it is working as expected.\n"}
{"snippet": "sampled = sample(filtered, factor)\nsampled.make_audio()\n", "intent": "The result contains copies of the spectrum near 20 kHz; they are not very noticeable:\n"}
{"snippet": "spectrum3 = rotate_angle(spectrum, 1)\nplot_three(spectrum3, thresh=50)\n", "intent": "Here it is with the angles rotated by 1 radian.\n"}
{"snippet": "segment.make_audio()\n", "intent": "And here's the segment again.\n"}
{"snippet": "thinkdsp.TriangleSignal(freq=464).make_wave(duration=0.5).make_audio()\n", "intent": "For convenience, here are all the versions together.\nA triangle signal at 464 Hz:\n"}
{"snippet": "c = f(grid) - grid[sigma]\nab = alpha * beta\nc1 = (log(1 - alpha * beta) + log(alpha * beta) * alpha * beta / (1 - alpha * beta)) / (1 - beta)\nc2 = alpha / (1 - alpha * beta)\nv_star(k) = c1 + c2 * log(k)\nc_star(k) = (1 - alpha * beta) * k.^alpha\n", "intent": "Let us compare the solution of the discrete model with the exact solution of the original continuous model.  Here's the exact solution:\n"}
{"snippet": "using Plots\nalpha = 0.9\nT = 200\nx = zeros(T + 1)\nfor t in 1:T\n    x[t+1] = alpha * x[t] + randn()\nend\nplot(x, color=\"blue\")\n", "intent": "Here's one solution\n"}
{"snippet": "Py1 = X * inv(X' * X) * X' * y\n", "intent": "First let's do ordinary projection of $y$ onto the basis spanned by the columns of $X$.\n"}
{"snippet": "def f(string):\n    count = 0\n    for letter in string:\n        if letter == letter.upper() and letter.isalpha():\n            count += 1\n    return count\nf('The Rain in Spain')\n", "intent": "Here's one solution:\n"}
{"snippet": "df$Date <- as.Date(as.yearmon(df$Date))\n", "intent": "**We will convert using the as.Date() method and as.yearmon() method from the zoo package.**\n"}
{"snippet": "n = 0\ni = 0\nwhile n < 1000:\n    n = n + 1\n    i = i + count_letters(n)\nprint (i)\n", "intent": "Finally used your `count_letters` function to solve the original question.\n"}
{"snippet": "from altair import load_dataset\ndata = load_dataset(\"seattle-temps\")\ndata.head()\n", "intent": "The data comes in the form of a Pandas Dataframe:\n"}
{"snippet": "\"ignored_packages\":[],\n\"translate_tabs_to_spaces\": false,\n\"vintage_start_in_command_mode\": true\n", "intent": "Go to **\"Preferences\" --> \"Settings - User\"**, then add:\n"}
{"snippet": "Range('E1').value = Range('A1:C1').vertical.value\n", "intent": "Copy / Paste more than 1 column:\n"}
{"snippet": "s2.name='Daily Temperatures'\ns2.index.name='Weekday'\n", "intent": "<img src=\"files/images/series3.jpg\">\n"}
{"snippet": "def check_prime(number):\n    for i in range(2, int(math.sqrt(number))+1):\n        if number%i == 0:\n            return False\n    return True\ndef largest_factor(number):\n    for i in range(number-1,2,-1):\n        if check_prime(i):\n            if number%i==0:\n                return i\n", "intent": "Problem \nWhat is the largest prime factor of the number 600851475143 ?\n"}
{"snippet": "import datetime as dt\nNOW = dt.datetime(2011,12,10)\n", "intent": "Since recency is calculated for a point in time. The last invoice date is 2011-12-09, this is the date we will use to calculate recency.\n"}
{"snippet": "print(\"There are {:,} unique assets in the training set\".format(mt_df['assetCode'].nunique()))\n", "intent": "> a unique id of an asset\n"}
{"snippet": "z = [99, 99, 99]\nprint(np.concatenate([x, y, z]))\n", "intent": "You can also concatenate more than two arrays at once:\n"}
{"snippet": "dt.strftime('%m/%d/%Y %H:%M')\n", "intent": "Format a datetime string:\n"}
{"snippet": "print(\"Hello, world!\")\n", "intent": "**Exercise 0** (1 point). Run the code cell below. It should display the output string, `Hello, world!`.\n"}
{"snippet": "gen = (x ** 2 for x in xrange(1, 6))\nfor x in gen:\n    print x\n", "intent": "A generator expression is analogous to a comprehension.  A list comprehension is enclosed by [], a generator expression is enclosed by ():\n"}
{"snippet": "for key, value in dict_1.items():\n    print key, value\n", "intent": "Iterate through a dictionary's keys and values:\n"}
{"snippet": "seq = [1, 2, 3]\nfor i in range(len(seq)):\n    val = seq[i]\n    print(val)\n", "intent": "It is very common to iterate through sequences by index with range:\n"}
{"snippet": "seq_3 = [True, False]\nzip(seq_1, seq_2, seq_3)\n", "intent": "Zip takes an arbitrary number of sequences.  The number of elements it produces is determined by the shortest sequence:\n"}
{"snippet": "allFires = Fire.find({})\nallClimates = Climate.find({})\nfireIds = []\nfor climate in allClimates:       \n    results = Fire.find({\"Date\": climate['Date']})\n    for doc in results:\n        fireIds.append(doc['_id'])\n    Climate.update_one({\"_id\": climate.get('_id')}, {\"$set\": {\"fires\": fireIds}}) \n    fireIds = []\n", "intent": "Write a python program that will read the data from Fire data-Part1 and Climate data - Part1 and load them to the new database created in Task B2.\n"}
{"snippet": "from nltk.tokenize import MWETokenizer\nmwe_tokenizer = MWETokenizer(uni_voc)\nmwe_tokens = mwe_tokenizer.tokenize(unigram_tokens)\nprint (mwe_tokens)\n", "intent": "Then, tokenize the <font color=\"brown\"> raw_tex</font> with multi-word expressions.\n"}
{"snippet": "isCreditCard(r\"3[47]\\d{13}\", \"341234567890123\")\n", "intent": "Now it should be easy to figure out the regular expression:\n```python\n    3[47]\\d{13}\n```\n"}
{"snippet": "popularity_model.recommend(users=[users[0]])\n", "intent": "A popularity model makes the same prediction for all users, so provides no personalization.\n"}
{"snippet": "select_cols = np.array([True, False, True]) \nselect_rows = np.array([False, True]) \n", "intent": "For 2D arrays you can select specific columns and specific rows. Passing ':' selects all rows/columns\n"}
{"snippet": "import sys\nprint(sys.version)\npy_ver = sys.version.split('|')[0]\nprint(\"\\n** You appear to be running Python version {}**\".format(py_ver))\n", "intent": "Run the following code cell to determine the version of Python running in this environment. Make a mental note of the Python version\n"}
{"snippet": "f = c(-1,1)\ng = c(2,-1)\nh = 2*f + 3*g\nh\n", "intent": "A linear combination is the vector result of a vector addition and scalar multiplication of vectors.\n"}
{"snippet": "prop.table(table(titanic$Sex, titanic$Survived))\n", "intent": "This represents the proportion of all passengers in each group.\n"}
{"snippet": "sample_means = []\nfor _ in range(10):\n    sample_means.append(customer_features.sample(5).mean())\nsample_means = np.array(sample_means)\n(sample_means.mean(axis=0)-stats['mean'])/stats['mean']\n", "intent": "Let's do it 10 times.\n"}
{"snippet": "meansd = function(x) c(mean=mean(x), sd=sd(x))\nby(SalePrice, MoSold, FUN=meansd)\n", "intent": "Consider the null hypothesis:\n$$H_0: \\text{the mean responses is equal for all groups}$$\n"}
{"snippet": "n = 8675309\nlittle_endian = b'\\x11\\x22\\x33\\x44\\x55'\n", "intent": "Convert the following:\n * 8675309 to 8 bytes in big endian\n * interpret ```b'\\x11\\x22\\x33\\x44\\x55'``` as a little endian integer\n"}
{"snippet": "import numpy as np\nk = np.array(l)\nf(k)\n", "intent": "and print the result, which should be <tt>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</tt>.\n"}
{"snippet": "a = cos(x)**2 + sin(x)**2\nb = x**3 + 3*x**2 + 3*x + 1\na\n", "intent": "http://docs.sympy.org/latest/tutorial/gotchas.html\n"}
{"snippet": "def kelvin_to_celsius(temp):\n    return temp - 273.15\nprint 'absolute zero in Celsius:', kelvin_to_celsius(0.0)\n", "intent": "Now that we've seen how to turn Fahrenheit into Kelvin,\nit's easy to turn Kelvin into Celsius:\n"}
{"snippet": "help(numpy.loadtxt)\n", "intent": "With that in hand,\nlet's look at the help for `numpy.loadtxt`:\n"}
{"snippet": "grades = [\n    ['Student', 'Exam 1', 'Exam 2', 'Exam 3'],\n    ['Thorny', '100', '90', '80'],\n    ['Mac', '88', '99', '111'],\n    ['Farva', '45', '56', '67'],\n    ['Rabbit', '59', '61', '67'],\n    ['Ursula', '73', '79', '83'],\n    ['Foster', '89', '97', '101']\n]\n", "intent": "Consider the following dataset of exam grades, organized as a 2-D table and stored in Python as a \"list of lists\" under the variable name, `grades`.\n"}
{"snippet": "def g(x):\n    return x**2\n", "intent": "If you want a function to do anything useful, you have to return something:\n"}
{"snippet": "print \"*{text}*\".format(text=author)\n", "intent": "Let's start by printing a little bit of text, for instance the author name, surrounded by two asterisks:\n"}
{"snippet": "select * from Survey where quant='sal' and person='lake' or person='roe';\n", "intent": "We can combine `and` with `or`,\nbut we need to be careful about which operator is executed first.\nIf we *don't* use parentheses,\nwe get this:\n"}
{"snippet": "select avg(reading) from Survey where quant='sal';\n", "intent": "`min` and `max` are just two of\nthe aggregation functions built into SQL.\nThree others are `avg`,\n`count`,\nand `sum`:\n"}
{"snippet": "alpha, beta, tau = sp.symbols('alpha beta tau')\n", "intent": "<ls>\n    <li>Using the second eigeinvalue</li>\n</ls>\n"}
{"snippet": "dice_rolls = np.arange(1,7)\ncoin_flips = np.arange(1,3)\nprint(dice_rolls)\nprint(coin_flips)\n", "intent": "How do we simulate random processes using Python?\n"}
{"snippet": "df.groupBy(\"Company\").mean().show()\n", "intent": "This returns a GroupedData object, off of which you can all various methods\n"}
{"snippet": "st = 'Print only the words that start with s in this sentence'\nsplitted = st.splitlines()\nprint(splitted)\nwordsWithS = [word for word in st.split() if word.lower().startswith(\"s\")]\nprint(wordsWithS)\n", "intent": "_____\n**Use <code>for</code>, .split(), and <code>if</code> to create a Statement that will print out words that start with 's':**\n"}
{"snippet": "def multiply(numbers):  \n    res = 1\n    for i in numbers:\n        res = res * i\n    return res\n", "intent": "____\n**Write a Python function to multiply all the numbers in a list.**\n    Sample List : [1, 2, 3, -4]\n    Expected Output : -24\n"}
{"snippet": "va.set_block_size(10)\nva.vizarray(checkerboard(20))\n", "intent": "Use `vizarray` to visualize a checkerboard of `size=20` with a block size of `10px`.\n"}
{"snippet": "import numpy as np\nimport numpy.linalg\nw, v = np.linalg.eig(np.array([[-1., 0., 0.], [0., 1.84, -0.28], [0., -0.28, 1.84]]));\nw\n", "intent": "**Solution**\n1. We need to simply solve an eigenvalue problem.\n"}
{"snippet": "def exercise5b():\n    init_accumulator \n    def binop(acc, scientist):\n        return \n    return tz.reduceby('gender', binop, scientists, init_accumulator)\nassert exercise5b() == {'M': 3, 'F': 3}, \"FIX THIS\"\n", "intent": "* hint: the accumulator is not map but an integer\n"}
{"snippet": "def max_pct(beer1, beer2):\n    return FIX_ME \nbeer_max_pct = rdd_beers.reduce(max_pct) \nassert beer_max_pct[3] == 26.0\n", "intent": "Which beer is the strongest one? (highest alcohol percentage). Use `reduce` first\n"}
{"snippet": "wordsList = ['cat', 'elephant', 'rat', 'rat', 'cat']\nwordsRDD = sc.parallelize(wordsList, 4)\nprint type(wordsRDD)\n", "intent": "We'll start by generating a base RDD by using a Python list and the `sc.parallelize` method.  Then we'll print out the type of the base RDD.\n"}
{"snippet": "shakeWordsRDD = shakespeareWordsRDD.filter(lambda word: len(word) > 0)\nshakeWordCount = shakeWordsRDD.count()\nprint shakeWordCount\n", "intent": "** (4e) Remove empty elements **\nThe next step is to filter out the empty elements.  Remove all entries where the word is `''`.\n"}
{"snippet": "print 'Hello'+'world'\n", "intent": "To add two strings together - to do this you just type the first string, an addition sign, the second string.\n"}
{"snippet": "def vowel_counter(word):\n    vowels = 'aeiou'\n    vowel_count = 0\n    for char in word:\n        if char in vowels:\n            vowel_count += 1\n    return vowel_count\nprint vowel_counter('hello')\nprint vowel_counter('specialist')\nprint vowel_counter('insanely')\n", "intent": "---\n<a id='functions'></a>\n---\nTry it out on three words.\n"}
{"snippet": "sales_data['volume_sold'][0:10]\n", "intent": "**3.A Print out the first 10 items of the 'volume_sold' column.**\n"}
{"snippet": "r = requests.get(root_url)\npage_text = r.text\nsoup = bs(page_text, \"lxml\")\nprint soup.prettify()[7600:8000]\n", "intent": "Now, for our first interaction with `requests` and `BeautifulSoup`. We're going to request the web page, and then load it into a BS object.\n"}
{"snippet": "va.set_block_size(5)\nva.vizarray(checkerboard(27))\n", "intent": "Use `vizarray` to visualize a checkerboard of `size=27` with a block size of `5px`.\n"}
{"snippet": "def good_append(any_list=None):\n    if any_list is None:\n         any_list = []\n    any_list.append(1)\n    return any_list\nprint(good_append())\nprint(good_append())\nprint(good_append())\nprint(good_append())\n", "intent": "The default value should generally be `None` which is immutable and initialize an empty container if needed.\n"}
{"snippet": "nb_bins = int(numpy.ceil(radii.max()))\nhisto_range = [0, nb_bins]\nhistogram=Histogramnd(sample=radii.ravel(),\n                      n_bins=nb_bins,\n                      histo_range=histo_range)\n", "intent": "documentation :\n   - http://www.silx.org/doc/silx/dev/modules/math/histogram.html\n"}
{"snippet": "def digits_to_num(digits):\n    return reduce(lambda i,x: 10*i + x, digits)\n", "intent": "Use reduce to take a list of digits and return the number that they\ncorrespond to. *Do not convert the integers to strings!* \n"}
{"snippet": "adjust_time(67, 55, 100)\n", "intent": "As defined, one *must* pass three values to `adjust_time` for `s`, `m`, and `h`:\n"}
{"snippet": "dropped = 2\nsum(np.sort(c)[dropped:])/(len(c)-2)\n", "intent": "**Example**: Suppose `c` represents scores. Compute the average score when **two drops** are allowed.\n"}
{"snippet": "D = 1, 3.14, 'hello', np.array([1, 2, 3])\nD\n", "intent": "The parentheses make it very clear what is being defined, but they are not necessary.  For example, one could define another `tuple` via\n"}
{"snippet": "expr = 5*sp.sin(x) + 3*sp.sec(y(x)) - y(x) + x**2 - 3\nexpr\n", "intent": "Then we represent the equation by a single expression and differentiate:\n"}
{"snippet": "C1, C2, C = sy.symbols('C1 C2 C')\nsol = sol.rhs.subs(C1, 1).subs(C2, C)\nsol\n", "intent": "One of these constants arbitrary.  Let's set $C_1$ to 1 and $C_2$ to C.\n"}
{"snippet": "c = similar(a)\nd = zeros(a)\ne = ones(a)\nprintln(c); println(d); println(e)\n", "intent": "We can also make an array of a similar size and shape via the function `similar`, or make an array of zeros/ones with `zeros` or `ones` respectively:\n"}
{"snippet": "va.set_block_size(10)\nva.vizarray(blocks(20))\n", "intent": "Use `vizarray` to visualize a block arra of `size=20` with a block size of `10px`.\n"}
{"snippet": "abstract AbstractStudent <: Person\n", "intent": "You can define type heirarchies on abstract types. See the beautiful explanation at: http://docs.julialang.org/en/release-0.5/manual/types/\n"}
{"snippet": "type Foo{T} <: AbstractFoo\n    a\n    b::Int\n    c::T\n    d::Vector{T}\n    e::T\nend\n", "intent": "where the `@extend` macro generates the type-definition:\n"}
{"snippet": "function timetest()\n    a = 3.0\n    @time for i = 1:4\n        a += i\n    end\nend\ntimetest() \ntimetest()\n", "intent": "However, if we put this in a function, it will optimize (in fact, it will optimize away the loop and stick in the answer)\n"}
{"snippet": "t0 = TimeStep(0.0, Increment([1, 2, 3, 4]))\nt1 = TimeStep(0.5, Increment([2, 3, 4, 5]))\nt2 = TimeStep(1.0, Increment([1, 1, 1, 1]))\nfs2[\"time series\"] = [t0, t1, t2]\ninfo(\"time on last timestep: $(fs2[\"time series\"][end].time)\")\n", "intent": "Creating new field with several time steps defined can also be done compactly. Each tuple has time and increment data.\n"}
{"snippet": "Basis <: ContinuousField\n", "intent": "Yep, it's just continuous field:\n"}
{"snippet": "Employees = pd.read_excel('/home/data/AdventureWorks/Employees.xls')\nTerritory = pd.read_excel('/home/data/AdventureWorks/SalesTerritory.xls')\nCustomers = pd.read_excel('/home/data/AdventureWorks/Customers.xls')\nOrders = pd.read_excel('/home/data/AdventureWorks/ItemsOrdered.xls')\n", "intent": "The Employees, Territory, Customers, and Orders tables are the same as those we used in class.\n"}
{"snippet": "myList = [1, 20]\nprint(\"Before append():\", myList)\nmyList.append(10)\nprint(\"After append():\", myList)\n", "intent": "The `append(x)` method adds the element `x` to the end of the list:\n"}
{"snippet": "combinations = []\nfor x in range(5):\n    for y in range(5):\n        if (x != y):\n            combinations.append((x, y))\nprint(combinations)\n", "intent": "Example 2: Create a tuple that have all different numbers combination between 2 array range from 0 to 4.\n"}
{"snippet": "import numpy as np\nno_of_seats_per_class = [100, 80, 60, 90]  \nno_of_students_per_class = [82, 34, 49, 88]  \n", "intent": "Let's practice with numpy array operations:\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Compute the average of `Acceleration`, `Displacement` and `Horsepower`, grouped by `Origin`:\n"}
{"snippet": "V, r = symbols('V,r', real=True)\n4*pi/3 * r**3\n", "intent": "In the last section you solved for the radius of a sphere given its volume\n"}
{"snippet": "x = symbols('x')\nA = Matrix([[1, 1], [1, 0]])\nM = Matrix([[3, 10, -30], [0, 3, 0], [0, 2, -3]])\nN = Matrix([[-1, -2, 0, 2], [-1, -1, 2, 1], [0, 0, 2, 0], [-1, -2, 2, 2]])\n", "intent": "Let's create some square matrices, which we will use throughout the exercises.\n"}
{"snippet": "def cubic():\n    return solveset(x**3 + a*x**2 + b*x + c, x)\ncubic()\n", "intent": "Write a function that computes the general solution to the cubic $x^3 + ax^2 + bx + c$.\n"}
{"snippet": "from sympy import sin,cos\nsin(a)**2 + cos(a)**2 + b\n", "intent": "ou impliquant les fonctions de SymPy:\n"}
{"snippet": "from __future__ import division, print_function   \nfrom sympy import init_printing\ninit_printing(use_latex='mathjax',use_unicode=False)  \n", "intent": "$$\n\\def\\CC{\\bf C}\n\\def\\QQ{\\bf Q}\n\\def\\RR{\\bf R}\n\\def\\ZZ{\\bf Z}\n\\def\\NN{\\bf N}\n$$\n"}
{"snippet": "from sympy import I\nM = Matrix(( (1,2+I,5), (3,4,0) ))\nM\n", "intent": "La transposition d'une matrice se fait avec `.transpose()` :\n"}
{"snippet": "from sympy import *\ninit_printing(pretty_print=True, use_latex='mathjax')\n", "intent": "Importer toutes les fonctions de Sympy:\n"}
{"snippet": "from sympy.abc import theta,phi\nfrom sympy import pi,cos,sin\nx = cos(theta)*sin(phi)\ny = sin(theta)*sin(phi)\nz = cos(theta)\nplot3d_parametric_surface(x,y,z,(theta,0,pi), (phi,0,pi))\n", "intent": "$$\\vec r(\\theta,\\phi) = (\\cos\\theta \\sin\\phi, \\sin\\theta \\sin \\phi, \\cos\\phi), \\quad 0 \\leq \\theta < 2\\pi, 0 \\leq \\phi \\leq \\pi.$$\n"}
{"snippet": "l = [1,2,2,2,2,3,3,3,1,2,1,12,3,2,32,1,21,1,223,1]\nCounter(l)\n", "intent": "**Counter() com listas**\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Find the maximum `Acceleration` and `Displacement` grouped by `Origin` and `Cylinders`:\n"}
{"snippet": "interact(f, x=(0.0,10.0,0.01));\n", "intent": "O tamanho do passo pode ser alterado passando um terceiro elemento na tupla.\n"}
{"snippet": "x = np.ones((4,7))\nprint (x)\ny = np.full((4,7), 4.3)\nprint (y)\nz = x+y\nprint ()\nprint (z)\n", "intent": "<img src=\"image/matrix-sum.png\">\n"}
{"snippet": "def ran_check(num,low,high):\n    if num >= low and num <=high:\n        print('the number is in a given range')\n    else:\n        print('the number is not in a given range')\n", "intent": "___\n**Write a function that checks whether a number is in a given range (Inclusive of high and low)**\n"}
{"snippet": "l = [1,2,[3,4,'hello']]\nl[2][2]='goodbye'\nl\n", "intent": "Reassign 'hello' in this nested list to say 'goodbye' item in this list:\n"}
{"snippet": "preg.outcome.value_counts().sort_index()\n", "intent": "Count the number of times each value occurs.\n"}
{"snippet": "import thinkstats2\nhist = thinkstats2.Hist([1, 2, 2, 3, 5])\nhist\n", "intent": "Or you can use the `Hist` object provided by `thinkstats2`:\n"}
{"snippet": "def CohenEffectSize(group1, group2):\n    diff = group1.mean() - group2.mean()\n    var1 = group1.var()\n    var2 = group2.var()\n    n1, n2 = len(group1), len(group2)\n    pooled_var = (n1 * var1 + n2 * var2) / (n1 + n2)\n    d = diff / np.sqrt(pooled_var)\n    return d\n", "intent": "This functon computes the Cohen effect size, which is the difference in means expressed in number of standard deviations:\n"}
{"snippet": "CentralMoment(female_heights, 1), CentralMoment(female_heights, 2), CentralMoment(female_heights, 3)\n", "intent": "The first central moment is approximately 0.  The second central moment is the variance.\n"}
{"snippet": "adult_weights = df.wtkg2.dropna()\npdf = thinkstats2.EstimatedPdf(adult_weights)\nthinkplot.Pdf(pdf, label='Adult weight')\nthinkplot.Config(xlabel='Adult weight (kg)', ylabel='PDF')\n", "intent": "Now let's look at adult weights from the BRFSS.  The distribution looks skewed to the right.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Compute the number of cars, grouped by `Year` and `Cylinders` and unstack the result:\n"}
{"snippet": "mean_heights = [group.htm3.mean() for i, group in groups]\ncdfs = [thinkstats2.Cdf(group.wtkg2) for i, group in groups]\n", "intent": "Now we can compute the CDF of weight within each group.\n"}
{"snippet": "groupby = df.groupby('height_decile')\n", "intent": "And then group by `height_decile`\n"}
{"snippet": "hist = thinkstats2.Hist(live.prglngth, label='prglngth')\nthinkplot.Hist(hist)\nthinkplot.Config(xlabel='weeks', ylabel='Count')\n", "intent": "As an exercise, plot the histogram of pregnancy lengths (column `prglngth`).\n"}
{"snippet": "df['GOOGLE_RANK'].head()\n", "intent": "Cleanup `GOOGLE_RANK` to be a number or `nan`.\n"}
{"snippet": "from ctx import timed_block\ndef timed(fn):\n    @wraps(fn)\n    def wrapper(*args, **kw):\n        with timed_block(fn.__name__):\n            return fn(*args, **kw)\n    return wrapper\n", "intent": "Rewrite your decorator using `timed_block` context manager.\n"}
{"snippet": "def swap(x, y):\n    s = x < y\n    return x * s + y * (1 - s), y * s + x * (1 - s)\n", "intent": "this is Python equivalent\n"}
{"snippet": "out=[]\nb=scipy.stats.bernoulli(.5) \nfor i in range(500): \n    xs = b.rvs(100) \n    phat = mean(xs) \n    out.append(abs(phat-0.5) < 0.5*0.20 ) \nprint 'Percentage of tries within 20 interval = %3.2f'%(100*sum(out)/float(len(out) ))\n", "intent": "Let's keep doing this and see if we can get within this interval 95% of the time.\n"}
{"snippet": "bloom.add('hello world!')\nbloom.bitarray\n", "intent": "Next, we will add a new value to the bloom filter, 'hello world!'\n"}
{"snippet": "sll.insert(data=[4, 5, 6])\nsll.insert(data=[7, 8, 9])\nprint(sll)\n", "intent": "Before we discuss the `search` method in the next section, let's add two more nodes to our linked list: \n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Compute the min and max `Miles_per_Gallon` grouped by `Origin`:\n"}
{"snippet": "p = figure(plot_width=400, plot_height=400)\np.square([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], size=[10, 15, 20, 25, 30], color=\"firebrick\", alpha=0.6)\nshow(p) \n", "intent": "To scatter square markers instead of circles, you can use the `square` method on figures. \n"}
{"snippet": "hear(tell('July'), eve1c)\n", "intent": "What about Albert?  After hearing Eve's statement he finally knows:\n"}
{"snippet": "(-b + (b**2 - 4*a*c)) / (2 * a)\n", "intent": "Let's try something more interesting:\n"}
{"snippet": "import textwrap\ndef logic(sentences, width=80): \n    \"Match the rules against each sentence in text, and print each result.\"\n    for s in map(clean, sentences):\n        logic, defs = match_rules(s, rules, {})\n        print('\\n' + textwrap.fill('English: ' + s +'.', width), '\\n\\nLogic:', logic)\n        for P in sorted(defs):\n            print('{}: {}'.format(P, defs[P]))\nlogic(sentences)\n", "intent": "Here are some more test sentences and a top-level function to handle them:\n"}
{"snippet": "val variants: RDD[VariantContext] = sparkContext.adamVCFLoad(vcfFile, dict = None)\n", "intent": "Load the input file using the `VariantContext` and convert into ADAM's schema\n"}
{"snippet": "val rdd = sc.cassandraTable(\"test\", \"kv\")\n", "intent": "Use the `sc.cassandraTable` method to view this table as a Spark `RDD`:\n_This method will issue a full table load into Spark_\n"}
{"snippet": "val array:Array[(String, Int, Int)] = result((\"7a0cfacd-4cbf-4d6d-977f-d8fb83afb428\", \"collect\")).\n                                      asInstanceOf[Array[(String, (Int, Int))]].\n                                      map{ case (i, (j,k)) => (i,j,k) }\n", "intent": "Finally, we can get the final result out of the last box.\n"}
{"snippet": "val colored = Seq((51.31, 0.71, 20, \"red\"), (51.31, 0.72, 10, \"blue\"), (51.31, 0.73, 100, \"yellow\"))\n", "intent": "We can create such dataset using 4-uples\n"}
{"snippet": "val minDate = geoJsons.sorted.head._1\nLineChart(geoJsons.map(_._1) zip geoJsons.map(_._1 - minDate).toList.sorted)\n", "intent": "This should give us some help to understand how the data is structured\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Compute the range of cylinders (`range` = max - min) grouped by `Origin` and name the resulting column `range`:\n"}
{"snippet": "from IPython.display import display\ndisplay(m)\n", "intent": "By default, some observation noise is added to the model. The functions `display` and `plot` give an insight of the model we have just built:\n"}
{"snippet": "re.findall(r'([\\w.-]+)@[\\w.-]+', s)\n", "intent": "If the regular expression pattern includes a **single match group**, only the matching portion is returned:\n"}
{"snippet": "mnist_training[\"label\"] = mnist_training[\"label\"].asfactor()\nmnist_testing[\"label\"] = mnist_testing[\"label\"].asfactor()\n", "intent": "Change the \"label\" column to a factor (i.e. categorical feature).\n"}
{"snippet": "rf_fit1.train(x=x, y=y, training_frame=train)\n", "intent": "Now that `rf_fit1` object is initialized, we can train the model:\n"}
{"snippet": "statusgreen = ledgreen.dir(mraa.DIR_OUT)\nstatusred = ledred.dir(mraa.DIR_OUT)\n", "intent": "Bloc3 : Configuration des broches portant lesLEDs\n"}
{"snippet": "largest = max(deathsInBrazil, deathsInPortugal)\nsmallest = min(deathsInBrazil, deathsInPortugal)\ndeathsRange = largest - smallest\ndeathsRange\n", "intent": "The **range** of a set of values is the difference between the maximum and the minimum.\n"}
{"snippet": "my_matrix = np.array([[1, 2, 3], [4, 5, 6]])\nprint my_matrix\n", "intent": "2D arrays are accessed similarly by referring to the row and column index separated by a comma:\n"}
{"snippet": "import math\nprint lasso_coordinate_descent_step(1, np.array([[3./math.sqrt(13),1./math.sqrt(10)],[2./math.sqrt(13),3./math.sqrt(10)]]), \n                                   np.array([1., 1.]), np.array([1., 4.]), 0.1)\n", "intent": "To test the function, run the following cell:\n"}
{"snippet": "my_3D_array = np.arange(70)\nmy_3D_array.shape = (2, 7, 5)\nmy_3D_array\n", "intent": "<h2>Three Dimensional Arrays</h2>\n"}
{"snippet": "cars.groupby(['Year'])['Miles_per_Gallon'].mean()\n", "intent": "Here is the average `Miles_per_Gallon`, grouped by `Year`:\n"}
{"snippet": "temp = np.arange(5)\nnp.split(temp,1)\n", "intent": "for information, please see: http://docs.scipy.org/doc/numpy/reference/generated/numpy.split.html\n"}
{"snippet": "d = {'k1':1,'k2':2}\n", "intent": "Dictionaries in Python are an implementation of a hash table. They operate with keys and values, for example:\n"}
{"snippet": "a = DoublyLinkedListNode(1)\nb = DoublyLinkedListNode(2)\nc = DoublyLinkedListNode(3)\n", "intent": "Now that we have our node that can reference next *and* previous values, let's begin to build out our linked list!\n"}
{"snippet": "def nth_to_last_node(n, head):\n    pass\n", "intent": "Fill out your solution below:\n"}
{"snippet": "def fib_rec(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib_rec(n-1) + fib_rec(n-2)\n", "intent": "The recursive solution is exponential time Big-O , with O(2^n). However, its a very simple and basic implementation to consider:\n"}
{"snippet": "def fib_iter(n):\n    pass\n", "intent": "Implement the solution with simple iteration.\n"}
{"snippet": "pluralLengths = (pluralRDD\n                 .map(lambda x:len(x))\n                 .collect())\nprint pluralLengths\n", "intent": "Now use `map()` and a `lambda` function to return the number of characters in each word.  We'll `collect` this result directly into a variable.\n"}
{"snippet": "pluralRDD = wordsRDD.map(makePlural)  \nprint pluralRDD.collect()\n", "intent": "Now pass each item in the base RDD into a [map()](http://spark.apache.org/docs/latest/api/python/pyspark.html\n"}
{"snippet": "df = pd.read_sql(sql, con=engine)\ndf\n", "intent": "Print a table with `CustomerID` and `Total Revenue`. You will need to use data from 3 tables.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Show that the average z-scores for `Miles_per_Gallon` grouped by year are all zero:\n"}
{"snippet": "import random\nalpha = 'abcdefghijklmnopqrstuvwxyz'\n", "intent": "String can be turned into lists and tuples:\n"}
{"snippet": "ne = conx.get('_sig=jet(\"ppf/KY6/NER\", 80812)') \nne_R = conx.get('dim_of(_sig,0)') \nne_t = conx.get('dim_of(_sig,1)') \n", "intent": "Let's have a look to a more complicated data, 2D dimensionals\n"}
{"snippet": "def coax_maximum_power(a, b, Emax=3.0e6):\n    Vp = Emax*a*log(b/a)\n    Z0 = coax_char_impedance(a, b)\n    return Vp**2 / (2*Z0)\n", "intent": "Let's plot together the attenuation and the power handling vs characteristic impedance vs Z0\n"}
{"snippet": "a0,omega,kappa = symbols('a0,omega,kappa')\nai=a0*(1+kappa*(1-sqrt(1/tau)))**2\nfor diff_count in range(0,5):\n    mth, tex = format_deriv('a_i',diff_count, 0, diff(ai, tau, diff_count))\n    display(mth)\n", "intent": "Derivatives of $a_i(\\tau)$\n==============\n"}
{"snippet": "import numpy as np\nprint(np.__version__)\n", "intent": "Numpy is the primary way in python to handle matrices/vectors\n"}
{"snippet": "log_details = False\n", "intent": "Set log_details to True if you want to see the details of extraction.\n"}
{"snippet": "from nipype.interfaces import fsl\nbet_mem = mem.cache(fsl.BET)\n", "intent": "If we want to ask for caching for the ``BET`` interface, we can use ``cache`` method that takes interfaces classes as an argument.\n"}
{"snippet": "def filter_words(word_list, letter):\n    return list(filter(lambda word : word[0]==letter, word_list))\nl = ['hello','are','cat','dog','ham','hi','go','to','heart']\nfilter_words(l,'h')\n", "intent": "Use filter to return the words from a list of words which start with a target letter.\n"}
{"snippet": "def multiply(numbers):\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result\nprint (multiply([1, 2, 3, -4]))    \n", "intent": "____\n**Write a Python function to multiply all the numbers in a list.**\n    Sample List : [1, 2, 3, -4]\n    Expected Output : -24\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Show that the standard deviation of the z-scores for `Miles_per_Gallon` grouped by year are all 1.0:\n"}
{"snippet": "lst2 = [x for x in range(1, 50) if x % 3 == 0]\nlst2\n", "intent": "___\n**Use List comprehension to create a list of all numbers between 1 and 50 that are divisible by 3.**\n"}
{"snippet": "with silx.io.open(\"data/medipix.edf\") as my_file:\n    img = my_file[\"scan_0/instrument/detector_0/data\"][0]\nimshow(np.log(img))\n", "intent": "Lets load an image, and sum all samples along the horizontal dimension to get a 1D curve.\n"}
{"snippet": "y.shape = (4, 20, -1)\nprint(y.shape)\n", "intent": "NumPy can even automatically figure out the size of at most one dimension for you.\n"}
{"snippet": "arr = np.zeros((4,4,3), dtype=int)\narr.dtype\n", "intent": "If you need integer values, you can specify a data type with the `dtype` argument:\n"}
{"snippet": "np.all(a[idx] == a[indices])\n", "intent": "In this case, selecting from an array using a boolean array or an array of indices is equivalent:\n"}
{"snippet": "sentence3 = 'If only Bradley\\'s arm was longer. Best photo ever. \n", "intent": "TODO: Tokenize the follow sentence \n"}
{"snippet": "docs = ['System that replaces human intuition with algorithms outperforms human teams',\n           'MIT researchers aim to take the human element out of big-data analysis', \n           'We view the Data Science Machine as a natural complement to human intelligence']\n", "intent": "Exercises:\n---\n1. Write a function that would give the Bag of Words Representation for the following documents\n"}
{"snippet": "analysis_path = os.path.join(workspace_path, 'analysis')\n", "intent": "We had previously analyzed training data to produce statistics and vocabularies. These will be used during training.\n"}
{"snippet": "from google.datalab import Context\nimport random, string\nproject = Context.default().project_id\nsuffix = ''.join(random.choice(string.lowercase) for _ in range(5))\nsample_bucket_name = project + '-datalab-samples-' + suffix\nsample_bucket_path = 'gs://' + sample_bucket_name\nsample_bucket_object = sample_bucket_path + '/Hello.txt'\nprint('Bucket: ' + sample_bucket_path)\nprint('Object: ' + sample_bucket_object)\n", "intent": "First, we will get our project name so we can construct an appropriate path to Cloud Storage. Run this code in your own project:\n"}
{"snippet": "cars['Cylinders'] = np.where(np.random.rand(len(cars)) > 0.8, np.nan, cars['Cylinders'])\ncars.Cylinders\n", "intent": "Let's introduce some missing values into the `Cylinders` column:\n"}
{"snippet": "beer_card = Card('7', 'diamonds')\nbeer_card\n", "intent": "You can instantiate a `Card` object as if `Card` were a class.\nBTW: [beer card](https://en.wikipedia.org/wiki/Beer_card)\n"}
{"snippet": "def mean(numbers):\n    return sum(numbers) / len(numbers)\n", "intent": "$$\\mu=\\frac{1}{N}\\cdot\\sum_{i=1}^NX_i$$\n"}
{"snippet": "def normalize(s):\n    return (s-mean(s))/std(s)\ns_ = ni.smooth(s,10) \ns_ = s_[::10]\nt_ = t[::10]\ns_ = normalize(s_)\nfigure(figsize=(16,3))\nplot(t_, s_,'k')\n", "intent": "Execute: \n* a) smooth the signal and normalize\n* b) ressample the signal\n"}
{"snippet": "textRDD = sc.newAPIHadoopFile('../Data/Moby-Dick.txt',\n                              'org.apache.hadoop.mapreduce.lib.input.TextInputFormat',\n                              'org.apache.hadoop.io.LongWritable',\n                              'org.apache.hadoop.io.Text',\n                               conf={'textinputformat.record.delimiter': \"\\r\\n\\r\\n\"}) \\\n            .map(lambda x: x[1])\nsentences=textRDD.flatMap(lambda x: x.split(\". \"))\n", "intent": "The code for reading the file and splitting it into sentences is shown below:\n"}
{"snippet": "Interm=RDD.map(lambda x: taketime(x))\n", "intent": "In the next cell we define the `map` operation. Note that this cell takes very little time.\n"}
{"snippet": "rdd = sc.parallelize([(1,2), (2,4), (2,6)])\nprint \"Original RDD :\", rdd.collect()\nprint \"After transformation : \", rdd.mapValues(lambda x: x*2).collect()\n", "intent": "Apply func to each value of RDD without changing the key. \n"}
{"snippet": "f=abs(x-4)\nplot(x,f);\n", "intent": "We now take an unrelated function $f=|x-4|$\nand see how we can use the basis matrix `U` to approximate it. \n"}
{"snippet": "@ray.remote\ndef f(i):\n    np.random.seed(5 + i)\n    x = np.random.uniform(0, 4)\n    time.sleep(x)\n    return i, time.time()\n", "intent": "Define a remote function that takes a variable amount of time to run.\n"}
{"snippet": "b = BankUser(\"Charles Liu\")\nprint(b.deposit(AccountType.SAVINGS, 100))\nprint(b.addAccount(AccountType.SAVINGS))\nprint(b.deposit(AccountType.SAVINGS, 50))\n", "intent": "Write some simple tests to make sure this is working. Think of edge scenarios a user might try to do.\n"}
{"snippet": "cars.groupby(['Year'])['Cylinders'].mean()\n", "intent": "Here are the average number of Cylinders, grouped by `Year`:\n"}
{"snippet": "def greet(name,msg):\n    print('hi',name,msg)\ngreet(name='Colt',msg='Good Evening')\ngreet(msg='Good Morning', name='Smith')\n", "intent": "     -The arguemts,which we are passing ,by assigning to the parameters names ,are known as 'Keyword arguments'\n"}
{"snippet": "b2 = Button()\nb2.style = b1.style\nb2\n", "intent": "Just like the `layout` attribute, widget styles can be assigned to other widgets.\n"}
{"snippet": "from __future__ import print_function\nfrom ipyleaflet import (\n    Map,\n    Marker,\n    TileLayer, ImageOverlay,\n    Polyline, Polygon, Rectangle, Circle, CircleMarker,\n    GeoJSON,\n    DrawControl\n)\n", "intent": "From the ipyleaflet [examples](https://github.com/ellisonbg/ipyleaflet/blob/98ea5237af61dcb61da9f751ce640446c5101493/examples/Primitives.ipynb)\n"}
{"snippet": "pprint_means(means)\n", "intent": "The clustering algorithm also returns the means of the clusters. How do we interpret these? \n"}
{"snippet": "def Dh( j, k, Zn, Yn, Ypn ):\n    if j+k>=len(Zn):\n        return 0\n    elif k == 0:\n        return Yn[j/2]\n    elif k == 1 and j%2 == 0:\n        return Ypn[j/2]\n    else:\n        return (Dh(j+1, k-1, Zn, Yn, Ypn)-Dh(j, k-1, Zn, Yn, Ypn))/(Zn[j+k]-Zn[j])\n", "intent": "Define a routine to calculate divided differences for Hermite polynomials.\n"}
{"snippet": "f(x::Float64) = x^2.0\nf(x::Int64) = x^3\n", "intent": "Julia supports a short function definition for one-liners\n"}
{"snippet": "w = 5\ntype(w)\nw = False\nw\n", "intent": "`So values are assignned to a variable which just hold that value and it can change`\n"}
{"snippet": "x = y = 10\nprint(x)\n", "intent": "**x = y = z = 10**\nz is assigned the value 10\ny is assigned the value of z\nx is assigned the value of y\n"}
{"snippet": "def prompt():\n    val = int(input(\"Enter number : \"))\n    return val\ndef largest():\n    return largest\ndef main():\n    val = largest()\n    print \"Largest value is : \", val\nmain()\n", "intent": "Assume user can enter max 5 numbers.\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "Replace the missing values in `Cylinders` by the group average (grouped by `Year`):\n"}
{"snippet": "sum_values = 0 \nfor i in range(1, 100):\n    sum_values += i\nprint(sum_values)\n", "intent": "So the time has come to write this __familier :p__ function. We wrote pseudo code for it, and we also proved it by induction. This time its Python :)\n"}
{"snippet": "tup = 1,2,3,\"string\"\nfor i in range(len(tup)):\n    print tup[i]\n", "intent": "We can also use a loop to access them via index:\n"}
{"snippet": "def locate_node(head, key):\ndef inorder_succ_util(node):\ndef inorder_succ(head, key):\n    node = locate_node(head, key)\n    in_succ = inorder_succ_util(node)\n    print in_succ\n", "intent": "`Find Inorder successor of a node in binary search Tree. First locate the node which contain that value and find the Inorder successor`\n---\n"}
{"snippet": "print(\"First three characters\", s[:3])\nprint(\"Last three characters\", s[-3:])\n", "intent": "An empty beginning and end of the range denotes the beginning/end of the string:\n"}
{"snippet": "del lst[1]\nprint(lst)\n", "intent": "Alternative to **remove** function but with using index value is **del**\n"}
{"snippet": "set2.symmetric_difference(set1)\n", "intent": "**symmetric_difference( )** function ouputs a function which contains elements that are in one of the sets.\n"}
{"snippet": "{ k for k in a1.keys() }\n", "intent": "**keys( )** function returns all the index or the keys to which contains the values that it was assigned to.\n"}
{"snippet": "def double(x):\n    return 2*x\ndef square(x):\n    return x*x\ndef f_of_g(f,g):\n    \"Compose two functions of a single variable\"\n    return lambda x: f(g(x))\ndoublesquare= f_of_g(double,square)\nprint(\"doublesquare is a\",type(doublesquare))\ndoublesquare(3)\n", "intent": "Lambda functions can also be used to compose functions\n"}
{"snippet": "from sqlalchemy import create_engine\nimport pandas as pd\ncnx = create_engine('postgresql://username:pswd@public_ip:port/database')\n", "intent": "*Introductory - Intermediate level SQL*\n------------\n"}
{"snippet": "raise NotImplementedError()\n", "intent": "By replacing missing values with group averages, the grouped averages remain unchanged:\n"}
{"snippet": "class_list = [1,2,3]\nif len(class_list) % 2 !=0:\n    raise ValueError('list should have an even number of elements')\n", "intent": "When things happen that are unexpected, have your code raise an exception\n"}
{"snippet": "dept = s.query(Department).filter(Department.name == 'IT').one()\n", "intent": "Similarly, we could query the departments table to get the department and the subsequent list of employees that are associated with it:\n"}
{"snippet": "for row in c.execute('select team_long_name from (select away_team_api_id, sum(away_team_goal) c from Match \\\ngroup by away_team_api_id order by c desc limit 1) a join Team on a.away_team_api_id = Team.team_api_id'):\n    print(row)\n", "intent": "**Challenge Number 2**\n"}
{"snippet": "X[pd.isnull(X).any(axis=1)]\n", "intent": "You can also easily display which rows have nans in them, if any:\n"}
{"snippet": "l = [1, 2, 3, 4]\nl.count(10)\nmax(l)\n", "intent": "    count_primes(100) --> 25\nBy convention, 0 and 1 are not prime.\n"}
{"snippet": "for play in shakespeare.fileids():\n    words = shakespeare.words(play)\n    print(play + \": \" + str(len(words)))\n", "intent": "We've printed a list of file names for each play in the Shakespeare corpus. Let's compare the lengths of each of these plays.\n"}
{"snippet": "a = 1\nwhile a < 10:\n    print(a)\n    a = a * 1.5\nprint(\"Once the while loop has completed, a has the value\", a)\n", "intent": "For example, in the following example:\n"}
{"snippet": "import numpy as np    \nx = np.array([1.2, 6.8, 3.7]) * u.pc / u.year\nx\n", "intent": "We can also generate a `Quantity` array:\n"}
{"snippet": "np.arcsin(1.0 * u.dimensionless_unscaled)\n", "intent": "`u.dimensionless_unscaled` creates a ``Quantity`` with a \"dimensionless unit\" and therefore gives a result *with* units:\n"}
{"snippet": "from math import log2\nfrom collections import Counter\ndef entropy(s):\n    counter = Counter(s)\n    entropy = 0\n    total = len(s)\n    for key, value in counter.items():\n        entropy -= (value/total) * log2( value/total)\n    return entropy\n", "intent": "$$\\operatorname{Entropy}(S) = - \\sum_{i=1...c} p_i log_2 p_i$$\n"}
{"snippet": "t_H = (1/H).to(u.Gyr / h100)\nt_H\n", "intent": "Now compute the Hubble time ($1 / H_0$) for h = h100 = 1:\n"}
{"snippet": "data = sc.parallelize(range(1, 1001))\nprint ('data first 10: ', data.take(10))\n", "intent": "Retorna uma lista com os primeiros n elementos do RDD.\nExemplo:\n"}
{"snippet": "testlist = random.sample(range(0,10),10)\ntestlist\n", "intent": "https://www.youtube.com/watch?v=AJSiJtwc8EE\n"}
{"snippet": "a = np.random.randint(0, 20, 15)\na\n", "intent": "**Using Boolean Mask**\n"}
{"snippet": "a = np.arange(4*3*2).reshape(4, 3, 2)\na.shape\n", "intent": "**Dimension Shuffling**\n"}
{"snippet": "def lm_simple(x,y):\n    b1 = (x-x.mean()).dot((Y - Y.mean())) / (x-x.mean()).dot((x - x.mean()))\n    b0 = Y.mean() - b1 * x.mean()\n    y_hat = b0 + b1 * x\n    RSS = (y-y_hat).dot(y-y_hat)\n    SE = RSS / (y_hat-y_hat.mean()).dot(y_hat-y_hat.mean()) * 1/(len(x)-2)\n    t_value = b1 / SE\n    p_value = scipy.stats.norm.pdf(t_value, loc=0, scale=1) \n    return (b1, p_value)\n", "intent": "2 Simple regression\n"}
{"snippet": "lst = list([10, 20, 30, 'remove the end character'])\n", "intent": "The main different between the two is that list allows mixed data type, while array only allows homogeneous data\n"}
{"snippet": "first20 = [products.next()[0] for x in range(20)]\nDraw.MolsToGridImage(first20,molsPerRow=4)\n", "intent": "pull out a block of products:\n"}
{"snippet": "sm = Chem.MolFromSmiles('O=C(N[C@H]1CCCc2ccccc21)c1n[nH]c2ccccc21')\nsm\n", "intent": "Here's another example of the problems that a lack of complete ring information can cause.\nStart with the sanitized molecule:\n"}
{"snippet": "def gain(targets, attr_values):\n    counter = Counter(attr_values)\n    gain = entropy(targets)\n    for key in counter:\n        targets_attr = []\n        for x in range(len(attr_values)):\n            if attr_values[x] == key:\n                 targets_attr.append(targets[x])\n        gain -= counter[key] / len(targets) * entropy(targets_attr)\n    return gain\n", "intent": "$$\\operatorname{Gain}(S,A) = \\operatorname{Entropy}(S) - \\sum_{v \\in \\operatorname{Values}(A)} \\frac{|S_v|}{|S|} \\operatorname{Entropy}(S_v)$$\n"}
{"snippet": "zims = [x for x in Chem.ForwardSDMolSupplier(gzip.open('data/zim.sdf.gz')) if x is not None]\n", "intent": "Get the set of compounds that have been test in man.\nThis dataset is available from ZINC: http://zinc.docking.org/subsets/zim\n"}
{"snippet": "def ran_bool(num,low,high):\n    return num in list(range(low, high+1))\n", "intent": "If you only wanted to return a boolean:\n"}
{"snippet": "st = 'Print every word in this sentence that has an even number of letters'\n", "intent": "**Go through the string below and if the length of a word is even print \"even!\"**\n"}
{"snippet": "def mul3(n):\n    M = arange(1, n + 1).reshape((-1, 1))\n    N = arange(1, n + 1).reshape((1, -1))\n    return M * N\n", "intent": "This version is an optimized version of the previous example, using broadcasting instead of unnecessary array tiling.\n"}
{"snippet": "r = v.map(f, range(10))\n", "intent": "And we compare with the time taken by the parallel version.\n"}
{"snippet": "_make_extract(step=step, stop=stop)\n", "intent": "Make the subset data (**this will take a while**).\n"}
{"snippet": "print(b.ndim) \nprint(b.shape) \nprint(b.size) \n", "intent": "Arrays have several properties that are important:\n"}
{"snippet": "a = np.array([0, 1, 2, 3, 4])\nmask = a > 2\nprint(mask)\n", "intent": "Boolean operations are elementwise operations which create *masks*. These can be used for complex indexing.\n"}
{"snippet": "v = Vector(1, 2, 3)\n", "intent": "Now we can use the class defintion to create some vectors. Here we create a vector with the three specified coordinates.\n"}
{"snippet": "import json\nwith open('party.json', 'r') as party_file:\n    party = json.load(party_file)\nassert round(gain(party['targets'], [r[2] for r in party['data']]), 3) == 0.252\ntree_party = id3(party, list(range(len(party['attributes']))))\nprint(tree_party)\n", "intent": "This code runs the ID3 algorithm on the party data set which you already know from assignment 2.\n"}
{"snippet": "def lesser_of_two_evens(a,b):\n    if a%2 == 0 and b%2==0:\n        return min([a,b])\n    else:\n        return max([a,b])\n", "intent": "    lesser_of_two_evens(2,4) --> 2\n    lesser_of_two_evens(2,5) --> 5\n"}
{"snippet": "run_test(ECCTest('test_rmul'))\n", "intent": "See whether your test works by running the cell below (remember to run the cell above too!).\n"}
{"snippet": "sym.solveset(x**2 + 25, x)\n", "intent": "Solving the equation $$x^2 = -25$$\n"}
{"snippet": "x = symbols('x')\nf = Function('f')(x**3 + 2*x -1 )\nf.diff()\n", "intent": "Computing the first and second derivative a functoion $f(x) = x^3 + 2x -1$\n"}
{"snippet": "a = range(100)\ndata = sc.parallelize(a)\n", "intent": "Another way of creating an RDD is to parallelize an already existing list.  \n"}
{"snippet": "attack_raw_data = raw_data.subtract(normal_raw_data)\n", "intent": "We can obtain attack interactions by subtracting normal ones from the original unfiltered RDD as follows.  \n"}
{"snippet": "key_value_duration = csv_data.map(lambda x: (x[41], float(x[0]))) \ndurations_by_key = key_value_duration.reduceByKey(lambda x, y: x + y)\ndurations_by_key.collect()\n", "intent": "For example, we have a `reduceByKey` transformation that we can use as follows to calculate the total duration of each network interaction type.  \n"}
{"snippet": "exp.whitened.lm = lm(wExp ~ wStock)\nplot(resid(exp.whitened.lm), type='l', lwd=2, col='red')\nsummary(exp.whitened.lm)\n", "intent": "After whitening, we refit the model.\n"}
{"snippet": "plot(races.lm, which=5)\n", "intent": "`R` will put the IDs of cases that seem to be influential in these (and other plots). Not surprisingly, we see our usual three suspects.\n"}
{"snippet": "import json\nwith open('iris.json', 'r') as iris_file:\n    iris = json.load(iris_file)\nassert round(gain(iris['targets'], [r[2] for r in iris['data']]), 3) == 1.446\ntree_iris = id3(iris, list(range(len(iris['attributes']))))\nprint(tree_iris)\n", "intent": "This code runs the ID3 algorithm on the famous iris flowser data set, which you will hear more about in assignment 4 below.\n"}
{"snippet": "r = rstandard(model_EM33)\nmf = model.frame(model_EM33)\nplot(mf$X, r, type='n')\nfor (i in 1:3) {\n    for (j in 0:1) {\n        subset <- as.logical((mf$E == i) * (mf$M == j)) \n        points(mf$X[subset], r[subset], pch=symbols[j+1], bg=colors[i], cex=2)\n    }\n}\n", "intent": "Let's replot the residuals\n"}
{"snippet": "r = resid(salary.lm)\nk = 1\nplot(X, r, xlim=c(1,6), type='n', xlab='Group', ylab='Residuals')\nfor (i in 1:3) {\n    for (j in 0:1) {\n        subset <- as.logical((E == i) * (M == j))\n        points(rep(k, length(r[subset])), r[subset], pch=symbols[j+1], bg=colors[i], cex=2)\n        k = k+1\n    }\n}\n", "intent": "We will now plot the residuals within the groups separately\n"}
{"snippet": "anova(minority.lm1, minority.lm4)\n", "intent": "Is there any effect of ETHN on slope or intercept?\n"}
{"snippet": "lwr.42 = center + sqrt(MSTR / 48) * qt(0.975,42)\nupr.42 = center - sqrt(MSTR / 48) * qt(0.975,42)\ndata.frame(center,lwr.42,upr.42)\n", "intent": "If we adjust our previous interval for the intercept to use the (incorrect) 42 degrees of freedom we get the same result as `lme`.\n"}
{"snippet": "boxplot(Decrease ~ Treatment, col='orange', pch=23, bg='red')\n", "intent": "Boxplots are common graphical summaries of a sample, showing the median and \ninter-quartile ranges.\n"}
{"snippet": "plot(X[1:20], Y[1:20], pch=21, bg='red', xlim=c(min(X),max(X)), ylim=c(min(Y),max(Y)))\npoints(X[21:40], Y[21:40], pch=21, bg='blue')        \nlines(X[21:40], Y[21:40], lwd=2, lty=3, col='orange')   \n", "intent": "You can add points and lines to existing plots.\n"}
{"snippet": "education.noAK.weight.lm <- lm(Y ~ X1 + X2 + X3, weights=weights, subset=keep.subset, data=education.table)\nsummary(education.noAK.weight.lm)\npar(mfrow=c(2,2))\nplot(education.noAK.weight.lm)\n", "intent": "We now refit, the model, using a *weights* argument to *lm*\n"}
{"snippet": "t.test(rainfall ~ shadow, var.equal=TRUE, conf.level=0.90)\n", "intent": "I will use a pooled $t$-test but students can also use the unpooled. If using pooled they should indicate it in their assumptions.\n"}
{"snippet": "def gensquares(n):\n    for i in range(0, n):\n        yield i ** 2\n", "intent": "Problem 1\nCreate a generator that generates the squares of numbers up to some number N.\n"}
{"snippet": "from tkinter import Tk, Label\nhello_app = tk.Tk()\nhello_app.title(\"tk \ngreeting=Label(hello_app, text = 'Hello, World!')\ngreeting.pack()\n", "intent": "Put your hello program in the following code cell.\n"}
{"snippet": "def cfunc(int n):\n    cdef int a = 0\n    for i in range(n):\n        a += i\n    return a\n", "intent": "Cython code can now be compiled using the `%%cython` cell magic command:\n"}
{"snippet": "container = widgets.HBox(children=buttons)\ndisplay(container)\n", "intent": "To make widgets display horizontally, they can be children of an HBox widget.\n"}
{"snippet": "first_name = 'eric'\nprint(first_name)\nprint(first_name.title())\n", "intent": "Changing case\n---\nYou can easily change the case of a string, to present it the way you want it to look.\n"}
{"snippet": "import os\nprint(\"I like climbing mountains.\")\nos.system('clear')\n", "intent": "Now we will modify the program so that the screen is cleared right after the message is displayed:\n"}
{"snippet": "print \"% 9f\" % 3.121312312312\nprint \"% 9f\" % -3.121312312312\n", "intent": "For proper alignment, a space can be left blank in the field width so that when a negative number is used, proper alignment is maintained.\n"}
{"snippet": "str.find(sub[, start[, end]])\nReturn the lowest index in the string where substring sub is found within the slice s[start:end].\nOptional arguments start and end are interpreted as in slice notation. Return -1 if sub is not found.\nNote The find() method should be used only if you need to know the position of sub. To check if sub is a\nsubstring or not, use the __in__ operator:\n'Py' in 'Python'\n", "intent": "In addition to pull out a subsequence, we can find if a subsequence exists in a sequence.\n"}
{"snippet": "print String0.endswith('y')\n", "intent": "**endswith( )** function is used to check if the given string ends with the particular char which is given as input.\n"}
{"snippet": "d0['One'] = 1\nd0['OneTwo'] = 12 \nprint d0\n", "intent": "Dictionary works somewhat like a list but with an added capability of assigning it's own index style.\n"}
{"snippet": "del lst[1]\nprint lst\n", "intent": "Alternative to **remove** function but with using index value is **del**\n"}
{"snippet": "v1 = Vector(3, 5, 0)\nv1.norm()\n", "intent": "(Optional) If you want to do your own tests use the code cell below to create and test objects.  You can add additional cells here if you want.\n"}
{"snippet": "dogs = ['border collie', 'australian cattle dog', 'labrador retriever']\nprint(dogs.index('poodle'))\n", "intent": "This method returns a ValueError if the requested item is not in the list.\n"}
{"snippet": "animals = ['dog', 'cat', 'bear']\nfor animal in animals:\n    print(\"I have a \" + animal + \".\")\n", "intent": "This was especially useful when we had a series of similar statements to make:\n"}
{"snippet": "converted_roi_volumes = [round(x * 1000) for x in roi_volumes]\nconverted_roi_volumes\n", "intent": "{: .output}\nThis is a little messy because of the unnecessary precision after the\ndecimal point. We'll use the built-in function `round` to fix that:\n"}
{"snippet": "names = ['guido', 'tim', 'jesse']\nnew_name = raw_input(\"Please tell me someone I should know: \")\nnames.append(new_name)\nprint(names)\n", "intent": "Accepting input in Python 2.7\n---\nIn Python 3, you always use `input()`. In Python 2.7, you need to use `raw_input()`:\n"}
{"snippet": "expression_level = 125\nif expression_level > 100:\n    print(\"gene is highly expressed\")\n", "intent": "The simplest kind of conditional statement is an if statement. Hopefully the syntax is fairly simple to understand:\n"}
{"snippet": "import csv\nwith open('data.csv') as csvfile:\n    raw_data = csv.reader(csvfile)\n    for row in raw_data:\n        if len(row[1]) >= 90 or len(row[1]) <= 110:\n            print(row[2])\n", "intent": "Print out the gene names for all genes between 90 and 110 bases long.\n"}
{"snippet": "[27*z for i in range(50) if i==27 for z in range(1,11)]\n", "intent": "Let me add one more loop to make you understand better, \n"}
{"snippet": "for f in csvs:\n    print(get_file_info(f))\n", "intent": "{: .output}\nNow we can look through the csv files in metasearch to see if they contain\nuseful data for our analysis:\n"}
{"snippet": "filter(lambda x:x%4==0,list1)\n", "intent": "We can conclude that, whatever is returned true in **map( )** function that particular element is returned when **filter( )** function is used.\n"}
{"snippet": "def make_system(filename):\n    file= open(filename, \"r\")\n    list=[]\n    for line in file:\n        if line[0]==\"\n            pass\n        else:\n            constructor=line.split()\n            list+=[Body(name=constructor[0], mass=float(constructor[1]), position=Vector(float(constructor[2]),float(constructor[3]),float(constructor[4])), velocity=Vector(float(constructor[5]),float(constructor[6]),float(constructor[7])))]\n    return list\n", "intent": "Put your function definition in the following code cell.\n"}
{"snippet": "print(counts['TGA'])\n", "intent": "We still have a lot of repetitive counts of zero, but looking up the count for a particular trinucleotide is now very straightforward:\n"}
{"snippet": "from Bio.Alphabet import generic_nucleotide\nnuc_seq = Seq(\"GATCGATGC\", generic_nucleotide)\ndna_seq = Seq(\"ACGT\", IUPAC.unambiguous_dna)\nnuc_seq\n", "intent": "Here is an example of adding a generic nucleotide sequence to an unambiguous IUPAC DNA sequence, resulting in an ambiguous nucleotide sequence:\n"}
{"snippet": "print(standard_table)\n", "intent": "You can compare the actual tables visually by printing them:\n"}
{"snippet": "x = [117, -267.14]\nweight = kNN.calculate(model, x)\nprint(\"class OP: weight =\", weight[0], \"class NOP: weight =\", weight[1])\n", "intent": "which means that all three neighbors of `x1`, `x2` are in the NOP class.\nAs another example, for <span>*yesK*</span>, <span>*yesL*</span> we find\n"}
{"snippet": "shakeWordsRDD = shakespeareWordsRDD.filter(lambda x: x != '')\nshakeWordCount = shakeWordsRDD.count()\nprint shakeWordCount\n", "intent": "The next step is to filter out the empty elements.  Remove all entries where the word is `''`.\n"}
{"snippet": "def plot_word_frequency(words, top_n=10):\n    word_freq = FreqDist(words)\n    labels = [element[0] for element in word_freq.most_common(top_n)]\n    counts = [element[1] for element in word_freq.most_common(top_n)]\n    plot = sns.barplot(labels, counts)\n    return plot\n", "intent": "Define a function to plot word frequencies\n"}
{"snippet": "print(math.factorial(10))\nprint(math.sqrt(10))\nprint(math.sin(math.pi))\nprint(math.cos(10))\nprint(math.exp(10))\nprint(math.log(10))\nprint(math.log10(10))\n", "intent": "Once you have math imported, you have access to a whole slew of math functions.\n"}
{"snippet": "x = 0\nfor i in range(1002):\n    x = x + 1\nprint(x)\n", "intent": "Write a loop that calculates the sum:\n$$ 1 + 2 + 3 + ... + 1001$$\n"}
