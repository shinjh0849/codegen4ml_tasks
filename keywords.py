ml_keywords = ['sklearn', 'tensorflow', 'keras', 'pytorch']
data_process = [
'train_test_split(', 'fetch_20newsgroups(', 'fetch_20newsgroups_vectorized(', 'fetch_california_housing(', 'fetch_covtype(', 'fetch_kddcup99(', 'fetch_lfw_pairs(', 'fetch_lfw_people(', 'fetch_olivetti_faces(', 'fetch_openml(', 'fetch_rcv1(', 'fetch_species_distributions(', 'get_data_home(', 'load_boston(', 'load_breast_cancer(', 'load_diabetes(', 'load_digits(', 'load_wine(', 'load_svmlight_files(', 'load_svmlight_file(', 'load_sample_images(', 'load_sample_image(', 'load_linnerud(', 'load_iris(', 'make_biclusters(', 'make_blobs(', 'make_checkerboard(', 'make_circles(', 'make_classification(', 'make_friedman1(', 'make_friedman2(', 'make_friedman3(', 'make_gaussian_quantiles(', 'make_hastie_10_2(', 'make_low_rank_matrix(', 'make_moons(', 'make_multilabel_classification(', 'make_regression(', 'make_s_curve(', 'make_sparse_coded_signal(', 'make_sparse_spd_matrix(', 'make_sparse_uncorrelated(', 'make_spd_matrix(', 'make_swiss_roll(', 'DictionaryLearning(', 'FactorAnalysis(', 'FastICA(', 'IncrementalPCA(', 'KernelPCA(', 'LatentDirichletAllocation(', 'MiniBatchDictionaryLearning(', 'MiniBatchSparsePCA(', 'NMF(', 'PCA(', 'SparsePCA(', 'SparseCoder(', 'TruncatedSVD(', 'dict_learning(', 'dict_learning_online(', 'non_negative_factorization(', 'sparse_encode(', 'CCA(', 'PLSCanonical(', 'PLSRegression(', 'PLSSVD(', 'DictVectorizer(', 'FeatureHasher(', 'extract_patches_2d(', 'grid_to_graph(', 'img_to_graph(', 'reconstruct_from_patches_2d(', 'PatchExtractor(', 'CountVectorizer(', 'HashingVectorizer(', 'TfidfTransformer(', 'TfidfVectorizer(', 'GenericUnivariateSelect(', 'SelectPercentile(', 'SelectKBest(', 'SelectFpr(', 'SelectFdr(', 'SelectFromModel(', 'SelectFwe(', 'SequentialFeatureSelector(', 'RFE(', 'RFECV(', 'VarianceThreshold(', 'AdditiveChi2Sampler(', 'Nystroem(', 'PolynomialCountSketch(', 'RBFSampler(', 'SkewedChi2Sampler(', 'Imputer(', 'MissingIndicator(', 'Transformer(', 'Scaler(', '_transform(', '_scale(', 'Binarizer(', 'Discretizer(', 'Centerer(', 'LabelEncoder(', 'OneHotEncoder(', 'OrdinalEncoder(', 'Normalizer(',  'FeatureUnion(', 'read(','read_table(', 'read_csv(', 'to_csv(', 'read_fwf(', 'read_clipboard(', 'read_json(', 'read_html(', 'read_xml(', 'fillna(', 'DataFrame(', 'pivot_table(','loadarff(', 'imread(', 'imsave(', 'imresize(',
'image_dataset_from_directory(', 'img_to_array(', 'timeseries_dataset_from_array(', 'pad_sequences(', 'text_dataset_from_directory(',
'load_data(']
model_building = [
'conv2d(', '.fit(', 'dropout(', '.relu(', 'keras.Input(', 'Dense(', 'Model(', 'layers.', '.tanh(', '.optimizers.', '.apply_gradients(', 'deserialize(', 'elu(', 'exponential(', 'hard_sigmoid', 'serialize(', 'Flatten(', 'BatchNormalization(', 'MaxPooling2D(', '_pool(', '.sigmoid(', '.softmax(', 'theano.shared(', 'theano.function(', 'theano.tensor', 'T.matrix(', 'T.vector(', 'Model(Module)', 'Model(nn.Module)', 'Sequential(', 'ModuleList(', 'ModuleDict(', 'ParameterList(', 'ParameterDict(', '.set_weights(', 'Activation(', 'Conv1d(', 'Conv2d(', 'Conv3d(', 'ConvTranspose1d(', 'ConvTranspose2d(', 'ConvTranspose3d(', 'LazyConv1d(', 'LazyConv2d(', 'LazyConv3d(', 'LazyConvTranspose1d(', 'LazyConvTranspose2d(', 'LazyConvTranspose3d(', 'nn.Unfold(', 'nn.Fold(', 'MaxPool1d(', 'MaxPool2d(', 'MaxPool3d(', 'MaxUnpool1d(', 'MaxUnpool2d(', 'MaxUnpool3d(', 'AvgPool1d(', 'AvgPool2d(', 'AvgPool3d(', 'FractionalMaxPool2d(', 'FractionalMaxPool3d(', 'LPPool1d(', 'LPPool2d(', 'AdaptiveMaxPool1d(', 'AdaptiveMaxPool2d(', 'AdaptiveMaxPool3d(', 'AdaptiveMaxPool1d(', 'AdaptiveMaxPool2d(', 'AdaptiveMaxPool3d(',  'AdaptiveAvgPool1d(', 'AdaptiveAvgPool2d(', 'AdaptiveAvgPool3d(', 'ReflectionPad1d(', 'ReflectionPad2d(', 'ReflectionPad3d(', 'ReplicationPad1d(', 'ReplicationPad2d(', 'ReplicationPad3d(', 'ZeroPad2d(', 'ConstantPad1d(', 'ConstantPad2d(', 'ConstantPad3d(', 'ELU(', 'Hardshrink(', 'Hardsigmoid(', 'Hardtanh(', 'Hardswish(', 'LeakyReLU(', 'LogSigmoid(', 'MultiheadAttention(', 'PReLU(', 'ReLU(', 'ReLU6(', 'RReLU(', 'SELU(', 'CELU(', 'GELU(', 'Sigmoid(', 'SiLU(', 'Mish(', 'Softplus(', 'Softshrink', 'Softsign', 'Tanh(', 'Tanhshrink(' , 'Threshold(' , 'GLU(', 'Softmin(', 'Softmax(', 'Softmax2d(', 'LogSoftmax(', 'AdaptiveLogSoftmaxWithLoss(', 'BatchNorm1d(', 'BatchNorm2d(', 'BatchNorm3d(', 'LazyBatchNorm1d(', 'LazyBatchNorm2d(', 'LazyBatchNorm3d(', 'GroupNorm(', 'SyncBatchNorm', 'InstanceNorm1d(', 'InstanceNorm2d(', 'InstanceNorm3d(', 'azyInstanceNorm1d(', 'azyInstanceNorm2d(', 'azyInstanceNorm3d(', 'LayerNorm(', 'LocalResponseNorm(', 'RNNBase(', 'RNN(', 'LSTM(', 'GRU(', 'RNNCell(', 'LSTMCell(', 'GRUCell(', 'Transformer(', 'TransformerEncoder(', 'TransformerDecoder(', 'TransformerEncoderLayer(', 'TransformerDecoderLayer(', 'Identity(', 'Linear(', 'Bilinear(', 'LazyLinear(', 'Dropout(', 'Dropout2d(', 'Dropout3d(', 'AlphaDropout(', 'FeatureAlphaDropout', 'Embedding(', 'EmbeddingBag(', '.fit_transform(', 'AffinityPropagation(', 'AgglomerativeClustering(', 'Birch()', 'DBSCAN(', 'FeatureAgglomeration(', 'Kmeans(', 'MiniBatchKMeans(', 'MeanShift(', 'OPTICS(', 'SpectralClustering(', 'SpectralBiclustering(', 'SpectralCoclustering(', 'AdaBoostClassifier(', 'AdaBoostRegressor(', 'BaggingClassifier(', 'BaggingRegressor(', 'ExtraTreesClassifier(', 'ExtraTreesRegressor(', 'GradientBoostingClassifier(', 'GradientBoostingRegressor(', 'IsolationForest(', 'RandomForestClassifier(', 'RandomForestRegressor(', 'RandomTreesEmbedding(', 'StackingClassifier(', 'StackingRegressor(', 'VotingClassifier(', 'VotingRegressor(', 'HistGradientBoostingRegressor(', 'HistGradientBoostingClassifier(', 'GaussianProcessClassifier(', 'GaussianProcessRegressor(', 'LogisticRegression(', 'LogisticRegressionCV(', 'PassiveAggressiveClassifier(', 'Perceptron(', 'RidgeClassifier(', 'RidgeClassifierCV(', 'SGDClassifier(', 'SGDOneClassSVM(', 'LinearRegression(', 'Ridge(', 'RidgeCV(', 'SGDRegressor(', 'BayesianGaussianMixture(', 'GaussianMixture(', 'OneVsRestClassifier(', 'OneVsOneClassifier(', 'OutputCodeClassifier(', 'BernoulliNB(', 'CategoricalNB(', 'ComplementNB(', 'GaussianNB(', 'MultinomialNB(', 'BallTree(', 'KDTree(', 'KernelDensity(', 'KNeighborsClassifier(', 'KNeighborsRegressor(', 'KNeighborsTransformer(', 'LocalOutlierFactor(', 'RadiusNeighborsClassifier(', 'RadiusNeighborsRegressor(', 'RadiusNeighborsTransformer(', 'NearestCentroid(', 'NearestNeighbors(', 'NeighborhoodComponentAnalysis(', 'BernoulliRBM(', 'MLPClassifier(', 'MLPRegressor(', 'Pipeline(', 'LabelPropagation(', 'LabelSpreading(', 'SelfTrainingClassifier(', 'LinearSVC(', 'LinearSVR(', 'NuSVC(', 'NuSVR(', 'OneClassSVM(', 'SVC(', 'SVR(', 'DecisionTreeClassifier(', 'DecisionTreeRegressor(', 'ExtraTreeClassifier(', 'ExtraTreeRegressor(', '.Session(', 'Graph(', 'Tensor(', 'SparseTensor(', 'TensorArray(', 'Variable(', 'tf.GradientTape(']
evaluation_visual = [
'_score(', '_loss(', '_report(', '_error(',  'predict_proba(', 'predict_log_proba(', 
'evaluate(', 'predict(']

exclusion_keywords=['python3 -m', 'python -m', 'pyplot', 'plt', 'pip install', 'pip3 install', 'cat ', 'cd ', 'bash ', 'export ', '// ']

sklearn_keywords=['train_test_split(', 'fetch_20newsgroups(', 'fetch_20newsgroups_vectorized(', 'fetch_california_housing(', 'fetch_covtype(', 'fetch_kddcup99(', 'fetch_lfw_pairs(', 'fetch_lfw_people(', 'fetch_olivetti_faces(', 'fetch_openml(', 'fetch_rcv1(', 'fetch_species_distributions(', 'get_data_home(', 'load_boston(', 'load_breast_cancer(', 'load_diabetes(', 'load_digits(', 'load_wine(', 'load_svmlight_files(', 'load_svmlight_file(', 'load_sample_images(', 'load_sample_image(', 'load_linnerud(', 'load_iris(', 'make_biclusters(', 'make_blobs(', 'make_checkerboard(', 'make_circles(', 'make_classification(', 'make_friedman1(', 'make_friedman2(', 'make_friedman3(', 'make_gaussian_quantiles(', 'make_hastie_10_2(', 'make_low_rank_matrix(', 'make_moons(', 'make_multilabel_classification(', 'make_regression(', 'make_s_curve(', 'make_sparse_coded_signal(', 'make_sparse_spd_matrix(', 'make_sparse_uncorrelated(', 'make_spd_matrix(', 'make_swiss_roll(', 'DictionaryLearning(', 'FactorAnalysis(', 'FastICA(', 'IncrementalPCA(', 'KernelPCA(', 'LatentDirichletAllocation(', 'MiniBatchDictionaryLearning(', 'MiniBatchSparsePCA(', 'NMF(', 'PCA(', 'SparsePCA(', 'SparseCoder(', 'TruncatedSVD(', 'dict_learning(', 'dict_learning_online(', 'non_negative_factorization(', 'sparse_encode(', 'CCA(', 'PLSCanonical(', 'PLSRegression(', 'PLSSVD(', 'DictVectorizer(', 'FeatureHasher(', 'extract_patches_2d(', 'grid_to_graph(', 'img_to_graph(', 'reconstruct_from_patches_2d(', 'PatchExtractor(', 'CountVectorizer(', 'HashingVectorizer(', 'TfidfTransformer(', 'TfidfVectorizer(', 'GenericUnivariateSelect(', 'SelectPercentile(', 'SelectKBest(', 'SelectFpr(', 'SelectFdr(', 'SelectFromModel(', 'SelectFwe(', 'SequentialFeatureSelector(', 'RFE(', 'RFECV(', 'VarianceThreshold(', 'AdditiveChi2Sampler(', 'Nystroem(', 'PolynomialCountSketch(', 'RBFSampler(', 'SkewedChi2Sampler(', 'Imputer(', 'MissingIndicator(', 'Transformer(', 'Scaler(', '_transform(', '_scale(', 'Binarizer(', 'Discretizer(', 'Centerer(', 'LabelEncoder(', 'OneHotEncoder(', 'OrdinalEncoder(', 'Normalizer(',  'FeatureUnion(', '.fit_transform(', 'AffinityPropagation(', 'AgglomerativeClustering(', 'Birch()', 'DBSCAN(', 'FeatureAgglomeration(', 'Kmeans(', 'MiniBatchKMeans(', 'MeanShift(', 'OPTICS(', 'SpectralClustering(', 'SpectralBiclustering(', 'SpectralCoclustering(', 'AdaBoostClassifier(', 'AdaBoostRegressor(', 'BaggingClassifier(', 'BaggingRegressor(', 'ExtraTreesClassifier(', 'ExtraTreesRegressor(', 'GradientBoostingClassifier(', 'GradientBoostingRegressor(', 'IsolationForest(', 'RandomForestClassifier(', 'RandomForestRegressor(', 'RandomTreesEmbedding(', 'StackingClassifier(', 'StackingRegressor(', 'VotingClassifier(', 'VotingRegressor(', 'HistGradientBoostingRegressor(', 'HistGradientBoostingClassifier(', 'GaussianProcessClassifier(', 'GaussianProcessRegressor(', 'LogisticRegression(', 'LogisticRegressionCV(', 'PassiveAggressiveClassifier(', 'Perceptron(', 'RidgeClassifier(', 'RidgeClassifierCV(', 'SGDClassifier(', 'SGDOneClassSVM(', 'LinearRegression(', 'Ridge(', 'RidgeCV(', 'SGDRegressor(', 'BayesianGaussianMixture(', 'GaussianMixture(', 'OneVsRestClassifier(', 'OneVsOneClassifier(', 'OutputCodeClassifier(', 'BernoulliNB(', 'CategoricalNB(', 'ComplementNB(', 'GaussianNB(', 'MultinomialNB(', 'BallTree(', 'KDTree(', 'KernelDensity(', 'KNeighborsClassifier(', 'KNeighborsRegressor(', 'KNeighborsTransformer(', 'LocalOutlierFactor(', 'RadiusNeighborsClassifier(', 'RadiusNeighborsRegressor(', 'RadiusNeighborsTransformer(', 'NearestCentroid(', 'NearestNeighbors(', 'NeighborhoodComponentAnalysis(', 'BernoulliRBM(', 'MLPClassifier(', 'MLPRegressor(', 'Pipeline(', 'LabelPropagation(', 'LabelSpreading(', 'SelfTrainingClassifier(', 'LinearSVC(', 'LinearSVR(', 'NuSVC(', 'NuSVR(', 'OneClassSVM(', 'SVC(', 'SVR(', 'DecisionTreeClassifier(', 'DecisionTreeRegressor(', 'ExtraTreeClassifier(', 'ExtraTreeRegressor(', '_score(', '_loss(', '_report(', '_error(',  'predict_proba(', 'predict_log_proba(']
tensorflow_keywords=[
'read_table(', 'read_csv(', 'to_csv(', 'read_fwf(', 'read_clipboard(', 'read_json(', 'read_html(', 'read_xml(', 'fillna(', 'DataFrame(', 'pivot_table(',
'image_dataset_from_directory(', 'img_to_array(', 'timeseries_dataset_from_array(', 'pad_sequences(', 'text_dataset_from_directory(', '.Session(', 'Graph(', 'Tensor(', 'SparseTensor(', 'TensorArray(', 'Variable(', 'tf.GradientTape(', 'evaluate(', 'predict(']
keras_keywords=[
'read(',
'load_data(', 'conv2d(', '.fit(', 'dropout(', '.relu(', 'keras.Input(', 'Dense(', 'Model(', 'layers.', '.tanh(', '.optimizers.', '.apply_gradients(', 'deserialize(', 'elu(', 'exponential(', 'hard_sigmoid', 'serialize(', 'Flatten(', 'BatchNormalization(', 'MaxPooling2D(']
pytorch_keywords=[    
'loadarff(', 'imread(', 'imsave(', 'imresize(', 
'Model(Module)', 'Model(nn.Module)', 'Sequential(', 'ModuleList(', 'ModuleDict(', 'ParameterList(', 'ParameterDict(', '.set_weights(', 'Activation(', 'Conv1d(', 'Conv2d(', 'Conv3d(', 'ConvTranspose1d(', 'ConvTranspose2d(', 'ConvTranspose3d(', 'LazyConv1d(', 'LazyConv2d(', 'LazyConv3d(', 'LazyConvTranspose1d(', 'LazyConvTranspose2d(', 'LazyConvTranspose3d(', 'nn.Unfold(', 'nn.Fold(', 'MaxPool1d(', 'MaxPool2d(', 'MaxPool3d(', 'MaxUnpool1d(', 'MaxUnpool2d(', 'MaxUnpool3d(', 'AvgPool1d(', 'AvgPool2d(', 'AvgPool3d(', 'FractionalMaxPool2d(', 'FractionalMaxPool3d(', 'LPPool1d(', 'LPPool2d(', 'AdaptiveMaxPool1d(', 'AdaptiveMaxPool2d(', 'AdaptiveMaxPool3d(', 'AdaptiveMaxPool1d(', 'AdaptiveMaxPool2d(', 'AdaptiveMaxPool3d(',  'AdaptiveAvgPool1d(', 'AdaptiveAvgPool2d(', 'AdaptiveAvgPool3d(', 'ReflectionPad1d(', 'ReflectionPad2d(', 'ReflectionPad3d(', 'ReplicationPad1d(', 'ReplicationPad2d(', 'ReplicationPad3d(', 'ZeroPad2d(', 'ConstantPad1d(', 'ConstantPad2d(', 'ConstantPad3d(', 'ELU(', 'Hardshrink(', 'Hardsigmoid(', 'Hardtanh(', 'Hardswish(', 'LeakyReLU(', 'LogSigmoid(', 'MultiheadAttention(', 'PReLU(', 'ReLU(', 'ReLU6(', 'RReLU(', 'SELU(', 'CELU(', 'GELU(', 'Sigmoid(', 'SiLU(', 'Mish(', 'Softplus(', 'Softshrink', 'Softsign', 'Tanh(', 'Tanhshrink(' , 'Threshold(' , 'GLU(', 'Softmin(', 'Softmax(', 'Softmax2d(', 'LogSoftmax(', 'AdaptiveLogSoftmaxWithLoss(', 'BatchNorm1d(', 'BatchNorm2d(', 'BatchNorm3d(', 'LazyBatchNorm1d(', 'LazyBatchNorm2d(', 'LazyBatchNorm3d(', 'GroupNorm(', 'SyncBatchNorm', 'InstanceNorm1d(', 'InstanceNorm2d(', 'InstanceNorm3d(', 'azyInstanceNorm1d(', 'azyInstanceNorm2d(', 'azyInstanceNorm3d(', 'LayerNorm(', 'LocalResponseNorm(', 'RNNBase(', 'RNN(', 'LSTM(', 'GRU(', 'RNNCell(', 'LSTMCell(', 'GRUCell(', 'Transformer(', 'TransformerEncoder(', 'TransformerDecoder(', 'TransformerEncoderLayer(', 'TransformerDecoderLayer(', 'Identity(', 'Linear(', 'Bilinear(', 'LazyLinear(', 'Dropout(', 'Dropout2d(', 'Dropout3d(', 'AlphaDropout(', 'FeatureAlphaDropout', 'Embedding(', 'EmbeddingBag(']